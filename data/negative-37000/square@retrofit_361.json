{
  "id" : 361,
  "expression" : "log",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 324,
      "startColumnNumber" : 10,
      "endLineNumber" : 324,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 324,
        "startColumnNumber" : 10,
        "endLineNumber" : 324,
        "endColumnNumber" : 75
      },
      "nodeContext" : "log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 324,
        "startColumnNumber" : 10,
        "endLineNumber" : 324,
        "endColumnNumber" : 76
      },
      "nodeContext" : "log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 323,
        "startColumnNumber" : 28,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 316,
        "startColumnNumber" : 10,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 324,
        "startColumnNumber" : 10,
        "endLineNumber" : 324,
        "endColumnNumber" : 76
      },
      "nodeContext" : "log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 326,
      "startColumnNumber" : 12,
      "endLineNumber" : 326,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 37
      },
      "nodeContext" : "log.log(returnValue + \"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 38
      },
      "nodeContext" : "log.log(returnValue + \"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 325,
        "startColumnNumber" : 61,
        "endLineNumber" : 328,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  log.log(returnValue + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 325,
        "startColumnNumber" : 10,
        "endLineNumber" : 328,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  log.log(returnValue + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 323,
        "startColumnNumber" : 28,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 316,
        "startColumnNumber" : 10,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 38
      },
      "nodeContext" : "log.log(returnValue + \"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 327,
      "startColumnNumber" : 12,
      "endLineNumber" : 327,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 36
      },
      "nodeContext" : "log.log(\"<--- END MOCK\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 37
      },
      "nodeContext" : "log.log(\"<--- END MOCK\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 325,
        "startColumnNumber" : 61,
        "endLineNumber" : 328,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  log.log(returnValue + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 325,
        "startColumnNumber" : 10,
        "endLineNumber" : 328,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  log.log(returnValue + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 323,
        "startColumnNumber" : 28,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 329,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(returnValue + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 316,
        "startColumnNumber" : 10,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 37
      },
      "nodeContext" : "log.log(\"<--- END MOCK\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 345,
      "startColumnNumber" : 10,
      "endLineNumber" : 345,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 88
      },
      "nodeContext" : "log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 89
      },
      "nodeContext" : "log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 344,
        "startColumnNumber" : 28,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 332,
        "startColumnNumber" : 44,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 89
      },
      "nodeContext" : "log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 347,
      "startColumnNumber" : 12,
      "endLineNumber" : 347,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 45
      },
      "nodeContext" : "log.log(httpEx.responseBody + \"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 46
      },
      "nodeContext" : "log.log(httpEx.responseBody + \"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 349,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  log.log(httpEx.responseBody + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 346,
        "startColumnNumber" : 10,
        "endLineNumber" : 349,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  log.log(httpEx.responseBody + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 344,
        "startColumnNumber" : 28,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 332,
        "startColumnNumber" : 44,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 46
      },
      "nodeContext" : "log.log(httpEx.responseBody + \"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 348,
      "startColumnNumber" : 12,
      "endLineNumber" : 348,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 348,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 36
      },
      "nodeContext" : "log.log(\"<--- END MOCK\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 348,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 37
      },
      "nodeContext" : "log.log(\"<--- END MOCK\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 349,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  log.log(httpEx.responseBody + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 346,
        "startColumnNumber" : 10,
        "endLineNumber" : 349,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n  log.log(httpEx.responseBody + \"\");\n  log.log(\"<--- END MOCK\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 344,
        "startColumnNumber" : 28,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logLevel.log()) {\n  log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    log.log(httpEx.responseBody + \"\");\n    log.log(\"<--- END MOCK\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 332,
        "startColumnNumber" : 44,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 316,
        "startColumnNumber" : 6,
        "endLineNumber" : 354,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Object returnValue=methodInfo.method.invoke(mockService,args);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(returnValue + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  return returnValue;\n}\n catch (InvocationTargetException e) {\n  Throwable innerEx=e.getCause();\n  if (!(innerEx instanceof MockHttpException)) {\n    throw innerEx;\n  }\n  MockHttpException httpEx=(MockHttpException)innerEx;\n  Response response=httpEx.toResponse(restAdapter.converter);\n  long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n  sleep(callDelay - tookMs);\n  if (logLevel.log()) {\n    log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      log.log(httpEx.responseBody + \"\");\n      log.log(\"<--- END MOCK\");\n    }\n  }\n  throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 348,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 37
      },
      "nodeContext" : "log.log(\"<--- END MOCK\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.RestAdapter.Log"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 324,
    "startColumnNumber" : 10,
    "endLineNumber" : 324,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 326,
    "startColumnNumber" : 12,
    "endLineNumber" : 326,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 327,
    "startColumnNumber" : 12,
    "endLineNumber" : 327,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 345,
    "startColumnNumber" : 10,
    "endLineNumber" : 345,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 347,
    "startColumnNumber" : 12,
    "endLineNumber" : 347,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 348,
    "startColumnNumber" : 12,
    "endLineNumber" : 348,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}