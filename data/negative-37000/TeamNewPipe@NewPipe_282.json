{
  "id" : 282,
  "expression" : "process(null)",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "process(null)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 197,
      "startColumnNumber" : 30,
      "endLineNumber" : 197,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 197,
        "startColumnNumber" : 21,
        "endLineNumber" : 197,
        "endColumnNumber" : 55
      },
      "nodeContext" : "test() ? process(null) : OK_RESULT",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 55
      },
      "nodeContext" : "result=test() ? process(null) : OK_RESULT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 56
      },
      "nodeContext" : "result=test() ? process(null) : OK_RESULT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 196,
        "startColumnNumber" : 15,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result=test() ? process(null) : OK_RESULT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3067,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worksOnSameFile) {\n  ChunkFileInputStream[] sources=new ChunkFileInputStream[mission.urls.length];\n  try {\n    for (int i=0, j=1; i < sources.length; i++, j++) {\n      SharpStream source=mission.storage.getStream();\n      long end=j < sources.length ? mission.offsets[j] : source.length();\n      sources[i]=new ChunkFileInputStream(source,mission.offsets[i],end,readProgress);\n    }\n    if (test(sources)) {\n      for (      SharpStream source : sources)       source.rewind();\n      OffsetChecker checker=() -> {\n        for (        ChunkFileInputStream source : sources) {\n          if (source.isClosed() || source.available() < 1) {\n            continue;\n          }\n          return source.getFilePointer() - 1;\n        }\n        return -1;\n      }\n;\n      out=new CircularFileWriter(mission.storage.getStream(),tempFile,checker);\n      out.onProgress=(      long position) -> mission.done=position;\n      out.onWriteError=(err) -> {\n        mission.psState=3;\n        mission.notifyError(ERROR_POSTPROCESSING_HOLD,err);\n        try {\nsynchronized (this) {\n            while (mission.psState == 3)             wait();\n          }\n        }\n catch (        InterruptedException e) {\n          Log.e(this.getClass().getSimpleName(),\"got InterruptedException\");\n        }\n        return mission.errCode == ERROR_NOTHING;\n      }\n;\n      result=process(out,sources);\n      if (result == OK_RESULT)       finalLength=out.finalizeFile();\n    }\n else {\n      result=OK_RESULT;\n    }\n  }\n  finally {\n    for (    SharpStream source : sources) {\n      if (source != null && !source.isClosed()) {\n        source.close();\n      }\n    }\n    if (out != null) {\n      out.close();\n    }\n    if (tempFile != null) {\n      tempFile.delete();\n      tempFile=null;\n    }\n  }\n}\n else {\n  result=test() ? process(null) : OK_RESULT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3997,
        "startLineNumber" : 108,
        "startColumnNumber" : 63,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.mission=target;\n  CircularFileWriter out=null;\n  int result;\n  long finalLength=-1;\n  mission.done=0;\n  long length=mission.storage.length() - mission.offsets[0];\n  mission.length=length > mission.nearLength ? length : mission.nearLength;\n  final ProgressReport readProgress=(  long position) -> {\n    position-=mission.offsets[0];\n    if (position > mission.done)     mission.done=position;\n  }\n;\n  if (worksOnSameFile) {\n    ChunkFileInputStream[] sources=new ChunkFileInputStream[mission.urls.length];\n    try {\n      for (int i=0, j=1; i < sources.length; i++, j++) {\n        SharpStream source=mission.storage.getStream();\n        long end=j < sources.length ? mission.offsets[j] : source.length();\n        sources[i]=new ChunkFileInputStream(source,mission.offsets[i],end,readProgress);\n      }\n      if (test(sources)) {\n        for (        SharpStream source : sources)         source.rewind();\n        OffsetChecker checker=() -> {\n          for (          ChunkFileInputStream source : sources) {\n            if (source.isClosed() || source.available() < 1) {\n              continue;\n            }\n            return source.getFilePointer() - 1;\n          }\n          return -1;\n        }\n;\n        out=new CircularFileWriter(mission.storage.getStream(),tempFile,checker);\n        out.onProgress=(        long position) -> mission.done=position;\n        out.onWriteError=(err) -> {\n          mission.psState=3;\n          mission.notifyError(ERROR_POSTPROCESSING_HOLD,err);\n          try {\nsynchronized (this) {\n              while (mission.psState == 3)               wait();\n            }\n          }\n catch (          InterruptedException e) {\n            Log.e(this.getClass().getSimpleName(),\"got InterruptedException\");\n          }\n          return mission.errCode == ERROR_NOTHING;\n        }\n;\n        result=process(out,sources);\n        if (result == OK_RESULT)         finalLength=out.finalizeFile();\n      }\n else {\n        result=OK_RESULT;\n      }\n    }\n  finally {\n      for (      SharpStream source : sources) {\n        if (source != null && !source.isClosed()) {\n          source.close();\n        }\n      }\n      if (out != null) {\n        out.close();\n      }\n      if (tempFile != null) {\n        tempFile.delete();\n        tempFile=null;\n      }\n    }\n  }\n else {\n    result=test() ? process(null) : OK_RESULT;\n  }\n  if (result == OK_RESULT) {\n    if (finalLength != -1) {\n      mission.length=finalLength;\n    }\n  }\n else {\n    mission.errCode=ERROR_POSTPROCESSING;\n    mission.errObject=new RuntimeException(\"post-processing algorithm returned \" + result);\n  }\n  if (result != OK_RESULT && worksOnSameFile)   mission.storage.delete();\n  this.mission=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4056,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void run(DownloadMission target) throws IOException {\n  this.mission=target;\n  CircularFileWriter out=null;\n  int result;\n  long finalLength=-1;\n  mission.done=0;\n  long length=mission.storage.length() - mission.offsets[0];\n  mission.length=length > mission.nearLength ? length : mission.nearLength;\n  final ProgressReport readProgress=(  long position) -> {\n    position-=mission.offsets[0];\n    if (position > mission.done)     mission.done=position;\n  }\n;\n  if (worksOnSameFile) {\n    ChunkFileInputStream[] sources=new ChunkFileInputStream[mission.urls.length];\n    try {\n      for (int i=0, j=1; i < sources.length; i++, j++) {\n        SharpStream source=mission.storage.getStream();\n        long end=j < sources.length ? mission.offsets[j] : source.length();\n        sources[i]=new ChunkFileInputStream(source,mission.offsets[i],end,readProgress);\n      }\n      if (test(sources)) {\n        for (        SharpStream source : sources)         source.rewind();\n        OffsetChecker checker=() -> {\n          for (          ChunkFileInputStream source : sources) {\n            if (source.isClosed() || source.available() < 1) {\n              continue;\n            }\n            return source.getFilePointer() - 1;\n          }\n          return -1;\n        }\n;\n        out=new CircularFileWriter(mission.storage.getStream(),tempFile,checker);\n        out.onProgress=(        long position) -> mission.done=position;\n        out.onWriteError=(err) -> {\n          mission.psState=3;\n          mission.notifyError(ERROR_POSTPROCESSING_HOLD,err);\n          try {\nsynchronized (this) {\n              while (mission.psState == 3)               wait();\n            }\n          }\n catch (          InterruptedException e) {\n            Log.e(this.getClass().getSimpleName(),\"got InterruptedException\");\n          }\n          return mission.errCode == ERROR_NOTHING;\n        }\n;\n        result=process(out,sources);\n        if (result == OK_RESULT)         finalLength=out.finalizeFile();\n      }\n else {\n        result=OK_RESULT;\n      }\n    }\n  finally {\n      for (      SharpStream source : sources) {\n        if (source != null && !source.isClosed()) {\n          source.close();\n        }\n      }\n      if (out != null) {\n        out.close();\n      }\n      if (tempFile != null) {\n        tempFile.delete();\n        tempFile=null;\n      }\n    }\n  }\n else {\n    result=test() ? process(null) : OK_RESULT;\n  }\n  if (result == OK_RESULT) {\n    if (finalLength != -1) {\n      mission.length=finalLength;\n    }\n  }\n else {\n    mission.errCode=ERROR_POSTPROCESSING;\n    mission.errObject=new RuntimeException(\"post-processing algorithm returned \" + result);\n  }\n  if (result != OK_RESULT && worksOnSameFile)   mission.storage.delete();\n  this.mission=null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 449,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 56
      },
      "nodeContext" : "result=test() ? process(null) : OK_RESULT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 197,
    "startColumnNumber" : 30,
    "endLineNumber" : 197,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}