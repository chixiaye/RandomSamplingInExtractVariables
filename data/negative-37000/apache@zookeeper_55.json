{
  "id" : 55,
  "expression" : "args",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerMain.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 23
      },
      "nodeContext" : "args.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 28
      },
      "nodeContext" : "args.length == 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 2) {\n  ZooKeeperServerMain.main(args);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1874,
        "startLineNumber" : 68,
        "startColumnNumber" : 43,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * To start the replicated server specify the configuration file name on the command line.\n * @param args command line\n */\npublic static void main(String[] args){\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 28
      },
      "nodeContext" : "args.length == 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 70,
      "startColumnNumber" : 37,
      "endLineNumber" : 70,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ZooKeeperServerMain.main(args)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ZooKeeperServerMain.main(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 69,
        "startColumnNumber" : 30,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooKeeperServerMain.main(args);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 2) {\n  ZooKeeperServerMain.main(args);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1874,
        "startLineNumber" : 68,
        "startColumnNumber" : 43,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * To start the replicated server specify the configuration file name on the command line.\n * @param args command line\n */\npublic static void main(String[] args){\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ZooKeeperServerMain.main(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 35,
      "endLineNumber" : 74,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 40
      },
      "nodeContext" : "QuorumPeerConfig.parse(args)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "QuorumPeerConfig.parse(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  QuorumPeerConfig.parse(args);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  QuorumPeerConfig.parse(args);\n}\n catch (Exception e) {\n  LOG.fatal(\"Error in config\",e);\n  System.exit(2);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1874,
        "startLineNumber" : 68,
        "startColumnNumber" : 43,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * To start the replicated server specify the configuration file name on the command line.\n * @param args command line\n */\npublic static void main(String[] args){\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "QuorumPeerConfig.parse(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 108,
      "startColumnNumber" : 37,
      "endLineNumber" : 108,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ZooKeeperServerMain.main(args)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ZooKeeperServerMain.main(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 106,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooKeeperServerMain.main(args);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1582,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!QuorumPeerConfig.isStandalone()) {\n  try {\n    ManagedUtil.registerLog4jMBeans();\n  }\n catch (  JMException e) {\n    LOG.warn(\"Unable to register log4j JMX control\",e);\n  }\n  runPeer(new QuorumPeer.Factory(){\n    public QuorumPeer create(    NIOServerCnxn.Factory cnxnFactory) throws IOException {\n      QuorumPeer peer=new QuorumPeer();\n      peer.setClientPort(ServerConfig.getClientPort());\n      peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n      peer.setQuorumPeers(QuorumPeerConfig.getServers());\n      peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n      peer.setMyid(QuorumPeerConfig.getServerId());\n      peer.setTickTime(QuorumPeerConfig.getTickTime());\n      peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n      peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n      peer.setCnxnFactory(cnxnFactory);\n      return peer;\n    }\n    public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n      return new NIOServerCnxn.Factory(getClientPort());\n    }\n  }\n);\n}\n else {\n  ZooKeeperServerMain.main(args);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1874,
        "startLineNumber" : 68,
        "startColumnNumber" : 43,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2063,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * To start the replicated server specify the configuration file name on the command line.\n * @param args command line\n */\npublic static void main(String[] args){\n  if (args.length == 2) {\n    ZooKeeperServerMain.main(args);\n    return;\n  }\n  try {\n    QuorumPeerConfig.parse(args);\n  }\n catch (  Exception e) {\n    LOG.fatal(\"Error in config\",e);\n    System.exit(2);\n  }\n  if (!QuorumPeerConfig.isStandalone()) {\n    try {\n      ManagedUtil.registerLog4jMBeans();\n    }\n catch (    JMException e) {\n      LOG.warn(\"Unable to register log4j JMX control\",e);\n    }\n    runPeer(new QuorumPeer.Factory(){\n      public QuorumPeer create(      NIOServerCnxn.Factory cnxnFactory) throws IOException {\n        QuorumPeer peer=new QuorumPeer();\n        peer.setClientPort(ServerConfig.getClientPort());\n        peer.setTxnFactory(new FileTxnSnapLog(new File(QuorumPeerConfig.getDataLogDir()),new File(QuorumPeerConfig.getDataDir())));\n        peer.setQuorumPeers(QuorumPeerConfig.getServers());\n        peer.setElectionType(QuorumPeerConfig.getElectionAlg());\n        peer.setMyid(QuorumPeerConfig.getServerId());\n        peer.setTickTime(QuorumPeerConfig.getTickTime());\n        peer.setInitLimit(QuorumPeerConfig.getInitLimit());\n        peer.setSyncLimit(QuorumPeerConfig.getSyncLimit());\n        peer.setCnxnFactory(cnxnFactory);\n        return peer;\n      }\n      public NIOServerCnxn.Factory createConnectionFactory() throws IOException {\n        return new NIOServerCnxn.Factory(getClientPort());\n      }\n    }\n);\n  }\n else {\n    ZooKeeperServerMain.main(args);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ZooKeeperServerMain.main(args);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 70,
    "startColumnNumber" : 37,
    "endLineNumber" : 70,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 35,
    "endLineNumber" : 74,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 108,
    "startColumnNumber" : 37,
    "endLineNumber" : 108,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}