{
  "id" : 407,
  "expression" : "newRequest.data",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/offline/DownloadRequest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newRequest.data",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 145,
      "startColumnNumber" : 73,
      "endLineNumber" : 145,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 144,
        "startColumnNumber" : 11,
        "endLineNumber" : 145,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new DownloadRequest(id,type,newRequest.uri,mergedKeys,newRequest.customCacheKey,newRequest.data)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 90
      },
      "nodeContext" : "return new DownloadRequest(id,type,newRequest.uri,mergedKeys,newRequest.customCacheKey,newRequest.data);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 128,
        "startColumnNumber" : 75,
        "endLineNumber" : 146,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkArgument(id.equals(newRequest.id));\n  Assertions.checkArgument(type.equals(newRequest.type));\n  List<StreamKey> mergedKeys;\n  if (streamKeys.isEmpty() || newRequest.streamKeys.isEmpty()) {\n    mergedKeys=Collections.emptyList();\n  }\n else {\n    mergedKeys=new ArrayList<>(streamKeys);\n    for (int i=0; i < newRequest.streamKeys.size(); i++) {\n      StreamKey newKey=newRequest.streamKeys.get(i);\n      if (!mergedKeys.contains(newKey)) {\n        mergedKeys.add(newKey);\n      }\n    }\n  }\n  return new DownloadRequest(id,type,newRequest.uri,mergedKeys,newRequest.customCacheKey,newRequest.data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1357,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 146,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the result of merging  {@code newRequest} into this request. The requests must have thesame  {@link #id} and {@link #type}. <p>If the requests have different  {@link #uri},  {@link #customCacheKey} and {@link #data}values, then those from the request being merged are included in the result.\n * @param newRequest The request being merged.\n * @return The merged result.\n * @throws IllegalArgumentException If the requests do not have the same {@link #id} and {@link #type}.\n */\npublic DownloadRequest copyWithMergedRequest(DownloadRequest newRequest){\n  Assertions.checkArgument(id.equals(newRequest.id));\n  Assertions.checkArgument(type.equals(newRequest.type));\n  List<StreamKey> mergedKeys;\n  if (streamKeys.isEmpty() || newRequest.streamKeys.isEmpty()) {\n    mergedKeys=Collections.emptyList();\n  }\n else {\n    mergedKeys=new ArrayList<>(streamKeys);\n    for (int i=0; i < newRequest.streamKeys.size(); i++) {\n      StreamKey newKey=newRequest.streamKeys.get(i);\n      if (!mergedKeys.contains(newKey)) {\n        mergedKeys.add(newKey);\n      }\n    }\n  }\n  return new DownloadRequest(id,type,newRequest.uri,mergedKeys,newRequest.customCacheKey,newRequest.data);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 144,
        "startColumnNumber" : 11,
        "endLineNumber" : 145,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new DownloadRequest(id,type,newRequest.uri,mergedKeys,newRequest.customCacheKey,newRequest.data)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 145,
    "startColumnNumber" : 73,
    "endLineNumber" : 145,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}