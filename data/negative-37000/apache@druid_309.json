{
  "id" : 309,
  "expression" : "expected",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expected",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 350,
      "startColumnNumber" : 26,
      "endLineNumber" : 350,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 350,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Assert.assertEquals(expected,actual)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 350,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Assert.assertEquals(expected,actual);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 347,
        "startColumnNumber" : 63,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int expected=vals[i];\n  final int actual=columnarInts.get(i);\n  Assert.assertEquals(expected,actual);\n  indices[i]=i;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0, size=columnarInts.size(); i < size; ++i) {\n  final int expected=vals[i];\n  final int actual=columnarInts.get(i);\n  Assert.assertEquals(expected,actual);\n  indices[i]=i;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 342,
        "startColumnNumber" : 2,
        "endLineNumber" : 361,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(vals.length,columnarInts.size());\n  int[] indices=new int[vals.length];\n  for (int i=0, size=columnarInts.size(); i < size; ++i) {\n    final int expected=vals[i];\n    final int actual=columnarInts.get(i);\n    Assert.assertEquals(expected,actual);\n    indices[i]=i;\n  }\n  IntArrays.shuffle(indices,ThreadLocalRandom.current());\n  final int limit=Math.min(columnarInts.size(),1000);\n  for (int i=0; i < limit; ++i) {\n    int k=indices[i];\n    Assert.assertEquals(vals[k],columnarInts.get(k));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 341,
        "startColumnNumber" : 2,
        "endLineNumber" : 361,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void assertIndexMatchesVals(){\n  Assert.assertEquals(vals.length,columnarInts.size());\n  int[] indices=new int[vals.length];\n  for (int i=0, size=columnarInts.size(); i < size; ++i) {\n    final int expected=vals[i];\n    final int actual=columnarInts.get(i);\n    Assert.assertEquals(expected,actual);\n    indices[i]=i;\n  }\n  IntArrays.shuffle(indices,ThreadLocalRandom.current());\n  final int limit=Math.min(columnarInts.size(),1000);\n  for (int i=0; i < limit; ++i) {\n    int k=indices[i];\n    Assert.assertEquals(vals[k],columnarInts.get(k));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 350,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Assert.assertEquals(expected,actual);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 350,
    "startColumnNumber" : 26,
    "endLineNumber" : 350,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}