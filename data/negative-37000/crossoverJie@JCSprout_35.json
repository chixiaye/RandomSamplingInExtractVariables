{
  "id" : 35,
  "expression" : "null",
  "projectName" : "crossoverJie@JCSprout",
  "commitID" : "397ee3763e12279fd83d26d02da20955d5bcc7cf",
  "filePath" : "/src/main/java/com/crossoverjie/algorithm/MergeTwoSortedLists.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 32,
      "startColumnNumber" : 21,
      "endLineNumber" : 32,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 32,
        "startColumnNumber" : 15,
        "endLineNumber" : 32,
        "endColumnNumber" : 25
      },
      "nodeContext" : "l1 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 32,
        "startColumnNumber" : 15,
        "endLineNumber" : 32,
        "endColumnNumber" : 40
      },
      "nodeContext" : "l1 != null && l2 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (l1 != null && l2 != null) {\n  if (l1.currentVal < l2.currentVal) {\n    lastNode.next=l1;\n    l1=l1.next;\n  }\n else {\n    lastNode.next=l2;\n    l2=l2.next;\n  }\n  lastNode=lastNode.next;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 28,
        "startColumnNumber" : 60,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 1. 声明一个头结点 2. 将头结点的引用赋值给一个临时结点，也可以叫做下一结点。 3. 进行循环比较，每次都将指向值较小的那个结点(较小值的引用赋值给 lastNode )。 4. 再去掉较小值链表的头结点，指针后移。 5. lastNode 指针也向后移，由于 lastNode 是 head 的引用，这样可以保证最终 head 的值是往后更新的。 6. 当其中一个链表的指针移到最后时跳出循环。 7. 由于这两个链表已经是排好序的，所以剩下的链表必定是最大的值，只需要将指针指向它即可。 8. 由于 head 链表的第一个结点是初始化的0，所以只需要返回 0 的下一个结点即是合并了的链表。\n * @param l1\n * @param l2\n * @return\n */\npublic ListNode mergeTwoLists(ListNode l1,ListNode l2){\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 32,
        "startColumnNumber" : 15,
        "endLineNumber" : 32,
        "endColumnNumber" : 40
      },
      "nodeContext" : "l1 != null && l2 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 32,
      "startColumnNumber" : 36,
      "endLineNumber" : 32,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 32,
        "startColumnNumber" : 30,
        "endLineNumber" : 32,
        "endColumnNumber" : 40
      },
      "nodeContext" : "l2 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 32,
        "startColumnNumber" : 15,
        "endLineNumber" : 32,
        "endColumnNumber" : 40
      },
      "nodeContext" : "l1 != null && l2 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (l1 != null && l2 != null) {\n  if (l1.currentVal < l2.currentVal) {\n    lastNode.next=l1;\n    l1=l1.next;\n  }\n else {\n    lastNode.next=l2;\n    l2=l2.next;\n  }\n  lastNode=lastNode.next;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 28,
        "startColumnNumber" : 60,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 1. 声明一个头结点 2. 将头结点的引用赋值给一个临时结点，也可以叫做下一结点。 3. 进行循环比较，每次都将指向值较小的那个结点(较小值的引用赋值给 lastNode )。 4. 再去掉较小值链表的头结点，指针后移。 5. lastNode 指针也向后移，由于 lastNode 是 head 的引用，这样可以保证最终 head 的值是往后更新的。 6. 当其中一个链表的指针移到最后时跳出循环。 7. 由于这两个链表已经是排好序的，所以剩下的链表必定是最大的值，只需要将指针指向它即可。 8. 由于 head 链表的第一个结点是初始化的0，所以只需要返回 0 的下一个结点即是合并了的链表。\n * @param l1\n * @param l2\n * @return\n */\npublic ListNode mergeTwoLists(ListNode l1,ListNode l2){\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 32,
        "startColumnNumber" : 15,
        "endLineNumber" : 32,
        "endColumnNumber" : 40
      },
      "nodeContext" : "l1 != null && l2 != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 43,
      "startColumnNumber" : 18,
      "endLineNumber" : 43,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 22
      },
      "nodeContext" : "l1 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (l1 == null) {\n  lastNode.next=l2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 28,
        "startColumnNumber" : 60,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 1. 声明一个头结点 2. 将头结点的引用赋值给一个临时结点，也可以叫做下一结点。 3. 进行循环比较，每次都将指向值较小的那个结点(较小值的引用赋值给 lastNode )。 4. 再去掉较小值链表的头结点，指针后移。 5. lastNode 指针也向后移，由于 lastNode 是 head 的引用，这样可以保证最终 head 的值是往后更新的。 6. 当其中一个链表的指针移到最后时跳出循环。 7. 由于这两个链表已经是排好序的，所以剩下的链表必定是最大的值，只需要将指针指向它即可。 8. 由于 head 链表的第一个结点是初始化的0，所以只需要返回 0 的下一个结点即是合并了的链表。\n * @param l1\n * @param l2\n * @return\n */\npublic ListNode mergeTwoLists(ListNode l1,ListNode l2){\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 22
      },
      "nodeContext" : "l1 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 46,
      "startColumnNumber" : 18,
      "endLineNumber" : 46,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 22
      },
      "nodeContext" : "l2 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (l2 == null) {\n  lastNode.next=l1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 28,
        "startColumnNumber" : 60,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 1. 声明一个头结点 2. 将头结点的引用赋值给一个临时结点，也可以叫做下一结点。 3. 进行循环比较，每次都将指向值较小的那个结点(较小值的引用赋值给 lastNode )。 4. 再去掉较小值链表的头结点，指针后移。 5. lastNode 指针也向后移，由于 lastNode 是 head 的引用，这样可以保证最终 head 的值是往后更新的。 6. 当其中一个链表的指针移到最后时跳出循环。 7. 由于这两个链表已经是排好序的，所以剩下的链表必定是最大的值，只需要将指针指向它即可。 8. 由于 head 链表的第一个结点是初始化的0，所以只需要返回 0 的下一个结点即是合并了的链表。\n * @param l1\n * @param l2\n * @return\n */\npublic ListNode mergeTwoLists(ListNode l1,ListNode l2){\n  ListNode head=new ListNode(0);\n  ListNode lastNode=head;\n  while (l1 != null && l2 != null) {\n    if (l1.currentVal < l2.currentVal) {\n      lastNode.next=l1;\n      l1=l1.next;\n    }\n else {\n      lastNode.next=l2;\n      l2=l2.next;\n    }\n    lastNode=lastNode.next;\n  }\n  if (l1 == null) {\n    lastNode.next=l2;\n  }\n  if (l2 == null) {\n    lastNode.next=l1;\n  }\n  return head.next;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 22
      },
      "nodeContext" : "l2 == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 32,
    "startColumnNumber" : 21,
    "endLineNumber" : 32,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 32,
    "startColumnNumber" : 36,
    "endLineNumber" : 32,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 43,
    "startColumnNumber" : 18,
    "endLineNumber" : 43,
    "endColumnNumber" : 22
  }, {
    "charLength" : 4,
    "startLineNumber" : 46,
    "startColumnNumber" : 18,
    "endLineNumber" : 46,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}