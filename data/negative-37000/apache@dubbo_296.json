{
  "id" : 296,
  "expression" : "new IllegalStateException(e.getMessage(),e)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalStateException(e.getMessage(),e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 263,
      "startColumnNumber" : 18,
      "endLineNumber" : 263,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 63
      },
      "nodeContext" : "throw new IllegalStateException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 262,
        "startColumnNumber" : 43,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 262,
        "startColumnNumber" : 10,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ClassNotFoundException e) {\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  actualInterface=ClassUtils.forName(interfaceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2197,
        "startLineNumber" : 244,
        "startColumnNumber" : 160,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String interfaceName=resolveAttribute(element,\"interface\",parserContext);\n  String generic=resolveAttribute(element,\"generic\",parserContext);\n  if (StringUtils.isBlank(generic) && consumerDefinition != null) {\n    generic=(String)consumerDefinition.getPropertyValues().get(\"generic\");\n  }\n  if (generic != null) {\n    Environment environment=parserContext.getReaderContext().getEnvironment();\n    generic=environment.resolvePlaceholders(generic);\n    beanDefinition.getPropertyValues().add(\"generic\",generic);\n  }\n  Class interfaceClass=ReferenceConfig.determineInterfaceClass(generic,interfaceName);\n  Class actualInterface=null;\n  try {\n    actualInterface=ClassUtils.forName(interfaceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IllegalStateException(e.getMessage(),e);\n  }\n  beanDefinition.setAttribute(\"interfaceClass\",interfaceClass);\n  beanDefinition.setAttribute(\"actualInterface\",actualInterface);\n  GenericBeanDefinition targetDefinition=new GenericBeanDefinition();\n  targetDefinition.setBeanClass(interfaceClass);\n  String id=(String)beanDefinition.getPropertyValues().get(\"id\");\n  beanDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition,id + \"_decorated\"));\n  beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE,interfaceClass);\n  List<PropertyValue> propertyValues=beanDefinition.getPropertyValues().getPropertyValueList();\n  for (  PropertyValue propertyValue : propertyValues) {\n    propertyValue.setOptional(true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2353,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void configReferenceBean(Element element,ParserContext parserContext,RootBeanDefinition beanDefinition,BeanDefinition consumerDefinition){\n  String interfaceName=resolveAttribute(element,\"interface\",parserContext);\n  String generic=resolveAttribute(element,\"generic\",parserContext);\n  if (StringUtils.isBlank(generic) && consumerDefinition != null) {\n    generic=(String)consumerDefinition.getPropertyValues().get(\"generic\");\n  }\n  if (generic != null) {\n    Environment environment=parserContext.getReaderContext().getEnvironment();\n    generic=environment.resolvePlaceholders(generic);\n    beanDefinition.getPropertyValues().add(\"generic\",generic);\n  }\n  Class interfaceClass=ReferenceConfig.determineInterfaceClass(generic,interfaceName);\n  Class actualInterface=null;\n  try {\n    actualInterface=ClassUtils.forName(interfaceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IllegalStateException(e.getMessage(),e);\n  }\n  beanDefinition.setAttribute(\"interfaceClass\",interfaceClass);\n  beanDefinition.setAttribute(\"actualInterface\",actualInterface);\n  GenericBeanDefinition targetDefinition=new GenericBeanDefinition();\n  targetDefinition.setBeanClass(interfaceClass);\n  String id=(String)beanDefinition.getPropertyValues().get(\"id\");\n  beanDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition,id + \"_decorated\"));\n  beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE,interfaceClass);\n  List<PropertyValue> propertyValues=beanDefinition.getPropertyValues().getPropertyValueList();\n  for (  PropertyValue propertyValue : propertyValues) {\n    propertyValue.setOptional(true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 63
      },
      "nodeContext" : "throw new IllegalStateException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.IllegalStateException"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 263,
    "startColumnNumber" : 18,
    "endLineNumber" : 263,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}