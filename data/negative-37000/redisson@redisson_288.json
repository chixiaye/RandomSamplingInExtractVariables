{
  "id" : 288,
  "expression" : "entry",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/connection/DNSMonitor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 101,
      "startColumnNumber" : 80,
      "endLineNumber" : 101,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 101,
        "startColumnNumber" : 80,
        "endLineNumber" : 101,
        "endColumnNumber" : 94
      },
      "nodeContext" : "entry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 101,
        "startColumnNumber" : 80,
        "endLineNumber" : 101,
        "endColumnNumber" : 104
      },
      "nodeContext" : "entry.getKey().getHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 105
      },
      "nodeContext" : "log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 106
      },
      "nodeContext" : "log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 100,
        "startColumnNumber" : 76,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 99,
        "startColumnNumber" : 55,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2126,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void monitorMasters(AtomicInteger counter){\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 106
      },
      "nodeContext" : "log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<org.redisson.misc.RedisURI,java.net.InetSocketAddress>"
  }, {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 103,
      "startColumnNumber" : 106,
      "endLineNumber" : 103,
      "endColumnNumber" : 111
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 103,
        "startColumnNumber" : 106,
        "endLineNumber" : 103,
        "endColumnNumber" : 120
      },
      "nodeContext" : "entry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 103,
        "startColumnNumber" : 106,
        "endLineNumber" : 103,
        "endColumnNumber" : 130
      },
      "nodeContext" : "entry.getKey().getHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 103,
        "startColumnNumber" : 71,
        "endLineNumber" : 103,
        "endColumnNumber" : 157
      },
      "nodeContext" : "InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 103,
        "startColumnNumber" : 54,
        "endLineNumber" : 103,
        "endColumnNumber" : 158
      },
      "nodeContext" : "resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 103,
        "startColumnNumber" : 38,
        "endLineNumber" : 103,
        "endColumnNumber" : 158
      },
      "nodeContext" : "resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 100,
        "startColumnNumber" : 76,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 99,
        "startColumnNumber" : 55,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2126,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void monitorMasters(AtomicInteger counter){\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<org.redisson.misc.RedisURI,java.net.InetSocketAddress>"
  }, {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 103,
      "startColumnNumber" : 132,
      "endLineNumber" : 103,
      "endColumnNumber" : 137
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 103,
        "startColumnNumber" : 132,
        "endLineNumber" : 103,
        "endColumnNumber" : 146
      },
      "nodeContext" : "entry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 103,
        "startColumnNumber" : 132,
        "endLineNumber" : 103,
        "endColumnNumber" : 156
      },
      "nodeContext" : "entry.getKey().getPort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 103,
        "startColumnNumber" : 71,
        "endLineNumber" : 103,
        "endColumnNumber" : 157
      },
      "nodeContext" : "InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 103,
        "startColumnNumber" : 54,
        "endLineNumber" : 103,
        "endColumnNumber" : 158
      },
      "nodeContext" : "resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 103,
        "startColumnNumber" : 38,
        "endLineNumber" : 103,
        "endColumnNumber" : 158
      },
      "nodeContext" : "resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 100,
        "startColumnNumber" : 76,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n  log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n  Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n  resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n    @Override public void operationComplete(    Future<InetSocketAddress> future) throws Exception {\n      if (counter.decrementAndGet() == 0) {\n        monitorDnsChange();\n      }\n      if (!future.isSuccess()) {\n        log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n        return;\n      }\n      log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n      InetSocketAddress currentMasterAddr=entry.getValue();\n      InetSocketAddress newMasterAddr=future.getNow();\n      if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n        log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n        MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n        if (masterSlaveEntry == null) {\n          log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n          return;\n        }\n        masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n        masters.put(entry.getKey(),newMasterAddr);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 99,
        "startColumnNumber" : 55,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2126,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void monitorMasters(AtomicInteger counter){\n  for (  Entry<RedisURI,InetSocketAddress> entry : masters.entrySet()) {\n    log.debug(\"Request sent to resolve ip address for master host: {}\",entry.getKey().getHost());\n    Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n    resolveFuture.addListener(new FutureListener<InetSocketAddress>(){\n      @Override public void operationComplete(      Future<InetSocketAddress> future) throws Exception {\n        if (counter.decrementAndGet() == 0) {\n          monitorDnsChange();\n        }\n        if (!future.isSuccess()) {\n          log.error(\"Unable to resolve \" + entry.getKey().getHost(),future.cause());\n          return;\n        }\n        log.debug(\"Resolved ip: {} for master host: {}\",future.getNow().getAddress(),entry.getKey().getHost());\n        InetSocketAddress currentMasterAddr=entry.getValue();\n        InetSocketAddress newMasterAddr=future.getNow();\n        if (!newMasterAddr.getAddress().equals(currentMasterAddr.getAddress())) {\n          log.info(\"Detected DNS change. Master {} has changed ip from {} to {}\",entry.getKey(),currentMasterAddr.getAddress().getHostAddress(),newMasterAddr.getAddress().getHostAddress());\n          MasterSlaveEntry masterSlaveEntry=connectionManager.getEntry(currentMasterAddr);\n          if (masterSlaveEntry == null) {\n            log.error(\"Unable to find entry for current master {}\",currentMasterAddr);\n            return;\n          }\n          masterSlaveEntry.changeMaster(newMasterAddr,entry.getKey());\n          masters.put(entry.getKey(),newMasterAddr);\n        }\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Future<InetSocketAddress> resolveFuture=resolver.resolve(InetSocketAddress.createUnresolved(entry.getKey().getHost(),entry.getKey().getPort()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<org.redisson.misc.RedisURI,java.net.InetSocketAddress>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 101,
    "startColumnNumber" : 80,
    "endLineNumber" : 101,
    "endColumnNumber" : 85
  }, {
    "charLength" : 5,
    "startLineNumber" : 103,
    "startColumnNumber" : 106,
    "endLineNumber" : 103,
    "endColumnNumber" : 111
  }, {
    "charLength" : 5,
    "startLineNumber" : 103,
    "startColumnNumber" : 132,
    "endLineNumber" : 103,
    "endColumnNumber" : 137
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}