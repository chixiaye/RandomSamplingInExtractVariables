{
  "id" : 19,
  "expression" : "other",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tools/src/mindustry/tools/BundleLauncher.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 23,
      "startColumnNumber" : 33,
      "endLineNumber" : 23,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 68
      },
      "nodeContext" : "PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 69
      },
      "nodeContext" : "PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 69
      },
      "nodeContext" : "PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 26,
      "startColumnNumber" : 29,
      "endLineNumber" : 26,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 26,
        "startColumnNumber" : 29,
        "endLineNumber" : 26,
        "endColumnNumber" : 48
      },
      "nodeContext" : "other.orderedKeys()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : other.orderedKeys()) {\n  if (!base.containsKey(key)) {\n    removals.add(key);\n    Log.info(\"&lr- Removing unused key '@'...\",key);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 26,
        "startColumnNumber" : 29,
        "endLineNumber" : 26,
        "endColumnNumber" : 48
      },
      "nodeContext" : "other.orderedKeys()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 34,
      "startColumnNumber" : 16,
      "endLineNumber" : 34,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 34,
        "startColumnNumber" : 16,
        "endLineNumber" : 34,
        "endColumnNumber" : 31
      },
      "nodeContext" : "other.remove(s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 34,
        "startColumnNumber" : 16,
        "endLineNumber" : 34,
        "endColumnNumber" : 32
      },
      "nodeContext" : "other.remove(s);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 33,
        "startColumnNumber" : 36,
        "endLineNumber" : 35,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  other.remove(s);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 33,
        "startColumnNumber" : 12,
        "endLineNumber" : 35,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String s : removals) {\n  other.remove(s);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 34,
        "startColumnNumber" : 16,
        "endLineNumber" : 34,
        "endColumnNumber" : 32
      },
      "nodeContext" : "other.remove(s);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 40,
      "startColumnNumber" : 20,
      "endLineNumber" : 40,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 40,
        "startColumnNumber" : 20,
        "endLineNumber" : 40,
        "endColumnNumber" : 42
      },
      "nodeContext" : "other.containsKey(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 40,
        "startColumnNumber" : 19,
        "endLineNumber" : 40,
        "endColumnNumber" : 42
      },
      "nodeContext" : "!other.containsKey(key)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 40,
        "startColumnNumber" : 19,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!other.containsKey(key) || other.get(key).trim().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 44,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n  other.put(key,base.get(key));\n  added++;\n  Log.info(\"&lc- Adding missing key '@'...\",key);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 39,
        "startColumnNumber" : 48,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : base.orderedKeys()) {\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 40,
        "startColumnNumber" : 19,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!other.containsKey(key) || other.get(key).trim().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 40,
      "startColumnNumber" : 46,
      "endLineNumber" : 40,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 40,
        "startColumnNumber" : 46,
        "endLineNumber" : 40,
        "endColumnNumber" : 60
      },
      "nodeContext" : "other.get(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 40,
        "startColumnNumber" : 46,
        "endLineNumber" : 40,
        "endColumnNumber" : 67
      },
      "nodeContext" : "other.get(key).trim()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 46,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "other.get(key).trim().isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 40,
        "startColumnNumber" : 19,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!other.containsKey(key) || other.get(key).trim().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 44,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n  other.put(key,base.get(key));\n  added++;\n  Log.info(\"&lc- Adding missing key '@'...\",key);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 39,
        "startColumnNumber" : 48,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : base.orderedKeys()) {\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 40,
        "startColumnNumber" : 19,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!other.containsKey(key) || other.get(key).trim().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 41,
      "startColumnNumber" : 20,
      "endLineNumber" : 41,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 41,
        "startColumnNumber" : 20,
        "endLineNumber" : 41,
        "endColumnNumber" : 49
      },
      "nodeContext" : "other.put(key,base.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 41,
        "startColumnNumber" : 20,
        "endLineNumber" : 41,
        "endColumnNumber" : 50
      },
      "nodeContext" : "other.put(key,base.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 40,
        "startColumnNumber" : 78,
        "endLineNumber" : 44,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  other.put(key,base.get(key));\n  added++;\n  Log.info(\"&lc- Adding missing key '@'...\",key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 44,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n  other.put(key,base.get(key));\n  added++;\n  Log.info(\"&lc- Adding missing key '@'...\",key);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 39,
        "startColumnNumber" : 48,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : base.orderedKeys()) {\n  if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n    other.put(key,base.get(key));\n    added++;\n    Log.info(\"&lc- Adding missing key '@'...\",key);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 41,
        "startColumnNumber" : 20,
        "endLineNumber" : 41,
        "endColumnNumber" : 50
      },
      "nodeContext" : "other.put(key,base.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 56,
      "startColumnNumber" : 49,
      "endLineNumber" : 56,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 56,
        "startColumnNumber" : 49,
        "endLineNumber" : 56,
        "endColumnNumber" : 63
      },
      "nodeContext" : "other.get(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 56,
        "startColumnNumber" : 30,
        "endLineNumber" : 56,
        "endColumnNumber" : 64
      },
      "nodeContext" : "processor.get(key,other.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 65
      },
      "nodeContext" : "result.append(processor.get(key,other.get(key)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 66
      },
      "nodeContext" : "result.append(processor.get(key,other.get(key)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 55,
        "startColumnNumber" : 48,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  result.append(processor.get(key,other.get(key)));\n  other.remove(key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : base.orderedKeys()) {\n  result.append(processor.get(key,other.get(key)));\n  other.remove(key);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 66
      },
      "nodeContext" : "result.append(processor.get(key,other.get(key)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "other",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 57,
      "startColumnNumber" : 16,
      "endLineNumber" : 57,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 33
      },
      "nodeContext" : "other.remove(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 34
      },
      "nodeContext" : "other.remove(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 55,
        "startColumnNumber" : 48,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  result.append(processor.get(key,other.get(key)));\n  other.remove(key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String key : base.orderedKeys()) {\n  result.append(processor.get(key,other.get(key)));\n  other.remove(key);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 17,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 17,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "child -> {\n  if (child.name().equals(\"bundle.properties\") || child.toString().contains(\"output\"))   return;\n  Log.info(\"Parsing bundle: @\",child);\n  OrderedMap<String,String> other=new OrderedMap<>();\n  PropertiesUtils.load(other,child.reader(2048,\"UTF-8\"));\n  removals.clear();\n  for (  String key : other.orderedKeys()) {\n    if (!base.containsKey(key)) {\n      removals.add(key);\n      Log.info(\"&lr- Removing unused key '@'...\",key);\n    }\n  }\n  Log.info(\"&lr@ keys removed.\",removals.size);\n  for (  String s : removals) {\n    other.remove(s);\n  }\n  int added=0;\n  for (  String key : base.orderedKeys()) {\n    if (!other.containsKey(key) || other.get(key).trim().isEmpty()) {\n      other.put(key,base.get(key));\n      added++;\n      Log.info(\"&lc- Adding missing key '@'...\",key);\n    }\n  }\n  Func2<String,String,String> processor=(key,value) -> (key + \" = \" + value).replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\n\",\"\\\\n\") + \"\\n\" + (newlines.contains(key) ? \"\\n\" : \"\");\n  Fi output=child.sibling(\"output/\" + child.name());\n  Log.info(\"&lc@ keys added.\",added);\n  Log.info(\"Writing bundle to @\",output);\n  StringBuilder result=new StringBuilder();\n  for (  String key : base.orderedKeys()) {\n    result.append(processor.get(key,other.get(key)));\n    other.remove(key);\n  }\n  child.writeString(result.toString());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 34
      },
      "nodeContext" : "other.remove(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 23,
    "startColumnNumber" : 33,
    "endLineNumber" : 23,
    "endColumnNumber" : 38
  }, {
    "charLength" : 5,
    "startLineNumber" : 26,
    "startColumnNumber" : 29,
    "endLineNumber" : 26,
    "endColumnNumber" : 34
  }, {
    "charLength" : 5,
    "startLineNumber" : 34,
    "startColumnNumber" : 16,
    "endLineNumber" : 34,
    "endColumnNumber" : 21
  }, {
    "charLength" : 5,
    "startLineNumber" : 40,
    "startColumnNumber" : 20,
    "endLineNumber" : 40,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 40,
    "startColumnNumber" : 46,
    "endLineNumber" : 40,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 41,
    "startColumnNumber" : 20,
    "endLineNumber" : 41,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 56,
    "startColumnNumber" : 49,
    "endLineNumber" : 56,
    "endColumnNumber" : 54
  }, {
    "charLength" : 5,
    "startLineNumber" : 57,
    "startColumnNumber" : 16,
    "endLineNumber" : 57,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  } ]
}