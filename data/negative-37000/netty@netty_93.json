{
  "id" : 93,
  "expression" : "\"---Stream id: \" + entry.getKey() + \" received---\"",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/http2/helloworld/client/HttpResponseHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"---Stream id: \" + entry.getKey() + \" received---\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 84,
      "startColumnNumber" : 31,
      "endLineNumber" : 84,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 82
      },
      "nodeContext" : "System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 83
      },
      "nodeContext" : "System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 68,
        "startColumnNumber" : 30,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Entry<Integer,Entry<Future<Void>,Promise<Void>>> entry=itr.next();\n  Future<Void> writeFuture=entry.getValue().getKey();\n  if (!writeFuture.awaitUninterruptibly(timeout,unit)) {\n    throw new IllegalStateException(\"Timed out waiting to write for stream id \" + entry.getKey());\n  }\n  if (writeFuture.isFailed()) {\n    throw new RuntimeException(writeFuture.cause());\n  }\n  Promise<Void> promise=entry.getValue().getValue();\n  if (!promise.asFuture().awaitUninterruptibly(timeout,unit)) {\n    throw new IllegalStateException(\"Timed out waiting for response on stream id \" + entry.getKey());\n  }\n  if (promise.isFailed()) {\n    throw new RuntimeException(promise.cause());\n  }\n  System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n  itr.remove();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (itr.hasNext()) {\n  Entry<Integer,Entry<Future<Void>,Promise<Void>>> entry=itr.next();\n  Future<Void> writeFuture=entry.getValue().getKey();\n  if (!writeFuture.awaitUninterruptibly(timeout,unit)) {\n    throw new IllegalStateException(\"Timed out waiting to write for stream id \" + entry.getKey());\n  }\n  if (writeFuture.isFailed()) {\n    throw new RuntimeException(writeFuture.cause());\n  }\n  Promise<Void> promise=entry.getValue().getValue();\n  if (!promise.asFuture().awaitUninterruptibly(timeout,unit)) {\n    throw new IllegalStateException(\"Timed out waiting for response on stream id \" + entry.getKey());\n  }\n  if (promise.isFailed()) {\n    throw new RuntimeException(promise.cause());\n  }\n  System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n  itr.remove();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 131,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1141,
        "startLineNumber" : 66,
        "startColumnNumber" : 60,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Iterator<Entry<Integer,Entry<Future<Void>,Promise<Void>>>> itr=streamidPromiseMap.entrySet().iterator();\n  while (itr.hasNext()) {\n    Entry<Integer,Entry<Future<Void>,Promise<Void>>> entry=itr.next();\n    Future<Void> writeFuture=entry.getValue().getKey();\n    if (!writeFuture.awaitUninterruptibly(timeout,unit)) {\n      throw new IllegalStateException(\"Timed out waiting to write for stream id \" + entry.getKey());\n    }\n    if (writeFuture.isFailed()) {\n      throw new RuntimeException(writeFuture.cause());\n    }\n    Promise<Void> promise=entry.getValue().getValue();\n    if (!promise.asFuture().awaitUninterruptibly(timeout,unit)) {\n      throw new IllegalStateException(\"Timed out waiting for response on stream id \" + entry.getKey());\n    }\n    if (promise.isFailed()) {\n      throw new RuntimeException(promise.cause());\n    }\n    System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n    itr.remove();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Wait (sequentially) for a time duration for each anticipated response\n * @param timeout Value of time to wait for each response\n * @param unit Units associated with {@code timeout}\n * @see HttpResponseHandler#put(int,Future,Promise)\n */\npublic void awaitResponses(long timeout,TimeUnit unit){\n  Iterator<Entry<Integer,Entry<Future<Void>,Promise<Void>>>> itr=streamidPromiseMap.entrySet().iterator();\n  while (itr.hasNext()) {\n    Entry<Integer,Entry<Future<Void>,Promise<Void>>> entry=itr.next();\n    Future<Void> writeFuture=entry.getValue().getKey();\n    if (!writeFuture.awaitUninterruptibly(timeout,unit)) {\n      throw new IllegalStateException(\"Timed out waiting to write for stream id \" + entry.getKey());\n    }\n    if (writeFuture.isFailed()) {\n      throw new RuntimeException(writeFuture.cause());\n    }\n    Promise<Void> promise=entry.getValue().getValue();\n    if (!promise.asFuture().awaitUninterruptibly(timeout,unit)) {\n      throw new IllegalStateException(\"Timed out waiting for response on stream id \" + entry.getKey());\n    }\n    if (promise.isFailed()) {\n      throw new RuntimeException(promise.cause());\n    }\n    System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n    itr.remove();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 83
      },
      "nodeContext" : "System.out.println(\"---Stream id: \" + entry.getKey() + \" received---\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 84,
    "startColumnNumber" : 31,
    "endLineNumber" : 84,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}