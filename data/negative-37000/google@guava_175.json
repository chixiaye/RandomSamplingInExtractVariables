{
  "id" : 175,
  "expression" : "type.resolveType(typeVars[i])",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type.resolveType(typeVars[i])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 243,
      "startColumnNumber" : 33,
      "endLineNumber" : 243,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 243,
        "startColumnNumber" : 21,
        "endLineNumber" : 243,
        "endColumnNumber" : 62
      },
      "nodeContext" : "paramType=type.resolveType(typeVars[i])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 63
      },
      "nodeContext" : "TypeToken<?> paramType=type.resolveType(typeVars[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 242,
        "startColumnNumber" : 46,
        "endLineNumber" : 255,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeToken<?> paramType=type.resolveType(typeVars[i]);\n  Object argValue=generate(paramType);\n  if (argValue == null) {\n    return null;\n  }\n  args.add(argValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 242,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < params.size(); i++) {\n  TypeToken<?> paramType=type.resolveType(typeVars[i]);\n  Object argValue=generate(paramType);\n  if (argValue == null) {\n    return null;\n  }\n  args.add(argValue);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 238,
        "startColumnNumber" : 26,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ImmutableList<Parameter> params=Invokable.from(generate).getParameters();\n  List<Object> args=Lists.newArrayListWithCapacity(params.size());\n  TypeVariable<?>[] typeVars=rawType.getTypeParameters();\n  for (int i=0; i < params.size(); i++) {\n    TypeToken<?> paramType=type.resolveType(typeVars[i]);\n    Object argValue=generate(paramType);\n    if (argValue == null) {\n      return null;\n    }\n    args.add(argValue);\n  }\n  return invokeGeneratorMethod(generate,args.toArray());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 960,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (generate != null) {\n  ImmutableList<Parameter> params=Invokable.from(generate).getParameters();\n  List<Object> args=Lists.newArrayListWithCapacity(params.size());\n  TypeVariable<?>[] typeVars=rawType.getTypeParameters();\n  for (int i=0; i < params.size(); i++) {\n    TypeToken<?> paramType=type.resolveType(typeVars[i]);\n    Object argValue=generate(paramType);\n    if (argValue == null) {\n      return null;\n    }\n    args.add(argValue);\n  }\n  return invokeGeneratorMethod(generate,args.toArray());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2368,
        "startLineNumber" : 204,
        "startColumnNumber" : 45,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> rawType=type.getRawType();\n  List<Object> samples=sampleInstances.get(rawType);\n  Object sample=pickInstance(samples,null);\n  if (sample != null) {\n    return sample;\n  }\n  if (rawType.isEnum()) {\n    return pickInstance(rawType.getEnumConstants(),null);\n  }\n  if (type.isArray()) {\n    TypeToken<?> componentType=type.getComponentType();\n    Object array=Array.newInstance(componentType.getRawType(),1);\n    Array.set(array,0,generate(componentType));\n    return array;\n  }\n  Method emptyGenerate=EMPTY_GENERATORS.get(rawType);\n  if (emptyGenerate != null) {\n    if (emptyInstanceGenerated.containsKey(type.getType())) {\n      if (emptyInstanceGenerated.get(type.getType()).intValue() == freshness.get()) {\n        return invokeGeneratorMethod(emptyGenerate);\n      }\n else {\n      }\n    }\n else {\n      Object emptyInstance=invokeGeneratorMethod(emptyGenerate);\n      emptyInstanceGenerated.put(type.getType(),freshness.get());\n      return emptyInstance;\n    }\n  }\n  Method generate=GENERATORS.get(rawType);\n  if (generate != null) {\n    ImmutableList<Parameter> params=Invokable.from(generate).getParameters();\n    List<Object> args=Lists.newArrayListWithCapacity(params.size());\n    TypeVariable<?>[] typeVars=rawType.getTypeParameters();\n    for (int i=0; i < params.size(); i++) {\n      TypeToken<?> paramType=type.resolveType(typeVars[i]);\n      Object argValue=generate(paramType);\n      if (argValue == null) {\n        return null;\n      }\n      args.add(argValue);\n    }\n    return invokeGeneratorMethod(generate,args.toArray());\n  }\n  return defaultGenerate(rawType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2586,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Generates an instance for  {@code type} using the current {@link #freshness}. The generated instance may or may not be unique across different calls.\n */\nprivate Object generate(TypeToken<?> type){\n  Class<?> rawType=type.getRawType();\n  List<Object> samples=sampleInstances.get(rawType);\n  Object sample=pickInstance(samples,null);\n  if (sample != null) {\n    return sample;\n  }\n  if (rawType.isEnum()) {\n    return pickInstance(rawType.getEnumConstants(),null);\n  }\n  if (type.isArray()) {\n    TypeToken<?> componentType=type.getComponentType();\n    Object array=Array.newInstance(componentType.getRawType(),1);\n    Array.set(array,0,generate(componentType));\n    return array;\n  }\n  Method emptyGenerate=EMPTY_GENERATORS.get(rawType);\n  if (emptyGenerate != null) {\n    if (emptyInstanceGenerated.containsKey(type.getType())) {\n      if (emptyInstanceGenerated.get(type.getType()).intValue() == freshness.get()) {\n        return invokeGeneratorMethod(emptyGenerate);\n      }\n else {\n      }\n    }\n else {\n      Object emptyInstance=invokeGeneratorMethod(emptyGenerate);\n      emptyInstanceGenerated.put(type.getType(),freshness.get());\n      return emptyInstance;\n    }\n  }\n  Method generate=GENERATORS.get(rawType);\n  if (generate != null) {\n    ImmutableList<Parameter> params=Invokable.from(generate).getParameters();\n    List<Object> args=Lists.newArrayListWithCapacity(params.size());\n    TypeVariable<?>[] typeVars=rawType.getTypeParameters();\n    for (int i=0; i < params.size(); i++) {\n      TypeToken<?> paramType=type.resolveType(typeVars[i]);\n      Object argValue=generate(paramType);\n      if (argValue == null) {\n        return null;\n      }\n      args.add(argValue);\n    }\n    return invokeGeneratorMethod(generate,args.toArray());\n  }\n  return defaultGenerate(rawType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 63
      },
      "nodeContext" : "TypeToken<?> paramType=type.resolveType(typeVars[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.google.common.reflect.TypeToken<>"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 243,
    "startColumnNumber" : 33,
    "endLineNumber" : 243,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}