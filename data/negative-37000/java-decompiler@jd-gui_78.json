{
  "id" : 78,
  "expression" : "\"L\"",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/util/parser/antlr/AbstractJavaListener.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"L\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 151,
      "startColumnNumber" : 23,
      "endLineNumber" : 151,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 151,
        "startColumnNumber" : 23,
        "endLineNumber" : 151,
        "endColumnNumber" : 77
      },
      "nodeContext" : "\"L\" + resolveInternalTypeName(type.Identifier()) + \";\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 77
      },
      "nodeContext" : "name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 78
      },
      "nodeContext" : "name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 140,
        "startColumnNumber" : 35,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n  List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n  if (typeArgumentsContexts.size() == 1) {\n    JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n    List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n  }\n else   if (typeArgumentsContexts.size() > 1) {\n    throw new RuntimeException(\"UNEXPECTED\");\n  }\n  name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (primitive == null) {\n  JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n  List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n  if (typeArgumentsContexts.size() == 1) {\n    JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n    List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n  }\n else   if (typeArgumentsContexts.size() > 1) {\n    throw new RuntimeException(\"UNEXPECTED\");\n  }\n  name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n}\n else {\nswitch (primitive.getText()) {\ncase \"boolean\":    name=\"Z\";\n  break;\ncase \"byte\":name=\"B\";\nbreak;\ncase \"char\":name=\"C\";\nbreak;\ncase \"double\":name=\"D\";\nbreak;\ncase \"float\":name=\"F\";\nbreak;\ncase \"int\":name=\"I\";\nbreak;\ncase \"long\":name=\"J\";\nbreak;\ncase \"short\":name=\"S\";\nbreak;\ncase \"void\":name=\"V\";\nbreak;\ndefault:throw new RuntimeException(\"UNEXPECTED PRIMITIVE\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 135,
        "startColumnNumber" : 15,
        "endLineNumber" : 175,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  dimension+=countDimension(typeContext.children);\n  JavaParser.PrimitiveTypeContext primitive=typeContext.primitiveType();\n  String name;\n  if (primitive == null) {\n    JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n    List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n    if (typeArgumentsContexts.size() == 1) {\n      JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n      List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n    }\n else     if (typeArgumentsContexts.size() > 1) {\n      throw new RuntimeException(\"UNEXPECTED\");\n    }\n    name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n  }\n else {\nswitch (primitive.getText()) {\ncase \"boolean\":      name=\"Z\";\n    break;\ncase \"byte\":  name=\"B\";\nbreak;\ncase \"char\":name=\"C\";\nbreak;\ncase \"double\":name=\"D\";\nbreak;\ncase \"float\":name=\"F\";\nbreak;\ncase \"int\":name=\"I\";\nbreak;\ncase \"long\":name=\"J\";\nbreak;\ncase \"short\":name=\"S\";\nbreak;\ncase \"void\":name=\"V\";\nbreak;\ndefault:throw new RuntimeException(\"UNEXPECTED PRIMITIVE\");\n}\n}\nswitch (dimension) {\ncase 0:return name;\ncase 1:return \"[\" + name;\ncase 2:return \"[[\" + name;\ndefault:return new String(new char[dimension]).replace('\\0','[') + name;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2026,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (typeContext == null) {\n  return \"V\";\n}\n else {\n  dimension+=countDimension(typeContext.children);\n  JavaParser.PrimitiveTypeContext primitive=typeContext.primitiveType();\n  String name;\n  if (primitive == null) {\n    JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n    List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n    if (typeArgumentsContexts.size() == 1) {\n      JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n      List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n    }\n else     if (typeArgumentsContexts.size() > 1) {\n      throw new RuntimeException(\"UNEXPECTED\");\n    }\n    name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n  }\n else {\nswitch (primitive.getText()) {\ncase \"boolean\":      name=\"Z\";\n    break;\ncase \"byte\":  name=\"B\";\nbreak;\ncase \"char\":name=\"C\";\nbreak;\ncase \"double\":name=\"D\";\nbreak;\ncase \"float\":name=\"F\";\nbreak;\ncase \"int\":name=\"I\";\nbreak;\ncase \"long\":name=\"J\";\nbreak;\ncase \"short\":name=\"S\";\nbreak;\ncase \"void\":name=\"V\";\nbreak;\ndefault:throw new RuntimeException(\"UNEXPECTED PRIMITIVE\");\n}\n}\nswitch (dimension) {\ncase 0:return name;\ncase 1:return \"[\" + name;\ncase 2:return \"[[\" + name;\ndefault:return new String(new char[dimension]).replace('\\0','[') + name;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 221,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2044,
        "startLineNumber" : 132,
        "startColumnNumber" : 89,
        "endLineNumber" : 176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (typeContext == null) {\n    return \"V\";\n  }\n else {\n    dimension+=countDimension(typeContext.children);\n    JavaParser.PrimitiveTypeContext primitive=typeContext.primitiveType();\n    String name;\n    if (primitive == null) {\n      JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n      List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n      if (typeArgumentsContexts.size() == 1) {\n        JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n        List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n      }\n else       if (typeArgumentsContexts.size() > 1) {\n        throw new RuntimeException(\"UNEXPECTED\");\n      }\n      name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n    }\n else {\nswitch (primitive.getText()) {\ncase \"boolean\":        name=\"Z\";\n      break;\ncase \"byte\":    name=\"B\";\n  break;\ncase \"char\":name=\"C\";\nbreak;\ncase \"double\":name=\"D\";\nbreak;\ncase \"float\":name=\"F\";\nbreak;\ncase \"int\":name=\"I\";\nbreak;\ncase \"long\":name=\"J\";\nbreak;\ncase \"short\":name=\"S\";\nbreak;\ncase \"void\":name=\"V\";\nbreak;\ndefault:throw new RuntimeException(\"UNEXPECTED PRIMITIVE\");\n}\n}\nswitch (dimension) {\ncase 0:return name;\ncase 1:return \"[\" + name;\ncase 2:return \"[[\" + name;\ndefault:return new String(new char[dimension]).replace('\\0','[') + name;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2129,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected String createDescriptor(JavaParser.TypeContext typeContext,int dimension){\n  if (typeContext == null) {\n    return \"V\";\n  }\n else {\n    dimension+=countDimension(typeContext.children);\n    JavaParser.PrimitiveTypeContext primitive=typeContext.primitiveType();\n    String name;\n    if (primitive == null) {\n      JavaParser.ClassOrInterfaceTypeContext type=typeContext.classOrInterfaceType();\n      List<JavaParser.TypeArgumentsContext> typeArgumentsContexts=type.typeArguments();\n      if (typeArgumentsContexts.size() == 1) {\n        JavaParser.TypeArgumentsContext typeArgumentsContext=typeArgumentsContexts.get(0);\n        List<JavaParser.TypeArgumentContext> typeArguments=typeArgumentsContext.typeArgument();\n      }\n else       if (typeArgumentsContexts.size() > 1) {\n        throw new RuntimeException(\"UNEXPECTED\");\n      }\n      name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n    }\n else {\nswitch (primitive.getText()) {\ncase \"boolean\":        name=\"Z\";\n      break;\ncase \"byte\":    name=\"B\";\n  break;\ncase \"char\":name=\"C\";\nbreak;\ncase \"double\":name=\"D\";\nbreak;\ncase \"float\":name=\"F\";\nbreak;\ncase \"int\":name=\"I\";\nbreak;\ncase \"long\":name=\"J\";\nbreak;\ncase \"short\":name=\"S\";\nbreak;\ncase \"void\":name=\"V\";\nbreak;\ndefault:throw new RuntimeException(\"UNEXPECTED PRIMITIVE\");\n}\n}\nswitch (dimension) {\ncase 0:return name;\ncase 1:return \"[\" + name;\ncase 2:return \"[[\" + name;\ndefault:return new String(new char[dimension]).replace('\\0','[') + name;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 78
      },
      "nodeContext" : "name=\"L\" + resolveInternalTypeName(type.Identifier()) + \";\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 151,
    "startColumnNumber" : 23,
    "endLineNumber" : 151,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}