{
  "id" : 502,
  "expression" : "in",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 103,
      "startColumnNumber" : 30,
      "endLineNumber" : 103,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 103,
        "startColumnNumber" : 30,
        "endLineNumber" : 103,
        "endColumnNumber" : 42
      },
      "nodeContext" : "in.readUTF()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 103,
        "endColumnNumber" : 42
      },
      "nodeContext" : "dubboVersion=in.readUTF()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "String dubboVersion=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "String dubboVersion=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 107,
      "startColumnNumber" : 22,
      "endLineNumber" : 107,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 107,
        "startColumnNumber" : 22,
        "endLineNumber" : 107,
        "endColumnNumber" : 34
      },
      "nodeContext" : "in.readUTF()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 107,
        "endColumnNumber" : 34
      },
      "nodeContext" : "path=in.readUTF()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 35
      },
      "nodeContext" : "String path=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 35
      },
      "nodeContext" : "String path=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 109,
      "startColumnNumber" : 35,
      "endLineNumber" : 109,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 109,
        "startColumnNumber" : 35,
        "endLineNumber" : 109,
        "endColumnNumber" : 47
      },
      "nodeContext" : "in.readUTF()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 48
      },
      "nodeContext" : "setAttachment(VERSION_KEY,in.readUTF())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 49
      },
      "nodeContext" : "setAttachment(VERSION_KEY,in.readUTF());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 49
      },
      "nodeContext" : "setAttachment(VERSION_KEY,in.readUTF());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 111,
      "startColumnNumber" : 22,
      "endLineNumber" : 111,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 111,
        "startColumnNumber" : 22,
        "endLineNumber" : 111,
        "endColumnNumber" : 34
      },
      "nodeContext" : "in.readUTF()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setMethodName(in.readUTF())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setMethodName(in.readUTF());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setMethodName(in.readUTF());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 113,
      "startColumnNumber" : 22,
      "endLineNumber" : 113,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 113,
        "startColumnNumber" : 22,
        "endLineNumber" : 113,
        "endColumnNumber" : 34
      },
      "nodeContext" : "in.readUTF()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 113,
        "endColumnNumber" : 34
      },
      "nodeContext" : "desc=in.readUTF()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 35
      },
      "nodeContext" : "String desc=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 35
      },
      "nodeContext" : "String desc=in.readUTF();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 143,
      "startColumnNumber" : 34,
      "endLineNumber" : 143,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 143,
        "startColumnNumber" : 34,
        "endLineNumber" : 143,
        "endColumnNumber" : 55
      },
      "nodeContext" : "in.readObject(pts[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 143,
        "endColumnNumber" : 55
      },
      "nodeContext" : "args[i]=in.readObject(pts[i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 143,
        "endColumnNumber" : 56
      },
      "nodeContext" : "args[i]=in.readObject(pts[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 142,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  args[i]=in.readObject(pts[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 142,
        "startColumnNumber" : 20,
        "endLineNumber" : 148,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  args[i]=in.readObject(pts[i]);\n}\n catch (Exception e) {\n  if (log.isWarnEnabled()) {\n    log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 141,
        "startColumnNumber" : 54,
        "endLineNumber" : 149,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    args[i]=in.readObject(pts[i]);\n  }\n catch (  Exception e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 141,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < args.length; i++) {\n  try {\n    args[i]=in.readObject(pts[i]);\n  }\n catch (  Exception e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 119,
        "startColumnNumber" : 35,
        "endLineNumber" : 150,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceRepository repository=ApplicationModel.getServiceRepository();\n  ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n  if (serviceDescriptor != null) {\n    MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n    if (methodDescriptor != null) {\n      pts=methodDescriptor.getParameterClasses();\n      this.setReturnTypes(methodDescriptor.getReturnTypes());\n    }\n  }\n  if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n    if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n      throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n    }\n    pts=ReflectUtils.desc2classArray(desc);\n  }\n  args=new Object[pts.length];\n  for (int i=0; i < args.length; i++) {\n    try {\n      args[i]=in.readObject(pts[i]);\n    }\n catch (    Exception e) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (desc.length() > 0) {\n  ServiceRepository repository=ApplicationModel.getServiceRepository();\n  ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n  if (serviceDescriptor != null) {\n    MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n    if (methodDescriptor != null) {\n      pts=methodDescriptor.getParameterClasses();\n      this.setReturnTypes(methodDescriptor.getReturnTypes());\n    }\n  }\n  if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n    if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n      throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n    }\n    pts=ReflectUtils.desc2classArray(desc);\n  }\n  args=new Object[pts.length];\n  for (int i=0; i < args.length; i++) {\n    try {\n      args[i]=in.readObject(pts[i]);\n    }\n catch (    Exception e) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2971,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n}\n finally {\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 143,
        "endColumnNumber" : 56
      },
      "nodeContext" : "args[i]=in.readObject(pts[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 153,
      "startColumnNumber" : 38,
      "endLineNumber" : 153,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 153,
        "startColumnNumber" : 38,
        "endLineNumber" : 153,
        "endColumnNumber" : 58
      },
      "nodeContext" : "in.readAttachments()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 153,
        "startColumnNumber" : 32,
        "endLineNumber" : 153,
        "endColumnNumber" : 58
      },
      "nodeContext" : "map=in.readAttachments()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 153,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Map<String,Object> map=in.readAttachments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2971,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n}\n finally {\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 153,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Map<String,Object> map=in.readAttachments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 176,
      "startColumnNumber" : 16,
      "endLineNumber" : 176,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 39
      },
      "nodeContext" : "in instanceof Cleanable",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (in instanceof Cleanable) {\n  ((Cleanable)in).cleanup();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 175,
        "startColumnNumber" : 18,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2971,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n}\n finally {\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 39
      },
      "nodeContext" : "in instanceof Cleanable",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 177,
      "startColumnNumber" : 29,
      "endLineNumber" : 177,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 177,
        "startColumnNumber" : 17,
        "endLineNumber" : 177,
        "endColumnNumber" : 31
      },
      "nodeContext" : "(Cleanable)in",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 32
      },
      "nodeContext" : "((Cleanable)in)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 42
      },
      "nodeContext" : "((Cleanable)in).cleanup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 43
      },
      "nodeContext" : "((Cleanable)in).cleanup();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 176,
        "startColumnNumber" : 41,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ((Cleanable)in).cleanup();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (in instanceof Cleanable) {\n  ((Cleanable)in).cleanup();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 175,
        "startColumnNumber" : 18,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2971,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n  Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n  if (desc.length() > 0) {\n    ServiceRepository repository=ApplicationModel.getServiceRepository();\n    ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n    if (serviceDescriptor != null) {\n      MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n      if (methodDescriptor != null) {\n        pts=methodDescriptor.getParameterClasses();\n        this.setReturnTypes(methodDescriptor.getReturnTypes());\n      }\n    }\n    if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n      if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n        throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n      }\n      pts=ReflectUtils.desc2classArray(desc);\n    }\n    args=new Object[pts.length];\n    for (int i=0; i < args.length; i++) {\n      try {\n        args[i]=in.readObject(pts[i]);\n      }\n catch (      Exception e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n        }\n      }\n    }\n  }\n  setParameterTypes(pts);\n  Map<String,Object> map=in.readAttachments();\n  if (map != null && map.size() > 0) {\n    Map<String,Object> attachment=getObjectAttachments();\n    if (attachment == null) {\n      attachment=new LinkedHashMap<>();\n    }\n    attachment.putAll(map);\n    setObjectAttachments(attachment);\n  }\n  for (int i=0; i < args.length; i++) {\n    args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n  }\n  setArguments(args);\n  String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n  setTargetServiceUniqueName(targetServiceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n}\n finally {\n  if (in instanceof Cleanable) {\n    ((Cleanable)in).cleanup();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 99,
        "startColumnNumber" : 80,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3627,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object decode(Channel channel,InputStream input) throws IOException {\n  ObjectInput in=CodecSupport.getSerialization(channel.getUrl(),serializationType).deserialize(channel.getUrl(),input);\n  String dubboVersion=in.readUTF();\n  request.setVersion(dubboVersion);\n  setAttachment(DUBBO_VERSION_KEY,dubboVersion);\n  String path=in.readUTF();\n  setAttachment(PATH_KEY,path);\n  setAttachment(VERSION_KEY,in.readUTF());\n  setMethodName(in.readUTF());\n  String desc=in.readUTF();\n  setParameterTypesDesc(desc);\n  try {\n    Object[] args=DubboCodec.EMPTY_OBJECT_ARRAY;\n    Class<?>[] pts=DubboCodec.EMPTY_CLASS_ARRAY;\n    if (desc.length() > 0) {\n      ServiceRepository repository=ApplicationModel.getServiceRepository();\n      ServiceDescriptor serviceDescriptor=repository.lookupService(path);\n      if (serviceDescriptor != null) {\n        MethodDescriptor methodDescriptor=serviceDescriptor.getMethod(getMethodName(),desc);\n        if (methodDescriptor != null) {\n          pts=methodDescriptor.getParameterClasses();\n          this.setReturnTypes(methodDescriptor.getReturnTypes());\n        }\n      }\n      if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n        if (!RpcUtils.isGenericCall(desc,getMethodName()) && !RpcUtils.isEcho(desc,getMethodName())) {\n          throw new IllegalArgumentException(\"Service not found:\" + path + \", \"+ getMethodName());\n        }\n        pts=ReflectUtils.desc2classArray(desc);\n      }\n      args=new Object[pts.length];\n      for (int i=0; i < args.length; i++) {\n        try {\n          args[i]=in.readObject(pts[i]);\n        }\n catch (        Exception e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Decode argument failed: \" + e.getMessage(),e);\n          }\n        }\n      }\n    }\n    setParameterTypes(pts);\n    Map<String,Object> map=in.readAttachments();\n    if (map != null && map.size() > 0) {\n      Map<String,Object> attachment=getObjectAttachments();\n      if (attachment == null) {\n        attachment=new LinkedHashMap<>();\n      }\n      attachment.putAll(map);\n      setObjectAttachments(attachment);\n    }\n    for (int i=0; i < args.length; i++) {\n      args[i]=decodeInvocationArgument(channel,this,pts,i,args[i]);\n    }\n    setArguments(args);\n    String targetServiceName=buildKey((String)getAttachment(PATH_KEY),getAttachment(GROUP_KEY),getAttachment(VERSION_KEY));\n    setTargetServiceUniqueName(targetServiceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(StringUtils.toString(\"Read invocation data failed.\",e));\n  }\n finally {\n    if (in instanceof Cleanable) {\n      ((Cleanable)in).cleanup();\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 422,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 43
      },
      "nodeContext" : "((Cleanable)in).cleanup();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.serialize.ObjectInput"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 103,
    "startColumnNumber" : 30,
    "endLineNumber" : 103,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 107,
    "startColumnNumber" : 22,
    "endLineNumber" : 107,
    "endColumnNumber" : 24
  }, {
    "charLength" : 2,
    "startLineNumber" : 109,
    "startColumnNumber" : 35,
    "endLineNumber" : 109,
    "endColumnNumber" : 37
  }, {
    "charLength" : 2,
    "startLineNumber" : 111,
    "startColumnNumber" : 22,
    "endLineNumber" : 111,
    "endColumnNumber" : 24
  }, {
    "charLength" : 2,
    "startLineNumber" : 113,
    "startColumnNumber" : 22,
    "endLineNumber" : 113,
    "endColumnNumber" : 24
  }, {
    "charLength" : 2,
    "startLineNumber" : 143,
    "startColumnNumber" : 34,
    "endLineNumber" : 143,
    "endColumnNumber" : 36
  }, {
    "charLength" : 2,
    "startLineNumber" : 153,
    "startColumnNumber" : 38,
    "endLineNumber" : 153,
    "endColumnNumber" : 40
  }, {
    "charLength" : 2,
    "startLineNumber" : 176,
    "startColumnNumber" : 16,
    "endLineNumber" : 176,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 177,
    "startColumnNumber" : 29,
    "endLineNumber" : 177,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  } ]
}