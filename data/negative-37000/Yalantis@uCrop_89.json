{
  "id" : 89,
  "expression" : "e",
  "projectName" : "Yalantis@uCrop",
  "commitID" : "ef97e61117643633993cb2d7932f667da031d2bc",
  "filePath" : "/ucrop/src/main/java/com/yalantis/ucrop/util/ImageHeaderParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 420,
      "startColumnNumber" : 23,
      "endLineNumber" : 420,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 420,
        "startColumnNumber" : 23,
        "endLineNumber" : 420,
        "endColumnNumber" : 37
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 420,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Log.d(TAG,e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 420,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Log.d(TAG,e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 419,
        "startColumnNumber" : 32,
        "endLineNumber" : 421,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.d(TAG,e.getMessage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 419,
        "startColumnNumber" : 10,
        "endLineNumber" : 421,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  Log.d(TAG,e.getMessage());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 728,
        "startLineNumber" : 404,
        "startColumnNumber" : 8,
        "endLineNumber" : 421,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ExifInterface newExif=new ExifInterface(imageOutputPath);\n  String value;\n  for (  String attribute : attributes) {\n    value=originalExif.getAttribute(attribute);\n    if (!TextUtils.isEmpty(value)) {\n      newExif.setAttribute(attribute,value);\n    }\n  }\n  newExif.setAttribute(ExifInterface.TAG_IMAGE_WIDTH,String.valueOf(width));\n  newExif.setAttribute(ExifInterface.TAG_IMAGE_LENGTH,String.valueOf(height));\n  newExif.setAttribute(ExifInterface.TAG_ORIENTATION,\"0\");\n  newExif.saveAttributes();\n}\n catch (IOException e) {\n  Log.d(TAG,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1886,
        "startLineNumber" : 378,
        "startColumnNumber" : 107,
        "endLineNumber" : 422,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] attributes=new String[]{ExifInterface.TAG_F_NUMBER,ExifInterface.TAG_DATETIME,ExifInterface.TAG_DATETIME_DIGITIZED,ExifInterface.TAG_EXPOSURE_TIME,ExifInterface.TAG_FLASH,ExifInterface.TAG_FOCAL_LENGTH,ExifInterface.TAG_GPS_ALTITUDE,ExifInterface.TAG_GPS_ALTITUDE_REF,ExifInterface.TAG_GPS_DATESTAMP,ExifInterface.TAG_GPS_LATITUDE,ExifInterface.TAG_GPS_LATITUDE_REF,ExifInterface.TAG_GPS_LONGITUDE,ExifInterface.TAG_GPS_LONGITUDE_REF,ExifInterface.TAG_GPS_PROCESSING_METHOD,ExifInterface.TAG_GPS_TIMESTAMP,ExifInterface.TAG_PHOTOGRAPHIC_SENSITIVITY,ExifInterface.TAG_MAKE,ExifInterface.TAG_MODEL,ExifInterface.TAG_SUBSEC_TIME,ExifInterface.TAG_SUBSEC_TIME_DIGITIZED,ExifInterface.TAG_SUBSEC_TIME_ORIGINAL,ExifInterface.TAG_WHITE_BALANCE};\n  try {\n    ExifInterface newExif=new ExifInterface(imageOutputPath);\n    String value;\n    for (    String attribute : attributes) {\n      value=originalExif.getAttribute(attribute);\n      if (!TextUtils.isEmpty(value)) {\n        newExif.setAttribute(attribute,value);\n      }\n    }\n    newExif.setAttribute(ExifInterface.TAG_IMAGE_WIDTH,String.valueOf(width));\n    newExif.setAttribute(ExifInterface.TAG_IMAGE_LENGTH,String.valueOf(height));\n    newExif.setAttribute(ExifInterface.TAG_ORIENTATION,\"0\");\n    newExif.saveAttributes();\n  }\n catch (  IOException e) {\n    Log.d(TAG,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1989,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 422,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void copyExif(ExifInterface originalExif,int width,int height,String imageOutputPath){\n  String[] attributes=new String[]{ExifInterface.TAG_F_NUMBER,ExifInterface.TAG_DATETIME,ExifInterface.TAG_DATETIME_DIGITIZED,ExifInterface.TAG_EXPOSURE_TIME,ExifInterface.TAG_FLASH,ExifInterface.TAG_FOCAL_LENGTH,ExifInterface.TAG_GPS_ALTITUDE,ExifInterface.TAG_GPS_ALTITUDE_REF,ExifInterface.TAG_GPS_DATESTAMP,ExifInterface.TAG_GPS_LATITUDE,ExifInterface.TAG_GPS_LATITUDE_REF,ExifInterface.TAG_GPS_LONGITUDE,ExifInterface.TAG_GPS_LONGITUDE_REF,ExifInterface.TAG_GPS_PROCESSING_METHOD,ExifInterface.TAG_GPS_TIMESTAMP,ExifInterface.TAG_PHOTOGRAPHIC_SENSITIVITY,ExifInterface.TAG_MAKE,ExifInterface.TAG_MODEL,ExifInterface.TAG_SUBSEC_TIME,ExifInterface.TAG_SUBSEC_TIME_DIGITIZED,ExifInterface.TAG_SUBSEC_TIME_ORIGINAL,ExifInterface.TAG_WHITE_BALANCE};\n  try {\n    ExifInterface newExif=new ExifInterface(imageOutputPath);\n    String value;\n    for (    String attribute : attributes) {\n      value=originalExif.getAttribute(attribute);\n      if (!TextUtils.isEmpty(value)) {\n        newExif.setAttribute(attribute,value);\n      }\n    }\n    newExif.setAttribute(ExifInterface.TAG_IMAGE_WIDTH,String.valueOf(width));\n    newExif.setAttribute(ExifInterface.TAG_IMAGE_LENGTH,String.valueOf(height));\n    newExif.setAttribute(ExifInterface.TAG_ORIENTATION,\"0\");\n    newExif.saveAttributes();\n  }\n catch (  IOException e) {\n    Log.d(TAG,e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 190,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 420,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Log.d(TAG,e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 420,
    "startColumnNumber" : 23,
    "endLineNumber" : 420,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}