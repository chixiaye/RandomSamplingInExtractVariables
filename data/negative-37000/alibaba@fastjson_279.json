{
  "id" : 279,
  "expression" : "(T)obj",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(T)obj",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 243,
      "startColumnNumber" : 23,
      "endLineNumber" : 243,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 243,
        "startColumnNumber" : 16,
        "endLineNumber" : 243,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return (T)obj;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 242,
        "startColumnNumber" : 41,
        "endLineNumber" : 244,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  return (T)obj;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (obj instanceof Calendar) {\n  return (T)obj;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 241,
        "startColumnNumber" : 37,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (obj instanceof Calendar) {\n    return (T)obj;\n  }\n  Date date=(Date)obj;\n  if (date == null) {\n    return null;\n  }\n  Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n  calendar.setTime(date);\n  return (T)calendar;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 241,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (clazz == Calendar.class) {\n  if (obj instanceof Calendar) {\n    return (T)obj;\n  }\n  Date date=(Date)obj;\n  if (date == null) {\n    return null;\n  }\n  Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n  calendar.setTime(date);\n  return (T)calendar;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 153,
        "startColumnNumber" : 84,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONLexer lexer=parser.lexer;\n  Object val;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_STRING) {\n    String strVal=lexer.stringVal();\n    val=strVal;\n    lexer.nextToken(JSONToken.COMMA);\n    if ((lexer.features & Feature.AllowISO8601DateFormat.mask) != 0) {\n      JSONLexer iso8601Lexer=new JSONLexer(strVal);\n      if (iso8601Lexer.scanISO8601DateIfMatch(true)) {\n        Calendar calendar=iso8601Lexer.getCalendar();\n        if (clazz == Calendar.class) {\n          iso8601Lexer.close();\n          return (T)calendar;\n        }\n        val=calendar.getTime();\n      }\n      iso8601Lexer.close();\n    }\n  }\n else   if (token == JSONToken.NULL) {\n    lexer.nextToken();\n    val=null;\n  }\n else   if (token == JSONToken.LBRACE) {\n    lexer.nextToken();\n    String key;\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      key=lexer.stringVal();\n      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n        lexer.nextToken();\n        parser.accept(JSONToken.COLON);\n        String typeName=lexer.stringVal();\n        Class<?> type=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (type != null) {\n          clazz=type;\n        }\n        parser.accept(JSONToken.LITERAL_STRING);\n        parser.accept(JSONToken.COMMA);\n      }\n      lexer.nextTokenWithChar(':');\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    long timeMillis;\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      timeMillis=lexer.longValue();\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error : \" + lexer.tokenName());\n    }\n    val=timeMillis;\n    parser.accept(JSONToken.RBRACE);\n  }\n else   if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n    parser.accept(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      if (!\"val\".equals(lexer.stringVal())) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    parser.accept(JSONToken.COLON);\n    val=parser.parse();\n    parser.accept(JSONToken.RBRACE);\n  }\n else {\n    val=parser.parse();\n  }\n  Object obj=cast(parser,clazz,fieldName,val);\n  if (clazz == Calendar.class) {\n    if (obj instanceof Calendar) {\n      return (T)obj;\n    }\n    Date date=(Date)obj;\n    if (date == null) {\n      return null;\n    }\n    Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  return (T)obj;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3886,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  JSONLexer lexer=parser.lexer;\n  Object val;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_STRING) {\n    String strVal=lexer.stringVal();\n    val=strVal;\n    lexer.nextToken(JSONToken.COMMA);\n    if ((lexer.features & Feature.AllowISO8601DateFormat.mask) != 0) {\n      JSONLexer iso8601Lexer=new JSONLexer(strVal);\n      if (iso8601Lexer.scanISO8601DateIfMatch(true)) {\n        Calendar calendar=iso8601Lexer.getCalendar();\n        if (clazz == Calendar.class) {\n          iso8601Lexer.close();\n          return (T)calendar;\n        }\n        val=calendar.getTime();\n      }\n      iso8601Lexer.close();\n    }\n  }\n else   if (token == JSONToken.NULL) {\n    lexer.nextToken();\n    val=null;\n  }\n else   if (token == JSONToken.LBRACE) {\n    lexer.nextToken();\n    String key;\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      key=lexer.stringVal();\n      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n        lexer.nextToken();\n        parser.accept(JSONToken.COLON);\n        String typeName=lexer.stringVal();\n        Class<?> type=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (type != null) {\n          clazz=type;\n        }\n        parser.accept(JSONToken.LITERAL_STRING);\n        parser.accept(JSONToken.COMMA);\n      }\n      lexer.nextTokenWithChar(':');\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    long timeMillis;\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      timeMillis=lexer.longValue();\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error : \" + lexer.tokenName());\n    }\n    val=timeMillis;\n    parser.accept(JSONToken.RBRACE);\n  }\n else   if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n    parser.accept(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      if (!\"val\".equals(lexer.stringVal())) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    parser.accept(JSONToken.COLON);\n    val=parser.parse();\n    parser.accept(JSONToken.RBRACE);\n  }\n else {\n    val=parser.parse();\n  }\n  Object obj=cast(parser,clazz,fieldName,val);\n  if (clazz == Calendar.class) {\n    if (obj instanceof Calendar) {\n      return (T)obj;\n    }\n    Date date=(Date)obj;\n    if (date == null) {\n      return null;\n    }\n    Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  return (T)obj;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 477,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 243,
        "startColumnNumber" : 16,
        "endLineNumber" : 243,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return (T)obj;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "T"
  }, {
    "nodeContext" : "(T)obj",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 256,
      "startColumnNumber" : 15,
      "endLineNumber" : 256,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 256,
        "startColumnNumber" : 8,
        "endLineNumber" : 256,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return (T)obj;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 153,
        "startColumnNumber" : 84,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONLexer lexer=parser.lexer;\n  Object val;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_STRING) {\n    String strVal=lexer.stringVal();\n    val=strVal;\n    lexer.nextToken(JSONToken.COMMA);\n    if ((lexer.features & Feature.AllowISO8601DateFormat.mask) != 0) {\n      JSONLexer iso8601Lexer=new JSONLexer(strVal);\n      if (iso8601Lexer.scanISO8601DateIfMatch(true)) {\n        Calendar calendar=iso8601Lexer.getCalendar();\n        if (clazz == Calendar.class) {\n          iso8601Lexer.close();\n          return (T)calendar;\n        }\n        val=calendar.getTime();\n      }\n      iso8601Lexer.close();\n    }\n  }\n else   if (token == JSONToken.NULL) {\n    lexer.nextToken();\n    val=null;\n  }\n else   if (token == JSONToken.LBRACE) {\n    lexer.nextToken();\n    String key;\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      key=lexer.stringVal();\n      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n        lexer.nextToken();\n        parser.accept(JSONToken.COLON);\n        String typeName=lexer.stringVal();\n        Class<?> type=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (type != null) {\n          clazz=type;\n        }\n        parser.accept(JSONToken.LITERAL_STRING);\n        parser.accept(JSONToken.COMMA);\n      }\n      lexer.nextTokenWithChar(':');\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    long timeMillis;\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      timeMillis=lexer.longValue();\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error : \" + lexer.tokenName());\n    }\n    val=timeMillis;\n    parser.accept(JSONToken.RBRACE);\n  }\n else   if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n    parser.accept(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      if (!\"val\".equals(lexer.stringVal())) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    parser.accept(JSONToken.COLON);\n    val=parser.parse();\n    parser.accept(JSONToken.RBRACE);\n  }\n else {\n    val=parser.parse();\n  }\n  Object obj=cast(parser,clazz,fieldName,val);\n  if (clazz == Calendar.class) {\n    if (obj instanceof Calendar) {\n      return (T)obj;\n    }\n    Date date=(Date)obj;\n    if (date == null) {\n      return null;\n    }\n    Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  return (T)obj;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3886,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  JSONLexer lexer=parser.lexer;\n  Object val;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (token == JSONToken.LITERAL_STRING) {\n    String strVal=lexer.stringVal();\n    val=strVal;\n    lexer.nextToken(JSONToken.COMMA);\n    if ((lexer.features & Feature.AllowISO8601DateFormat.mask) != 0) {\n      JSONLexer iso8601Lexer=new JSONLexer(strVal);\n      if (iso8601Lexer.scanISO8601DateIfMatch(true)) {\n        Calendar calendar=iso8601Lexer.getCalendar();\n        if (clazz == Calendar.class) {\n          iso8601Lexer.close();\n          return (T)calendar;\n        }\n        val=calendar.getTime();\n      }\n      iso8601Lexer.close();\n    }\n  }\n else   if (token == JSONToken.NULL) {\n    lexer.nextToken();\n    val=null;\n  }\n else   if (token == JSONToken.LBRACE) {\n    lexer.nextToken();\n    String key;\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      key=lexer.stringVal();\n      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n        lexer.nextToken();\n        parser.accept(JSONToken.COLON);\n        String typeName=lexer.stringVal();\n        Class<?> type=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (type != null) {\n          clazz=type;\n        }\n        parser.accept(JSONToken.LITERAL_STRING);\n        parser.accept(JSONToken.COMMA);\n      }\n      lexer.nextTokenWithChar(':');\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    long timeMillis;\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      timeMillis=lexer.longValue();\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error : \" + lexer.tokenName());\n    }\n    val=timeMillis;\n    parser.accept(JSONToken.RBRACE);\n  }\n else   if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n    parser.accept(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      if (!\"val\".equals(lexer.stringVal())) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    parser.accept(JSONToken.COLON);\n    val=parser.parse();\n    parser.accept(JSONToken.RBRACE);\n  }\n else {\n    val=parser.parse();\n  }\n  Object obj=cast(parser,clazz,fieldName,val);\n  if (clazz == Calendar.class) {\n    if (obj instanceof Calendar) {\n      return (T)obj;\n    }\n    Date date=(Date)obj;\n    if (date == null) {\n      return null;\n    }\n    Calendar calendar=Calendar.getInstance(lexer.timeZone,lexer.locale);\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  return (T)obj;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 477,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 256,
        "startColumnNumber" : 8,
        "endLineNumber" : 256,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return (T)obj;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "T"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 243,
    "startColumnNumber" : 23,
    "endLineNumber" : 243,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 256,
    "startColumnNumber" : 15,
    "endLineNumber" : 256,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}