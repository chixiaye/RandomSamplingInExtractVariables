{
  "id" : 72,
  "expression" : "newFiles.get(currFile)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/launcher/commands/Watcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newFiles.get(currFile)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 133,
      "startColumnNumber" : 23,
      "endLineNumber" : 133,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 133,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 45
      },
      "nodeContext" : "newFile=newFiles.get(currFile)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 46
      },
      "nodeContext" : "File newFile=newFiles.get(currFile);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 130,
        "startColumnNumber" : 94,
        "endLineNumber" : 153,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  File currFile=currentEntry.getKey();\n  FileInfo currInfo=currentEntry.getValue();\n  File newFile=newFiles.get(currFile);\n  if (newFile == null) {\n    currentFileMap.remove(currFile);\n    if (currentFileMap.isEmpty()) {\n      fileMap.remove(toWatch);\n      filesToWatch.remove(toWatch);\n    }\n    LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n    if (match(currFile)) {\n      changed=true;\n    }\n  }\n else   if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n    currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n    LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n    if (match(currFile)) {\n      changed=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 130,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<File,FileInfo> currentEntry : new HashMap<>(currentFileMap).entrySet()) {\n  File currFile=currentEntry.getKey();\n  FileInfo currInfo=currentEntry.getValue();\n  File newFile=newFiles.get(currFile);\n  if (newFile == null) {\n    currentFileMap.remove(currFile);\n    if (currentFileMap.isEmpty()) {\n      fileMap.remove(toWatch);\n      filesToWatch.remove(toWatch);\n    }\n    LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n    if (match(currFile)) {\n      changed=true;\n    }\n  }\n else   if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n    currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n    LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n    if (match(currFile)) {\n      changed=true;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 109,
        "startColumnNumber" : 53,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<File,File> newFiles=new HashMap<>();\n  if (toWatch.isDirectory()) {\n    File[] files=toWatch.exists() ? toWatch.listFiles() : new File[]{};\n    if (files == null) {\n      throw new IllegalStateException(\"Cannot scan the file system to detect file changes\");\n    }\n    for (    File file : files) {\n      newFiles.put(file,file);\n    }\n  }\n else {\n    newFiles.put(toWatch,toWatch);\n  }\n  Map<File,FileInfo> currentFileMap=fileMap.get(toWatch);\n  for (  Map.Entry<File,FileInfo> currentEntry : new HashMap<>(currentFileMap).entrySet()) {\n    File currFile=currentEntry.getKey();\n    FileInfo currInfo=currentEntry.getValue();\n    File newFile=newFiles.get(currFile);\n    if (newFile == null) {\n      currentFileMap.remove(currFile);\n      if (currentFileMap.isEmpty()) {\n        fileMap.remove(toWatch);\n        filesToWatch.remove(toWatch);\n      }\n      LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n      if (match(currFile)) {\n        changed=true;\n      }\n    }\n else     if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n      currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n      LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n      if (match(currFile)) {\n        changed=true;\n      }\n    }\n  }\n  for (  File newFile : newFiles.keySet()) {\n    if (!currentFileMap.containsKey(newFile)) {\n      currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n      if (newFile.isDirectory()) {\n        addFileToWatch(newFile);\n      }\n      LOGGER.trace(\"File was added: \" + newFile);\n      if (match(newFile)) {\n        changed=true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2237,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (File toWatch : new HashSet<>(filesToWatch)) {\n  Map<File,File> newFiles=new HashMap<>();\n  if (toWatch.isDirectory()) {\n    File[] files=toWatch.exists() ? toWatch.listFiles() : new File[]{};\n    if (files == null) {\n      throw new IllegalStateException(\"Cannot scan the file system to detect file changes\");\n    }\n    for (    File file : files) {\n      newFiles.put(file,file);\n    }\n  }\n else {\n    newFiles.put(toWatch,toWatch);\n  }\n  Map<File,FileInfo> currentFileMap=fileMap.get(toWatch);\n  for (  Map.Entry<File,FileInfo> currentEntry : new HashMap<>(currentFileMap).entrySet()) {\n    File currFile=currentEntry.getKey();\n    FileInfo currInfo=currentEntry.getValue();\n    File newFile=newFiles.get(currFile);\n    if (newFile == null) {\n      currentFileMap.remove(currFile);\n      if (currentFileMap.isEmpty()) {\n        fileMap.remove(toWatch);\n        filesToWatch.remove(toWatch);\n      }\n      LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n      if (match(currFile)) {\n        changed=true;\n      }\n    }\n else     if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n      currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n      LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n      if (match(currFile)) {\n        changed=true;\n      }\n    }\n  }\n  for (  File newFile : newFiles.keySet()) {\n    if (!currentFileMap.containsKey(newFile)) {\n      currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n      if (newFile.isDirectory()) {\n        addFileToWatch(newFile);\n      }\n      LOGGER.trace(\"File was added: \" + newFile);\n      if (match(newFile)) {\n        changed=true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 284,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2501,
        "startLineNumber" : 106,
        "startColumnNumber" : 40,
        "endLineNumber" : 182,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean changed=false;\n  for (  File toWatch : new HashSet<>(filesToWatch)) {\n    Map<File,File> newFiles=new HashMap<>();\n    if (toWatch.isDirectory()) {\n      File[] files=toWatch.exists() ? toWatch.listFiles() : new File[]{};\n      if (files == null) {\n        throw new IllegalStateException(\"Cannot scan the file system to detect file changes\");\n      }\n      for (      File file : files) {\n        newFiles.put(file,file);\n      }\n    }\n else {\n      newFiles.put(toWatch,toWatch);\n    }\n    Map<File,FileInfo> currentFileMap=fileMap.get(toWatch);\n    for (    Map.Entry<File,FileInfo> currentEntry : new HashMap<>(currentFileMap).entrySet()) {\n      File currFile=currentEntry.getKey();\n      FileInfo currInfo=currentEntry.getValue();\n      File newFile=newFiles.get(currFile);\n      if (newFile == null) {\n        currentFileMap.remove(currFile);\n        if (currentFileMap.isEmpty()) {\n          fileMap.remove(toWatch);\n          filesToWatch.remove(toWatch);\n        }\n        LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n        if (match(currFile)) {\n          changed=true;\n        }\n      }\n else       if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n        currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n        LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n        if (match(currFile)) {\n          changed=true;\n        }\n      }\n    }\n    for (    File newFile : newFiles.keySet()) {\n      if (!currentFileMap.containsKey(newFile)) {\n        currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n        if (newFile.isDirectory()) {\n          addFileToWatch(newFile);\n        }\n        LOGGER.trace(\"File was added: \" + newFile);\n        if (match(newFile)) {\n          changed=true;\n        }\n      }\n    }\n  }\n  long now=System.currentTimeMillis();\n  if (changed) {\n    lastChange=now;\n  }\n  if (lastChange != -1 && now - lastChange >= gracePeriod) {\n    lastChange=-1;\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean changesHaveOccurred(){\n  boolean changed=false;\n  for (  File toWatch : new HashSet<>(filesToWatch)) {\n    Map<File,File> newFiles=new HashMap<>();\n    if (toWatch.isDirectory()) {\n      File[] files=toWatch.exists() ? toWatch.listFiles() : new File[]{};\n      if (files == null) {\n        throw new IllegalStateException(\"Cannot scan the file system to detect file changes\");\n      }\n      for (      File file : files) {\n        newFiles.put(file,file);\n      }\n    }\n else {\n      newFiles.put(toWatch,toWatch);\n    }\n    Map<File,FileInfo> currentFileMap=fileMap.get(toWatch);\n    for (    Map.Entry<File,FileInfo> currentEntry : new HashMap<>(currentFileMap).entrySet()) {\n      File currFile=currentEntry.getKey();\n      FileInfo currInfo=currentEntry.getValue();\n      File newFile=newFiles.get(currFile);\n      if (newFile == null) {\n        currentFileMap.remove(currFile);\n        if (currentFileMap.isEmpty()) {\n          fileMap.remove(toWatch);\n          filesToWatch.remove(toWatch);\n        }\n        LOGGER.trace(\"File: \" + currFile + \" has been deleted\");\n        if (match(currFile)) {\n          changed=true;\n        }\n      }\n else       if (newFile.lastModified() != currInfo.lastModified || newFile.length() != currInfo.length) {\n        currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n        LOGGER.trace(\"File: \" + currFile + \" has been modified\");\n        if (match(currFile)) {\n          changed=true;\n        }\n      }\n    }\n    for (    File newFile : newFiles.keySet()) {\n      if (!currentFileMap.containsKey(newFile)) {\n        currentFileMap.put(newFile,new FileInfo(newFile.lastModified(),newFile.length()));\n        if (newFile.isDirectory()) {\n          addFileToWatch(newFile);\n        }\n        LOGGER.trace(\"File was added: \" + newFile);\n        if (match(newFile)) {\n          changed=true;\n        }\n      }\n    }\n  }\n  long now=System.currentTimeMillis();\n  if (changed) {\n    lastChange=now;\n  }\n  if (lastChange != -1 && now - lastChange >= gracePeriod) {\n    lastChange=-1;\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 46
      },
      "nodeContext" : "File newFile=newFiles.get(currFile);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 133,
    "startColumnNumber" : 23,
    "endLineNumber" : 133,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}