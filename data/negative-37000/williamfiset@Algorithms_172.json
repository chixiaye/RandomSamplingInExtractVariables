{
  "id" : 172,
  "expression" : "cost == null",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cost == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 174,
      "startColumnNumber" : 8,
      "endLineNumber" : 174,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cost == null) {\n  System.out.println(\"No MST does not exists\");\n}\n else {\n  System.out.println(\"MST cost: \" + cost);\n  for (  Edge e : solver.getMst()) {\n    System.out.println(String.format(\"from: %d, to: %d, cost: %d\",e.from,e.to,e.cost));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1406,
        "startLineNumber" : 148,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,5);\n  addUndirectedEdge(g,1,2,4);\n  addUndirectedEdge(g,2,9,2);\n  addUndirectedEdge(g,0,4,1);\n  addUndirectedEdge(g,0,3,4);\n  addUndirectedEdge(g,1,3,2);\n  addUndirectedEdge(g,2,7,4);\n  addUndirectedEdge(g,2,8,1);\n  addUndirectedEdge(g,9,8,0);\n  addUndirectedEdge(g,4,5,1);\n  addUndirectedEdge(g,5,6,7);\n  addUndirectedEdge(g,6,8,4);\n  addUndirectedEdge(g,4,3,2);\n  addUndirectedEdge(g,5,3,5);\n  addUndirectedEdge(g,3,6,11);\n  addUndirectedEdge(g,6,7,1);\n  addUndirectedEdge(g,3,7,2);\n  addUndirectedEdge(g,7,8,6);\n  EagerPrimsAdjacencyList solver=new EagerPrimsAdjacencyList(g);\n  Long cost=solver.getMstCost();\n  if (cost == null) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + cost);\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"from: %d, to: %d, cost: %d\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1437,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void example1(){\n  int n=10;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,5);\n  addUndirectedEdge(g,1,2,4);\n  addUndirectedEdge(g,2,9,2);\n  addUndirectedEdge(g,0,4,1);\n  addUndirectedEdge(g,0,3,4);\n  addUndirectedEdge(g,1,3,2);\n  addUndirectedEdge(g,2,7,4);\n  addUndirectedEdge(g,2,8,1);\n  addUndirectedEdge(g,9,8,0);\n  addUndirectedEdge(g,4,5,1);\n  addUndirectedEdge(g,5,6,7);\n  addUndirectedEdge(g,6,8,4);\n  addUndirectedEdge(g,4,3,2);\n  addUndirectedEdge(g,5,3,5);\n  addUndirectedEdge(g,3,6,11);\n  addUndirectedEdge(g,6,7,1);\n  addUndirectedEdge(g,3,7,2);\n  addUndirectedEdge(g,7,8,6);\n  EagerPrimsAdjacencyList solver=new EagerPrimsAdjacencyList(g);\n  Long cost=solver.getMstCost();\n  if (cost == null) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + cost);\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"from: %d, to: %d, cost: %d\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cost == null) {\n  System.out.println(\"No MST does not exists\");\n}\n else {\n  System.out.println(\"MST cost: \" + cost);\n  for (  Edge e : solver.getMst()) {\n    System.out.println(String.format(\"from: %d, to: %d, cost: %d\",e.from,e.to,e.cost));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 174,
    "startColumnNumber" : 8,
    "endLineNumber" : 174,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}