{
  "id" : 301,
  "expression" : "threadSnapshotQueryDAO",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "threadSnapshotQueryDAO",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 101,
      "startColumnNumber" : 26,
      "endLineNumber" : 101,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 101,
        "startColumnNumber" : 26,
        "endLineNumber" : 101,
        "endColumnNumber" : 96
      },
      "nodeContext" : "threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 96
      },
      "nodeContext" : "minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2306,
        "startLineNumber" : 67,
        "startColumnNumber" : 107,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProfiledBasicInfo data=new ProfiledBasicInfo();\n  data.setConfig(config);\n  ProfileTaskQueryService taskQueryService=manager.find(CoreModule.NAME).provider().getService(ProfileTaskQueryService.class);\n  TraceQueryService traceQueryService=manager.find(CoreModule.NAME).provider().getService(TraceQueryService.class);\n  IProfileThreadSnapshotQueryDAO threadSnapshotQueryDAO=manager.find(StorageModule.NAME).provider().getService(IProfileThreadSnapshotQueryDAO.class);\n  List<BasicTrace> taskTraces=taskQueryService.getTaskTraces(config.getTaskId());\n  BasicTrace profiledTrace=taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n  if (profiledTrace == null) {\n    throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId() + \", segment id: \"+ config.getTraceId()+ \", current task total profiled trace count is \"+ taskTraces.size());\n  }\n  String segmentId=profiledTrace.getSegmentId();\n  long startTime=Long.parseLong(profiledTrace.getStart());\n  long endTime=startTime + profiledTrace.getDuration();\n  data.setSegmentId(segmentId);\n  data.setSegmentStartTime(startTime);\n  data.setSegmentEndTime(endTime);\n  data.setDuration(profiledTrace.getDuration());\n  Trace trace=traceQueryService.queryTrace(config.getTraceId());\n  List<Span> profiledSegmentSpans=trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(),segmentId)).collect(Collectors.toList());\n  if (CollectionUtils.isEmpty(profiledSegmentSpans)) {\n    throw new IllegalArgumentException(\"Current segment cannot found any span\");\n  }\n  data.setProfiledSegmentSpans(profiledSegmentSpans);\n  int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n  int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n  data.setMinSequence(minSequence);\n  data.setMaxSequence(maxSequence);\n  return data;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2473,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * reading data from storage and build data\n */\npublic static ProfiledBasicInfo build(ExporterConfig config,ModuleManager manager) throws IOException {\n  ProfiledBasicInfo data=new ProfiledBasicInfo();\n  data.setConfig(config);\n  ProfileTaskQueryService taskQueryService=manager.find(CoreModule.NAME).provider().getService(ProfileTaskQueryService.class);\n  TraceQueryService traceQueryService=manager.find(CoreModule.NAME).provider().getService(TraceQueryService.class);\n  IProfileThreadSnapshotQueryDAO threadSnapshotQueryDAO=manager.find(StorageModule.NAME).provider().getService(IProfileThreadSnapshotQueryDAO.class);\n  List<BasicTrace> taskTraces=taskQueryService.getTaskTraces(config.getTaskId());\n  BasicTrace profiledTrace=taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n  if (profiledTrace == null) {\n    throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId() + \", segment id: \"+ config.getTraceId()+ \", current task total profiled trace count is \"+ taskTraces.size());\n  }\n  String segmentId=profiledTrace.getSegmentId();\n  long startTime=Long.parseLong(profiledTrace.getStart());\n  long endTime=startTime + profiledTrace.getDuration();\n  data.setSegmentId(segmentId);\n  data.setSegmentStartTime(startTime);\n  data.setSegmentEndTime(endTime);\n  data.setDuration(profiledTrace.getDuration());\n  Trace trace=traceQueryService.queryTrace(config.getTraceId());\n  List<Span> profiledSegmentSpans=trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(),segmentId)).collect(Collectors.toList());\n  if (CollectionUtils.isEmpty(profiledSegmentSpans)) {\n    throw new IllegalArgumentException(\"Current segment cannot found any span\");\n  }\n  data.setProfiledSegmentSpans(profiledSegmentSpans);\n  int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n  int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n  data.setMinSequence(minSequence);\n  data.setMaxSequence(maxSequence);\n  return data;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO"
  }, {
    "nodeContext" : "threadSnapshotQueryDAO",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 102,
      "startColumnNumber" : 26,
      "endLineNumber" : 102,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 102,
        "startColumnNumber" : 26,
        "endLineNumber" : 102,
        "endColumnNumber" : 96
      },
      "nodeContext" : "threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 96
      },
      "nodeContext" : "maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2306,
        "startLineNumber" : 67,
        "startColumnNumber" : 107,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProfiledBasicInfo data=new ProfiledBasicInfo();\n  data.setConfig(config);\n  ProfileTaskQueryService taskQueryService=manager.find(CoreModule.NAME).provider().getService(ProfileTaskQueryService.class);\n  TraceQueryService traceQueryService=manager.find(CoreModule.NAME).provider().getService(TraceQueryService.class);\n  IProfileThreadSnapshotQueryDAO threadSnapshotQueryDAO=manager.find(StorageModule.NAME).provider().getService(IProfileThreadSnapshotQueryDAO.class);\n  List<BasicTrace> taskTraces=taskQueryService.getTaskTraces(config.getTaskId());\n  BasicTrace profiledTrace=taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n  if (profiledTrace == null) {\n    throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId() + \", segment id: \"+ config.getTraceId()+ \", current task total profiled trace count is \"+ taskTraces.size());\n  }\n  String segmentId=profiledTrace.getSegmentId();\n  long startTime=Long.parseLong(profiledTrace.getStart());\n  long endTime=startTime + profiledTrace.getDuration();\n  data.setSegmentId(segmentId);\n  data.setSegmentStartTime(startTime);\n  data.setSegmentEndTime(endTime);\n  data.setDuration(profiledTrace.getDuration());\n  Trace trace=traceQueryService.queryTrace(config.getTraceId());\n  List<Span> profiledSegmentSpans=trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(),segmentId)).collect(Collectors.toList());\n  if (CollectionUtils.isEmpty(profiledSegmentSpans)) {\n    throw new IllegalArgumentException(\"Current segment cannot found any span\");\n  }\n  data.setProfiledSegmentSpans(profiledSegmentSpans);\n  int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n  int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n  data.setMinSequence(minSequence);\n  data.setMaxSequence(maxSequence);\n  return data;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2473,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * reading data from storage and build data\n */\npublic static ProfiledBasicInfo build(ExporterConfig config,ModuleManager manager) throws IOException {\n  ProfiledBasicInfo data=new ProfiledBasicInfo();\n  data.setConfig(config);\n  ProfileTaskQueryService taskQueryService=manager.find(CoreModule.NAME).provider().getService(ProfileTaskQueryService.class);\n  TraceQueryService traceQueryService=manager.find(CoreModule.NAME).provider().getService(TraceQueryService.class);\n  IProfileThreadSnapshotQueryDAO threadSnapshotQueryDAO=manager.find(StorageModule.NAME).provider().getService(IProfileThreadSnapshotQueryDAO.class);\n  List<BasicTrace> taskTraces=taskQueryService.getTaskTraces(config.getTaskId());\n  BasicTrace profiledTrace=taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n  if (profiledTrace == null) {\n    throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId() + \", segment id: \"+ config.getTraceId()+ \", current task total profiled trace count is \"+ taskTraces.size());\n  }\n  String segmentId=profiledTrace.getSegmentId();\n  long startTime=Long.parseLong(profiledTrace.getStart());\n  long endTime=startTime + profiledTrace.getDuration();\n  data.setSegmentId(segmentId);\n  data.setSegmentStartTime(startTime);\n  data.setSegmentEndTime(endTime);\n  data.setDuration(profiledTrace.getDuration());\n  Trace trace=traceQueryService.queryTrace(config.getTraceId());\n  List<Span> profiledSegmentSpans=trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(),segmentId)).collect(Collectors.toList());\n  if (CollectionUtils.isEmpty(profiledSegmentSpans)) {\n    throw new IllegalArgumentException(\"Current segment cannot found any span\");\n  }\n  data.setProfiledSegmentSpans(profiledSegmentSpans);\n  int minSequence=threadSnapshotQueryDAO.queryMinSequence(segmentId,startTime,endTime);\n  int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n  data.setMinSequence(minSequence);\n  data.setMaxSequence(maxSequence);\n  return data;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int maxSequence=threadSnapshotQueryDAO.queryMaxSequence(segmentId,startTime,endTime);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 101,
    "startColumnNumber" : 26,
    "endLineNumber" : 101,
    "endColumnNumber" : 48
  }, {
    "charLength" : 22,
    "startLineNumber" : 102,
    "startColumnNumber" : 26,
    "endLineNumber" : 102,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}