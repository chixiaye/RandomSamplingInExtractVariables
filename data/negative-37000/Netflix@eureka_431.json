{
  "id" : 431,
  "expression" : "Source.localSource(UUID.randomUUID().toString())",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-write-server/src/main/java/com/netflix/eureka2/server/channel/RegistrationChannelImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Source.localSource(UUID.randomUUID().toString())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 48,
      "startColumnNumber" : 21,
      "endLineNumber" : 48,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 69
      },
      "nodeContext" : "selfSource=Source.localSource(UUID.randomUUID().toString())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 70
      },
      "nodeContext" : "selfSource=Source.localSource(UUID.randomUUID().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2581,
        "startLineNumber" : 42,
        "startColumnNumber" : 71,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super(STATES.Idle,transport,registry);\n  this.metrics=metrics;\n  metrics.incrementStateCounter(STATES.Idle);\n  selfSource=Source.localSource(UUID.randomUUID().toString());\n  instanceInfoRef=new AtomicReference<>();\n  subscribeToTransportInput(new Action1<Object>(){\n    @Override public void call(    Object message){\n      if (message instanceof Register) {\n        InstanceInfo instanceInfo=((Register)message).getInstanceInfo();\n        register(instanceInfo).subscribe(new Subscriber<Void>(){\n          @Override public void onCompleted(){\n          }\n          @Override public void onError(          Throwable e){\n            logger.warn(\"Error calling register\",e);\n          }\n          @Override public void onNext(          Void aVoid){\n          }\n        }\n);\n      }\n else       if (message instanceof Unregister) {\n        unregister().subscribe(new Subscriber<Void>(){\n          @Override public void onCompleted(){\n          }\n          @Override public void onError(          Throwable e){\n            logger.warn(\"Error calling unregister\",e);\n          }\n          @Override public void onNext(          Void aVoid){\n          }\n        }\n);\n      }\n else {\n        sendErrorOnTransport(new EurekaProtocolError(\"Unexpected message \" + message));\n      }\n    }\n  }\n);\n  transport.lifecycleObservable().subscribe(new Subscriber<Void>(){\n    @Override public void onCompleted(){\n      evictIfPresent();\n    }\n    @Override public void onError(    Throwable e){\n      evictIfPresent();\n    }\n    @Override public void onNext(    Void aVoid){\n    }\n    private void evictIfPresent(){\n      InstanceInfo toEvict=instanceInfoRef.get();\n      if (toEvict != null) {\n        logger.info(\"Connection terminated without unregister; adding instance {} to eviction queue\",toEvict);\n        evictionQueue.add(toEvict,selfSource);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2849,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RegistrationChannelImpl(SourcedEurekaRegistry registry,final EvictionQueue evictionQueue,MessageConnection transport,RegistrationChannelMetrics metrics){\n  super(STATES.Idle,transport,registry);\n  this.metrics=metrics;\n  metrics.incrementStateCounter(STATES.Idle);\n  selfSource=Source.localSource(UUID.randomUUID().toString());\n  instanceInfoRef=new AtomicReference<>();\n  subscribeToTransportInput(new Action1<Object>(){\n    @Override public void call(    Object message){\n      if (message instanceof Register) {\n        InstanceInfo instanceInfo=((Register)message).getInstanceInfo();\n        register(instanceInfo).subscribe(new Subscriber<Void>(){\n          @Override public void onCompleted(){\n          }\n          @Override public void onError(          Throwable e){\n            logger.warn(\"Error calling register\",e);\n          }\n          @Override public void onNext(          Void aVoid){\n          }\n        }\n);\n      }\n else       if (message instanceof Unregister) {\n        unregister().subscribe(new Subscriber<Void>(){\n          @Override public void onCompleted(){\n          }\n          @Override public void onError(          Throwable e){\n            logger.warn(\"Error calling unregister\",e);\n          }\n          @Override public void onNext(          Void aVoid){\n          }\n        }\n);\n      }\n else {\n        sendErrorOnTransport(new EurekaProtocolError(\"Unexpected message \" + message));\n      }\n    }\n  }\n);\n  transport.lifecycleObservable().subscribe(new Subscriber<Void>(){\n    @Override public void onCompleted(){\n      evictIfPresent();\n    }\n    @Override public void onError(    Throwable e){\n      evictIfPresent();\n    }\n    @Override public void onNext(    Void aVoid){\n    }\n    private void evictIfPresent(){\n      InstanceInfo toEvict=instanceInfoRef.get();\n      if (toEvict != null) {\n        logger.info(\"Connection terminated without unregister; adding instance {} to eviction queue\",toEvict);\n        evictionQueue.add(toEvict,selfSource);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 286,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 70
      },
      "nodeContext" : "selfSource=Source.localSource(UUID.randomUUID().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "com.netflix.eureka2.registry.Source"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 48,
    "startColumnNumber" : 21,
    "endLineNumber" : 48,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}