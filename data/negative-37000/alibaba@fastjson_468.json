{
  "id" : 468,
  "expression" : "out.features & SerializerFeature.WriteClassName.mask",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/CollectionCodec.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "out.features & SerializerFeature.WriteClassName.mask",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 59,
      "startColumnNumber" : 13,
      "endLineNumber" : 59,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 66
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n  if (fieldType instanceof ParameterizedType) {\n    ParameterizedType param=(ParameterizedType)fieldType;\n    elementType=param.getActualTypeArguments()[0];\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 46,
        "startColumnNumber" : 117,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2388,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  }, {
    "nodeContext" : "out.features & SerializerFeature.WriteClassName.mask",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 71,
      "startColumnNumber" : 13,
      "endLineNumber" : 71,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 66
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n  if (HashSet.class == collection.getClass()) {\n    out.append(\"Set\");\n  }\n else   if (TreeSet.class == collection.getClass()) {\n    out.append(\"TreeSet\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 46,
        "startColumnNumber" : 117,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2388,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  }, {
    "nodeContext" : "out.features & SerializerFeature.WriteClassName.mask",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 103,
      "startColumnNumber" : 25,
      "endLineNumber" : 103,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 103,
        "startColumnNumber" : 24,
        "endLineNumber" : 103,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 103,
        "startColumnNumber" : 24,
        "endLineNumber" : 103,
        "endColumnNumber" : 83
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n  out.write('L');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 100,
        "startColumnNumber" : 41,
        "endLineNumber" : 107,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  out.writeLong(((Long)item).longValue());\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    out.write('L');\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (clazz == Long.class) {\n  out.writeLong(((Long)item).longValue());\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    out.write('L');\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 82,
        "startColumnNumber" : 43,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i++ != 0) {\n    out.write(',');\n  }\n  if (item == null) {\n    out.writeNull();\n    continue;\n  }\n  Class<?> clazz=item.getClass();\n  if (clazz == Integer.class) {\n    out.writeInt(((Integer)item).intValue());\n    continue;\n  }\n  if (clazz == Long.class) {\n    out.writeLong(((Long)item).longValue());\n    if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n      out.write('L');\n    }\n    continue;\n  }\n  ObjectSerializer itemSerializer=serializer.config.get(clazz);\n  itemSerializer.write(serializer,item,i - 1,elementType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Object item : collection) {\n  if (i++ != 0) {\n    out.write(',');\n  }\n  if (item == null) {\n    out.writeNull();\n    continue;\n  }\n  Class<?> clazz=item.getClass();\n  if (clazz == Integer.class) {\n    out.writeInt(((Integer)item).intValue());\n    continue;\n  }\n  if (clazz == Long.class) {\n    out.writeLong(((Long)item).longValue());\n    if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n      out.write('L');\n    }\n    continue;\n  }\n  ObjectSerializer itemSerializer=serializer.config.get(clazz);\n  itemSerializer.write(serializer,item,i - 1,elementType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int i=0;\n  out.write('[');\n  for (  Object item : collection) {\n    if (i++ != 0) {\n      out.write(',');\n    }\n    if (item == null) {\n      out.writeNull();\n      continue;\n    }\n    Class<?> clazz=item.getClass();\n    if (clazz == Integer.class) {\n      out.writeInt(((Integer)item).intValue());\n      continue;\n    }\n    if (clazz == Long.class) {\n      out.writeLong(((Long)item).longValue());\n      if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n        out.write('L');\n      }\n      continue;\n    }\n    ObjectSerializer itemSerializer=serializer.config.get(clazz);\n    itemSerializer.write(serializer,item,i - 1,elementType);\n  }\n  out.write(']');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1130,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int i=0;\n  out.write('[');\n  for (  Object item : collection) {\n    if (i++ != 0) {\n      out.write(',');\n    }\n    if (item == null) {\n      out.writeNull();\n      continue;\n    }\n    Class<?> clazz=item.getClass();\n    if (clazz == Integer.class) {\n      out.writeInt(((Integer)item).intValue());\n      continue;\n    }\n    if (clazz == Long.class) {\n      out.writeLong(((Long)item).longValue());\n      if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n        out.write('L');\n      }\n      continue;\n    }\n    ObjectSerializer itemSerializer=serializer.config.get(clazz);\n    itemSerializer.write(serializer,item,i - 1,elementType);\n  }\n  out.write(']');\n}\n  finally {\n  serializer.context=context;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 140,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2275,
        "startLineNumber" : 46,
        "startColumnNumber" : 117,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2388,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.out;\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  Type elementType=null;\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  Collection<?> collection=(Collection<?>)object;\n  SerialContext context=serializer.context;\n  serializer.setContext(context,object,fieldName,0);\n  if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n    if (HashSet.class == collection.getClass()) {\n      out.append(\"Set\");\n    }\n else     if (TreeSet.class == collection.getClass()) {\n      out.append(\"TreeSet\");\n    }\n  }\n  try {\n    int i=0;\n    out.write('[');\n    for (    Object item : collection) {\n      if (i++ != 0) {\n        out.write(',');\n      }\n      if (item == null) {\n        out.writeNull();\n        continue;\n      }\n      Class<?> clazz=item.getClass();\n      if (clazz == Integer.class) {\n        out.writeInt(((Integer)item).intValue());\n        continue;\n      }\n      if (clazz == Long.class) {\n        out.writeLong(((Long)item).longValue());\n        if ((out.features & SerializerFeature.WriteClassName.mask) != 0) {\n          out.write('L');\n        }\n        continue;\n      }\n      ObjectSerializer itemSerializer=serializer.config.get(clazz);\n      itemSerializer.write(serializer,item,i - 1,elementType);\n    }\n    out.write(']');\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 103,
        "startColumnNumber" : 24,
        "endLineNumber" : 103,
        "endColumnNumber" : 83
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteClassName.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 59,
    "startColumnNumber" : 13,
    "endLineNumber" : 59,
    "endColumnNumber" : 65
  }, {
    "charLength" : 52,
    "startLineNumber" : 71,
    "startColumnNumber" : 13,
    "endLineNumber" : 71,
    "endColumnNumber" : 65
  }, {
    "charLength" : 52,
    "startLineNumber" : 103,
    "startColumnNumber" : 25,
    "endLineNumber" : 103,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 9
  } ]
}