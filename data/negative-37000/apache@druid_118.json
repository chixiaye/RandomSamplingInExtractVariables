{
  "id" : 118,
  "expression" : "Collections",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 69,
      "startColumnNumber" : 82,
      "endLineNumber" : 69,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 69,
        "startColumnNumber" : 82,
        "endLineNumber" : 69,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Collections.emptyMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 69,
        "startColumnNumber" : 44,
        "endLineNumber" : 69,
        "endColumnNumber" : 115
      },
      "nodeContext" : "new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 69,
        "startColumnNumber" : 31,
        "endLineNumber" : 69,
        "endColumnNumber" : 115
      },
      "nodeContext" : "dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 788,
        "startLineNumber" : 62,
        "startColumnNumber" : 42,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n  List<DataSegment> segments=IntStream.range(0,maxSegments).mapToObj(j -> getSegment(j)).collect(Collectors.toList());\n  ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n  String serverName=\"DruidServer_Name_\" + i;\n  ServerHolder serverHolder=new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon);\n  serverHolderList.add(serverHolder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < serverCount; i++) {\n  LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n  List<DataSegment> segments=IntStream.range(0,maxSegments).mapToObj(j -> getSegment(j)).collect(Collectors.toList());\n  ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n  String serverName=\"DruidServer_Name_\" + i;\n  ServerHolder serverHolder=new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon);\n  serverHolderList.add(serverHolder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<ServerHolder> serverHolderList=new ArrayList<>();\n  for (int i=0; i < serverCount; i++) {\n    LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n    List<DataSegment> segments=IntStream.range(0,maxSegments).mapToObj(j -> getSegment(j)).collect(Collectors.toList());\n    ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n    String serverName=\"DruidServer_Name_\" + i;\n    ServerHolder serverHolder=new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon);\n    serverHolderList.add(serverHolder);\n  }\n  LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n  ImmutableDruidServer druidServer=EasyMock.createMock(ImmutableDruidServer.class);\n  EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  Map<SegmentId,DataSegment> segments=new HashMap<>();\n  for (int j=0; j < (maxSegments - 2); j++) {\n    DataSegment segment=getSegment(j);\n    segments.put(segment.getId(),segment);\n    EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n  }\n  ImmutableDruidServerTests.expectSegments(druidServer,segments.values());\n  EasyMock.replay(druidServer);\n  serverHolderList.add(new ServerHolder(druidServer,fromPeon));\n  return serverHolderList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2392,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create Druid cluster with serverCount servers having maxSegments segments each, and 1 server with 98 segment Cost Balancer Strategy should assign the next segment to the server with less segments.\n */\npublic static List<ServerHolder> setupDummyCluster(int serverCount,int maxSegments){\n  List<ServerHolder> serverHolderList=new ArrayList<>();\n  for (int i=0; i < serverCount; i++) {\n    LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n    List<DataSegment> segments=IntStream.range(0,maxSegments).mapToObj(j -> getSegment(j)).collect(Collectors.toList());\n    ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n    String serverName=\"DruidServer_Name_\" + i;\n    ServerHolder serverHolder=new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata(serverName,\"localhost\",null,10000000L,ServerType.HISTORICAL,\"hot\",1),3000L,ImmutableMap.of(\"DUMMY\",dataSource),segments.size()),fromPeon);\n    serverHolderList.add(serverHolder);\n  }\n  LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();\n  ImmutableDruidServer druidServer=EasyMock.createMock(ImmutableDruidServer.class);\n  EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  Map<SegmentId,DataSegment> segments=new HashMap<>();\n  for (int j=0; j < (maxSegments - 2); j++) {\n    DataSegment segment=getSegment(j);\n    segments.put(segment.getId(),segment);\n    EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n  }\n  ImmutableDruidServerTests.expectSegments(druidServer,segments.values());\n  EasyMock.replay(druidServer);\n  serverHolderList.add(new ServerHolder(druidServer,fromPeon));\n  return serverHolderList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ImmutableDruidDataSource dataSource=new ImmutableDruidDataSource(\"DUMMY\",Collections.emptyMap(),segments);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 69,
    "startColumnNumber" : 82,
    "endLineNumber" : 69,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}