{
  "id" : 211,
  "expression" : "new Command(\"docker\",\"inspect\",targetImage).run()",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Command(\"docker\",\"inspect\",targetImage).run()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 240,
      "startColumnNumber" : 10,
      "endLineNumber" : 240,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 239,
        "startColumnNumber" : 6,
        "endLineNumber" : 247,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 460,
        "startLineNumber" : 239,
        "startColumnNumber" : 6,
        "endLineNumber" : 247,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2379,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n  new Command(\"docker\",\"pull\",\"gcr.io/distroless/java:latest\").run();\n  new Command(\"docker\",\"tag\",\"gcr.io/distroless/java:latest\",\"localhost:5000/distroless/java\").run();\n  new Command(\"docker\",\"push\",\"localhost:5000/distroless/java\").run();\n  new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n  String targetImage=\"localhost:5000/compleximage:gradle\" + System.nanoTime();\n  Instant beforeBuild=Instant.now();\n  BuildResult buildResult=simpleTestProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + targetImage,\"-DsendCredentialsOverHttp=true\",\"-b=complex-build.gradle\");\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(targetImage));\n  new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n  new Command(\"docker\",\"pull\",targetImage).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  Assert.assertEquals(\"Hello, world. An argument.\\nfoo\\ncat\\n-Xms512m\\n-Xdebug\\n\",new Command(\"docker\",\"run\",targetImage).run());\n  assertSimpleCreationTimeIsAfter(beforeBuild,targetImage);\n  new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2554,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n  new Command(\"docker\",\"pull\",\"gcr.io/distroless/java:latest\").run();\n  new Command(\"docker\",\"tag\",\"gcr.io/distroless/java:latest\",\"localhost:5000/distroless/java\").run();\n  new Command(\"docker\",\"push\",\"localhost:5000/distroless/java\").run();\n  new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n  String targetImage=\"localhost:5000/compleximage:gradle\" + System.nanoTime();\n  Instant beforeBuild=Instant.now();\n  BuildResult buildResult=simpleTestProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + targetImage,\"-DsendCredentialsOverHttp=true\",\"-b=complex-build.gradle\");\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(targetImage));\n  new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n  new Command(\"docker\",\"pull\",targetImage).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  Assert.assertEquals(\"Hello, world. An argument.\\nfoo\\ncat\\n-Xms512m\\n-Xdebug\\n\",new Command(\"docker\",\"run\",targetImage).run());\n  assertSimpleCreationTimeIsAfter(beforeBuild,targetImage);\n  new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n}\n  finally {\n  new Command(\"docker\",\"stop\",containerName).run();\n  new Command(\"docker\",\"rm\",\"-v\",containerName).run();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 252,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3389,
        "startLineNumber" : 178,
        "startColumnNumber" : 75,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String containerName=\"registry-\" + UUID.randomUUID();\n  new Command(\"docker\",\"run\",\"-d\",\"-p\",\"5000:5000\",\"--restart=always\",\"--name\",containerName,\"-v\",simpleTestProject.getProjectRoot().resolve(\"auth\") + \":/auth\",\"-e\",\"REGISTRY_AUTH=htpasswd\",\"-e\",\"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\",\"-e\",\"REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd\",\"registry:2\").run();\n  try {\n    new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n    new Command(\"docker\",\"pull\",\"gcr.io/distroless/java:latest\").run();\n    new Command(\"docker\",\"tag\",\"gcr.io/distroless/java:latest\",\"localhost:5000/distroless/java\").run();\n    new Command(\"docker\",\"push\",\"localhost:5000/distroless/java\").run();\n    new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n    String targetImage=\"localhost:5000/compleximage:gradle\" + System.nanoTime();\n    Instant beforeBuild=Instant.now();\n    BuildResult buildResult=simpleTestProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + targetImage,\"-DsendCredentialsOverHttp=true\",\"-b=complex-build.gradle\");\n    BuildTask classesTask=buildResult.task(\":classes\");\n    BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n    Assert.assertNotNull(classesTask);\n    Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n    Assert.assertNotNull(jibTask);\n    Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n    Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n    Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(targetImage));\n    new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n    new Command(\"docker\",\"pull\",targetImage).run();\n    Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n    Assert.assertEquals(\"Hello, world. An argument.\\nfoo\\ncat\\n-Xms512m\\n-Xdebug\\n\",new Command(\"docker\",\"run\",targetImage).run());\n    assertSimpleCreationTimeIsAfter(beforeBuild,targetImage);\n    new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n  }\n  finally {\n    new Command(\"docker\",\"stop\",containerName).run();\n    new Command(\"docker\",\"rm\",\"-v\",containerName).run();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3470,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild_complex() throws IOException, InterruptedException {\n  String containerName=\"registry-\" + UUID.randomUUID();\n  new Command(\"docker\",\"run\",\"-d\",\"-p\",\"5000:5000\",\"--restart=always\",\"--name\",containerName,\"-v\",simpleTestProject.getProjectRoot().resolve(\"auth\") + \":/auth\",\"-e\",\"REGISTRY_AUTH=htpasswd\",\"-e\",\"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\",\"-e\",\"REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd\",\"registry:2\").run();\n  try {\n    new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n    new Command(\"docker\",\"pull\",\"gcr.io/distroless/java:latest\").run();\n    new Command(\"docker\",\"tag\",\"gcr.io/distroless/java:latest\",\"localhost:5000/distroless/java\").run();\n    new Command(\"docker\",\"push\",\"localhost:5000/distroless/java\").run();\n    new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n    String targetImage=\"localhost:5000/compleximage:gradle\" + System.nanoTime();\n    Instant beforeBuild=Instant.now();\n    BuildResult buildResult=simpleTestProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + targetImage,\"-DsendCredentialsOverHttp=true\",\"-b=complex-build.gradle\");\n    BuildTask classesTask=buildResult.task(\":classes\");\n    BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n    Assert.assertNotNull(classesTask);\n    Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n    Assert.assertNotNull(jibTask);\n    Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n    Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n    Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(targetImage));\n    new Command(\"docker\",\"login\",\"localhost:5000\",\"-u\",\"testuser\",\"-p\",\"testpassword\").run();\n    new Command(\"docker\",\"pull\",targetImage).run();\n    Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n    Assert.assertEquals(\"Hello, world. An argument.\\nfoo\\ncat\\n-Xms512m\\n-Xdebug\\n\",new Command(\"docker\",\"run\",targetImage).run());\n    assertSimpleCreationTimeIsAfter(beforeBuild,targetImage);\n    new Command(\"docker\",\"logout\",\"localhost:5000\").run();\n  }\n  finally {\n    new Command(\"docker\",\"stop\",containerName).run();\n    new Command(\"docker\",\"rm\",\"-v\",containerName).run();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 239,
        "startColumnNumber" : 6,
        "endLineNumber" : 247,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",targetImage).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 240,
    "startColumnNumber" : 10,
    "endLineNumber" : 240,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}