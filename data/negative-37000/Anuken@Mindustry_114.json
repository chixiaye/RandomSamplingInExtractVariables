{
  "id" : 114,
  "expression" : "\"write.s($L)\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/entity/EntityIO.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"write.s($L)\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 89,
      "startColumnNumber" : 15,
      "endLineNumber" : 89,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "st(\"write.s($L)\",revisions.peek().version)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "st(\"write.s($L)\",revisions.peek().version);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 87,
        "startColumnNumber" : 17,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  st(\"write.s($L)\",revisions.peek().version);\n  for (  RevisionField field : revisions.peek().fields) {\n    io(field.type,\"this.\" + field.name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1285,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (write) {\n  st(\"write.s($L)\",revisions.peek().version);\n  for (  RevisionField field : revisions.peek().fields) {\n    io(field.type,\"this.\" + field.name);\n  }\n}\n else {\n  st(\"short REV = read.s()\");\n  for (int i=0; i < revisions.size; i++) {\n    Revision rev=revisions.get(i);\n    if (i == 0) {\n      cont(\"if(REV == $L)\",rev.version);\n    }\n else {\n      ncont(\"else if(REV == $L)\",rev.version);\n    }\n    for (    RevisionField field : rev.fields) {\n      io(field.type,presentFields.contains(field.name) ? \"this.\" + field.name + \" = \" : \"\");\n    }\n  }\n  ncont(\"else\");\n  st(\"throw new IllegalArgumentException(\\\"Unknown revision '\\\" + REV + \\\"' for entity type '\" + name + \"'\\\")\");\n  econt();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1456,
        "startLineNumber" : 80,
        "startColumnNumber" : 73,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.method=method;\n  this.write=write;\n  method.addAnnotation(CallSuper.class);\n  if (write) {\n    st(\"write.s($L)\",revisions.peek().version);\n    for (    RevisionField field : revisions.peek().fields) {\n      io(field.type,\"this.\" + field.name);\n    }\n  }\n else {\n    st(\"short REV = read.s()\");\n    for (int i=0; i < revisions.size; i++) {\n      Revision rev=revisions.get(i);\n      if (i == 0) {\n        cont(\"if(REV == $L)\",rev.version);\n      }\n else {\n        ncont(\"else if(REV == $L)\",rev.version);\n      }\n      for (      RevisionField field : rev.fields) {\n        io(field.type,presentFields.contains(field.name) ? \"this.\" + field.name + \" = \" : \"\");\n      }\n    }\n    ncont(\"else\");\n    st(\"throw new IllegalArgumentException(\\\"Unknown revision '\\\" + REV + \\\"' for entity type '\" + name + \"'\\\")\");\n    econt();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1525,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void write(MethodSpec.Builder method,boolean write) throws Exception {\n  this.method=method;\n  this.write=write;\n  method.addAnnotation(CallSuper.class);\n  if (write) {\n    st(\"write.s($L)\",revisions.peek().version);\n    for (    RevisionField field : revisions.peek().fields) {\n      io(field.type,\"this.\" + field.name);\n    }\n  }\n else {\n    st(\"short REV = read.s()\");\n    for (int i=0; i < revisions.size; i++) {\n      Revision rev=revisions.get(i);\n      if (i == 0) {\n        cont(\"if(REV == $L)\",rev.version);\n      }\n else {\n        ncont(\"else if(REV == $L)\",rev.version);\n      }\n      for (      RevisionField field : rev.fields) {\n        io(field.type,presentFields.contains(field.name) ? \"this.\" + field.name + \" = \" : \"\");\n      }\n    }\n    ncont(\"else\");\n    st(\"throw new IllegalArgumentException(\\\"Unknown revision '\\\" + REV + \\\"' for entity type '\" + name + \"'\\\")\");\n    econt();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "st(\"write.s($L)\",revisions.peek().version);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 89,
    "startColumnNumber" : 15,
    "endLineNumber" : 89,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}