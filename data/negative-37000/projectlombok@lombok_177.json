{
  "id" : 177,
  "expression" : "0",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/installer/lombok/installer/WindowsDriveInfo.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 80,
      "startColumnNumber" : 15,
      "endLineNumber" : 80,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 80,
        "startColumnNumber" : 11,
        "endLineNumber" : 80,
        "endColumnNumber" : 16
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < 26; i++) {\n  if ((flags & (1 << i)) != 0)   letters.add(Character.toString((char)('A' + i)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 76,
        "startColumnNumber" : 40,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int flags=getLogicalDrives0();\n  List<String> letters=new ArrayList<String>();\n  for (int i=0; i < 26; i++) {\n    if ((flags & (1 << i)) != 0)     letters.add(Character.toString((char)('A' + i)));\n  }\n  return letters;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 73,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Return a list of all available drive letters, such as [\"A\", \"C\", \"D\"].\n */\npublic List<String> getLogicalDrives(){\n  int flags=getLogicalDrives0();\n  List<String> letters=new ArrayList<String>();\n  for (int i=0; i < 26; i++) {\n    if ((flags & (1 << i)) != 0)     letters.add(Character.toString((char)('A' + i)));\n  }\n  return letters;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 29,
      "endLineNumber" : 81,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 81,
        "startColumnNumber" : 7,
        "endLineNumber" : 81,
        "endColumnNumber" : 30
      },
      "nodeContext" : "(flags & (1 << i)) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 81,
        "startColumnNumber" : 3,
        "endLineNumber" : 81,
        "endColumnNumber" : 81
      },
      "nodeContext" : "if ((flags & (1 << i)) != 0) letters.add(Character.toString((char)('A' + i)));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if ((flags & (1 << i)) != 0)   letters.add(Character.toString((char)('A' + i)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < 26; i++) {\n  if ((flags & (1 << i)) != 0)   letters.add(Character.toString((char)('A' + i)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 76,
        "startColumnNumber" : 40,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int flags=getLogicalDrives0();\n  List<String> letters=new ArrayList<String>();\n  for (int i=0; i < 26; i++) {\n    if ((flags & (1 << i)) != 0)     letters.add(Character.toString((char)('A' + i)));\n  }\n  return letters;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 73,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Return a list of all available drive letters, such as [\"A\", \"C\", \"D\"].\n */\npublic List<String> getLogicalDrives(){\n  int flags=getLogicalDrives0();\n  List<String> letters=new ArrayList<String>();\n  for (int i=0; i < 26; i++) {\n    if ((flags & (1 << i)) != 0)     letters.add(Character.toString((char)('A' + i)));\n  }\n  return letters;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 81,
        "startColumnNumber" : 3,
        "endLineNumber" : 81,
        "endColumnNumber" : 81
      },
      "nodeContext" : "if ((flags & (1 << i)) != 0) letters.add(Character.toString((char)('A' + i)));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 80,
    "startColumnNumber" : 15,
    "endLineNumber" : 80,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 29,
    "endLineNumber" : 81,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}