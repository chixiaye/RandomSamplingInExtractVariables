{
  "id" : 400,
  "expression" : "shaderMatrix",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 878,
      "startColumnNumber" : 24,
      "endLineNumber" : 878,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 878,
        "startColumnNumber" : 24,
        "endLineNumber" : 878,
        "endColumnNumber" : 44
      },
      "nodeContext" : "shaderMatrix.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 878,
        "startColumnNumber" : 24,
        "endLineNumber" : 878,
        "endColumnNumber" : 45
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1372,
        "startLineNumber" : 876,
        "startColumnNumber" : 35,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 876,
        "startColumnNumber" : 20,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1732,
        "startLineNumber" : 870,
        "startColumnNumber" : 33,
        "endLineNumber" : 904,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 878,
        "startColumnNumber" : 24,
        "endLineNumber" : 878,
        "endColumnNumber" : 45
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 879,
      "startColumnNumber" : 24,
      "endLineNumber" : 879,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 879,
        "startColumnNumber" : 24,
        "endLineNumber" : 879,
        "endColumnNumber" : 82
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left,drawRegion.top)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 879,
        "startColumnNumber" : 24,
        "endLineNumber" : 879,
        "endColumnNumber" : 83
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1372,
        "startLineNumber" : 876,
        "startColumnNumber" : 35,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 876,
        "startColumnNumber" : 20,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1732,
        "startLineNumber" : 870,
        "startColumnNumber" : 33,
        "endLineNumber" : 904,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 879,
        "startColumnNumber" : 24,
        "endLineNumber" : 879,
        "endColumnNumber" : 83
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 880,
      "startColumnNumber" : 24,
      "endLineNumber" : 880,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 880,
        "startColumnNumber" : 24,
        "endLineNumber" : 880,
        "endColumnNumber" : 73
      },
      "nodeContext" : "shaderMatrix.preScale(1.0f / scale,1.0f / scale)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 880,
        "startColumnNumber" : 24,
        "endLineNumber" : 880,
        "endColumnNumber" : 74
      },
      "nodeContext" : "shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1372,
        "startLineNumber" : 876,
        "startColumnNumber" : 35,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 876,
        "startColumnNumber" : 20,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1732,
        "startLineNumber" : 870,
        "startColumnNumber" : 33,
        "endLineNumber" : 904,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 880,
        "startColumnNumber" : 24,
        "endLineNumber" : 880,
        "endColumnNumber" : 74
      },
      "nodeContext" : "shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 882,
      "startColumnNumber" : 46,
      "endLineNumber" : 882,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 882,
        "startColumnNumber" : 24,
        "endLineNumber" : 882,
        "endColumnNumber" : 59
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 882,
        "startColumnNumber" : 24,
        "endLineNumber" : 882,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1372,
        "startLineNumber" : 876,
        "startColumnNumber" : 35,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 876,
        "startColumnNumber" : 20,
        "endLineNumber" : 903,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  roundPaint.setShader(shader);\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n  shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  roundRect.set(drawRegion);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1732,
        "startLineNumber" : 870,
        "startColumnNumber" : 33,
        "endLineNumber" : 904,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 882,
        "startColumnNumber" : 24,
        "endLineNumber" : 882,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 908,
      "startColumnNumber" : 20,
      "endLineNumber" : 908,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 908,
        "startColumnNumber" : 20,
        "endLineNumber" : 908,
        "endColumnNumber" : 40
      },
      "nodeContext" : "shaderMatrix.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 908,
        "startColumnNumber" : 20,
        "endLineNumber" : 908,
        "endColumnNumber" : 41
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 908,
        "startColumnNumber" : 20,
        "endLineNumber" : 908,
        "endColumnNumber" : 41
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 921,
      "startColumnNumber" : 24,
      "endLineNumber" : 921,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 921,
        "startColumnNumber" : 24,
        "endLineNumber" : 921,
        "endColumnNumber" : 44
      },
      "nodeContext" : "shaderMatrix.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 921,
        "startColumnNumber" : 24,
        "endLineNumber" : 921,
        "endColumnNumber" : 45
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 921,
        "startColumnNumber" : 24,
        "endLineNumber" : 921,
        "endColumnNumber" : 45
      },
      "nodeContext" : "shaderMatrix.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 922,
      "startColumnNumber" : 24,
      "endLineNumber" : 922,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 922,
        "startColumnNumber" : 24,
        "endLineNumber" : 922,
        "endColumnNumber" : 104
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 922,
        "startColumnNumber" : 24,
        "endLineNumber" : 922,
        "endColumnNumber" : 105
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 922,
        "startColumnNumber" : 24,
        "endLineNumber" : 922,
        "endColumnNumber" : 105
      },
      "nodeContext" : "shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 924,
      "startColumnNumber" : 28,
      "endLineNumber" : 924,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 924,
        "startColumnNumber" : 28,
        "endLineNumber" : 924,
        "endColumnNumber" : 54
      },
      "nodeContext" : "shaderMatrix.preRotate(90)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 924,
        "startColumnNumber" : 28,
        "endLineNumber" : 924,
        "endColumnNumber" : 55
      },
      "nodeContext" : "shaderMatrix.preRotate(90);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 923,
        "startColumnNumber" : 47,
        "endLineNumber" : 926,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 924,
        "startColumnNumber" : 28,
        "endLineNumber" : 924,
        "endColumnNumber" : 55
      },
      "nodeContext" : "shaderMatrix.preRotate(90);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 925,
      "startColumnNumber" : 28,
      "endLineNumber" : 925,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 925,
        "startColumnNumber" : 28,
        "endLineNumber" : 925,
        "endColumnNumber" : 77
      },
      "nodeContext" : "shaderMatrix.preTranslate(0,-drawRegion.width())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 925,
        "startColumnNumber" : 28,
        "endLineNumber" : 925,
        "endColumnNumber" : 78
      },
      "nodeContext" : "shaderMatrix.preTranslate(0,-drawRegion.width());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 923,
        "startColumnNumber" : 47,
        "endLineNumber" : 926,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 925,
        "startColumnNumber" : 28,
        "endLineNumber" : 925,
        "endColumnNumber" : 78
      },
      "nodeContext" : "shaderMatrix.preTranslate(0,-drawRegion.width());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 927,
      "startColumnNumber" : 28,
      "endLineNumber" : 927,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 927,
        "startColumnNumber" : 28,
        "endLineNumber" : 927,
        "endColumnNumber" : 55
      },
      "nodeContext" : "shaderMatrix.preRotate(180)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 927,
        "startColumnNumber" : 28,
        "endLineNumber" : 927,
        "endColumnNumber" : 56
      },
      "nodeContext" : "shaderMatrix.preRotate(180);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 926,
        "startColumnNumber" : 55,
        "endLineNumber" : 929,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 926,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 927,
        "startColumnNumber" : 28,
        "endLineNumber" : 927,
        "endColumnNumber" : 56
      },
      "nodeContext" : "shaderMatrix.preRotate(180);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 928,
      "startColumnNumber" : 28,
      "endLineNumber" : 928,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 928,
        "startColumnNumber" : 28,
        "endLineNumber" : 928,
        "endColumnNumber" : 96
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 928,
        "startColumnNumber" : 28,
        "endLineNumber" : 928,
        "endColumnNumber" : 97
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 926,
        "startColumnNumber" : 55,
        "endLineNumber" : 929,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 926,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 928,
        "startColumnNumber" : 28,
        "endLineNumber" : 928,
        "endColumnNumber" : 97
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 930,
      "startColumnNumber" : 28,
      "endLineNumber" : 930,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 930,
        "startColumnNumber" : 28,
        "endLineNumber" : 930,
        "endColumnNumber" : 55
      },
      "nodeContext" : "shaderMatrix.preRotate(270)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 930,
        "startColumnNumber" : 28,
        "endLineNumber" : 930,
        "endColumnNumber" : 56
      },
      "nodeContext" : "shaderMatrix.preRotate(270);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 929,
        "startColumnNumber" : 55,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 929,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 926,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 930,
        "startColumnNumber" : 28,
        "endLineNumber" : 930,
        "endColumnNumber" : 56
      },
      "nodeContext" : "shaderMatrix.preRotate(270);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 931,
      "startColumnNumber" : 28,
      "endLineNumber" : 931,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 931,
        "startColumnNumber" : 28,
        "endLineNumber" : 931,
        "endColumnNumber" : 78
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.height(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 931,
        "startColumnNumber" : 28,
        "endLineNumber" : 931,
        "endColumnNumber" : 79
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.height(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 929,
        "startColumnNumber" : 55,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 929,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 926,
        "startColumnNumber" : 31,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 923,
        "startColumnNumber" : 24,
        "endLineNumber" : 932,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (orientation == 90) {\n  shaderMatrix.preRotate(90);\n  shaderMatrix.preTranslate(0,-drawRegion.width());\n}\n else if (orientation == 180) {\n  shaderMatrix.preRotate(180);\n  shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n}\n else if (orientation == 270) {\n  shaderMatrix.preRotate(270);\n  shaderMatrix.preTranslate(-drawRegion.height(),0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 931,
        "startColumnNumber" : 28,
        "endLineNumber" : 931,
        "endColumnNumber" : 79
      },
      "nodeContext" : "shaderMatrix.preTranslate(-drawRegion.height(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 933,
      "startColumnNumber" : 24,
      "endLineNumber" : 933,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 933,
        "startColumnNumber" : 24,
        "endLineNumber" : 933,
        "endColumnNumber" : 59
      },
      "nodeContext" : "shaderMatrix.preScale(scale,scale)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 933,
        "startColumnNumber" : 24,
        "endLineNumber" : 933,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shaderMatrix.preScale(scale,scale);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 933,
        "startColumnNumber" : 24,
        "endLineNumber" : 933,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shaderMatrix.preScale(scale,scale);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 936,
      "startColumnNumber" : 28,
      "endLineNumber" : 936,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 936,
        "startColumnNumber" : 28,
        "endLineNumber" : 936,
        "endColumnNumber" : 116
      },
      "nodeContext" : "shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 936,
        "startColumnNumber" : 28,
        "endLineNumber" : 936,
        "endColumnNumber" : 117
      },
      "nodeContext" : "shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 934,
        "startColumnNumber" : 42,
        "endLineNumber" : 937,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n  shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 934,
        "startColumnNumber" : 24,
        "endLineNumber" : 937,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (isRoundVideo) {\n  float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n  shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 936,
        "startColumnNumber" : 28,
        "endLineNumber" : 936,
        "endColumnNumber" : 117
      },
      "nodeContext" : "shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  }, {
    "nodeContext" : "shaderMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 938,
      "startColumnNumber" : 46,
      "endLineNumber" : 938,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 938,
        "startColumnNumber" : 24,
        "endLineNumber" : 938,
        "endColumnNumber" : 59
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 938,
        "startColumnNumber" : 24,
        "endLineNumber" : 938,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 920,
        "startColumnNumber" : 35,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 920,
        "startColumnNumber" : 20,
        "endLineNumber" : 958,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isVisible) {\n  shaderMatrix.reset();\n  shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n  if (orientation == 90) {\n    shaderMatrix.preRotate(90);\n    shaderMatrix.preTranslate(0,-drawRegion.width());\n  }\n else   if (orientation == 180) {\n    shaderMatrix.preRotate(180);\n    shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n  }\n else   if (orientation == 270) {\n    shaderMatrix.preRotate(270);\n    shaderMatrix.preTranslate(-drawRegion.height(),0);\n  }\n  shaderMatrix.preScale(scale,scale);\n  if (isRoundVideo) {\n    float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n    shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n  }\n  shader.setLocalMatrix(shaderMatrix);\n  roundPaint.setAlpha(alpha);\n  if (isRoundRect) {\n    try {\n      canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n    }\n catch (    Exception e) {\n      onBitmapException(bitmapDrawable);\n      FileLog.e(e);\n    }\n  }\n else {\n    for (int a=0; a < roundRadius.length; a++) {\n      radii[a * 2]=roundRadius[a];\n      radii[a * 2 + 1]=roundRadius[a];\n    }\n    roundPath.reset();\n    roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n    roundPath.close();\n    canvas.drawPath(roundPath,roundPaint);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 904,
        "startColumnNumber" : 23,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5012,
        "startLineNumber" : 870,
        "startColumnNumber" : 16,
        "endLineNumber" : 959,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isAspectFit) {\n  float scale=Math.max(scaleW,scaleH);\n  bitmapW/=scale;\n  bitmapH/=scale;\n  drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n  if (isVisible) {\n    roundPaint.setShader(shader);\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n    shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    roundRect.set(drawRegion);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n else {\n  roundPaint.setShader(shader);\n  float scale=1.0f / Math.min(scaleW,scaleH);\n  roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n  shaderMatrix.reset();\n  if (Math.abs(scaleW - scaleH) > 0.0005f) {\n    if (bitmapW / scaleH > realImageW) {\n      bitmapW/=scaleH;\n      drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n    }\n else {\n      bitmapH/=scaleW;\n      drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n  }\n  if (isVisible) {\n    shaderMatrix.reset();\n    shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n    if (orientation == 90) {\n      shaderMatrix.preRotate(90);\n      shaderMatrix.preTranslate(0,-drawRegion.width());\n    }\n else     if (orientation == 180) {\n      shaderMatrix.preRotate(180);\n      shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n    }\n else     if (orientation == 270) {\n      shaderMatrix.preRotate(270);\n      shaderMatrix.preTranslate(-drawRegion.height(),0);\n    }\n    shaderMatrix.preScale(scale,scale);\n    if (isRoundVideo) {\n      float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n      shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n    }\n    shader.setLocalMatrix(shaderMatrix);\n    roundPaint.setAlpha(alpha);\n    if (isRoundRect) {\n      try {\n        canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n else {\n      for (int a=0; a < roundRadius.length; a++) {\n        radii[a * 2]=roundRadius[a];\n        radii[a * 2 + 1]=roundRadius[a];\n      }\n      roundPath.reset();\n      roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n      roundPath.close();\n      canvas.drawPath(roundPath,roundPaint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 545,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5044,
        "startLineNumber" : 869,
        "startColumnNumber" : 32,
        "endLineNumber" : 960,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10879,
        "startLineNumber" : 869,
        "startColumnNumber" : 12,
        "endLineNumber" : 1061,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shader != null) {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n    if (isVisible) {\n      roundPaint.setShader(shader);\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n      shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      roundRect.set(drawRegion);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n else {\n    roundPaint.setShader(shader);\n    float scale=1.0f / Math.min(scaleW,scaleH);\n    roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n    shaderMatrix.reset();\n    if (Math.abs(scaleW - scaleH) > 0.0005f) {\n      if (bitmapW / scaleH > realImageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n      }\n    }\n else {\n      drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n    }\n    if (isVisible) {\n      shaderMatrix.reset();\n      shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n      if (orientation == 90) {\n        shaderMatrix.preRotate(90);\n        shaderMatrix.preTranslate(0,-drawRegion.width());\n      }\n else       if (orientation == 180) {\n        shaderMatrix.preRotate(180);\n        shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n      }\n else       if (orientation == 270) {\n        shaderMatrix.preRotate(270);\n        shaderMatrix.preTranslate(-drawRegion.height(),0);\n      }\n      shaderMatrix.preScale(scale,scale);\n      if (isRoundVideo) {\n        float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n        shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n      }\n      shader.setLocalMatrix(shaderMatrix);\n      roundPaint.setAlpha(alpha);\n      if (isRoundRect) {\n        try {\n          canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n else {\n        for (int a=0; a < roundRadius.length; a++) {\n          radii[a * 2]=roundRadius[a];\n          radii[a * 2 + 1]=roundRadius[a];\n        }\n        roundPath.reset();\n        roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n        roundPath.close();\n        canvas.drawPath(roundPath,roundPaint);\n      }\n    }\n  }\n}\n else {\n  if (isAspectFit) {\n    float scale=Math.max(scaleW,scaleH);\n    canvas.save();\n    bitmapW/=scale;\n    bitmapH/=scale;\n    drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n    bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (bitmapDrawable instanceof AnimatedFileDrawable) {\n      ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n    }\n    if (isVisible) {\n      try {\n        bitmapDrawable.setAlpha(alpha);\n        bitmapDrawable.draw(canvas);\n      }\n catch (      Exception e) {\n        onBitmapException(bitmapDrawable);\n        FileLog.e(e);\n      }\n    }\n    canvas.restore();\n  }\n else {\n    if (Math.abs(scaleW - scaleH) > 0.00001f) {\n      canvas.save();\n      canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      if (bitmapW / scaleH > imageW) {\n        bitmapW/=scaleH;\n        drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n      }\n else {\n        bitmapH/=scaleW;\n        drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      canvas.save();\n      if (orientation % 360 != 0) {\n        if (centerRotation) {\n          canvas.rotate(orientation,imageW / 2,imageH / 2);\n        }\n else {\n          canvas.rotate(orientation,0,0);\n        }\n      }\n      drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n      if (isRoundVideo) {\n        drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n      }\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        float width=drawRegion.width() / 2;\n        float height=drawRegion.height() / 2;\n        float centerX=drawRegion.centerX();\n        float centerY=drawRegion.centerY();\n        bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n      }\n else {\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1176,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 13728,
        "startLineNumber" : 803,
        "startColumnNumber" : 48,
        "endLineNumber" : 1062,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14235,
        "startLineNumber" : 803,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  Paint paint;\n  if (shader != null) {\n    paint=roundPaint;\n  }\n else {\n    paint=bitmapDrawable.getPaint();\n  }\n  boolean hasFilter=paint != null && paint.getColorFilter() != null;\n  if (hasFilter && isPressed == 0) {\n    if (shader != null) {\n      roundPaint.setColorFilter(null);\n    }\n else     if (staticThumbDrawable != drawable) {\n      bitmapDrawable.setColorFilter(null);\n    }\n  }\n else   if (!hasFilter && isPressed != 0) {\n    if (isPressed == 1) {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedColorFilter);\n      }\n    }\n else {\n      if (shader != null) {\n        roundPaint.setColorFilter(selectedGroupColorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n      }\n    }\n  }\n  if (colorFilter != null) {\n    if (shader != null) {\n      roundPaint.setColorFilter(colorFilter);\n    }\n else {\n      bitmapDrawable.setColorFilter(colorFilter);\n    }\n  }\n  int bitmapW;\n  int bitmapH;\n  if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmapDrawable.getIntrinsicHeight();\n      bitmapH=bitmapDrawable.getIntrinsicWidth();\n    }\n else {\n      bitmapW=bitmapDrawable.getIntrinsicWidth();\n      bitmapH=bitmapDrawable.getIntrinsicHeight();\n    }\n  }\n else {\n    Bitmap bitmap=bitmapDrawable.getBitmap();\n    if (bitmap != null && bitmap.isRecycled()) {\n      return;\n    }\n    if (orientation % 360 == 90 || orientation % 360 == 270) {\n      bitmapW=bitmap.getHeight();\n      bitmapH=bitmap.getWidth();\n    }\n else {\n      bitmapW=bitmap.getWidth();\n      bitmapH=bitmap.getHeight();\n    }\n  }\n  float realImageW=imageW - sideClip * 2;\n  float realImageH=imageH - sideClip * 2;\n  float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n  float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n  if (shader != null) {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n      if (isVisible) {\n        roundPaint.setShader(shader);\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n        shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        roundRect.set(drawRegion);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n else {\n      roundPaint.setShader(shader);\n      float scale=1.0f / Math.min(scaleW,scaleH);\n      roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n      shaderMatrix.reset();\n      if (Math.abs(scaleW - scaleH) > 0.0005f) {\n        if (bitmapW / scaleH > realImageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n        }\n      }\n else {\n        drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n      }\n      if (isVisible) {\n        shaderMatrix.reset();\n        shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n        if (orientation == 90) {\n          shaderMatrix.preRotate(90);\n          shaderMatrix.preTranslate(0,-drawRegion.width());\n        }\n else         if (orientation == 180) {\n          shaderMatrix.preRotate(180);\n          shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n        }\n else         if (orientation == 270) {\n          shaderMatrix.preRotate(270);\n          shaderMatrix.preTranslate(-drawRegion.height(),0);\n        }\n        shaderMatrix.preScale(scale,scale);\n        if (isRoundVideo) {\n          float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n          shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n        }\n        shader.setLocalMatrix(shaderMatrix);\n        roundPaint.setAlpha(alpha);\n        if (isRoundRect) {\n          try {\n            canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n else {\n          for (int a=0; a < roundRadius.length; a++) {\n            radii[a * 2]=roundRadius[a];\n            radii[a * 2 + 1]=roundRadius[a];\n          }\n          roundPath.reset();\n          roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n          roundPath.close();\n          canvas.drawPath(roundPath,roundPaint);\n        }\n      }\n    }\n  }\n else {\n    if (isAspectFit) {\n      float scale=Math.max(scaleW,scaleH);\n      canvas.save();\n      bitmapW/=scale;\n      bitmapH/=scale;\n      drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n      bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n      if (bitmapDrawable instanceof AnimatedFileDrawable) {\n        ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n      }\n      if (isVisible) {\n        try {\n          bitmapDrawable.setAlpha(alpha);\n          bitmapDrawable.draw(canvas);\n        }\n catch (        Exception e) {\n          onBitmapException(bitmapDrawable);\n          FileLog.e(e);\n        }\n      }\n      canvas.restore();\n    }\n else {\n      if (Math.abs(scaleW - scaleH) > 0.00001f) {\n        canvas.save();\n        canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        if (bitmapW / scaleH > imageW) {\n          bitmapW/=scaleH;\n          drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n        }\n else {\n          bitmapH/=scaleW;\n          drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        canvas.save();\n        if (orientation % 360 != 0) {\n          if (centerRotation) {\n            canvas.rotate(orientation,imageW / 2,imageH / 2);\n          }\n else {\n            canvas.rotate(orientation,0,0);\n          }\n        }\n        drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n        if (isRoundVideo) {\n          drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n        }\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n        }\n        if (orientation % 360 == 90 || orientation % 360 == 270) {\n          float width=drawRegion.width() / 2;\n          float height=drawRegion.height() / 2;\n          float centerX=drawRegion.centerX();\n          float centerY=drawRegion.centerY();\n          bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n        }\n else {\n          bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n    }\n  }\n}\n else {\n  drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n  drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n  if (isVisible) {\n    try {\n      drawable.setAlpha(alpha);\n      drawable.draw(canvas);\n    }\n catch (    Exception e) {\n      FileLog.e(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14251,
        "startLineNumber" : 802,
        "startColumnNumber" : 128,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1541,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14375,
        "startLineNumber" : 802,
        "startColumnNumber" : 4,
        "endLineNumber" : 1074,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void drawDrawable(Canvas canvas,Drawable drawable,int alpha,BitmapShader shader,int orientation,int isPressed){\n  if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    Paint paint;\n    if (shader != null) {\n      paint=roundPaint;\n    }\n else {\n      paint=bitmapDrawable.getPaint();\n    }\n    boolean hasFilter=paint != null && paint.getColorFilter() != null;\n    if (hasFilter && isPressed == 0) {\n      if (shader != null) {\n        roundPaint.setColorFilter(null);\n      }\n else       if (staticThumbDrawable != drawable) {\n        bitmapDrawable.setColorFilter(null);\n      }\n    }\n else     if (!hasFilter && isPressed != 0) {\n      if (isPressed == 1) {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedColorFilter);\n        }\n      }\n else {\n        if (shader != null) {\n          roundPaint.setColorFilter(selectedGroupColorFilter);\n        }\n else {\n          bitmapDrawable.setColorFilter(selectedGroupColorFilter);\n        }\n      }\n    }\n    if (colorFilter != null) {\n      if (shader != null) {\n        roundPaint.setColorFilter(colorFilter);\n      }\n else {\n        bitmapDrawable.setColorFilter(colorFilter);\n      }\n    }\n    int bitmapW;\n    int bitmapH;\n    if (bitmapDrawable instanceof AnimatedFileDrawable || bitmapDrawable instanceof RLottieDrawable) {\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmapDrawable.getIntrinsicHeight();\n        bitmapH=bitmapDrawable.getIntrinsicWidth();\n      }\n else {\n        bitmapW=bitmapDrawable.getIntrinsicWidth();\n        bitmapH=bitmapDrawable.getIntrinsicHeight();\n      }\n    }\n else {\n      Bitmap bitmap=bitmapDrawable.getBitmap();\n      if (bitmap != null && bitmap.isRecycled()) {\n        return;\n      }\n      if (orientation % 360 == 90 || orientation % 360 == 270) {\n        bitmapW=bitmap.getHeight();\n        bitmapH=bitmap.getWidth();\n      }\n else {\n        bitmapW=bitmap.getWidth();\n        bitmapH=bitmap.getHeight();\n      }\n    }\n    float realImageW=imageW - sideClip * 2;\n    float realImageH=imageH - sideClip * 2;\n    float scaleW=imageW == 0 ? 1.0f : (bitmapW / realImageW);\n    float scaleH=imageH == 0 ? 1.0f : (bitmapH / realImageH);\n    if (shader != null) {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2,imageY + (imageH - bitmapH) / 2,imageX + (imageW + bitmapW) / 2,imageY + (imageH + bitmapH) / 2);\n        if (isVisible) {\n          roundPaint.setShader(shader);\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left,drawRegion.top);\n          shaderMatrix.preScale(1.0f / scale,1.0f / scale);\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          roundRect.set(drawRegion);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n else {\n        roundPaint.setShader(shader);\n        float scale=1.0f / Math.min(scaleW,scaleH);\n        roundRect.set(imageX + sideClip,imageY + sideClip,imageX + imageW - sideClip,imageY + imageH - sideClip);\n        shaderMatrix.reset();\n        if (Math.abs(scaleW - scaleH) > 0.0005f) {\n          if (bitmapW / scaleH > realImageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - realImageW) / 2,imageY,imageX + (bitmapW + realImageW) / 2,imageY + realImageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - realImageH) / 2,imageX + realImageW,imageY + (bitmapH + realImageH) / 2);\n          }\n        }\n else {\n          drawRegion.set(imageX,imageY,imageX + realImageW,imageY + realImageH);\n        }\n        if (isVisible) {\n          shaderMatrix.reset();\n          shaderMatrix.setTranslate(drawRegion.left + sideClip,drawRegion.top + sideClip);\n          if (orientation == 90) {\n            shaderMatrix.preRotate(90);\n            shaderMatrix.preTranslate(0,-drawRegion.width());\n          }\n else           if (orientation == 180) {\n            shaderMatrix.preRotate(180);\n            shaderMatrix.preTranslate(-drawRegion.width(),-drawRegion.height());\n          }\n else           if (orientation == 270) {\n            shaderMatrix.preRotate(270);\n            shaderMatrix.preTranslate(-drawRegion.height(),0);\n          }\n          shaderMatrix.preScale(scale,scale);\n          if (isRoundVideo) {\n            float postScale=(realImageW + AndroidUtilities.roundMessageInset * 2) / realImageW;\n            shaderMatrix.postScale(postScale,postScale,drawRegion.centerX(),drawRegion.centerY());\n          }\n          shader.setLocalMatrix(shaderMatrix);\n          roundPaint.setAlpha(alpha);\n          if (isRoundRect) {\n            try {\n              canvas.drawRoundRect(roundRect,roundRadius[0],roundRadius[0],roundPaint);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n else {\n            for (int a=0; a < roundRadius.length; a++) {\n              radii[a * 2]=roundRadius[a];\n              radii[a * 2 + 1]=roundRadius[a];\n            }\n            roundPath.reset();\n            roundPath.addRoundRect(roundRect,radii,Path.Direction.CW);\n            roundPath.close();\n            canvas.drawPath(roundPath,roundPaint);\n          }\n        }\n      }\n    }\n else {\n      if (isAspectFit) {\n        float scale=Math.max(scaleW,scaleH);\n        canvas.save();\n        bitmapW/=scale;\n        bitmapH/=scale;\n        drawRegion.set(imageX + (imageW - bitmapW) / 2.0f,imageY + (imageH - bitmapH) / 2.0f,imageX + (imageW + bitmapW) / 2.0f,imageY + (imageH + bitmapH) / 2.0f);\n        bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n        if (bitmapDrawable instanceof AnimatedFileDrawable) {\n          ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(drawRegion.left,drawRegion.top,drawRegion.width(),drawRegion.height());\n        }\n        if (isVisible) {\n          try {\n            bitmapDrawable.setAlpha(alpha);\n            bitmapDrawable.draw(canvas);\n          }\n catch (          Exception e) {\n            onBitmapException(bitmapDrawable);\n            FileLog.e(e);\n          }\n        }\n        canvas.restore();\n      }\n else {\n        if (Math.abs(scaleW - scaleH) > 0.00001f) {\n          canvas.save();\n          canvas.clipRect(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          if (bitmapW / scaleH > imageW) {\n            bitmapW/=scaleH;\n            drawRegion.set(imageX - (bitmapW - imageW) / 2.0f,imageY,imageX + (bitmapW + imageW) / 2.0f,imageY + imageH);\n          }\n else {\n            bitmapH/=scaleW;\n            drawRegion.set(imageX,imageY - (bitmapH - imageH) / 2.0f,imageX + imageW,imageY + (bitmapH + imageH) / 2.0f);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n else {\n          canvas.save();\n          if (orientation % 360 != 0) {\n            if (centerRotation) {\n              canvas.rotate(orientation,imageW / 2,imageH / 2);\n            }\n else {\n              canvas.rotate(orientation,0,0);\n            }\n          }\n          drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n          if (isRoundVideo) {\n            drawRegion.inset(-AndroidUtilities.roundMessageInset,-AndroidUtilities.roundMessageInset);\n          }\n          if (bitmapDrawable instanceof AnimatedFileDrawable) {\n            ((AnimatedFileDrawable)bitmapDrawable).setActualDrawRect(imageX,imageY,imageW,imageH);\n          }\n          if (orientation % 360 == 90 || orientation % 360 == 270) {\n            float width=drawRegion.width() / 2;\n            float height=drawRegion.height() / 2;\n            float centerX=drawRegion.centerX();\n            float centerY=drawRegion.centerY();\n            bitmapDrawable.setBounds((int)(centerX - height),(int)(centerY - width),(int)(centerX + height),(int)(centerY + width));\n          }\n else {\n            bitmapDrawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n          }\n          if (isVisible) {\n            try {\n              bitmapDrawable.setAlpha(alpha);\n              bitmapDrawable.draw(canvas);\n            }\n catch (            Exception e) {\n              onBitmapException(bitmapDrawable);\n              FileLog.e(e);\n            }\n          }\n          canvas.restore();\n        }\n      }\n    }\n  }\n else {\n    drawRegion.set(imageX,imageY,imageX + imageW,imageY + imageH);\n    drawable.setBounds((int)drawRegion.left,(int)drawRegion.top,(int)drawRegion.right,(int)drawRegion.bottom);\n    if (isVisible) {\n      try {\n        drawable.setAlpha(alpha);\n        drawable.draw(canvas);\n      }\n catch (      Exception e) {\n        FileLog.e(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1566,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 938,
        "startColumnNumber" : 24,
        "endLineNumber" : 938,
        "endColumnNumber" : 60
      },
      "nodeContext" : "shader.setLocalMatrix(shaderMatrix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Matrix"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 878,
    "startColumnNumber" : 24,
    "endLineNumber" : 878,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 879,
    "startColumnNumber" : 24,
    "endLineNumber" : 879,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 880,
    "startColumnNumber" : 24,
    "endLineNumber" : 880,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 882,
    "startColumnNumber" : 46,
    "endLineNumber" : 882,
    "endColumnNumber" : 58
  }, {
    "charLength" : 12,
    "startLineNumber" : 908,
    "startColumnNumber" : 20,
    "endLineNumber" : 908,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 921,
    "startColumnNumber" : 24,
    "endLineNumber" : 921,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 922,
    "startColumnNumber" : 24,
    "endLineNumber" : 922,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 924,
    "startColumnNumber" : 28,
    "endLineNumber" : 924,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 925,
    "startColumnNumber" : 28,
    "endLineNumber" : 925,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 927,
    "startColumnNumber" : 28,
    "endLineNumber" : 927,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 928,
    "startColumnNumber" : 28,
    "endLineNumber" : 928,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 930,
    "startColumnNumber" : 28,
    "endLineNumber" : 930,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 931,
    "startColumnNumber" : 28,
    "endLineNumber" : 931,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 933,
    "startColumnNumber" : 24,
    "endLineNumber" : 933,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 936,
    "startColumnNumber" : 28,
    "endLineNumber" : 936,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 938,
    "startColumnNumber" : 46,
    "endLineNumber" : 938,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  } ]
}