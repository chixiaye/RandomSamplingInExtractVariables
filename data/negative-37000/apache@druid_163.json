{
  "id" : 163,
  "expression" : "mustBeNullOrEmptyOverwriteSegments",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SequenceMetadata.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mustBeNullOrEmptyOverwriteSegments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 345,
      "startColumnNumber" : 10,
      "endLineNumber" : 345,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 345,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n  throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3879,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SegmentPublishResult publishAnnotatedSegments(@Nullable Set<DataSegment> mustBeNullOrEmptyOverwriteSegments,@Nullable Set<DataSegment> mustBeNullOrEmptyDropSegments,Set<DataSegment> segmentsToPush,@Nullable Object commitMetadata) throws IOException {\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 256,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<org.apache.druid.timeline.DataSegment>"
  }, {
    "nodeContext" : "mustBeNullOrEmptyOverwriteSegments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 345,
      "startColumnNumber" : 57,
      "endLineNumber" : 345,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 345,
        "startColumnNumber" : 57,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 345,
        "startColumnNumber" : 56,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "!mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 345,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n  throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3879,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SegmentPublishResult publishAnnotatedSegments(@Nullable Set<DataSegment> mustBeNullOrEmptyOverwriteSegments,@Nullable Set<DataSegment> mustBeNullOrEmptyDropSegments,Set<DataSegment> segmentsToPush,@Nullable Object commitMetadata) throws IOException {\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 256,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 345,
        "startColumnNumber" : 10,
        "endLineNumber" : 345,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<org.apache.druid.timeline.DataSegment>"
  }, {
    "nodeContext" : "mustBeNullOrEmptyOverwriteSegments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 348,
      "startColumnNumber" : 51,
      "endLineNumber" : 348,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 348,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 86
      },
      "nodeContext" : "SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 346,
        "startColumnNumber" : 14,
        "endLineNumber" : 349,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 346,
        "startColumnNumber" : 8,
        "endLineNumber" : 349,
        "endColumnNumber" : 10
      },
      "nodeContext" : "throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 345,
        "startColumnNumber" : 103,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 345,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n  throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3879,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 421,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SegmentPublishResult publishAnnotatedSegments(@Nullable Set<DataSegment> mustBeNullOrEmptyOverwriteSegments,@Nullable Set<DataSegment> mustBeNullOrEmptyDropSegments,Set<DataSegment> segmentsToPush,@Nullable Object commitMetadata) throws IOException {\n  if (mustBeNullOrEmptyOverwriteSegments != null && !mustBeNullOrEmptyOverwriteSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to overwrite segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments));\n  }\n  if (mustBeNullOrEmptyDropSegments != null && !mustBeNullOrEmptyDropSegments.isEmpty()) {\n    throw new ISE(\"Stream ingestion task unexpectedly attempted to drop segments: %s\",SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyDropSegments));\n  }\n  final Map commitMetaMap=(Map)Preconditions.checkNotNull(commitMetadata,\"commitMetadata\");\n  final SeekableStreamEndSequenceNumbers<PartitionIdType,SequenceOffsetType> finalPartitions=runner.deserializePartitionsFromMetadata(toolbox.getJsonMapper(),commitMetaMap.get(SeekableStreamIndexTaskRunner.METADATA_PUBLISH_PARTITIONS));\n  if (!getEndOffsets().equals(finalPartitions.getPartitionSequenceNumberMap())) {\n    throw new ISE(\"Driver for sequence[%s] attempted to publish invalid metadata[%s].\",SequenceMetadata.this.toString(),commitMetadata);\n  }\n  final SegmentTransactionalInsertAction action;\n  if (segmentsToPush.isEmpty()) {\n    SeekableStreamSequenceNumbers<PartitionIdType,SequenceOffsetType> startPartitions=new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions);\n    if (isMetadataUnchanged(startPartitions,finalPartitions)) {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] are the same, skipping metadata commit.\",startPartitions,finalPartitions);\n      return SegmentPublishResult.ok(segmentsToPush);\n    }\n else {\n      log.info(\"With empty segment set, start offsets [%s] and end offsets [%s] changed, committing new metadata.\",startPartitions,finalPartitions);\n      action=SegmentTransactionalInsertAction.commitMetadataOnlyAction(runner.getAppenderator().getDataSource(),runner.createDataSourceMetadata(startPartitions),runner.createDataSourceMetadata(finalPartitions));\n    }\n  }\n else   if (useTransaction) {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,runner.createDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(finalPartitions.getStream(),getStartOffsets(),exclusiveStartPartitions)),runner.createDataSourceMetadata(finalPartitions));\n  }\n else {\n    action=SegmentTransactionalInsertAction.appendAction(segmentsToPush,null,null);\n  }\n  return toolbox.getTaskActionClient().submit(action);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 256,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 348,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 86
      },
      "nodeContext" : "SegmentUtils.commaSeparatedIdentifiers(mustBeNullOrEmptyOverwriteSegments)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<org.apache.druid.timeline.DataSegment>"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 345,
    "startColumnNumber" : 10,
    "endLineNumber" : 345,
    "endColumnNumber" : 44
  }, {
    "charLength" : 34,
    "startLineNumber" : 345,
    "startColumnNumber" : 57,
    "endLineNumber" : 345,
    "endColumnNumber" : 91
  }, {
    "charLength" : 34,
    "startLineNumber" : 348,
    "startColumnNumber" : 51,
    "endLineNumber" : 348,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}