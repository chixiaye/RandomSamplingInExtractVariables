{
  "id" : 271,
  "expression" : "new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1609,
      "startLineNumber" : 173,
      "startColumnNumber" : 13,
      "endLineNumber" : 210,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 212,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1619,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 6
      },
      "nodeContext" : "doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 214,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n).when(httpUtil)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 217,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 69
      },
      "nodeContext" : "doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 227,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 70
      },
      "nodeContext" : "doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 228,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 158,
        "startColumnNumber" : 70,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);\n  RemoteConfigRepository anotherRepository=mock(RemoteConfigRepository.class);\n  final String someNamespace=\"someNamespace\";\n  final String anotherNamespace=\"anotherNamespace\";\n  final ApolloConfigNotification someNotification=mock(ApolloConfigNotification.class);\n  when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n  final ApolloConfigNotification anotherNotification=mock(ApolloConfigNotification.class);\n  when(anotherNotification.getNamespaceName()).thenReturn(anotherNamespace);\n  final SettableFuture<Boolean> submitAnotherNamespaceStart=SettableFuture.create();\n  final SettableFuture<Boolean> submitAnotherNamespaceFinish=SettableFuture.create();\n  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n    final AtomicInteger counter=new AtomicInteger();\n    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {\n      try {\n        TimeUnit.MILLISECONDS.sleep(50);\n      }\n catch (      InterruptedException e) {\n      }\n      if (counter.incrementAndGet() == 1) {\n        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n        assertTrue(request.getUrl().contains(\"notifications=\"));\n        assertTrue(request.getUrl().contains(someNamespace));\n        submitAnotherNamespaceStart.set(true);\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n      }\n else       if (submitAnotherNamespaceFinish.get()) {\n        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n        assertTrue(request.getUrl().contains(\"notifications=\"));\n        assertTrue(request.getUrl().contains(someNamespace));\n        assertTrue(request.getUrl().contains(anotherNamespace));\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n      }\n else {\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n        when(pollResponse.getBody()).thenReturn(null);\n      }\n      return pollResponse;\n    }\n  }\n).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));\n  final SettableFuture<Boolean> onAnotherRepositoryNotified=SettableFuture.create();\n  doAnswer(new Answer<Void>(){\n    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {\n      onAnotherRepositoryNotified.set(true);\n      return null;\n    }\n  }\n).when(anotherRepository).onLongPollNotified(any(ServiceDTO.class));\n  remoteConfigLongPollService.submit(someNamespace,someRepository);\n  submitAnotherNamespaceStart.get(5000,TimeUnit.MILLISECONDS);\n  remoteConfigLongPollService.submit(anotherNamespace,anotherRepository);\n  submitAnotherNamespaceFinish.set(true);\n  onAnotherRepositoryNotified.get(500,TimeUnit.MILLISECONDS);\n  remoteConfigLongPollService.stopLongPollingRefresh();\n  verify(someRepository,times(1)).onLongPollNotified(any(ServiceDTO.class));\n  verify(anotherRepository,times(1)).onLongPollNotified(any(ServiceDTO.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3472,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSubmitLongPollMultipleNamespaces() throws Exception {\n  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);\n  RemoteConfigRepository anotherRepository=mock(RemoteConfigRepository.class);\n  final String someNamespace=\"someNamespace\";\n  final String anotherNamespace=\"anotherNamespace\";\n  final ApolloConfigNotification someNotification=mock(ApolloConfigNotification.class);\n  when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n  final ApolloConfigNotification anotherNotification=mock(ApolloConfigNotification.class);\n  when(anotherNotification.getNamespaceName()).thenReturn(anotherNamespace);\n  final SettableFuture<Boolean> submitAnotherNamespaceStart=SettableFuture.create();\n  final SettableFuture<Boolean> submitAnotherNamespaceFinish=SettableFuture.create();\n  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n    final AtomicInteger counter=new AtomicInteger();\n    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {\n      try {\n        TimeUnit.MILLISECONDS.sleep(50);\n      }\n catch (      InterruptedException e) {\n      }\n      if (counter.incrementAndGet() == 1) {\n        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n        assertTrue(request.getUrl().contains(\"notifications=\"));\n        assertTrue(request.getUrl().contains(someNamespace));\n        submitAnotherNamespaceStart.set(true);\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n      }\n else       if (submitAnotherNamespaceFinish.get()) {\n        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n        assertTrue(request.getUrl().contains(\"notifications=\"));\n        assertTrue(request.getUrl().contains(someNamespace));\n        assertTrue(request.getUrl().contains(anotherNamespace));\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n      }\n else {\n        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n        when(pollResponse.getBody()).thenReturn(null);\n      }\n      return pollResponse;\n    }\n  }\n).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));\n  final SettableFuture<Boolean> onAnotherRepositoryNotified=SettableFuture.create();\n  doAnswer(new Answer<Void>(){\n    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {\n      onAnotherRepositoryNotified.set(true);\n      return null;\n    }\n  }\n).when(anotherRepository).onLongPollNotified(any(ServiceDTO.class));\n  remoteConfigLongPollService.submit(someNamespace,someRepository);\n  submitAnotherNamespaceStart.get(5000,TimeUnit.MILLISECONDS);\n  remoteConfigLongPollService.submit(anotherNamespace,anotherRepository);\n  submitAnotherNamespaceFinish.set(true);\n  onAnotherRepositoryNotified.get(500,TimeUnit.MILLISECONDS);\n  remoteConfigLongPollService.stopLongPollingRefresh();\n  verify(someRepository,times(1)).onLongPollNotified(any(ServiceDTO.class));\n  verify(anotherRepository,times(1)).onLongPollNotified(any(ServiceDTO.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 453,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 70
      },
      "nodeContext" : "doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){\n  final AtomicInteger counter=new AtomicInteger();\n  @Override public HttpResponse<List<ApolloConfigNotification>> answer(  InvocationOnMock invocation) throws Throwable {\n    try {\n      TimeUnit.MILLISECONDS.sleep(50);\n    }\n catch (    InterruptedException e) {\n    }\n    if (counter.incrementAndGet() == 1) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      submitAnotherNamespaceStart.set(true);\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    }\n else     if (submitAnotherNamespaceFinish.get()) {\n      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);\n      assertTrue(request.getUrl().contains(\"notifications=\"));\n      assertTrue(request.getUrl().contains(someNamespace));\n      assertTrue(request.getUrl().contains(anotherNamespace));\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n      when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));\n    }\n else {\n      when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n      when(pollResponse.getBody()).thenReturn(null);\n    }\n    return pollResponse;\n  }\n}\n).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 228,
      "astHeight" : 17
    },
    "tokenLength" : 102,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1609,
    "startLineNumber" : 173,
    "startColumnNumber" : 13,
    "endLineNumber" : 210,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}