{
  "id" : 69,
  "expression" : "groupByTestHelper.runQueryOnSegmentsObjs(segments,query)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/virtual/VectorizedVirtualColumnTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groupByTestHelper.runQueryOnSegmentsObjs(segments,query)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 544,
      "startColumnNumber" : 27,
      "endLineNumber" : 544,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 544,
        "startColumnNumber" : 27,
        "endLineNumber" : 544,
        "endColumnNumber" : 93
      },
      "nodeContext" : "groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 544,
        "startColumnNumber" : 20,
        "endLineNumber" : 544,
        "endColumnNumber" : 93
      },
      "nodeContext" : "rows=groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 544,
        "startColumnNumber" : 4,
        "endLineNumber" : 544,
        "endColumnNumber" : 94
      },
      "nodeContext" : "List<ResultRow> rows=groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 530,
        "startColumnNumber" : 2,
        "endLineNumber" : 558,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(Granularities.ALL).setVirtualColumns(new AlwaysTwoVectorizedVirtualColumn(ALWAYS_TWO,capabilities,canVectorize)).addDimension(new DefaultDimensionSpec(ALWAYS_TWO,ALWAYS_TWO,capabilities.getType())).setAggregatorSpecs(new AlwaysTwoCounterAggregatorFactory(COUNT,ALWAYS_TWO)).setInterval(\"2000/2030\").setContext(context).addOrderByColumn(ALWAYS_TWO).build();\n  List<ResultRow> rows=groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList();\n  List<ResultRow> expectedRows=Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"2000\",COUNT,getCount(capabilities),ALWAYS_TWO,getTwo(capabilities)));\n  TestHelper.assertExpectedObjects(expectedRows,rows,\"failed\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 529,
        "startColumnNumber" : 2,
        "endLineNumber" : 558,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testGroupBy(ColumnCapabilities capabilities,Map<String,Object> context,boolean canVectorize){\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(Granularities.ALL).setVirtualColumns(new AlwaysTwoVectorizedVirtualColumn(ALWAYS_TWO,capabilities,canVectorize)).addDimension(new DefaultDimensionSpec(ALWAYS_TWO,ALWAYS_TWO,capabilities.getType())).setAggregatorSpecs(new AlwaysTwoCounterAggregatorFactory(COUNT,ALWAYS_TWO)).setInterval(\"2000/2030\").setContext(context).addOrderByColumn(ALWAYS_TWO).build();\n  List<ResultRow> rows=groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList();\n  List<ResultRow> expectedRows=Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"2000\",COUNT,getCount(capabilities),ALWAYS_TWO,getTwo(capabilities)));\n  TestHelper.assertExpectedObjects(expectedRows,rows,\"failed\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 544,
        "startColumnNumber" : 4,
        "endLineNumber" : 544,
        "endColumnNumber" : 94
      },
      "nodeContext" : "List<ResultRow> rows=groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.apache.druid.java.util.common.guava.Sequence<org.apache.druid.query.groupby.ResultRow>"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 544,
    "startColumnNumber" : 27,
    "endLineNumber" : 544,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ ]
}