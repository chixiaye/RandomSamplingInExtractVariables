{
  "id" : 360,
  "expression" : "fieldType.toUpperCase()",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/config/converts/OracleTypeConvert.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fieldType.toUpperCase()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 33,
      "startColumnNumber" : 19,
      "endLineNumber" : 33,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 33,
        "startColumnNumber" : 15,
        "endLineNumber" : 33,
        "endColumnNumber" : 42
      },
      "nodeContext" : "t=fieldType.toUpperCase()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 43
      },
      "nodeContext" : "String t=fieldType.toUpperCase();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 32,
        "startColumnNumber" : 61,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String t=fieldType.toUpperCase();\n  if (t.contains(\"CHAR\")) {\n    return DbColumnType.STRING;\n  }\n else   if (t.contains(\"DATE\") || t.contains(\"TIMESTAMP\")) {\n    return DbColumnType.DATE;\n  }\n else   if (t.contains(\"NUMBER\")) {\n    if (t.matches(\"NUMBER\\\\(+\\\\d\\\\)\")) {\n      return DbColumnType.INTEGER;\n    }\n else     if (t.matches(\"NUMBER\\\\(+\\\\d{2}+\\\\)\")) {\n      return DbColumnType.LONG;\n    }\n    return DbColumnType.DOUBLE;\n  }\n else   if (t.contains(\"FLOAT\")) {\n    return DbColumnType.FLOAT;\n  }\n else   if (t.contains(\"clob\")) {\n    return DbColumnType.CLOB;\n  }\n else   if (t.contains(\"BLOB\")) {\n    return DbColumnType.OBJECT;\n  }\n else   if (t.contains(\"binary\")) {\n    return DbColumnType.BYTE_ARRAY;\n  }\n else   if (t.contains(\"RAW\")) {\n    return DbColumnType.BYTE_ARRAY;\n  }\n  return DbColumnType.STRING;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public DbColumnType processTypeConvert(String fieldType){\n  String t=fieldType.toUpperCase();\n  if (t.contains(\"CHAR\")) {\n    return DbColumnType.STRING;\n  }\n else   if (t.contains(\"DATE\") || t.contains(\"TIMESTAMP\")) {\n    return DbColumnType.DATE;\n  }\n else   if (t.contains(\"NUMBER\")) {\n    if (t.matches(\"NUMBER\\\\(+\\\\d\\\\)\")) {\n      return DbColumnType.INTEGER;\n    }\n else     if (t.matches(\"NUMBER\\\\(+\\\\d{2}+\\\\)\")) {\n      return DbColumnType.LONG;\n    }\n    return DbColumnType.DOUBLE;\n  }\n else   if (t.contains(\"FLOAT\")) {\n    return DbColumnType.FLOAT;\n  }\n else   if (t.contains(\"clob\")) {\n    return DbColumnType.CLOB;\n  }\n else   if (t.contains(\"BLOB\")) {\n    return DbColumnType.OBJECT;\n  }\n else   if (t.contains(\"binary\")) {\n    return DbColumnType.BYTE_ARRAY;\n  }\n else   if (t.contains(\"RAW\")) {\n    return DbColumnType.BYTE_ARRAY;\n  }\n  return DbColumnType.STRING;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 43
      },
      "nodeContext" : "String t=fieldType.toUpperCase();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 33,
    "startColumnNumber" : 19,
    "endLineNumber" : 33,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}