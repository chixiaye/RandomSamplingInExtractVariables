{
  "id" : 455,
  "expression" : "new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/ssl/BouncyCastleAlpnSslUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 239,
      "startLineNumber" : 99,
      "startColumnNumber" : 67,
      "endLineNumber" : 104,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 22,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 99,
        "startColumnNumber" : 37,
        "endLineNumber" : 104,
        "endColumnNumber" : 14
      },
      "nodeContext" : "AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 14
      },
      "nodeContext" : "getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 15
      },
      "nodeContext" : "getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3646,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  bcSslEngine=Class.forName(\"org.bouncycastle.jsse.BCSSLEngine\");\n  final Class testBCSslEngine=bcSslEngine;\n  bcSslParameters=Class.forName(\"org.bouncycastle.jsse.BCSSLParameters\");\n  Object bcSslParametersInstance=bcSslParameters.newInstance();\n  final Class testBCSslParameters=bcSslParameters;\n  bcApplicationProtocolSelector=Class.forName(\"org.bouncycastle.jsse.BCApplicationProtocolSelector\");\n  final Class testBCApplicationProtocolSelector=bcApplicationProtocolSelector;\n  bcApplicationProtocolSelectorSelect=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCApplicationProtocolSelector.getMethod(\"select\",Object.class,List.class);\n    }\n  }\n);\n  SSLContext context=getSSLContext(\"BCJSSE\");\n  SSLEngine engine=context.createSSLEngine();\n  setParameters=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"setParameters\",testBCSslParameters);\n    }\n  }\n);\n  setParameters.invoke(engine,bcSslParametersInstance);\n  setApplicationProtocols=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslParameters.getMethod(\"setApplicationProtocols\",String[].class);\n    }\n  }\n);\n  setApplicationProtocols.invoke(bcSslParametersInstance,new Object[]{EmptyArrays.EMPTY_STRINGS});\n  getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n    }\n  }\n);\n  getApplicationProtocol.invoke(engine);\n  getHandshakeApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getHandshakeApplicationProtocol\");\n    }\n  }\n);\n  getHandshakeApplicationProtocol.invoke(engine);\n  setHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"setBCHandshakeApplicationProtocolSelector\",testBCApplicationProtocolSelector);\n    }\n  }\n);\n  getHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getBCHandshakeApplicationProtocolSelector\");\n    }\n  }\n);\n  getHandshakeApplicationProtocolSelector.invoke(engine);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4207,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  bcSslEngine=Class.forName(\"org.bouncycastle.jsse.BCSSLEngine\");\n  final Class testBCSslEngine=bcSslEngine;\n  bcSslParameters=Class.forName(\"org.bouncycastle.jsse.BCSSLParameters\");\n  Object bcSslParametersInstance=bcSslParameters.newInstance();\n  final Class testBCSslParameters=bcSslParameters;\n  bcApplicationProtocolSelector=Class.forName(\"org.bouncycastle.jsse.BCApplicationProtocolSelector\");\n  final Class testBCApplicationProtocolSelector=bcApplicationProtocolSelector;\n  bcApplicationProtocolSelectorSelect=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCApplicationProtocolSelector.getMethod(\"select\",Object.class,List.class);\n    }\n  }\n);\n  SSLContext context=getSSLContext(\"BCJSSE\");\n  SSLEngine engine=context.createSSLEngine();\n  setParameters=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"setParameters\",testBCSslParameters);\n    }\n  }\n);\n  setParameters.invoke(engine,bcSslParametersInstance);\n  setApplicationProtocols=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslParameters.getMethod(\"setApplicationProtocols\",String[].class);\n    }\n  }\n);\n  setApplicationProtocols.invoke(bcSslParametersInstance,new Object[]{EmptyArrays.EMPTY_STRINGS});\n  getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n    }\n  }\n);\n  getApplicationProtocol.invoke(engine);\n  getHandshakeApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getHandshakeApplicationProtocol\");\n    }\n  }\n);\n  getHandshakeApplicationProtocol.invoke(engine);\n  setHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"setBCHandshakeApplicationProtocolSelector\",testBCApplicationProtocolSelector);\n    }\n  }\n);\n  getHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n    @Override public Method run() throws Exception {\n      return testBCSslEngine.getMethod(\"getBCHandshakeApplicationProtocolSelector\");\n    }\n  }\n);\n  getHandshakeApplicationProtocolSelector.invoke(engine);\n}\n catch (Throwable t) {\n  logger.error(\"Unable to initialize BouncyCastleAlpnSslUtils.\",t);\n  bcSslParameters=null;\n  setParameters=null;\n  setApplicationProtocols=null;\n  getApplicationProtocol=null;\n  getHandshakeApplicationProtocol=null;\n  setHandshakeApplicationProtocolSelector=null;\n  getHandshakeApplicationProtocolSelector=null;\n  bcApplicationProtocolSelectorSelect=null;\n  bcApplicationProtocolSelector=null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 360,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 5304,
        "startLineNumber" : 48,
        "startColumnNumber" : 11,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class bcSslEngine;\n  Class bcSslParameters;\n  Method setParameters;\n  Method setApplicationProtocols;\n  Method getApplicationProtocol;\n  Method getHandshakeApplicationProtocol;\n  Method setHandshakeApplicationProtocolSelector;\n  Method getHandshakeApplicationProtocolSelector;\n  Method bcApplicationProtocolSelectorSelect;\n  Class bcApplicationProtocolSelector;\n  try {\n    bcSslEngine=Class.forName(\"org.bouncycastle.jsse.BCSSLEngine\");\n    final Class testBCSslEngine=bcSslEngine;\n    bcSslParameters=Class.forName(\"org.bouncycastle.jsse.BCSSLParameters\");\n    Object bcSslParametersInstance=bcSslParameters.newInstance();\n    final Class testBCSslParameters=bcSslParameters;\n    bcApplicationProtocolSelector=Class.forName(\"org.bouncycastle.jsse.BCApplicationProtocolSelector\");\n    final Class testBCApplicationProtocolSelector=bcApplicationProtocolSelector;\n    bcApplicationProtocolSelectorSelect=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCApplicationProtocolSelector.getMethod(\"select\",Object.class,List.class);\n      }\n    }\n);\n    SSLContext context=getSSLContext(\"BCJSSE\");\n    SSLEngine engine=context.createSSLEngine();\n    setParameters=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"setParameters\",testBCSslParameters);\n      }\n    }\n);\n    setParameters.invoke(engine,bcSslParametersInstance);\n    setApplicationProtocols=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslParameters.getMethod(\"setApplicationProtocols\",String[].class);\n      }\n    }\n);\n    setApplicationProtocols.invoke(bcSslParametersInstance,new Object[]{EmptyArrays.EMPTY_STRINGS});\n    getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n      }\n    }\n);\n    getApplicationProtocol.invoke(engine);\n    getHandshakeApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getHandshakeApplicationProtocol\");\n      }\n    }\n);\n    getHandshakeApplicationProtocol.invoke(engine);\n    setHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"setBCHandshakeApplicationProtocolSelector\",testBCApplicationProtocolSelector);\n      }\n    }\n);\n    getHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getBCHandshakeApplicationProtocolSelector\");\n      }\n    }\n);\n    getHandshakeApplicationProtocolSelector.invoke(engine);\n  }\n catch (  Throwable t) {\n    logger.error(\"Unable to initialize BouncyCastleAlpnSslUtils.\",t);\n    bcSslParameters=null;\n    setParameters=null;\n    setApplicationProtocols=null;\n    getApplicationProtocol=null;\n    getHandshakeApplicationProtocol=null;\n    setHandshakeApplicationProtocolSelector=null;\n    getHandshakeApplicationProtocolSelector=null;\n    bcApplicationProtocolSelectorSelect=null;\n    bcApplicationProtocolSelector=null;\n  }\n  BC_SSL_PARAMETERS=bcSslParameters;\n  SET_PARAMETERS=setParameters;\n  SET_APPLICATION_PROTOCOLS=setApplicationProtocols;\n  GET_APPLICATION_PROTOCOL=getApplicationProtocol;\n  GET_HANDSHAKE_APPLICATION_PROTOCOL=getHandshakeApplicationProtocol;\n  SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR=setHandshakeApplicationProtocolSelector;\n  GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR=getHandshakeApplicationProtocolSelector;\n  BC_APPLICATION_PROTOCOL_SELECTOR_SELECT=bcApplicationProtocolSelectorSelect;\n  BC_APPLICATION_PROTOCOL_SELECTOR=bcApplicationProtocolSelector;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 447,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5311,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  Class bcSslEngine;\n  Class bcSslParameters;\n  Method setParameters;\n  Method setApplicationProtocols;\n  Method getApplicationProtocol;\n  Method getHandshakeApplicationProtocol;\n  Method setHandshakeApplicationProtocolSelector;\n  Method getHandshakeApplicationProtocolSelector;\n  Method bcApplicationProtocolSelectorSelect;\n  Class bcApplicationProtocolSelector;\n  try {\n    bcSslEngine=Class.forName(\"org.bouncycastle.jsse.BCSSLEngine\");\n    final Class testBCSslEngine=bcSslEngine;\n    bcSslParameters=Class.forName(\"org.bouncycastle.jsse.BCSSLParameters\");\n    Object bcSslParametersInstance=bcSslParameters.newInstance();\n    final Class testBCSslParameters=bcSslParameters;\n    bcApplicationProtocolSelector=Class.forName(\"org.bouncycastle.jsse.BCApplicationProtocolSelector\");\n    final Class testBCApplicationProtocolSelector=bcApplicationProtocolSelector;\n    bcApplicationProtocolSelectorSelect=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCApplicationProtocolSelector.getMethod(\"select\",Object.class,List.class);\n      }\n    }\n);\n    SSLContext context=getSSLContext(\"BCJSSE\");\n    SSLEngine engine=context.createSSLEngine();\n    setParameters=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"setParameters\",testBCSslParameters);\n      }\n    }\n);\n    setParameters.invoke(engine,bcSslParametersInstance);\n    setApplicationProtocols=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslParameters.getMethod(\"setApplicationProtocols\",String[].class);\n      }\n    }\n);\n    setApplicationProtocols.invoke(bcSslParametersInstance,new Object[]{EmptyArrays.EMPTY_STRINGS});\n    getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n      }\n    }\n);\n    getApplicationProtocol.invoke(engine);\n    getHandshakeApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getHandshakeApplicationProtocol\");\n      }\n    }\n);\n    getHandshakeApplicationProtocol.invoke(engine);\n    setHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"setBCHandshakeApplicationProtocolSelector\",testBCApplicationProtocolSelector);\n      }\n    }\n);\n    getHandshakeApplicationProtocolSelector=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n      @Override public Method run() throws Exception {\n        return testBCSslEngine.getMethod(\"getBCHandshakeApplicationProtocolSelector\");\n      }\n    }\n);\n    getHandshakeApplicationProtocolSelector.invoke(engine);\n  }\n catch (  Throwable t) {\n    logger.error(\"Unable to initialize BouncyCastleAlpnSslUtils.\",t);\n    bcSslParameters=null;\n    setParameters=null;\n    setApplicationProtocols=null;\n    getApplicationProtocol=null;\n    getHandshakeApplicationProtocol=null;\n    setHandshakeApplicationProtocolSelector=null;\n    getHandshakeApplicationProtocolSelector=null;\n    bcApplicationProtocolSelectorSelect=null;\n    bcApplicationProtocolSelector=null;\n  }\n  BC_SSL_PARAMETERS=bcSslParameters;\n  SET_PARAMETERS=setParameters;\n  SET_APPLICATION_PROTOCOLS=setApplicationProtocols;\n  GET_APPLICATION_PROTOCOL=getApplicationProtocol;\n  GET_HANDSHAKE_APPLICATION_PROTOCOL=getHandshakeApplicationProtocol;\n  SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR=setHandshakeApplicationProtocolSelector;\n  GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR=getHandshakeApplicationProtocolSelector;\n  BC_APPLICATION_PROTOCOL_SELECTOR_SELECT=bcApplicationProtocolSelectorSelect;\n  BC_APPLICATION_PROTOCOL_SELECTOR=bcApplicationProtocolSelector;\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 449,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 15
      },
      "nodeContext" : "getApplicationProtocol=AccessController.doPrivileged(new PrivilegedExceptionAction<Method>(){\n  @Override public Method run() throws Exception {\n    return testBCSslEngine.getMethod(\"getApplicationProtocol\");\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 10
    },
    "tokenLength" : 8,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 239,
    "startLineNumber" : 99,
    "startColumnNumber" : 67,
    "endLineNumber" : 104,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}