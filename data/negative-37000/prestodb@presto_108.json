{
  "id" : 108,
  "expression" : "dictionarySize",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/test/java/com/facebook/presto/orc/writer/TestSliceDictionaryColumnWriter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dictionarySize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 140,
      "startColumnNumber" : 54,
      "endLineNumber" : 140,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 140,
        "startColumnNumber" : 38,
        "endLineNumber" : 140,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new ArrayList<>(dictionarySize)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 140,
        "startColumnNumber" : 21,
        "endLineNumber" : 140,
        "endColumnNumber" : 69
      },
      "nodeContext" : "dictionaryKeys=new ArrayList<>(dictionarySize)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 70
      },
      "nodeContext" : "List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1350,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DictionaryColumnWriter writer=getDictionaryColumnWriter(orcEncoding,sortDictionaryKeys);\n  for (int index=0; index < values.size(); ) {\n    int endIndex=Math.min(index + 10_000,values.size());\n    BlockBuilder blockBuilder=VARCHAR.createBlockBuilder(null,10_000);\n    while (index < endIndex) {\n      VARCHAR.writeSlice(blockBuilder,utf8Slice(values.get(index++)));\n    }\n    writer.beginRowGroup();\n    writer.writeBlock(blockBuilder);\n    writer.finishRowGroup();\n  }\n  writer.close();\n  List<StreamDataOutput> streams=writer.getDataStreams();\n  int dictionarySize=writer.getColumnEncodings().get(COLUMN_ID).getDictionarySize();\n  ByteArrayInputStream dictionaryDataStream=new ByteArrayInputStream(getOrcInputStream(streams,DICTIONARY_DATA));\n  LongInputStream dictionaryLengthStream=getDictionaryLengthStream(streams,orcEncoding);\n  List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n  for (int i=0; i < dictionarySize; i++) {\n    int length=toIntExact(dictionaryLengthStream.next());\n    String dictionaryKey=new String(dictionaryDataStream.next(length),UTF_8);\n    dictionaryKeys.add(dictionaryKey);\n  }\n  return dictionaryKeys;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<String> getDictionaryKeys(List<String> values,OrcEncoding orcEncoding,boolean sortDictionaryKeys) throws IOException {\n  DictionaryColumnWriter writer=getDictionaryColumnWriter(orcEncoding,sortDictionaryKeys);\n  for (int index=0; index < values.size(); ) {\n    int endIndex=Math.min(index + 10_000,values.size());\n    BlockBuilder blockBuilder=VARCHAR.createBlockBuilder(null,10_000);\n    while (index < endIndex) {\n      VARCHAR.writeSlice(blockBuilder,utf8Slice(values.get(index++)));\n    }\n    writer.beginRowGroup();\n    writer.writeBlock(blockBuilder);\n    writer.finishRowGroup();\n  }\n  writer.close();\n  List<StreamDataOutput> streams=writer.getDataStreams();\n  int dictionarySize=writer.getColumnEncodings().get(COLUMN_ID).getDictionarySize();\n  ByteArrayInputStream dictionaryDataStream=new ByteArrayInputStream(getOrcInputStream(streams,DICTIONARY_DATA));\n  LongInputStream dictionaryLengthStream=getDictionaryLengthStream(streams,orcEncoding);\n  List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n  for (int i=0; i < dictionarySize; i++) {\n    int length=toIntExact(dictionaryLengthStream.next());\n    String dictionaryKey=new String(dictionaryDataStream.next(length),UTF_8);\n    dictionaryKeys.add(dictionaryKey);\n  }\n  return dictionaryKeys;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 70
      },
      "nodeContext" : "List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "dictionarySize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 141,
      "startColumnNumber" : 28,
      "endLineNumber" : 141,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < dictionarySize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < dictionarySize; i++) {\n  int length=toIntExact(dictionaryLengthStream.next());\n  String dictionaryKey=new String(dictionaryDataStream.next(length),UTF_8);\n  dictionaryKeys.add(dictionaryKey);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1350,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DictionaryColumnWriter writer=getDictionaryColumnWriter(orcEncoding,sortDictionaryKeys);\n  for (int index=0; index < values.size(); ) {\n    int endIndex=Math.min(index + 10_000,values.size());\n    BlockBuilder blockBuilder=VARCHAR.createBlockBuilder(null,10_000);\n    while (index < endIndex) {\n      VARCHAR.writeSlice(blockBuilder,utf8Slice(values.get(index++)));\n    }\n    writer.beginRowGroup();\n    writer.writeBlock(blockBuilder);\n    writer.finishRowGroup();\n  }\n  writer.close();\n  List<StreamDataOutput> streams=writer.getDataStreams();\n  int dictionarySize=writer.getColumnEncodings().get(COLUMN_ID).getDictionarySize();\n  ByteArrayInputStream dictionaryDataStream=new ByteArrayInputStream(getOrcInputStream(streams,DICTIONARY_DATA));\n  LongInputStream dictionaryLengthStream=getDictionaryLengthStream(streams,orcEncoding);\n  List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n  for (int i=0; i < dictionarySize; i++) {\n    int length=toIntExact(dictionaryLengthStream.next());\n    String dictionaryKey=new String(dictionaryDataStream.next(length),UTF_8);\n    dictionaryKeys.add(dictionaryKey);\n  }\n  return dictionaryKeys;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<String> getDictionaryKeys(List<String> values,OrcEncoding orcEncoding,boolean sortDictionaryKeys) throws IOException {\n  DictionaryColumnWriter writer=getDictionaryColumnWriter(orcEncoding,sortDictionaryKeys);\n  for (int index=0; index < values.size(); ) {\n    int endIndex=Math.min(index + 10_000,values.size());\n    BlockBuilder blockBuilder=VARCHAR.createBlockBuilder(null,10_000);\n    while (index < endIndex) {\n      VARCHAR.writeSlice(blockBuilder,utf8Slice(values.get(index++)));\n    }\n    writer.beginRowGroup();\n    writer.writeBlock(blockBuilder);\n    writer.finishRowGroup();\n  }\n  writer.close();\n  List<StreamDataOutput> streams=writer.getDataStreams();\n  int dictionarySize=writer.getColumnEncodings().get(COLUMN_ID).getDictionarySize();\n  ByteArrayInputStream dictionaryDataStream=new ByteArrayInputStream(getOrcInputStream(streams,DICTIONARY_DATA));\n  LongInputStream dictionaryLengthStream=getDictionaryLengthStream(streams,orcEncoding);\n  List<String> dictionaryKeys=new ArrayList<>(dictionarySize);\n  for (int i=0; i < dictionarySize; i++) {\n    int length=toIntExact(dictionaryLengthStream.next());\n    String dictionaryKey=new String(dictionaryDataStream.next(length),UTF_8);\n    dictionaryKeys.add(dictionaryKey);\n  }\n  return dictionaryKeys;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < dictionarySize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 140,
    "startColumnNumber" : 54,
    "endLineNumber" : 140,
    "endColumnNumber" : 68
  }, {
    "charLength" : 14,
    "startLineNumber" : 141,
    "startColumnNumber" : 28,
    "endLineNumber" : 141,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}