{
  "id" : 182,
  "expression" : "Schedulers",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Schedulers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 390,
      "startColumnNumber" : 29,
      "endLineNumber" : 390,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 390,
        "startColumnNumber" : 29,
        "endLineNumber" : 390,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Schedulers.io()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 389,
        "startColumnNumber" : 24,
        "endLineNumber" : 390,
        "endColumnNumber" : 45
      },
      "nodeContext" : "playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 389,
        "startColumnNumber" : 24,
        "endLineNumber" : 446,
        "endColumnNumber" : 18
      },
      "nodeContext" : "playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((List<PlaylistStreamEntry> playlist) -> {\n  final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n  final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n  final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n  final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n  boolean thumbnailVideoRemoved=false;\n  final ArrayList<Long> historyStreamIds=new ArrayList<>();\n  while (historyIter.hasNext()) {\n    historyStreamIds.add(historyIter.next().getStreamId());\n  }\n  if (removePartiallyWatched) {\n    while (playlistIter.hasNext()) {\n      final PlaylistStreamEntry playlistItem=playlistIter.next();\n      int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      if (indexInHistory < 0) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n else {\n    final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n    while (playlistIter.hasNext()) {\n      PlaylistStreamEntry playlistItem=playlistIter.next();\n      final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      final boolean hasState=streamStatesIter.next() != null;\n      if (indexInHistory < 0 || hasState) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n  return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 253,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 3293,
        "startLineNumber" : 389,
        "startColumnNumber" : 24,
        "endLineNumber" : 447,
        "endColumnNumber" : 58
      },
      "nodeContext" : "playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((List<PlaylistStreamEntry> playlist) -> {\n  final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n  final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n  final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n  final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n  boolean thumbnailVideoRemoved=false;\n  final ArrayList<Long> historyStreamIds=new ArrayList<>();\n  while (historyIter.hasNext()) {\n    historyStreamIds.add(historyIter.next().getStreamId());\n  }\n  if (removePartiallyWatched) {\n    while (playlistIter.hasNext()) {\n      final PlaylistStreamEntry playlistItem=playlistIter.next();\n      int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      if (indexInHistory < 0) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n else {\n    final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n    while (playlistIter.hasNext()) {\n      PlaylistStreamEntry playlistItem=playlistIter.next();\n      final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      final boolean hasState=streamStatesIter.next() != null;\n      if (indexInHistory < 0 || hasState) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n  return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n}\n).observeOn(AndroidSchedulers.mainThread())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 258,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 4199,
        "startLineNumber" : 389,
        "startColumnNumber" : 24,
        "endLineNumber" : 470,
        "endColumnNumber" : 33
      },
      "nodeContext" : "playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((List<PlaylistStreamEntry> playlist) -> {\n  final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n  final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n  final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n  final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n  boolean thumbnailVideoRemoved=false;\n  final ArrayList<Long> historyStreamIds=new ArrayList<>();\n  while (historyIter.hasNext()) {\n    historyStreamIds.add(historyIter.next().getStreamId());\n  }\n  if (removePartiallyWatched) {\n    while (playlistIter.hasNext()) {\n      final PlaylistStreamEntry playlistItem=playlistIter.next();\n      int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      if (indexInHistory < 0) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n else {\n    final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n    while (playlistIter.hasNext()) {\n      PlaylistStreamEntry playlistItem=playlistIter.next();\n      final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      final boolean hasState=streamStatesIter.next() != null;\n      if (indexInHistory < 0 || hasState) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n  return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n}\n).observeOn(AndroidSchedulers.mainThread()).subscribe(flow -> {\n  final List<PlaylistStreamEntry> notWatchedItems=(List<PlaylistStreamEntry>)flow.blockingFirst();\n  final boolean thumbnailVideoRemoved=(Boolean)flow.blockingLast();\n  itemListAdapter.clearStreamItemList();\n  itemListAdapter.addItems(notWatchedItems);\n  saveChanges();\n  if (thumbnailVideoRemoved) {\n    updateThumbnailUrl();\n  }\n  final long videoCount=itemListAdapter.getItemsList().size();\n  setVideoCount(videoCount);\n  if (videoCount == 0) {\n    showEmptyState();\n  }\n  hideLoading();\n  isRemovingWatched=false;\n}\n,this::onError)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 343,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 4216,
        "startLineNumber" : 389,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 34
      },
      "nodeContext" : "disposables.add(playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((List<PlaylistStreamEntry> playlist) -> {\n  final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n  final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n  final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n  final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n  boolean thumbnailVideoRemoved=false;\n  final ArrayList<Long> historyStreamIds=new ArrayList<>();\n  while (historyIter.hasNext()) {\n    historyStreamIds.add(historyIter.next().getStreamId());\n  }\n  if (removePartiallyWatched) {\n    while (playlistIter.hasNext()) {\n      final PlaylistStreamEntry playlistItem=playlistIter.next();\n      int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      if (indexInHistory < 0) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n else {\n    final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n    while (playlistIter.hasNext()) {\n      PlaylistStreamEntry playlistItem=playlistIter.next();\n      final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      final boolean hasState=streamStatesIter.next() != null;\n      if (indexInHistory < 0 || hasState) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n  return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n}\n).observeOn(AndroidSchedulers.mainThread()).subscribe(flow -> {\n  final List<PlaylistStreamEntry> notWatchedItems=(List<PlaylistStreamEntry>)flow.blockingFirst();\n  final boolean thumbnailVideoRemoved=(Boolean)flow.blockingLast();\n  itemListAdapter.clearStreamItemList();\n  itemListAdapter.addItems(notWatchedItems);\n  saveChanges();\n  if (thumbnailVideoRemoved) {\n    updateThumbnailUrl();\n  }\n  final long videoCount=itemListAdapter.getItemsList().size();\n  setVideoCount(videoCount);\n  if (videoCount == 0) {\n    showEmptyState();\n  }\n  hideLoading();\n  isRemovingWatched=false;\n}\n,this::onError))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 346,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4217,
        "startLineNumber" : 389,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 35
      },
      "nodeContext" : "disposables.add(playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((List<PlaylistStreamEntry> playlist) -> {\n  final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n  final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n  final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n  final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n  boolean thumbnailVideoRemoved=false;\n  final ArrayList<Long> historyStreamIds=new ArrayList<>();\n  while (historyIter.hasNext()) {\n    historyStreamIds.add(historyIter.next().getStreamId());\n  }\n  if (removePartiallyWatched) {\n    while (playlistIter.hasNext()) {\n      final PlaylistStreamEntry playlistItem=playlistIter.next();\n      int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      if (indexInHistory < 0) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n else {\n    final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n    while (playlistIter.hasNext()) {\n      PlaylistStreamEntry playlistItem=playlistIter.next();\n      final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n      final boolean hasState=streamStatesIter.next() != null;\n      if (indexInHistory < 0 || hasState) {\n        notWatchedItems.add(playlistItem);\n      }\n else       if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n        thumbnailVideoRemoved=true;\n      }\n    }\n  }\n  return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n}\n).observeOn(AndroidSchedulers.mainThread()).subscribe(flow -> {\n  final List<PlaylistStreamEntry> notWatchedItems=(List<PlaylistStreamEntry>)flow.blockingFirst();\n  final boolean thumbnailVideoRemoved=(Boolean)flow.blockingLast();\n  itemListAdapter.clearStreamItemList();\n  itemListAdapter.addItems(notWatchedItems);\n  saveChanges();\n  if (thumbnailVideoRemoved) {\n    updateThumbnailUrl();\n  }\n  final long videoCount=itemListAdapter.getItemsList().size();\n  setVideoCount(videoCount);\n  if (videoCount == 0) {\n    showEmptyState();\n  }\n  hideLoading();\n  isRemovingWatched=false;\n}\n,this::onError));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 347,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4354,
        "startLineNumber" : 382,
        "startColumnNumber" : 75,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isRemovingWatched) {\n    return;\n  }\n  isRemovingWatched=true;\n  showLoading();\n  disposables.add(playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((  List<PlaylistStreamEntry> playlist) -> {\n    final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n    final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n    final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n    final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n    boolean thumbnailVideoRemoved=false;\n    final ArrayList<Long> historyStreamIds=new ArrayList<>();\n    while (historyIter.hasNext()) {\n      historyStreamIds.add(historyIter.next().getStreamId());\n    }\n    if (removePartiallyWatched) {\n      while (playlistIter.hasNext()) {\n        final PlaylistStreamEntry playlistItem=playlistIter.next();\n        int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n        if (indexInHistory < 0) {\n          notWatchedItems.add(playlistItem);\n        }\n else         if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n          thumbnailVideoRemoved=true;\n        }\n      }\n    }\n else {\n      final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n      while (playlistIter.hasNext()) {\n        PlaylistStreamEntry playlistItem=playlistIter.next();\n        final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n        final boolean hasState=streamStatesIter.next() != null;\n        if (indexInHistory < 0 || hasState) {\n          notWatchedItems.add(playlistItem);\n        }\n else         if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n          thumbnailVideoRemoved=true;\n        }\n      }\n    }\n    return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n  }\n).observeOn(AndroidSchedulers.mainThread()).subscribe(flow -> {\n    final List<PlaylistStreamEntry> notWatchedItems=(List<PlaylistStreamEntry>)flow.blockingFirst();\n    final boolean thumbnailVideoRemoved=(Boolean)flow.blockingLast();\n    itemListAdapter.clearStreamItemList();\n    itemListAdapter.addItems(notWatchedItems);\n    saveChanges();\n    if (thumbnailVideoRemoved) {\n      updateThumbnailUrl();\n    }\n    final long videoCount=itemListAdapter.getItemsList().size();\n    setVideoCount(videoCount);\n    if (videoCount == 0) {\n      showEmptyState();\n    }\n    hideLoading();\n    isRemovingWatched=false;\n  }\n,this::onError));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4425,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void removeWatchedStreams(final boolean removePartiallyWatched){\n  if (isRemovingWatched) {\n    return;\n  }\n  isRemovingWatched=true;\n  showLoading();\n  disposables.add(playlistManager.getPlaylistStreams(playlistId).subscribeOn(Schedulers.io()).map((  List<PlaylistStreamEntry> playlist) -> {\n    final Iterator<PlaylistStreamEntry> playlistIter=playlist.iterator();\n    final HistoryRecordManager recordManager=new HistoryRecordManager(getContext());\n    final Iterator<StreamHistoryEntry> historyIter=recordManager.getStreamHistorySortedById().blockingFirst().iterator();\n    final List<PlaylistStreamEntry> notWatchedItems=new ArrayList<>();\n    boolean thumbnailVideoRemoved=false;\n    final ArrayList<Long> historyStreamIds=new ArrayList<>();\n    while (historyIter.hasNext()) {\n      historyStreamIds.add(historyIter.next().getStreamId());\n    }\n    if (removePartiallyWatched) {\n      while (playlistIter.hasNext()) {\n        final PlaylistStreamEntry playlistItem=playlistIter.next();\n        int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n        if (indexInHistory < 0) {\n          notWatchedItems.add(playlistItem);\n        }\n else         if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n          thumbnailVideoRemoved=true;\n        }\n      }\n    }\n else {\n      final Iterator<StreamStateEntity> streamStatesIter=recordManager.loadLocalStreamStateBatch(playlist).blockingGet().iterator();\n      while (playlistIter.hasNext()) {\n        PlaylistStreamEntry playlistItem=playlistIter.next();\n        final int indexInHistory=Collections.binarySearch(historyStreamIds,playlistItem.getStreamId());\n        final boolean hasState=streamStatesIter.next() != null;\n        if (indexInHistory < 0 || hasState) {\n          notWatchedItems.add(playlistItem);\n        }\n else         if (!thumbnailVideoRemoved && playlistManager.getPlaylistThumbnail(playlistId).equals(playlistItem.getStreamEntity().getThumbnailUrl())) {\n          thumbnailVideoRemoved=true;\n        }\n      }\n    }\n    return Flowable.just(notWatchedItems,thumbnailVideoRemoved);\n  }\n).observeOn(AndroidSchedulers.mainThread()).subscribe(flow -> {\n    final List<PlaylistStreamEntry> notWatchedItems=(List<PlaylistStreamEntry>)flow.blockingFirst();\n    final boolean thumbnailVideoRemoved=(Boolean)flow.blockingLast();\n    itemListAdapter.clearStreamItemList();\n    itemListAdapter.addItems(notWatchedItems);\n    saveChanges();\n    if (thumbnailVideoRemoved) {\n      updateThumbnailUrl();\n    }\n    final long videoCount=itemListAdapter.getItemsList().size();\n    setVideoCount(videoCount);\n    if (videoCount == 0) {\n      showEmptyState();\n    }\n    hideLoading();\n    isRemovingWatched=false;\n  }\n,this::onError));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 367,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 390,
        "startColumnNumber" : 29,
        "endLineNumber" : 390,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Schedulers.io()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 390,
    "startColumnNumber" : 29,
    "endLineNumber" : 390,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}