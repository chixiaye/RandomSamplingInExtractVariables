{
  "id" : 472,
  "expression" : "square",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/spring-ehcache/src/main/java/com/baeldung/cachetest/service/NumberService.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "square",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 19,
      "startColumnNumber" : 47,
      "endLineNumber" : 19,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 54
      },
      "nodeContext" : "log.info(\"square of {} is {}\",number,square)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 55
      },
      "nodeContext" : "log.info(\"square of {} is {}\",number,square);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 16,
        "startColumnNumber" : 42,
        "endLineNumber" : 21,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BigDecimal square=BigDecimal.valueOf(number).multiply(BigDecimal.valueOf(number));\n  log.info(\"square of {} is {}\",number,square);\n  return square;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Cacheable(value=\"squareCache\",key=\"#number\",condition=\"#number>10\") public BigDecimal square(Long number){\n  BigDecimal square=BigDecimal.valueOf(number).multiply(BigDecimal.valueOf(number));\n  log.info(\"square of {} is {}\",number,square);\n  return square;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 45,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 55
      },
      "nodeContext" : "log.info(\"square of {} is {}\",number,square);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.math.BigDecimal"
  }, {
    "nodeContext" : "square",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 20,
      "startColumnNumber" : 15,
      "endLineNumber" : 20,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return square;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 16,
        "startColumnNumber" : 42,
        "endLineNumber" : 21,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BigDecimal square=BigDecimal.valueOf(number).multiply(BigDecimal.valueOf(number));\n  log.info(\"square of {} is {}\",number,square);\n  return square;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Cacheable(value=\"squareCache\",key=\"#number\",condition=\"#number>10\") public BigDecimal square(Long number){\n  BigDecimal square=BigDecimal.valueOf(number).multiply(BigDecimal.valueOf(number));\n  log.info(\"square of {} is {}\",number,square);\n  return square;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 45,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return square;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.math.BigDecimal"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 19,
    "startColumnNumber" : 47,
    "endLineNumber" : 19,
    "endColumnNumber" : 53
  }, {
    "charLength" : 6,
    "startLineNumber" : 20,
    "startColumnNumber" : 15,
    "endLineNumber" : 20,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}