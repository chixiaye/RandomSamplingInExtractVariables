{
  "id" : 361,
  "expression" : "(r % mod) + mod",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/ModPow.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(r % mod) + mod",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 84,
      "startColumnNumber" : 12,
      "endLineNumber" : 84,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 28
      },
      "nodeContext" : "((r % mod) + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 84,
    "startColumnNumber" : 12,
    "endLineNumber" : 84,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}