{
  "id" : 6,
  "expression" : "type.getTypeSignature()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/util/StructuralTestUtil.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type.getTypeSignature()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 76,
      "startColumnNumber" : 17,
      "endLineNumber" : 76,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "type.getTypeSignature().getBase()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 78
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ARRAY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 112
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2856,
        "startLineNumber" : 76,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 369,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (element == null) {\n  blockBuilder.appendNull();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void appendToBlockBuilder(Type type,Object element,BlockBuilder blockBuilder){\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 406,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 112
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.facebook.presto.common.type.TypeSignature"
  }, {
    "nodeContext" : "type.getTypeSignature()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 83,
      "startColumnNumber" : 17,
      "endLineNumber" : 83,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 50
      },
      "nodeContext" : "type.getTypeSignature().getBase()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 76
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ROW)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 110
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 83,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2856,
        "startLineNumber" : 76,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 369,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (element == null) {\n  blockBuilder.appendNull();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void appendToBlockBuilder(Type type,Object element,BlockBuilder blockBuilder){\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 406,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 110
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.facebook.presto.common.type.TypeSignature"
  }, {
    "nodeContext" : "type.getTypeSignature()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 92,
      "startColumnNumber" : 17,
      "endLineNumber" : 92,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 92,
        "startColumnNumber" : 17,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "type.getTypeSignature().getBase()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 92,
        "startColumnNumber" : 17,
        "endLineNumber" : 92,
        "endColumnNumber" : 76
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.MAP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 92,
        "startColumnNumber" : 17,
        "endLineNumber" : 92,
        "endColumnNumber" : 108
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1970,
        "startLineNumber" : 92,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 253,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 83,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2856,
        "startLineNumber" : 76,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 369,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (element == null) {\n  blockBuilder.appendNull();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  int field=0;\n  for (  Object subElement : (Iterable<?>)element) {\n    appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n    field++;\n  }\n  blockBuilder.closeEntry();\n}\n else if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n  BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n    appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n    appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n  }\n  blockBuilder.closeEntry();\n}\n else if (javaType == boolean.class) {\n  type.writeBoolean(blockBuilder,(Boolean)element);\n}\n else if (javaType == long.class) {\n  if (element instanceof SqlDecimal) {\n    type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n  }\n else {\n    type.writeLong(blockBuilder,((Number)element).longValue());\n  }\n}\n else if (javaType == double.class) {\n  type.writeDouble(blockBuilder,((Number)element).doubleValue());\n}\n else if (javaType == Slice.class) {\n  if (element instanceof String) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n  }\n else   if (element instanceof byte[]) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n  }\n else   if (element instanceof SqlDecimal) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n  }\n else {\n    type.writeSlice(blockBuilder,(Slice)element);\n  }\n}\n else {\n  type.writeObject(blockBuilder,element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void appendToBlockBuilder(Type type,Object element,BlockBuilder blockBuilder){\n  Class<?> javaType=type.getJavaType();\n  if (element == null) {\n    blockBuilder.appendNull();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    int field=0;\n    for (    Object subElement : (Iterable<?>)element) {\n      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);\n      field++;\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {\n    BlockBuilder subBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {\n      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);\n      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (javaType == boolean.class) {\n    type.writeBoolean(blockBuilder,(Boolean)element);\n  }\n else   if (javaType == long.class) {\n    if (element instanceof SqlDecimal) {\n      type.writeLong(blockBuilder,((SqlDecimal)element).getUnscaledValue().longValue());\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,floatToRawIntBits(((Number)element).floatValue()));\n    }\n else {\n      type.writeLong(blockBuilder,((Number)element).longValue());\n    }\n  }\n else   if (javaType == double.class) {\n    type.writeDouble(blockBuilder,((Number)element).doubleValue());\n  }\n else   if (javaType == Slice.class) {\n    if (element instanceof String) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));\n    }\n else     if (element instanceof byte[]) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));\n    }\n else     if (element instanceof SqlDecimal) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)element).getUnscaledValue()));\n    }\n else {\n      type.writeSlice(blockBuilder,(Slice)element);\n    }\n  }\n else {\n    type.writeObject(blockBuilder,element);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 406,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 92,
        "startColumnNumber" : 17,
        "endLineNumber" : 92,
        "endColumnNumber" : 108
      },
      "nodeContext" : "type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.facebook.presto.common.type.TypeSignature"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 76,
    "startColumnNumber" : 17,
    "endLineNumber" : 76,
    "endColumnNumber" : 40
  }, {
    "charLength" : 23,
    "startLineNumber" : 83,
    "startColumnNumber" : 17,
    "endLineNumber" : 83,
    "endColumnNumber" : 40
  }, {
    "charLength" : 23,
    "startLineNumber" : 92,
    "startColumnNumber" : 17,
    "endLineNumber" : 92,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}