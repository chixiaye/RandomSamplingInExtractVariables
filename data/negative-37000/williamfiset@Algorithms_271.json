{
  "id" : 271,
  "expression" : "startNode < n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/TravelingSalesmanProblemTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "startNode < n",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 144,
      "startColumnNumber" : 30,
      "endLineNumber" : 144,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 144,
        "startColumnNumber" : 6,
        "endLineNumber" : 158,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int startNode=0; startNode < n; startNode++) {\n  TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n  TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n  double dp1=dpRecursiveSolver.getTourCost();\n  double dp2=dpIterativeSolver.getTourCost();\n  assertThat(dp1).isWithin(EPS).of(bf);\n  assertThat(dp2).isWithin(EPS).of(bf);\n  assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n  assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 137,
        "startColumnNumber" : 33,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double[][] dist=new double[n][n];\n  randomFillDistMatrix(dist);\n  int[] bfPath=TspBruteForce.tsp(dist);\n  double bf=TspBruteForce.computeTourCost(bfPath,dist);\n  for (int startNode=0; startNode < n; startNode++) {\n    TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n    TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n    double dp1=dpRecursiveSolver.getTourCost();\n    double dp2=dpIterativeSolver.getTourCost();\n    assertThat(dp1).isWithin(EPS).of(bf);\n    assertThat(dp2).isWithin(EPS).of(bf);\n    assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n    assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=3; n <= 9; n++) {\n  double[][] dist=new double[n][n];\n  randomFillDistMatrix(dist);\n  int[] bfPath=TspBruteForce.tsp(dist);\n  double bf=TspBruteForce.computeTourCost(bfPath,dist);\n  for (int startNode=0; startNode < n; startNode++) {\n    TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n    TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n    double dp1=dpRecursiveSolver.getTourCost();\n    double dp2=dpIterativeSolver.getTourCost();\n    assertThat(dp1).isWithin(EPS).of(bf);\n    assertThat(dp2).isWithin(EPS).of(bf);\n    assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n    assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 136,
        "startColumnNumber" : 43,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=3; n <= 9; n++) {\n    double[][] dist=new double[n][n];\n    randomFillDistMatrix(dist);\n    int[] bfPath=TspBruteForce.tsp(dist);\n    double bf=TspBruteForce.computeTourCost(bfPath,dist);\n    for (int startNode=0; startNode < n; startNode++) {\n      TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n      TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n      double dp1=dpRecursiveSolver.getTourCost();\n      double dp2=dpIterativeSolver.getTourCost();\n      assertThat(dp1).isWithin(EPS).of(bf);\n      assertThat(dp2).isWithin(EPS).of(bf);\n      assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n      assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 979,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testDifferentStartingNodes(){\n  for (int n=3; n <= 9; n++) {\n    double[][] dist=new double[n][n];\n    randomFillDistMatrix(dist);\n    int[] bfPath=TspBruteForce.tsp(dist);\n    double bf=TspBruteForce.computeTourCost(bfPath,dist);\n    for (int startNode=0; startNode < n; startNode++) {\n      TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n      TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n      double dp1=dpRecursiveSolver.getTourCost();\n      double dp2=dpIterativeSolver.getTourCost();\n      assertThat(dp1).isWithin(EPS).of(bf);\n      assertThat(dp2).isWithin(EPS).of(bf);\n      assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n      assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 144,
        "startColumnNumber" : 6,
        "endLineNumber" : 158,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int startNode=0; startNode < n; startNode++) {\n  TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(startNode,dist);\n  TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(startNode,dist);\n  double dp1=dpRecursiveSolver.getTourCost();\n  double dp2=dpIterativeSolver.getTourCost();\n  assertThat(dp1).isWithin(EPS).of(bf);\n  assertThat(dp2).isWithin(EPS).of(bf);\n  assertThat(getTourCost(dist,dpRecursiveSolver.getTour())).isWithin(EPS).of(bf);\n  assertThat(getTourCost(dist,dpIterativeSolver.getTour())).isWithin(EPS).of(bf);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 144,
    "startColumnNumber" : 30,
    "endLineNumber" : 144,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}