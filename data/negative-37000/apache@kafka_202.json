{
  "id" : 202,
  "expression" : "ConnectUtils.lookupKafkaClusterId(config)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/main/java/org/apache/kafka/connect/cli/ConnectDistributed.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ConnectUtils.lookupKafkaClusterId(config)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 97,
      "startColumnNumber" : 32,
      "endLineNumber" : 97,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 97,
        "startColumnNumber" : 15,
        "endLineNumber" : 97,
        "endColumnNumber" : 73
      },
      "nodeContext" : "kafkaClusterId=ConnectUtils.lookupKafkaClusterId(config)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 74
      },
      "nodeContext" : "String kafkaClusterId=ConnectUtils.lookupKafkaClusterId(config);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2841,
        "startLineNumber" : 91,
        "startColumnNumber" : 65,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"Scanning for plugin classes. This might take a moment ...\");\n  Plugins plugins=new Plugins(workerProps);\n  plugins.compareAndSwapWithDelegatingLoader();\n  DistributedConfig config=new DistributedConfig(workerProps);\n  String kafkaClusterId=ConnectUtils.lookupKafkaClusterId(config);\n  log.debug(\"Kafka cluster ID: {}\",kafkaClusterId);\n  RestServer rest=new RestServer(config);\n  rest.initializeServer();\n  URI advertisedUrl=rest.advertisedUrl();\n  String workerId=advertisedUrl.getHost() + \":\" + advertisedUrl.getPort();\n  Map<String,Object> adminProps=new HashMap<>(config.originals());\n  ConnectUtils.addMetricsContextProperties(adminProps,config,kafkaClusterId);\n  SharedTopicAdmin sharedAdmin=new SharedTopicAdmin(adminProps);\n  KafkaOffsetBackingStore offsetBackingStore=new KafkaOffsetBackingStore(sharedAdmin);\n  offsetBackingStore.configure(config);\n  ConnectorClientConfigOverridePolicy connectorClientConfigOverridePolicy=plugins.newPlugin(config.getString(WorkerConfig.CONNECTOR_CLIENT_POLICY_CLASS_CONFIG),config,ConnectorClientConfigOverridePolicy.class);\n  Worker worker=new Worker(workerId,time,plugins,config,offsetBackingStore,connectorClientConfigOverridePolicy);\n  WorkerConfigTransformer configTransformer=worker.configTransformer();\n  Converter internalValueConverter=worker.getInternalValueConverter();\n  StatusBackingStore statusBackingStore=new KafkaStatusBackingStore(time,internalValueConverter,sharedAdmin);\n  statusBackingStore.configure(config);\n  ConfigBackingStore configBackingStore=new KafkaConfigBackingStore(internalValueConverter,config,configTransformer,sharedAdmin);\n  DistributedHerder herder=new DistributedHerder(config,time,worker,kafkaClusterId,statusBackingStore,configBackingStore,advertisedUrl.toString(),connectorClientConfigOverridePolicy,sharedAdmin);\n  final Connect connect=new Connect(herder,rest);\n  log.info(\"Kafka Connect distributed worker initialization took {}ms\",time.hiResClockMs() - initStart);\n  try {\n    connect.start();\n  }\n catch (  Exception e) {\n    log.error(\"Failed to start Connect\",e);\n    connect.stop();\n    Exit.exit(3);\n  }\n  return connect;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2902,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Connect startConnect(Map<String,String> workerProps){\n  log.info(\"Scanning for plugin classes. This might take a moment ...\");\n  Plugins plugins=new Plugins(workerProps);\n  plugins.compareAndSwapWithDelegatingLoader();\n  DistributedConfig config=new DistributedConfig(workerProps);\n  String kafkaClusterId=ConnectUtils.lookupKafkaClusterId(config);\n  log.debug(\"Kafka cluster ID: {}\",kafkaClusterId);\n  RestServer rest=new RestServer(config);\n  rest.initializeServer();\n  URI advertisedUrl=rest.advertisedUrl();\n  String workerId=advertisedUrl.getHost() + \":\" + advertisedUrl.getPort();\n  Map<String,Object> adminProps=new HashMap<>(config.originals());\n  ConnectUtils.addMetricsContextProperties(adminProps,config,kafkaClusterId);\n  SharedTopicAdmin sharedAdmin=new SharedTopicAdmin(adminProps);\n  KafkaOffsetBackingStore offsetBackingStore=new KafkaOffsetBackingStore(sharedAdmin);\n  offsetBackingStore.configure(config);\n  ConnectorClientConfigOverridePolicy connectorClientConfigOverridePolicy=plugins.newPlugin(config.getString(WorkerConfig.CONNECTOR_CLIENT_POLICY_CLASS_CONFIG),config,ConnectorClientConfigOverridePolicy.class);\n  Worker worker=new Worker(workerId,time,plugins,config,offsetBackingStore,connectorClientConfigOverridePolicy);\n  WorkerConfigTransformer configTransformer=worker.configTransformer();\n  Converter internalValueConverter=worker.getInternalValueConverter();\n  StatusBackingStore statusBackingStore=new KafkaStatusBackingStore(time,internalValueConverter,sharedAdmin);\n  statusBackingStore.configure(config);\n  ConfigBackingStore configBackingStore=new KafkaConfigBackingStore(internalValueConverter,config,configTransformer,sharedAdmin);\n  DistributedHerder herder=new DistributedHerder(config,time,worker,kafkaClusterId,statusBackingStore,configBackingStore,advertisedUrl.toString(),connectorClientConfigOverridePolicy,sharedAdmin);\n  final Connect connect=new Connect(herder,rest);\n  log.info(\"Kafka Connect distributed worker initialization took {}ms\",time.hiResClockMs() - initStart);\n  try {\n    connect.start();\n  }\n catch (  Exception e) {\n    log.error(\"Failed to start Connect\",e);\n    connect.stop();\n    Exit.exit(3);\n  }\n  return connect;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 74
      },
      "nodeContext" : "String kafkaClusterId=ConnectUtils.lookupKafkaClusterId(config);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 97,
    "startColumnNumber" : 32,
    "endLineNumber" : 97,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}