{
  "id" : 187,
  "expression" : "val",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/json/Json.java",
  "occurrences" : 22,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 85,
      "startColumnNumber" : 8,
      "endLineNumber" : 85,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 19
      },
      "nodeContext" : "val == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 19
      },
      "nodeContext" : "val == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 15,
      "endLineNumber" : 87,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 36
      },
      "nodeContext" : "val instanceof Number",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 42,
      "endLineNumber" : 87,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 87,
        "startColumnNumber" : 42,
        "endLineNumber" : 87,
        "endColumnNumber" : 67
      },
      "nodeContext" : "val instanceof BigDecimal",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 87,
        "startColumnNumber" : 41,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(val instanceof BigDecimal)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 87,
        "startColumnNumber" : 40,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "!(val instanceof BigDecimal)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 89,
      "startColumnNumber" : 15,
      "endLineNumber" : 89,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 89,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 37
      },
      "nodeContext" : "val instanceof Boolean",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 89,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 37
      },
      "nodeContext" : "val instanceof Boolean",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 91,
      "startColumnNumber" : 15,
      "endLineNumber" : 91,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 91,
        "endColumnNumber" : 36
      },
      "nodeContext" : "val instanceof String",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 91,
        "endColumnNumber" : 36
      },
      "nodeContext" : "val instanceof String",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 93,
      "startColumnNumber" : 15,
      "endLineNumber" : 93,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val instanceof Character",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val instanceof Character",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 95,
      "startColumnNumber" : 15,
      "endLineNumber" : 95,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 95,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 42
      },
      "nodeContext" : "val instanceof CharSequence",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 95,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 42
      },
      "nodeContext" : "val instanceof CharSequence",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 96,
      "startColumnNumber" : 12,
      "endLineNumber" : 96,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 26
      },
      "nodeContext" : "val.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 26
      },
      "nodeContext" : "val=val.toString()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 27
      },
      "nodeContext" : "val=val.toString();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  val=val.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 27
      },
      "nodeContext" : "val=val.toString();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 97,
      "startColumnNumber" : 15,
      "endLineNumber" : 97,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 15,
        "endLineNumber" : 97,
        "endColumnNumber" : 40
      },
      "nodeContext" : "val instanceof JsonObject",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 15,
        "endLineNumber" : 97,
        "endColumnNumber" : 40
      },
      "nodeContext" : "val instanceof JsonObject",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 99,
      "startColumnNumber" : 28,
      "endLineNumber" : 99,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 99,
        "startColumnNumber" : 15,
        "endLineNumber" : 99,
        "endColumnNumber" : 31
      },
      "nodeContext" : "(JsonObject)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 14,
        "endLineNumber" : 99,
        "endColumnNumber" : 32
      },
      "nodeContext" : "((JsonObject)val)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 99,
        "startColumnNumber" : 14,
        "endLineNumber" : 99,
        "endColumnNumber" : 39
      },
      "nodeContext" : "((JsonObject)val).copy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=((JsonObject)val).copy()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 40
      },
      "nodeContext" : "val=((JsonObject)val).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=((JsonObject)val).copy();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=((JsonObject)val).copy();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 42,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 40
      },
      "nodeContext" : "val=((JsonObject)val).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 101,
      "startColumnNumber" : 15,
      "endLineNumber" : 101,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 101,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val instanceof JsonArray",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 101,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val instanceof JsonArray",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 103,
      "startColumnNumber" : 27,
      "endLineNumber" : 103,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 103,
        "endColumnNumber" : 30
      },
      "nodeContext" : "(JsonArray)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 103,
        "startColumnNumber" : 14,
        "endLineNumber" : 103,
        "endColumnNumber" : 31
      },
      "nodeContext" : "((JsonArray)val)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 103,
        "startColumnNumber" : 14,
        "endLineNumber" : 103,
        "endColumnNumber" : 38
      },
      "nodeContext" : "((JsonArray)val).copy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 38
      },
      "nodeContext" : "val=((JsonArray)val).copy()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=((JsonArray)val).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=((JsonArray)val).copy();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=((JsonArray)val).copy();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 101,
        "startColumnNumber" : 41,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=((JsonArray)val).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 105,
      "startColumnNumber" : 15,
      "endLineNumber" : 105,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 105,
        "startColumnNumber" : 15,
        "endLineNumber" : 105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "val instanceof Map",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 105,
        "startColumnNumber" : 15,
        "endLineNumber" : 105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "val instanceof Map",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 107,
      "startColumnNumber" : 35,
      "endLineNumber" : 107,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 107,
        "startColumnNumber" : 30,
        "endLineNumber" : 107,
        "endColumnNumber" : 38
      },
      "nodeContext" : "(Map)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 107,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new JsonObject((Map)val)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 107,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 40
      },
      "nodeContext" : "(new JsonObject((Map)val))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 107,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(new JsonObject((Map)val)).copy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 47
      },
      "nodeContext" : "val=(new JsonObject((Map)val)).copy()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 48
      },
      "nodeContext" : "val=(new JsonObject((Map)val)).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=(new JsonObject((Map)val)).copy();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 110,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=(new JsonObject((Map)val)).copy();\n}\n else {\n  val=new JsonObject((Map)val);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 105,
        "startColumnNumber" : 35,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 48
      },
      "nodeContext" : "val=(new JsonObject((Map)val)).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 109,
      "startColumnNumber" : 34,
      "endLineNumber" : 109,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 109,
        "startColumnNumber" : 29,
        "endLineNumber" : 109,
        "endColumnNumber" : 37
      },
      "nodeContext" : "(Map)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 109,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new JsonObject((Map)val)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 38
      },
      "nodeContext" : "val=new JsonObject((Map)val)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=new JsonObject((Map)val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 108,
        "startColumnNumber" : 13,
        "endLineNumber" : 110,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=new JsonObject((Map)val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 110,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=(new JsonObject((Map)val)).copy();\n}\n else {\n  val=new JsonObject((Map)val);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 105,
        "startColumnNumber" : 35,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=new JsonObject((Map)val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 111,
      "startColumnNumber" : 15,
      "endLineNumber" : 111,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 111,
        "startColumnNumber" : 15,
        "endLineNumber" : 111,
        "endColumnNumber" : 34
      },
      "nodeContext" : "val instanceof List",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 111,
        "startColumnNumber" : 15,
        "endLineNumber" : 111,
        "endColumnNumber" : 34
      },
      "nodeContext" : "val instanceof List",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 113,
      "startColumnNumber" : 35,
      "endLineNumber" : 113,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 113,
        "startColumnNumber" : 29,
        "endLineNumber" : 113,
        "endColumnNumber" : 38
      },
      "nodeContext" : "(List)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 113,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new JsonArray((List)val)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 113,
        "startColumnNumber" : 14,
        "endLineNumber" : 113,
        "endColumnNumber" : 40
      },
      "nodeContext" : "(new JsonArray((List)val))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 113,
        "startColumnNumber" : 14,
        "endLineNumber" : 113,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(new JsonArray((List)val)).copy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 47
      },
      "nodeContext" : "val=(new JsonArray((List)val)).copy()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 48
      },
      "nodeContext" : "val=(new JsonArray((List)val)).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 112,
        "startColumnNumber" : 16,
        "endLineNumber" : 114,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=(new JsonArray((List)val)).copy();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 116,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=(new JsonArray((List)val)).copy();\n}\n else {\n  val=new JsonArray((List)val);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 111,
        "startColumnNumber" : 36,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 48
      },
      "nodeContext" : "val=(new JsonArray((List)val)).copy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 115,
      "startColumnNumber" : 34,
      "endLineNumber" : 115,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 115,
        "endColumnNumber" : 37
      },
      "nodeContext" : "(List)val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 115,
        "startColumnNumber" : 14,
        "endLineNumber" : 115,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new JsonArray((List)val)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 38
      },
      "nodeContext" : "val=new JsonArray((List)val)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=new JsonArray((List)val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 114,
        "startColumnNumber" : 13,
        "endLineNumber" : 116,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  val=new JsonArray((List)val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 116,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (copy) {\n  val=(new JsonArray((List)val)).copy();\n}\n else {\n  val=new JsonArray((List)val);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 111,
        "startColumnNumber" : 36,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "val=new JsonArray((List)val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 117,
      "startColumnNumber" : 15,
      "endLineNumber" : 117,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 117,
        "startColumnNumber" : 15,
        "endLineNumber" : 117,
        "endColumnNumber" : 36
      },
      "nodeContext" : "val instanceof byte[]",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 117,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 117,
        "startColumnNumber" : 15,
        "endLineNumber" : 117,
        "endColumnNumber" : 36
      },
      "nodeContext" : "val instanceof byte[]",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 118,
      "startColumnNumber" : 55,
      "endLineNumber" : 118,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 118,
        "startColumnNumber" : 47,
        "endLineNumber" : 118,
        "endColumnNumber" : 58
      },
      "nodeContext" : "(byte[])val",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Base64.getEncoder().encodeToString((byte[])val)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 59
      },
      "nodeContext" : "val=Base64.getEncoder().encodeToString((byte[])val)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 60
      },
      "nodeContext" : "val=Base64.getEncoder().encodeToString((byte[])val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 117,
        "startColumnNumber" : 38,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 117,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 60
      },
      "nodeContext" : "val=Base64.getEncoder().encodeToString((byte[])val);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 120,
      "startColumnNumber" : 71,
      "endLineNumber" : 120,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 120,
        "startColumnNumber" : 71,
        "endLineNumber" : 120,
        "endColumnNumber" : 85
      },
      "nodeContext" : "val.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 120,
        "startColumnNumber" : 38,
        "endLineNumber" : 120,
        "endColumnNumber" : 85
      },
      "nodeContext" : "\"Illegal type in JsonObject: \" + val.getClass()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 87
      },
      "nodeContext" : "throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 119,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 117,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 97,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 93,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 87
      },
      "nodeContext" : "throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 122,
      "startColumnNumber" : 11,
      "endLineNumber" : 122,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return val;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return val;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 85,
    "startColumnNumber" : 8,
    "endLineNumber" : 85,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 15,
    "endLineNumber" : 87,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 42,
    "endLineNumber" : 87,
    "endColumnNumber" : 45
  }, {
    "charLength" : 3,
    "startLineNumber" : 89,
    "startColumnNumber" : 15,
    "endLineNumber" : 89,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 91,
    "startColumnNumber" : 15,
    "endLineNumber" : 91,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 93,
    "startColumnNumber" : 15,
    "endLineNumber" : 93,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 95,
    "startColumnNumber" : 15,
    "endLineNumber" : 95,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 96,
    "startColumnNumber" : 12,
    "endLineNumber" : 96,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 97,
    "startColumnNumber" : 15,
    "endLineNumber" : 97,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 99,
    "startColumnNumber" : 28,
    "endLineNumber" : 99,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 101,
    "startColumnNumber" : 15,
    "endLineNumber" : 101,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 103,
    "startColumnNumber" : 27,
    "endLineNumber" : 103,
    "endColumnNumber" : 30
  }, {
    "charLength" : 3,
    "startLineNumber" : 105,
    "startColumnNumber" : 15,
    "endLineNumber" : 105,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 107,
    "startColumnNumber" : 35,
    "endLineNumber" : 107,
    "endColumnNumber" : 38
  }, {
    "charLength" : 3,
    "startLineNumber" : 109,
    "startColumnNumber" : 34,
    "endLineNumber" : 109,
    "endColumnNumber" : 37
  }, {
    "charLength" : 3,
    "startLineNumber" : 111,
    "startColumnNumber" : 15,
    "endLineNumber" : 111,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 113,
    "startColumnNumber" : 35,
    "endLineNumber" : 113,
    "endColumnNumber" : 38
  }, {
    "charLength" : 3,
    "startLineNumber" : 115,
    "startColumnNumber" : 34,
    "endLineNumber" : 115,
    "endColumnNumber" : 37
  }, {
    "charLength" : 3,
    "startLineNumber" : 117,
    "startColumnNumber" : 15,
    "endLineNumber" : 117,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 118,
    "startColumnNumber" : 55,
    "endLineNumber" : 118,
    "endColumnNumber" : 58
  }, {
    "charLength" : 3,
    "startLineNumber" : 120,
    "startColumnNumber" : 71,
    "endLineNumber" : 120,
    "endColumnNumber" : 74
  }, {
    "charLength" : 3,
    "startLineNumber" : 122,
    "startColumnNumber" : 11,
    "endLineNumber" : 122,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 15
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 16
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 16
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 16
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 14
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 18
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 16
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 18
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 17
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 17
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 16
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 15
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 14
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 12
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 12
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 19
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 16
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 17
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 16
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 16
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 1
  } ]
}