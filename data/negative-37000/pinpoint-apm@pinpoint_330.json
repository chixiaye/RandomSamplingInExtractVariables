{
  "id" : 330,
  "expression" : "new BitCountingHeaderDecoder(header)",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/codec/stat/v1/ActiveTraceCodecV1.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BitCountingHeaderDecoder(header)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 140,
      "startColumnNumber" : 47,
      "endLineNumber" : 140,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 140,
        "startColumnNumber" : 31,
        "endLineNumber" : 140,
        "endColumnNumber" : 83
      },
      "nodeContext" : "headerDecoder=new BitCountingHeaderDecoder(header)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 84
      },
      "nodeContext" : "AgentStatHeaderDecoder headerDecoder=new BitCountingHeaderDecoder(header);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3119,
        "startLineNumber" : 129,
        "startColumnNumber" : 106,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String agentId=decodingContext.getAgentId();\n  final long baseTimestamp=decodingContext.getBaseTimestamp();\n  final long timestampDelta=decodingContext.getTimestampDelta();\n  final long initialTimestamp=baseTimestamp + timestampDelta;\n  int numValues=valueBuffer.readVInt();\n  List<Long> timestamps=this.codec.decodeTimestamps(initialTimestamp,valueBuffer,numValues);\n  final byte[] header=valueBuffer.readPrefixedBytes();\n  AgentStatHeaderDecoder headerDecoder=new BitCountingHeaderDecoder(header);\n  EncodingStrategy<Short> versionEncodingStrategy=UnsignedShortEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> schemaTypeEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> fastTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> normalTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> slowTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> verySlowTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  List<Short> versions=this.codec.decodeValues(valueBuffer,versionEncodingStrategy,numValues);\n  List<Integer> schemaTypes=this.codec.decodeValues(valueBuffer,schemaTypeEncodingStrategy,numValues);\n  List<Integer> fastTraceCounts=this.codec.decodeValues(valueBuffer,fastTraceCountsEncodingStrategy,numValues);\n  List<Integer> normalTraceCounts=this.codec.decodeValues(valueBuffer,normalTraceCountsEncodingStrategy,numValues);\n  List<Integer> slowTraceCounts=this.codec.decodeValues(valueBuffer,slowTraceCountsEncodingStrategy,numValues);\n  List<Integer> verySlowTraceCounts=this.codec.decodeValues(valueBuffer,verySlowTraceCountsEncodingStrategy,numValues);\n  List<ActiveTraceBo> activeTraceBos=new ArrayList<>(numValues);\n  for (int i=0; i < numValues; ++i) {\n    ActiveTraceBo activeTraceBo=new ActiveTraceBo();\n    activeTraceBo.setAgentId(agentId);\n    activeTraceBo.setTimestamp(timestamps.get(i));\n    activeTraceBo.setVersion(versions.get(i));\n    activeTraceBo.setHistogramSchemaType(schemaTypes.get(i));\n    Map<SlotType,Integer> activeTraceCounts=new HashMap<>();\n    activeTraceCounts.put(SlotType.FAST,fastTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.NORMAL,normalTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.SLOW,slowTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.VERY_SLOW,verySlowTraceCounts.get(i));\n    activeTraceBo.setActiveTraceCounts(activeTraceCounts);\n    activeTraceBos.add(activeTraceBo);\n  }\n  return activeTraceBos;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 388,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3235,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<ActiveTraceBo> decodeValues(Buffer valueBuffer,AgentStatDecodingContext decodingContext){\n  final String agentId=decodingContext.getAgentId();\n  final long baseTimestamp=decodingContext.getBaseTimestamp();\n  final long timestampDelta=decodingContext.getTimestampDelta();\n  final long initialTimestamp=baseTimestamp + timestampDelta;\n  int numValues=valueBuffer.readVInt();\n  List<Long> timestamps=this.codec.decodeTimestamps(initialTimestamp,valueBuffer,numValues);\n  final byte[] header=valueBuffer.readPrefixedBytes();\n  AgentStatHeaderDecoder headerDecoder=new BitCountingHeaderDecoder(header);\n  EncodingStrategy<Short> versionEncodingStrategy=UnsignedShortEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> schemaTypeEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> fastTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> normalTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> slowTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  EncodingStrategy<Integer> verySlowTraceCountsEncodingStrategy=UnsignedIntegerEncodingStrategy.getFromCode(headerDecoder.getCode());\n  List<Short> versions=this.codec.decodeValues(valueBuffer,versionEncodingStrategy,numValues);\n  List<Integer> schemaTypes=this.codec.decodeValues(valueBuffer,schemaTypeEncodingStrategy,numValues);\n  List<Integer> fastTraceCounts=this.codec.decodeValues(valueBuffer,fastTraceCountsEncodingStrategy,numValues);\n  List<Integer> normalTraceCounts=this.codec.decodeValues(valueBuffer,normalTraceCountsEncodingStrategy,numValues);\n  List<Integer> slowTraceCounts=this.codec.decodeValues(valueBuffer,slowTraceCountsEncodingStrategy,numValues);\n  List<Integer> verySlowTraceCounts=this.codec.decodeValues(valueBuffer,verySlowTraceCountsEncodingStrategy,numValues);\n  List<ActiveTraceBo> activeTraceBos=new ArrayList<>(numValues);\n  for (int i=0; i < numValues; ++i) {\n    ActiveTraceBo activeTraceBo=new ActiveTraceBo();\n    activeTraceBo.setAgentId(agentId);\n    activeTraceBo.setTimestamp(timestamps.get(i));\n    activeTraceBo.setVersion(versions.get(i));\n    activeTraceBo.setHistogramSchemaType(schemaTypes.get(i));\n    Map<SlotType,Integer> activeTraceCounts=new HashMap<>();\n    activeTraceCounts.put(SlotType.FAST,fastTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.NORMAL,normalTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.SLOW,slowTraceCounts.get(i));\n    activeTraceCounts.put(SlotType.VERY_SLOW,verySlowTraceCounts.get(i));\n    activeTraceBo.setActiveTraceCounts(activeTraceCounts);\n    activeTraceBos.add(activeTraceBo);\n  }\n  return activeTraceBos;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 406,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 84
      },
      "nodeContext" : "AgentStatHeaderDecoder headerDecoder=new BitCountingHeaderDecoder(header);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.navercorp.pinpoint.common.server.bo.codec.stat.header.BitCountingHeaderDecoder"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 140,
    "startColumnNumber" : 47,
    "endLineNumber" : 140,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}