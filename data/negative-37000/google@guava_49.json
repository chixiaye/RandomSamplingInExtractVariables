{
  "id" : 49,
  "expression" : "KeyAbsentBehavior.NEXT_HIGHER",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/collect/ImmutableRangeSet.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "KeyAbsentBehavior.NEXT_HIGHER",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 435,
      "startColumnNumber" : 14,
      "endLineNumber" : 435,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 430,
        "startColumnNumber" : 10,
        "endLineNumber" : 435,
        "endColumnNumber" : 44
      },
      "nodeContext" : "SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 429,
        "startColumnNumber" : 6,
        "endLineNumber" : 435,
        "endColumnNumber" : 44
      },
      "nodeContext" : "fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 429,
        "startColumnNumber" : 6,
        "endLineNumber" : 435,
        "endColumnNumber" : 45
      },
      "nodeContext" : "fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 428,
        "startColumnNumber" : 31,
        "endLineNumber" : 436,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 428,
        "startColumnNumber" : 4,
        "endLineNumber" : 438,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (range.hasLowerBound()) {\n  fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n}\n else {\n  fromIndex=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1545,
        "startLineNumber" : 420,
        "startColumnNumber" : 72,
        "endLineNumber" : 478,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ranges.isEmpty() || range.isEmpty()) {\n    return ImmutableList.of();\n  }\n else   if (range.encloses(span())) {\n    return ranges;\n  }\n  final int fromIndex;\n  if (range.hasLowerBound()) {\n    fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    fromIndex=0;\n  }\n  int toIndex;\n  if (range.hasUpperBound()) {\n    toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    toIndex=ranges.size();\n  }\n  final int length=toIndex - fromIndex;\n  if (length == 0) {\n    return ImmutableList.of();\n  }\n else {\n    return new ImmutableList<Range<C>>(){\n      @Override public int size(){\n        return length;\n      }\n      @Override public Range<C> get(      int index){\n        checkElementIndex(index,length);\n        if (index == 0 || index == length - 1) {\n          return ranges.get(index + fromIndex).intersection(range);\n        }\n else {\n          return ranges.get(index + fromIndex);\n        }\n      }\n      @Override boolean isPartialView(){\n        return true;\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1746,
        "startLineNumber" : 416,
        "startColumnNumber" : 2,
        "endLineNumber" : 478,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a list containing the nonempty intersections of  {@code range} with the ranges in thisrange set.\n */\nprivate ImmutableList<Range<C>> intersectRanges(final Range<C> range){\n  if (ranges.isEmpty() || range.isEmpty()) {\n    return ImmutableList.of();\n  }\n else   if (range.encloses(span())) {\n    return ranges;\n  }\n  final int fromIndex;\n  if (range.hasLowerBound()) {\n    fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    fromIndex=0;\n  }\n  int toIndex;\n  if (range.hasUpperBound()) {\n    toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    toIndex=ranges.size();\n  }\n  final int length=toIndex - fromIndex;\n  if (length == 0) {\n    return ImmutableList.of();\n  }\n else {\n    return new ImmutableList<Range<C>>(){\n      @Override public int size(){\n        return length;\n      }\n      @Override public Range<C> get(      int index){\n        checkElementIndex(index,length);\n        if (index == 0 || index == length - 1) {\n          return ranges.get(index + fromIndex).intersection(range);\n        }\n else {\n          return ranges.get(index + fromIndex);\n        }\n      }\n      @Override boolean isPartialView(){\n        return true;\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 430,
        "startColumnNumber" : 10,
        "endLineNumber" : 435,
        "endColumnNumber" : 44
      },
      "nodeContext" : "SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "com.google.common.collect.SortedLists.KeyAbsentBehavior"
  }, {
    "nodeContext" : "KeyAbsentBehavior.NEXT_HIGHER",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 448,
      "startColumnNumber" : 14,
      "endLineNumber" : 448,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 443,
        "startColumnNumber" : 10,
        "endLineNumber" : 448,
        "endColumnNumber" : 44
      },
      "nodeContext" : "SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 442,
        "startColumnNumber" : 6,
        "endLineNumber" : 448,
        "endColumnNumber" : 44
      },
      "nodeContext" : "toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 442,
        "startColumnNumber" : 6,
        "endLineNumber" : 448,
        "endColumnNumber" : 45
      },
      "nodeContext" : "toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 441,
        "startColumnNumber" : 31,
        "endLineNumber" : 449,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 441,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (range.hasUpperBound()) {\n  toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n}\n else {\n  toIndex=ranges.size();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1545,
        "startLineNumber" : 420,
        "startColumnNumber" : 72,
        "endLineNumber" : 478,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ranges.isEmpty() || range.isEmpty()) {\n    return ImmutableList.of();\n  }\n else   if (range.encloses(span())) {\n    return ranges;\n  }\n  final int fromIndex;\n  if (range.hasLowerBound()) {\n    fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    fromIndex=0;\n  }\n  int toIndex;\n  if (range.hasUpperBound()) {\n    toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    toIndex=ranges.size();\n  }\n  final int length=toIndex - fromIndex;\n  if (length == 0) {\n    return ImmutableList.of();\n  }\n else {\n    return new ImmutableList<Range<C>>(){\n      @Override public int size(){\n        return length;\n      }\n      @Override public Range<C> get(      int index){\n        checkElementIndex(index,length);\n        if (index == 0 || index == length - 1) {\n          return ranges.get(index + fromIndex).intersection(range);\n        }\n else {\n          return ranges.get(index + fromIndex);\n        }\n      }\n      @Override boolean isPartialView(){\n        return true;\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1746,
        "startLineNumber" : 416,
        "startColumnNumber" : 2,
        "endLineNumber" : 478,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a list containing the nonempty intersections of  {@code range} with the ranges in thisrange set.\n */\nprivate ImmutableList<Range<C>> intersectRanges(final Range<C> range){\n  if (ranges.isEmpty() || range.isEmpty()) {\n    return ImmutableList.of();\n  }\n else   if (range.encloses(span())) {\n    return ranges;\n  }\n  final int fromIndex;\n  if (range.hasLowerBound()) {\n    fromIndex=SortedLists.binarySearch(ranges,Range.<C>upperBoundFn(),range.lowerBound,KeyPresentBehavior.FIRST_AFTER,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    fromIndex=0;\n  }\n  int toIndex;\n  if (range.hasUpperBound()) {\n    toIndex=SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER);\n  }\n else {\n    toIndex=ranges.size();\n  }\n  final int length=toIndex - fromIndex;\n  if (length == 0) {\n    return ImmutableList.of();\n  }\n else {\n    return new ImmutableList<Range<C>>(){\n      @Override public int size(){\n        return length;\n      }\n      @Override public Range<C> get(      int index){\n        checkElementIndex(index,length);\n        if (index == 0 || index == length - 1) {\n          return ranges.get(index + fromIndex).intersection(range);\n        }\n else {\n          return ranges.get(index + fromIndex);\n        }\n      }\n      @Override boolean isPartialView(){\n        return true;\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 443,
        "startColumnNumber" : 10,
        "endLineNumber" : 448,
        "endColumnNumber" : 44
      },
      "nodeContext" : "SortedLists.binarySearch(ranges,Range.<C>lowerBoundFn(),range.upperBound,KeyPresentBehavior.FIRST_PRESENT,KeyAbsentBehavior.NEXT_HIGHER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "com.google.common.collect.SortedLists.KeyAbsentBehavior"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 435,
    "startColumnNumber" : 14,
    "endLineNumber" : 435,
    "endColumnNumber" : 43
  }, {
    "charLength" : 29,
    "startLineNumber" : 448,
    "startColumnNumber" : 14,
    "endLineNumber" : 448,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}