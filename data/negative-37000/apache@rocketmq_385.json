{
  "id" : 385,
  "expression" : "value",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 84,
      "startColumnNumber" : 32,
      "endLineNumber" : 84,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 84,
        "startColumnNumber" : 24,
        "endLineNumber" : 84,
        "endColumnNumber" : 37
      },
      "nodeContext" : "null != value",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 84,
        "startColumnNumber" : 24,
        "endLineNumber" : 84,
        "endColumnNumber" : 61
      },
      "nodeContext" : "null != value && !field.isSynthetic()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 86,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (null != value && !field.isSynthetic()) {\n  map.put(field.getName(),value.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 82,
        "startColumnNumber" : 43,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Object value=field.get(header);\n  if (null != value && !field.isSynthetic()) {\n    map.put(field.getName(),value.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Field field : fields) {\n  Object value=field.get(header);\n  if (null != value && !field.isSynthetic()) {\n    map.put(field.getName(),value.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 69,
        "startColumnNumber" : 32,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Field[] fields=fieldCache.get(header.getClass());\n  if (null == fields) {\n    fields=header.getClass().getDeclaredFields();\n    for (    Field field : fields) {\n      field.setAccessible(true);\n    }\n    Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n    if (null != tmp) {\n      fields=tmp;\n    }\n  }\n  for (  Field field : fields) {\n    Object value=field.get(header);\n    if (null != value && !field.isSynthetic()) {\n      map.put(field.getName(),value.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 806,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != header) {\n  Field[] fields=fieldCache.get(header.getClass());\n  if (null == fields) {\n    fields=header.getClass().getDeclaredFields();\n    for (    Field field : fields) {\n      field.setAccessible(true);\n    }\n    Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n    if (null != tmp) {\n      fields=tmp;\n    }\n  }\n  for (  Field field : fields) {\n    Object value=field.get(header);\n    if (null != value && !field.isSynthetic()) {\n      map.put(field.getName(),value.toString());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (null != header) {\n    Field[] fields=fieldCache.get(header.getClass());\n    if (null == fields) {\n      fields=header.getClass().getDeclaredFields();\n      for (      Field field : fields) {\n        field.setAccessible(true);\n      }\n      Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n      if (null != tmp) {\n        fields=tmp;\n      }\n    }\n    for (    Field field : fields) {\n      Object value=field.get(header);\n      if (null != value && !field.isSynthetic()) {\n        map.put(field.getName(),value.toString());\n      }\n    }\n  }\n  return map;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (null != header) {\n    Field[] fields=fieldCache.get(header.getClass());\n    if (null == fields) {\n      fields=header.getClass().getDeclaredFields();\n      for (      Field field : fields) {\n        field.setAccessible(true);\n      }\n      Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n      if (null != tmp) {\n        fields=tmp;\n      }\n    }\n    for (    Field field : fields) {\n      Object value=field.get(header);\n      if (null != value && !field.isSynthetic()) {\n        map.put(field.getName(),value.toString());\n      }\n    }\n  }\n  return map;\n}\n catch (Exception e) {\n  throw new RuntimeException(\"incompatible exception.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 59,
        "startColumnNumber" : 118,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CommandCustomHeader header=request.readCustomHeader();\n  SortedMap<String,String> map=new TreeMap<String,String>();\n  map.put(ACCESS_KEY,ak);\n  if (securityToken != null) {\n    map.put(SECURITY_TOKEN,securityToken);\n  }\n  try {\n    if (null != header) {\n      Field[] fields=fieldCache.get(header.getClass());\n      if (null == fields) {\n        fields=header.getClass().getDeclaredFields();\n        for (        Field field : fields) {\n          field.setAccessible(true);\n        }\n        Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n        if (null != tmp) {\n          fields=tmp;\n        }\n      }\n      for (      Field field : fields) {\n        Object value=field.get(header);\n        if (null != value && !field.isSynthetic()) {\n          map.put(field.getName(),value.toString());\n        }\n      }\n    }\n    return map;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"incompatible exception.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected SortedMap<String,String> parseRequestContent(RemotingCommand request,String ak,String securityToken){\n  CommandCustomHeader header=request.readCustomHeader();\n  SortedMap<String,String> map=new TreeMap<String,String>();\n  map.put(ACCESS_KEY,ak);\n  if (securityToken != null) {\n    map.put(SECURITY_TOKEN,securityToken);\n  }\n  try {\n    if (null != header) {\n      Field[] fields=fieldCache.get(header.getClass());\n      if (null == fields) {\n        fields=header.getClass().getDeclaredFields();\n        for (        Field field : fields) {\n          field.setAccessible(true);\n        }\n        Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n        if (null != tmp) {\n          fields=tmp;\n        }\n      }\n      for (      Field field : fields) {\n        Object value=field.get(header);\n        if (null != value && !field.isSynthetic()) {\n          map.put(field.getName(),value.toString());\n        }\n      }\n    }\n    return map;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"incompatible exception.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 84,
        "startColumnNumber" : 24,
        "endLineNumber" : 84,
        "endColumnNumber" : 61
      },
      "nodeContext" : "null != value && !field.isSynthetic()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 85,
      "startColumnNumber" : 49,
      "endLineNumber" : 85,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 85,
        "startColumnNumber" : 49,
        "endLineNumber" : 85,
        "endColumnNumber" : 65
      },
      "nodeContext" : "value.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "map.put(field.getName(),value.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "map.put(field.getName(),value.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 84,
        "startColumnNumber" : 63,
        "endLineNumber" : 86,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  map.put(field.getName(),value.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 86,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (null != value && !field.isSynthetic()) {\n  map.put(field.getName(),value.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 82,
        "startColumnNumber" : 43,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Object value=field.get(header);\n  if (null != value && !field.isSynthetic()) {\n    map.put(field.getName(),value.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Field field : fields) {\n  Object value=field.get(header);\n  if (null != value && !field.isSynthetic()) {\n    map.put(field.getName(),value.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 69,
        "startColumnNumber" : 32,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Field[] fields=fieldCache.get(header.getClass());\n  if (null == fields) {\n    fields=header.getClass().getDeclaredFields();\n    for (    Field field : fields) {\n      field.setAccessible(true);\n    }\n    Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n    if (null != tmp) {\n      fields=tmp;\n    }\n  }\n  for (  Field field : fields) {\n    Object value=field.get(header);\n    if (null != value && !field.isSynthetic()) {\n      map.put(field.getName(),value.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 806,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != header) {\n  Field[] fields=fieldCache.get(header.getClass());\n  if (null == fields) {\n    fields=header.getClass().getDeclaredFields();\n    for (    Field field : fields) {\n      field.setAccessible(true);\n    }\n    Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n    if (null != tmp) {\n      fields=tmp;\n    }\n  }\n  for (  Field field : fields) {\n    Object value=field.get(header);\n    if (null != value && !field.isSynthetic()) {\n      map.put(field.getName(),value.toString());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (null != header) {\n    Field[] fields=fieldCache.get(header.getClass());\n    if (null == fields) {\n      fields=header.getClass().getDeclaredFields();\n      for (      Field field : fields) {\n        field.setAccessible(true);\n      }\n      Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n      if (null != tmp) {\n        fields=tmp;\n      }\n    }\n    for (    Field field : fields) {\n      Object value=field.get(header);\n      if (null != value && !field.isSynthetic()) {\n        map.put(field.getName(),value.toString());\n      }\n    }\n  }\n  return map;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (null != header) {\n    Field[] fields=fieldCache.get(header.getClass());\n    if (null == fields) {\n      fields=header.getClass().getDeclaredFields();\n      for (      Field field : fields) {\n        field.setAccessible(true);\n      }\n      Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n      if (null != tmp) {\n        fields=tmp;\n      }\n    }\n    for (    Field field : fields) {\n      Object value=field.get(header);\n      if (null != value && !field.isSynthetic()) {\n        map.put(field.getName(),value.toString());\n      }\n    }\n  }\n  return map;\n}\n catch (Exception e) {\n  throw new RuntimeException(\"incompatible exception.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 59,
        "startColumnNumber" : 118,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CommandCustomHeader header=request.readCustomHeader();\n  SortedMap<String,String> map=new TreeMap<String,String>();\n  map.put(ACCESS_KEY,ak);\n  if (securityToken != null) {\n    map.put(SECURITY_TOKEN,securityToken);\n  }\n  try {\n    if (null != header) {\n      Field[] fields=fieldCache.get(header.getClass());\n      if (null == fields) {\n        fields=header.getClass().getDeclaredFields();\n        for (        Field field : fields) {\n          field.setAccessible(true);\n        }\n        Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n        if (null != tmp) {\n          fields=tmp;\n        }\n      }\n      for (      Field field : fields) {\n        Object value=field.get(header);\n        if (null != value && !field.isSynthetic()) {\n          map.put(field.getName(),value.toString());\n        }\n      }\n    }\n    return map;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"incompatible exception.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected SortedMap<String,String> parseRequestContent(RemotingCommand request,String ak,String securityToken){\n  CommandCustomHeader header=request.readCustomHeader();\n  SortedMap<String,String> map=new TreeMap<String,String>();\n  map.put(ACCESS_KEY,ak);\n  if (securityToken != null) {\n    map.put(SECURITY_TOKEN,securityToken);\n  }\n  try {\n    if (null != header) {\n      Field[] fields=fieldCache.get(header.getClass());\n      if (null == fields) {\n        fields=header.getClass().getDeclaredFields();\n        for (        Field field : fields) {\n          field.setAccessible(true);\n        }\n        Field[] tmp=fieldCache.putIfAbsent(header.getClass(),fields);\n        if (null != tmp) {\n          fields=tmp;\n        }\n      }\n      for (      Field field : fields) {\n        Object value=field.get(header);\n        if (null != value && !field.isSynthetic()) {\n          map.put(field.getName(),value.toString());\n        }\n      }\n    }\n    return map;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"incompatible exception.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "map.put(field.getName(),value.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 84,
    "startColumnNumber" : 32,
    "endLineNumber" : 84,
    "endColumnNumber" : 37
  }, {
    "charLength" : 5,
    "startLineNumber" : 85,
    "startColumnNumber" : 49,
    "endLineNumber" : 85,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}