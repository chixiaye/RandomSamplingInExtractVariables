{
  "id" : 105,
  "expression" : "fragment.indexOf('?') != -1",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/view/component/TypePage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fragment.indexOf('?') != -1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 162,
      "startColumnNumber" : 13,
      "endLineNumber" : 162,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 162,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(fragment.indexOf('?') != -1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 162,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(fragment.indexOf('?') != -1) || (fragment.indexOf('*') != -1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((fragment.indexOf('?') != -1) || (fragment.indexOf('*') != -1)) {\n  int lastDash=fragment.lastIndexOf('-');\n  if (lastDash == -1) {\n    String slashAndTypeName=fragment.substring(1);\n    String typeName=fragment.substring(2);\n    for (    Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n      if (entry.getKey().endsWith(slashAndTypeName) || entry.getKey().equals(typeName)) {\n        ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n      }\n    }\n  }\n else {\n    String prefix=fragment.substring(0,lastDash + 1);\n    String suffix=fragment.substring(lastDash + 1);\n    BiFunction<String,String,Boolean> matchDescriptors;\n    if (suffix.charAt(0) == '(') {\n      matchDescriptors=DescriptorMatcher::matchMethodDescriptors;\n    }\n else {\n      matchDescriptors=DescriptorMatcher::matchFieldDescriptors;\n    }\n    if (fragment.charAt(0) == '*') {\n      String slashAndTypeNameAndName=prefix.substring(1);\n      String typeNameAndName=prefix.substring(2);\n      for (      Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n        String key=entry.getKey();\n        if ((key.indexOf(slashAndTypeNameAndName) != -1) || (key.startsWith(typeNameAndName))) {\n          int index=key.lastIndexOf('-') + 1;\n          if (matchDescriptors.apply(suffix,key.substring(index))) {\n            ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n          }\n        }\n      }\n    }\n else {\n      for (      Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n        String key=entry.getKey();\n        if (key.startsWith(prefix)) {\n          int index=key.lastIndexOf('-') + 1;\n          if (matchDescriptors.apply(suffix,key.substring(index))) {\n            ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n          }\n        }\n      }\n    }\n  }\n}\n else {\n  DeclarationData data=declarations.get(fragment);\n  if (data != null) {\n    ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n  }\n else   if (fragment.endsWith(\"-<clinit>-()V\")) {\n    String typeName=fragment.substring(0,fragment.indexOf('-'));\n    data=declarations.get(typeName);\n    ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 394,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3447,
        "startLineNumber" : 161,
        "startColumnNumber" : 148,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((fragment.indexOf('?') != -1) || (fragment.indexOf('*') != -1)) {\n    int lastDash=fragment.lastIndexOf('-');\n    if (lastDash == -1) {\n      String slashAndTypeName=fragment.substring(1);\n      String typeName=fragment.substring(2);\n      for (      Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n        if (entry.getKey().endsWith(slashAndTypeName) || entry.getKey().equals(typeName)) {\n          ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n        }\n      }\n    }\n else {\n      String prefix=fragment.substring(0,lastDash + 1);\n      String suffix=fragment.substring(lastDash + 1);\n      BiFunction<String,String,Boolean> matchDescriptors;\n      if (suffix.charAt(0) == '(') {\n        matchDescriptors=DescriptorMatcher::matchMethodDescriptors;\n      }\n else {\n        matchDescriptors=DescriptorMatcher::matchFieldDescriptors;\n      }\n      if (fragment.charAt(0) == '*') {\n        String slashAndTypeNameAndName=prefix.substring(1);\n        String typeNameAndName=prefix.substring(2);\n        for (        Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n          String key=entry.getKey();\n          if ((key.indexOf(slashAndTypeNameAndName) != -1) || (key.startsWith(typeNameAndName))) {\n            int index=key.lastIndexOf('-') + 1;\n            if (matchDescriptors.apply(suffix,key.substring(index))) {\n              ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n            }\n          }\n        }\n      }\n else {\n        for (        Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n          String key=entry.getKey();\n          if (key.startsWith(prefix)) {\n            int index=key.lastIndexOf('-') + 1;\n            if (matchDescriptors.apply(suffix,key.substring(index))) {\n              ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n            }\n          }\n        }\n      }\n    }\n  }\n else {\n    DeclarationData data=declarations.get(fragment);\n    if (data != null) {\n      ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n    }\n else     if (fragment.endsWith(\"-<clinit>-()V\")) {\n      String typeName=fragment.substring(0,fragment.indexOf('-'));\n      data=declarations.get(typeName);\n      ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3591,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void matchFragmentAndAddDocumentRange(String fragment,HashMap<String,DeclarationData> declarations,List<DocumentRange> ranges){\n  if ((fragment.indexOf('?') != -1) || (fragment.indexOf('*') != -1)) {\n    int lastDash=fragment.lastIndexOf('-');\n    if (lastDash == -1) {\n      String slashAndTypeName=fragment.substring(1);\n      String typeName=fragment.substring(2);\n      for (      Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n        if (entry.getKey().endsWith(slashAndTypeName) || entry.getKey().equals(typeName)) {\n          ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n        }\n      }\n    }\n else {\n      String prefix=fragment.substring(0,lastDash + 1);\n      String suffix=fragment.substring(lastDash + 1);\n      BiFunction<String,String,Boolean> matchDescriptors;\n      if (suffix.charAt(0) == '(') {\n        matchDescriptors=DescriptorMatcher::matchMethodDescriptors;\n      }\n else {\n        matchDescriptors=DescriptorMatcher::matchFieldDescriptors;\n      }\n      if (fragment.charAt(0) == '*') {\n        String slashAndTypeNameAndName=prefix.substring(1);\n        String typeNameAndName=prefix.substring(2);\n        for (        Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n          String key=entry.getKey();\n          if ((key.indexOf(slashAndTypeNameAndName) != -1) || (key.startsWith(typeNameAndName))) {\n            int index=key.lastIndexOf('-') + 1;\n            if (matchDescriptors.apply(suffix,key.substring(index))) {\n              ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n            }\n          }\n        }\n      }\n else {\n        for (        Map.Entry<String,DeclarationData> entry : declarations.entrySet()) {\n          String key=entry.getKey();\n          if (key.startsWith(prefix)) {\n            int index=key.lastIndexOf('-') + 1;\n            if (matchDescriptors.apply(suffix,key.substring(index))) {\n              ranges.add(new DocumentRange(entry.getValue().startPosition,entry.getValue().endPosition));\n            }\n          }\n        }\n      }\n    }\n  }\n else {\n    DeclarationData data=declarations.get(fragment);\n    if (data != null) {\n      ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n    }\n else     if (fragment.endsWith(\"-<clinit>-()V\")) {\n      String typeName=fragment.substring(0,fragment.indexOf('-'));\n      data=declarations.get(typeName);\n      ranges.add(new DocumentRange(data.startPosition,data.endPosition));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 420,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 162,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(fragment.indexOf('?') != -1) || (fragment.indexOf('*') != -1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 162,
    "startColumnNumber" : 13,
    "endLineNumber" : 162,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}