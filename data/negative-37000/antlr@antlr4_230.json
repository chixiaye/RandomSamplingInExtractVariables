{
  "id" : 230,
  "expression" : "g.rules.size()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/automata/LexerATNFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "g.rules.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 101,
      "startColumnNumber" : 32,
      "endLineNumber" : 101,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 101,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 47
      },
      "nodeContext" : "new int[g.rules.size()]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 47
      },
      "nodeContext" : "atn.ruleToTokenType=new int[g.rules.size()]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 48
      },
      "nodeContext" : "atn.ruleToTokenType=new int[g.rules.size()];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 88,
        "startColumnNumber" : 24,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Set<String> modes=((LexerGrammar)g).modes.keySet();\n  for (  String modeName : modes) {\n    TokensStartState startState=newState(TokensStartState.class,null);\n    atn.modeNameToStartState.put(modeName,startState);\n    atn.modeToStartState.add(startState);\n    atn.defineDecisionState(startState);\n  }\n  atn.ruleToTokenType=new int[g.rules.size()];\n  for (  Rule r : g.rules.values()) {\n    atn.ruleToTokenType[r.index]=g.getTokenType(r.name);\n  }\n  _createATN(g.rules.values());\n  atn.lexerActions=new LexerAction[indexToActionMap.size()];\n  for (  Map.Entry<Integer,LexerAction> entry : indexToActionMap.entrySet()) {\n    atn.lexerActions[entry.getKey()]=entry.getValue();\n  }\n  for (  String modeName : modes) {\n    List<Rule> rules=((LexerGrammar)g).modes.get(modeName);\n    TokensStartState startState=atn.modeNameToStartState.get(modeName);\n    for (    Rule r : rules) {\n      if (!r.isFragment()) {\n        RuleStartState s=atn.ruleToStartState[r.index];\n        epsilon(startState,s);\n      }\n    }\n  }\n  ATNOptimizer.optimize(g,atn);\n  checkEpsilonClosure();\n  return atn;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 87,
        "startColumnNumber" : 1,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public ATN createATN(){\n  Set<String> modes=((LexerGrammar)g).modes.keySet();\n  for (  String modeName : modes) {\n    TokensStartState startState=newState(TokensStartState.class,null);\n    atn.modeNameToStartState.put(modeName,startState);\n    atn.modeToStartState.add(startState);\n    atn.defineDecisionState(startState);\n  }\n  atn.ruleToTokenType=new int[g.rules.size()];\n  for (  Rule r : g.rules.values()) {\n    atn.ruleToTokenType[r.index]=g.getTokenType(r.name);\n  }\n  _createATN(g.rules.values());\n  atn.lexerActions=new LexerAction[indexToActionMap.size()];\n  for (  Map.Entry<Integer,LexerAction> entry : indexToActionMap.entrySet()) {\n    atn.lexerActions[entry.getKey()]=entry.getValue();\n  }\n  for (  String modeName : modes) {\n    List<Rule> rules=((LexerGrammar)g).modes.get(modeName);\n    TokensStartState startState=atn.modeNameToStartState.get(modeName);\n    for (    Rule r : rules) {\n      if (!r.isFragment()) {\n        RuleStartState s=atn.ruleToStartState[r.index];\n        epsilon(startState,s);\n      }\n    }\n  }\n  ATNOptimizer.optimize(g,atn);\n  checkEpsilonClosure();\n  return atn;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 48
      },
      "nodeContext" : "atn.ruleToTokenType=new int[g.rules.size()];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 101,
    "startColumnNumber" : 32,
    "endLineNumber" : 101,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}