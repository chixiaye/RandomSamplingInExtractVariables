{
  "id" : 99,
  "expression" : "TurnEvent.class",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/desktop/src/mindustry/desktop/steam/SStats.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TurnEvent.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 98,
      "startColumnNumber" : 18,
      "endLineNumber" : 98,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Events.on(TurnEvent.class,e -> {\n  float total=0;\n  for (  Planet planet : content.planets()) {\n    for (    Sector sec : planet.sectors) {\n      if (sec.hasBase()) {\n        for (        var v : sec.info.production.values()) {\n          if (v.mean > 0)           total+=v.mean * 60;\n        }\n      }\n    }\n  }\n  SStat.maxProduction.max(Math.round(total));\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 75,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 484,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Events.on(TurnEvent.class,e -> {\n  float total=0;\n  for (  Planet planet : content.planets()) {\n    for (    Sector sec : planet.sectors) {\n      if (sec.hasBase()) {\n        for (        var v : sec.info.production.values()) {\n          if (v.mean > 0)           total+=v.mean * 60;\n        }\n      }\n    }\n  }\n  SStat.maxProduction.max(Math.round(total));\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 76,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7897,
        "startLineNumber" : 84,
        "startColumnNumber" : 33,
        "endLineNumber" : 325,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Events.on(UnitDestroyEvent.class,e -> {\n    if (campaign()) {\n      if (e.unit.team != Vars.player.team()) {\n        SStat.unitsDestroyed.add();\n        if (e.unit.isBoss()) {\n          SStat.bossesDefeated.add();\n        }\n      }\n    }\n  }\n);\n  Events.on(TurnEvent.class,e -> {\n    float total=0;\n    for (    Planet planet : content.planets()) {\n      for (      Sector sec : planet.sectors) {\n        if (sec.hasBase()) {\n          for (          var v : sec.info.production.values()) {\n            if (v.mean > 0)             total+=v.mean * 60;\n          }\n        }\n      }\n    }\n    SStat.maxProduction.max(Math.round(total));\n  }\n);\n  Events.run(Trigger.newGame,() -> Core.app.post(() -> {\n    if (campaign() && player.core() != null && player.core().items.total() >= 10 * 1000) {\n      drop10kitems.complete();\n    }\n  }\n));\n  Events.on(CommandIssueEvent.class,e -> {\n    if (campaign() && e.command == UnitCommand.attack) {\n      issueAttackCommand.complete();\n    }\n  }\n);\n  Events.on(BlockBuildEndEvent.class,e -> {\n    if (campaign() && e.unit != null && e.unit.isLocal() && !e.breaking) {\n      SStat.blocksBuilt.add();\n      if (e.tile.block() == Blocks.router && e.tile.build.proximity().contains(t -> t.block == Blocks.router)) {\n        chainRouters.complete();\n      }\n      if (e.tile.block() == Blocks.groundFactory) {\n        buildGroundFactory.complete();\n      }\n      if (blocksBuilt.add(e.tile.block().name)) {\n        if (blocksBuilt.contains(\"meltdown\") && blocksBuilt.contains(\"spectre\") && blocksBuilt.contains(\"foreshadow\")) {\n          buildMeltdownSpectre.complete();\n        }\n        save();\n      }\n      if (e.tile.block() instanceof Conveyor) {\n        checked.clear();\n        check: {\n          Tile current=e.tile;\n          for (int i=0; i < 4; i++) {\n            checked.add(current.pos());\n            if (current.build == null)             break check;\n            Tile next=current.nearby(current.build.rotation);\n            if (next != null && next.block() instanceof Conveyor) {\n              current=next;\n            }\n else {\n              break check;\n            }\n          }\n          if (current == e.tile && checked.size == 4) {\n            circleConveyor.complete();\n          }\n        }\n      }\n    }\n  }\n);\n  Events.on(UnitCreateEvent.class,e -> {\n    if (campaign()) {\n      if (unitsBuilt.add(e.unit.type.name)) {\n        SStat.unitTypesBuilt.set(content.units().count(u -> unitsBuilt.contains(u.name) && !u.isHidden()));\n      }\n      if (t5s.contains(e.unit.type)) {\n        buildT5.complete();\n      }\n    }\n  }\n);\n  Events.on(UnitControlEvent.class,e -> {\n    if (e.unit instanceof     BlockUnitc block && block.tile().block == Blocks.router) {\n      becomeRouter.complete();\n    }\n  }\n);\n  Events.on(SchematicCreateEvent.class,e -> {\n    SStat.schematicsCreated.add();\n  }\n);\n  Events.on(BlockDestroyEvent.class,e -> {\n    if (campaign() && e.tile.team() != player.team()) {\n      SStat.blocksDestroyed.add();\n    }\n  }\n);\n  Events.on(MapMakeEvent.class,e -> SStat.mapsMade.add());\n  Events.on(MapPublishEvent.class,e -> SStat.mapsPublished.add());\n  Events.on(UnlockEvent.class,e -> {\n    if (e.content == Items.thorium)     obtainThorium.complete();\n    if (e.content == Items.titanium)     obtainTitanium.complete();\n    if (e.content instanceof SectorPreset && !content.sectors().contains(s -> s.locked())) {\n      unlockAllZones.complete();\n    }\n  }\n);\n  Events.run(Trigger.openWiki,openWiki::complete);\n  Events.run(Trigger.exclusionDeath,dieExclusion::complete);\n  Events.on(UnitDrownEvent.class,e -> {\n    if (campaign() && e.unit.isPlayer()) {\n      drown.complete();\n    }\n  }\n);\n  trigger(Trigger.acceleratorUse,useAccelerator);\n  trigger(Trigger.impactPower,powerupImpactReactor);\n  trigger(Trigger.flameAmmo,useFlameAmmo);\n  trigger(Trigger.turretCool,coolTurret);\n  trigger(Trigger.suicideBomb,suicideBomb);\n  Events.run(Trigger.enablePixelation,enablePixelation::complete);\n  Events.run(Trigger.thoriumReactorOverheat,() -> {\n    if (campaign()) {\n      SStat.reactorsOverheated.add();\n    }\n  }\n);\n  trigger(Trigger.shock,shockWetEnemy);\n  trigger(Trigger.phaseDeflectHit,killEnemyPhaseWall);\n  Events.on(LaunchItemEvent.class,e -> {\n    if (campaign()) {\n      launchItemPad.complete();\n    }\n  }\n);\n  Events.on(PickupEvent.class,e -> {\n    if (e.carrier.isPlayer() && campaign() && e.unit != null && t5s.contains(e.unit.type)) {\n      pickupT5.complete();\n    }\n  }\n);\n  Events.on(UnitCreateEvent.class,e -> {\n    if (campaign() && e.unit.team() == player.team()) {\n      SStat.unitsBuilt.add();\n    }\n  }\n);\n  Events.on(SectorLaunchEvent.class,e -> {\n    SStat.timesLaunched.add();\n  }\n);\n  Events.on(LaunchItemEvent.class,e -> {\n    SStat.itemsLaunched.add(e.stack.amount);\n  }\n);\n  Events.on(WaveEvent.class,e -> {\n    if (campaign()) {\n      SStat.maxWavesSurvived.max(Vars.state.wave);\n      if (state.stats.buildingsBuilt == 0 && state.wave >= 10) {\n        survive10WavesNoBlocks.complete();\n      }\n    }\n  }\n);\n  Events.on(PlayerJoin.class,e -> {\n    if (Vars.net.server()) {\n      SStat.maxPlayersServer.max(Groups.player.size());\n    }\n  }\n);\n  Runnable checkUnlocks=() -> {\n    if (Blocks.router.unlocked())     researchRouter.complete();\n    if (!TechTree.all.contains(t -> t.content.locked())) {\n      researchAll.complete();\n    }\n  }\n;\n  Events.on(ResearchEvent.class,e -> checkUnlocks.run());\n  Events.on(ClientLoadEvent.class,e -> checkUnlocks.run());\n  Events.on(WinEvent.class,e -> {\n    if (state.rules.pvp) {\n      SStat.pvpsWon.add();\n    }\n  }\n);\n  Events.on(SectorCaptureEvent.class,e -> {\n    if (e.sector.isBeingPlayed() || net.client()) {\n      if (Vars.state.wave <= 5 && state.rules.attackMode) {\n        defeatAttack5Waves.complete();\n      }\n      if (state.stats.buildingsDestroyed == 0) {\n        captureNoBlocksBroken.complete();\n      }\n    }\n    if (Vars.state.rules.attackMode) {\n      SStat.attacksWon.add();\n    }\n    if (!e.sector.isBeingPlayed() && !net.client()) {\n      captureBackground.complete();\n    }\n    if (!e.sector.planet.sectors.contains(s -> !s.hasBase())) {\n      captureAllSectors.complete();\n    }\n    SStat.sectorsControlled.set(e.sector.planet.sectors.count(Sector::hasBase));\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1193,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7926,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 325,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void registerEvents(){\n  Events.on(UnitDestroyEvent.class,e -> {\n    if (campaign()) {\n      if (e.unit.team != Vars.player.team()) {\n        SStat.unitsDestroyed.add();\n        if (e.unit.isBoss()) {\n          SStat.bossesDefeated.add();\n        }\n      }\n    }\n  }\n);\n  Events.on(TurnEvent.class,e -> {\n    float total=0;\n    for (    Planet planet : content.planets()) {\n      for (      Sector sec : planet.sectors) {\n        if (sec.hasBase()) {\n          for (          var v : sec.info.production.values()) {\n            if (v.mean > 0)             total+=v.mean * 60;\n          }\n        }\n      }\n    }\n    SStat.maxProduction.max(Math.round(total));\n  }\n);\n  Events.run(Trigger.newGame,() -> Core.app.post(() -> {\n    if (campaign() && player.core() != null && player.core().items.total() >= 10 * 1000) {\n      drop10kitems.complete();\n    }\n  }\n));\n  Events.on(CommandIssueEvent.class,e -> {\n    if (campaign() && e.command == UnitCommand.attack) {\n      issueAttackCommand.complete();\n    }\n  }\n);\n  Events.on(BlockBuildEndEvent.class,e -> {\n    if (campaign() && e.unit != null && e.unit.isLocal() && !e.breaking) {\n      SStat.blocksBuilt.add();\n      if (e.tile.block() == Blocks.router && e.tile.build.proximity().contains(t -> t.block == Blocks.router)) {\n        chainRouters.complete();\n      }\n      if (e.tile.block() == Blocks.groundFactory) {\n        buildGroundFactory.complete();\n      }\n      if (blocksBuilt.add(e.tile.block().name)) {\n        if (blocksBuilt.contains(\"meltdown\") && blocksBuilt.contains(\"spectre\") && blocksBuilt.contains(\"foreshadow\")) {\n          buildMeltdownSpectre.complete();\n        }\n        save();\n      }\n      if (e.tile.block() instanceof Conveyor) {\n        checked.clear();\n        check: {\n          Tile current=e.tile;\n          for (int i=0; i < 4; i++) {\n            checked.add(current.pos());\n            if (current.build == null)             break check;\n            Tile next=current.nearby(current.build.rotation);\n            if (next != null && next.block() instanceof Conveyor) {\n              current=next;\n            }\n else {\n              break check;\n            }\n          }\n          if (current == e.tile && checked.size == 4) {\n            circleConveyor.complete();\n          }\n        }\n      }\n    }\n  }\n);\n  Events.on(UnitCreateEvent.class,e -> {\n    if (campaign()) {\n      if (unitsBuilt.add(e.unit.type.name)) {\n        SStat.unitTypesBuilt.set(content.units().count(u -> unitsBuilt.contains(u.name) && !u.isHidden()));\n      }\n      if (t5s.contains(e.unit.type)) {\n        buildT5.complete();\n      }\n    }\n  }\n);\n  Events.on(UnitControlEvent.class,e -> {\n    if (e.unit instanceof     BlockUnitc block && block.tile().block == Blocks.router) {\n      becomeRouter.complete();\n    }\n  }\n);\n  Events.on(SchematicCreateEvent.class,e -> {\n    SStat.schematicsCreated.add();\n  }\n);\n  Events.on(BlockDestroyEvent.class,e -> {\n    if (campaign() && e.tile.team() != player.team()) {\n      SStat.blocksDestroyed.add();\n    }\n  }\n);\n  Events.on(MapMakeEvent.class,e -> SStat.mapsMade.add());\n  Events.on(MapPublishEvent.class,e -> SStat.mapsPublished.add());\n  Events.on(UnlockEvent.class,e -> {\n    if (e.content == Items.thorium)     obtainThorium.complete();\n    if (e.content == Items.titanium)     obtainTitanium.complete();\n    if (e.content instanceof SectorPreset && !content.sectors().contains(s -> s.locked())) {\n      unlockAllZones.complete();\n    }\n  }\n);\n  Events.run(Trigger.openWiki,openWiki::complete);\n  Events.run(Trigger.exclusionDeath,dieExclusion::complete);\n  Events.on(UnitDrownEvent.class,e -> {\n    if (campaign() && e.unit.isPlayer()) {\n      drown.complete();\n    }\n  }\n);\n  trigger(Trigger.acceleratorUse,useAccelerator);\n  trigger(Trigger.impactPower,powerupImpactReactor);\n  trigger(Trigger.flameAmmo,useFlameAmmo);\n  trigger(Trigger.turretCool,coolTurret);\n  trigger(Trigger.suicideBomb,suicideBomb);\n  Events.run(Trigger.enablePixelation,enablePixelation::complete);\n  Events.run(Trigger.thoriumReactorOverheat,() -> {\n    if (campaign()) {\n      SStat.reactorsOverheated.add();\n    }\n  }\n);\n  trigger(Trigger.shock,shockWetEnemy);\n  trigger(Trigger.phaseDeflectHit,killEnemyPhaseWall);\n  Events.on(LaunchItemEvent.class,e -> {\n    if (campaign()) {\n      launchItemPad.complete();\n    }\n  }\n);\n  Events.on(PickupEvent.class,e -> {\n    if (e.carrier.isPlayer() && campaign() && e.unit != null && t5s.contains(e.unit.type)) {\n      pickupT5.complete();\n    }\n  }\n);\n  Events.on(UnitCreateEvent.class,e -> {\n    if (campaign() && e.unit.team() == player.team()) {\n      SStat.unitsBuilt.add();\n    }\n  }\n);\n  Events.on(SectorLaunchEvent.class,e -> {\n    SStat.timesLaunched.add();\n  }\n);\n  Events.on(LaunchItemEvent.class,e -> {\n    SStat.itemsLaunched.add(e.stack.amount);\n  }\n);\n  Events.on(WaveEvent.class,e -> {\n    if (campaign()) {\n      SStat.maxWavesSurvived.max(Vars.state.wave);\n      if (state.stats.buildingsBuilt == 0 && state.wave >= 10) {\n        survive10WavesNoBlocks.complete();\n      }\n    }\n  }\n);\n  Events.on(PlayerJoin.class,e -> {\n    if (Vars.net.server()) {\n      SStat.maxPlayersServer.max(Groups.player.size());\n    }\n  }\n);\n  Runnable checkUnlocks=() -> {\n    if (Blocks.router.unlocked())     researchRouter.complete();\n    if (!TechTree.all.contains(t -> t.content.locked())) {\n      researchAll.complete();\n    }\n  }\n;\n  Events.on(ResearchEvent.class,e -> checkUnlocks.run());\n  Events.on(ClientLoadEvent.class,e -> checkUnlocks.run());\n  Events.on(WinEvent.class,e -> {\n    if (state.rules.pvp) {\n      SStat.pvpsWon.add();\n    }\n  }\n);\n  Events.on(SectorCaptureEvent.class,e -> {\n    if (e.sector.isBeingPlayed() || net.client()) {\n      if (Vars.state.wave <= 5 && state.rules.attackMode) {\n        defeatAttack5Waves.complete();\n      }\n      if (state.stats.buildingsDestroyed == 0) {\n        captureNoBlocksBroken.complete();\n      }\n    }\n    if (Vars.state.rules.attackMode) {\n      SStat.attacksWon.add();\n    }\n    if (!e.sector.isBeingPlayed() && !net.client()) {\n      captureBackground.complete();\n    }\n    if (!e.sector.planet.sectors.contains(s -> !s.hasBase())) {\n      captureAllSectors.complete();\n    }\n    SStat.sectorsControlled.set(e.sector.planet.sectors.count(Sector::hasBase));\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1197,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Events.on(TurnEvent.class,e -> {\n  float total=0;\n  for (  Planet planet : content.planets()) {\n    for (    Sector sec : planet.sectors) {\n      if (sec.hasBase()) {\n        for (        var v : sec.info.production.values()) {\n          if (v.mean > 0)           total+=v.mean * 60;\n        }\n      }\n    }\n  }\n  SStat.maxProduction.max(Math.round(total));\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 75,
      "astHeight" : 17
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<mindustry.game.EventType.TurnEvent>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 98,
    "startColumnNumber" : 18,
    "endLineNumber" : 98,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}