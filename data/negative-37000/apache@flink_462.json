{
  "id" : 462,
  "expression" : "launchCommand",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-yarn/src/main/java/org/apache/flink/yarn/Utils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "launchCommand",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 518,
      "startColumnNumber" : 63,
      "endLineNumber" : 518,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 518,
        "startColumnNumber" : 22,
        "endLineNumber" : 518,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"Starting TaskManagers with command: \" + launchCommand",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 518,
        "startColumnNumber" : 12,
        "endLineNumber" : 518,
        "endColumnNumber" : 77
      },
      "nodeContext" : "log.debug(\"Starting TaskManagers with command: \" + launchCommand)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 518,
        "startColumnNumber" : 12,
        "endLineNumber" : 518,
        "endColumnNumber" : 78
      },
      "nodeContext" : "log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 517,
        "startColumnNumber" : 34,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 517,
        "startColumnNumber" : 8,
        "endLineNumber" : 521,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (log.isDebugEnabled()) {\n  log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n}\n else {\n  log.info(\"Starting TaskManagers\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8620,
        "startLineNumber" : 400,
        "startColumnNumber" : 29,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String remoteFlinkJarPath=checkNotNull(configuration.getFlinkDistJar(),\"Environment variable %s not set\",YarnConfigKeys.FLINK_DIST_JAR);\n  String shipListString=checkNotNull(configuration.getClientShipFiles(),\"Environment variable %s not set\",YarnConfigKeys.ENV_CLIENT_SHIP_FILES);\n  final String remoteKeytabPath=configuration.getRemoteKeytabPath();\n  final String localKeytabPath=configuration.getLocalKeytabPath();\n  final String keytabPrincipal=configuration.getKeytabPrinciple();\n  final String remoteYarnConfPath=configuration.getYarnSiteXMLPath();\n  final String remoteKrb5Path=configuration.getKrb5Path();\n  if (log.isDebugEnabled()) {\n    log.debug(\"TM:remote keytab path obtained {}\",remoteKeytabPath);\n    log.debug(\"TM:local keytab path obtained {}\",localKeytabPath);\n    log.debug(\"TM:keytab principal obtained {}\",keytabPrincipal);\n    log.debug(\"TM:remote yarn conf path obtained {}\",remoteYarnConfPath);\n    log.debug(\"TM:remote krb5 path obtained {}\",remoteKrb5Path);\n  }\n  String classPathString=checkNotNull(configuration.getFlinkClasspath(),\"Environment variable %s not set\",YarnConfigKeys.ENV_FLINK_CLASSPATH);\n  LocalResource keytabResource=null;\n  if (remoteKeytabPath != null) {\n    log.info(\"TM:Adding keytab {} to the container local resource bucket\",remoteKeytabPath);\n    Path keytabPath=new Path(remoteKeytabPath);\n    FileSystem fs=keytabPath.getFileSystem(yarnConfig);\n    keytabResource=registerLocalResource(fs,keytabPath,LocalResourceType.FILE);\n  }\n  LocalResource yarnConfResource=null;\n  if (remoteYarnConfPath != null) {\n    log.info(\"TM:Adding remoteYarnConfPath {} to the container local resource bucket\",remoteYarnConfPath);\n    Path yarnConfPath=new Path(remoteYarnConfPath);\n    FileSystem fs=yarnConfPath.getFileSystem(yarnConfig);\n    yarnConfResource=registerLocalResource(fs,yarnConfPath,LocalResourceType.FILE);\n  }\n  LocalResource krb5ConfResource=null;\n  boolean hasKrb5=false;\n  if (remoteKrb5Path != null) {\n    log.info(\"Adding remoteKrb5Path {} to the container local resource bucket\",remoteKrb5Path);\n    Path krb5ConfPath=new Path(remoteKrb5Path);\n    FileSystem fs=krb5ConfPath.getFileSystem(yarnConfig);\n    krb5ConfResource=registerLocalResource(fs,krb5ConfPath,LocalResourceType.FILE);\n    hasKrb5=true;\n  }\n  Map<String,LocalResource> taskManagerLocalResources=new HashMap<>();\n  final YarnLocalResourceDescriptor flinkDistLocalResourceDesc=YarnLocalResourceDescriptor.fromString(remoteFlinkJarPath);\n  taskManagerLocalResources.put(flinkDistLocalResourceDesc.getResourceKey(),flinkDistLocalResourceDesc.toLocalResource());\n  if (yarnConfResource != null) {\n    taskManagerLocalResources.put(YARN_SITE_FILE_NAME,yarnConfResource);\n  }\n  if (krb5ConfResource != null) {\n    taskManagerLocalResources.put(KRB5_FILE_NAME,krb5ConfResource);\n  }\n  if (keytabResource != null) {\n    taskManagerLocalResources.put(localKeytabPath,keytabResource);\n  }\n  decodeYarnLocalResourceDescriptorListFromString(shipListString).forEach(resourceDesc -> taskManagerLocalResources.put(resourceDesc.getResourceKey(),resourceDesc.toLocalResource()));\n  log.info(\"Creating container launch context for TaskManagers\");\n  boolean hasLogback=new File(workingDirectory,\"logback.xml\").exists();\n  boolean hasLog4j=new File(workingDirectory,\"log4j.properties\").exists();\n  String launchCommand=BootstrapTools.getTaskManagerShellCommand(flinkConfig,tmParams,\".\",ApplicationConstants.LOG_DIR_EXPANSION_VAR,hasLogback,hasLog4j,hasKrb5,taskManagerMainClass,taskManagerDynamicProperties);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n  }\n else {\n    log.info(\"Starting TaskManagers\");\n  }\n  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);\n  ctx.setCommands(Collections.singletonList(launchCommand));\n  ctx.setLocalResources(taskManagerLocalResources);\n  Map<String,String> containerEnv=new HashMap<>();\n  containerEnv.putAll(tmParams.taskManagerEnv());\n  containerEnv.put(ENV_FLINK_CLASSPATH,classPathString);\n  setupYarnClassPath(yarnConfig,containerEnv);\n  containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME,UserGroupInformation.getCurrentUser().getUserName());\n  if (remoteKeytabPath != null && localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.REMOTE_KEYTAB_PATH,remoteKeytabPath);\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n else   if (localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n  ctx.setEnvironment(containerEnv);\n  final String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n  if (fileLocation != null) {\n    log.debug(\"Adding security tokens to TaskExecutor's container launch context.\");\n    try (DataOutputBuffer dob=new DataOutputBuffer()){\n      Credentials cred=Credentials.readTokenStorageFile(new File(fileLocation),HadoopUtils.getHadoopConfiguration(flinkConfig));\n      Credentials taskManagerCred=new Credentials();\n      Collection<Token<? extends TokenIdentifier>> userTokens=cred.getAllTokens();\n      for (      Token<? extends TokenIdentifier> token : userTokens) {\n        if (!token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n          taskManagerCred.addToken(token.getService(),token);\n        }\n      }\n      taskManagerCred.writeTokenStorageToStream(dob);\n      ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());\n      ctx.setTokens(securityTokens);\n    }\n catch (    Throwable t) {\n      log.error(\"Failed to add Hadoop's security tokens.\",t);\n    }\n  }\n else {\n    log.info(\"Could not set security tokens because Hadoop's token file location is unknown.\");\n  }\n  return ctx;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 697,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10418,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in an allocated YARN container. <p>This code is extremely YARN specific and registers all the resources that the TaskExecutor needs (such as JAR file, config file, ...) and all environment variables in a YARN container launch context. The launch context then ensures that those resources will be copied into the containers transient working directory.\n * @param flinkConfig The Flink configuration object.\n * @param yarnConfig The YARN configuration object.\n * @param configuration The YarnResourceManagerDriver configurations.\n * @param tmParams The TaskExecutor container memory parameters.\n * @param taskManagerDynamicProperties The dynamic configurations to be updated for theTaskExecutors based on client uploaded Flink config.\n * @param workingDirectory The current application master container's working directory.\n * @param taskManagerMainClass The class with the main method.\n * @param log The logger.\n * @return The launch context for the TaskManager processes.\n * @throws Exception Thrown if the launch context could not be created, for example if theresources could not be copied.\n */\nstatic ContainerLaunchContext createTaskExecutorContext(org.apache.flink.configuration.Configuration flinkConfig,YarnConfiguration yarnConfig,YarnResourceManagerDriverConfiguration configuration,ContaineredTaskManagerParameters tmParams,String taskManagerDynamicProperties,String workingDirectory,Class<?> taskManagerMainClass,Logger log) throws Exception {\n  String remoteFlinkJarPath=checkNotNull(configuration.getFlinkDistJar(),\"Environment variable %s not set\",YarnConfigKeys.FLINK_DIST_JAR);\n  String shipListString=checkNotNull(configuration.getClientShipFiles(),\"Environment variable %s not set\",YarnConfigKeys.ENV_CLIENT_SHIP_FILES);\n  final String remoteKeytabPath=configuration.getRemoteKeytabPath();\n  final String localKeytabPath=configuration.getLocalKeytabPath();\n  final String keytabPrincipal=configuration.getKeytabPrinciple();\n  final String remoteYarnConfPath=configuration.getYarnSiteXMLPath();\n  final String remoteKrb5Path=configuration.getKrb5Path();\n  if (log.isDebugEnabled()) {\n    log.debug(\"TM:remote keytab path obtained {}\",remoteKeytabPath);\n    log.debug(\"TM:local keytab path obtained {}\",localKeytabPath);\n    log.debug(\"TM:keytab principal obtained {}\",keytabPrincipal);\n    log.debug(\"TM:remote yarn conf path obtained {}\",remoteYarnConfPath);\n    log.debug(\"TM:remote krb5 path obtained {}\",remoteKrb5Path);\n  }\n  String classPathString=checkNotNull(configuration.getFlinkClasspath(),\"Environment variable %s not set\",YarnConfigKeys.ENV_FLINK_CLASSPATH);\n  LocalResource keytabResource=null;\n  if (remoteKeytabPath != null) {\n    log.info(\"TM:Adding keytab {} to the container local resource bucket\",remoteKeytabPath);\n    Path keytabPath=new Path(remoteKeytabPath);\n    FileSystem fs=keytabPath.getFileSystem(yarnConfig);\n    keytabResource=registerLocalResource(fs,keytabPath,LocalResourceType.FILE);\n  }\n  LocalResource yarnConfResource=null;\n  if (remoteYarnConfPath != null) {\n    log.info(\"TM:Adding remoteYarnConfPath {} to the container local resource bucket\",remoteYarnConfPath);\n    Path yarnConfPath=new Path(remoteYarnConfPath);\n    FileSystem fs=yarnConfPath.getFileSystem(yarnConfig);\n    yarnConfResource=registerLocalResource(fs,yarnConfPath,LocalResourceType.FILE);\n  }\n  LocalResource krb5ConfResource=null;\n  boolean hasKrb5=false;\n  if (remoteKrb5Path != null) {\n    log.info(\"Adding remoteKrb5Path {} to the container local resource bucket\",remoteKrb5Path);\n    Path krb5ConfPath=new Path(remoteKrb5Path);\n    FileSystem fs=krb5ConfPath.getFileSystem(yarnConfig);\n    krb5ConfResource=registerLocalResource(fs,krb5ConfPath,LocalResourceType.FILE);\n    hasKrb5=true;\n  }\n  Map<String,LocalResource> taskManagerLocalResources=new HashMap<>();\n  final YarnLocalResourceDescriptor flinkDistLocalResourceDesc=YarnLocalResourceDescriptor.fromString(remoteFlinkJarPath);\n  taskManagerLocalResources.put(flinkDistLocalResourceDesc.getResourceKey(),flinkDistLocalResourceDesc.toLocalResource());\n  if (yarnConfResource != null) {\n    taskManagerLocalResources.put(YARN_SITE_FILE_NAME,yarnConfResource);\n  }\n  if (krb5ConfResource != null) {\n    taskManagerLocalResources.put(KRB5_FILE_NAME,krb5ConfResource);\n  }\n  if (keytabResource != null) {\n    taskManagerLocalResources.put(localKeytabPath,keytabResource);\n  }\n  decodeYarnLocalResourceDescriptorListFromString(shipListString).forEach(resourceDesc -> taskManagerLocalResources.put(resourceDesc.getResourceKey(),resourceDesc.toLocalResource()));\n  log.info(\"Creating container launch context for TaskManagers\");\n  boolean hasLogback=new File(workingDirectory,\"logback.xml\").exists();\n  boolean hasLog4j=new File(workingDirectory,\"log4j.properties\").exists();\n  String launchCommand=BootstrapTools.getTaskManagerShellCommand(flinkConfig,tmParams,\".\",ApplicationConstants.LOG_DIR_EXPANSION_VAR,hasLogback,hasLog4j,hasKrb5,taskManagerMainClass,taskManagerDynamicProperties);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n  }\n else {\n    log.info(\"Starting TaskManagers\");\n  }\n  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);\n  ctx.setCommands(Collections.singletonList(launchCommand));\n  ctx.setLocalResources(taskManagerLocalResources);\n  Map<String,String> containerEnv=new HashMap<>();\n  containerEnv.putAll(tmParams.taskManagerEnv());\n  containerEnv.put(ENV_FLINK_CLASSPATH,classPathString);\n  setupYarnClassPath(yarnConfig,containerEnv);\n  containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME,UserGroupInformation.getCurrentUser().getUserName());\n  if (remoteKeytabPath != null && localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.REMOTE_KEYTAB_PATH,remoteKeytabPath);\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n else   if (localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n  ctx.setEnvironment(containerEnv);\n  final String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n  if (fileLocation != null) {\n    log.debug(\"Adding security tokens to TaskExecutor's container launch context.\");\n    try (DataOutputBuffer dob=new DataOutputBuffer()){\n      Credentials cred=Credentials.readTokenStorageFile(new File(fileLocation),HadoopUtils.getHadoopConfiguration(flinkConfig));\n      Credentials taskManagerCred=new Credentials();\n      Collection<Token<? extends TokenIdentifier>> userTokens=cred.getAllTokens();\n      for (      Token<? extends TokenIdentifier> token : userTokens) {\n        if (!token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n          taskManagerCred.addToken(token.getService(),token);\n        }\n      }\n      taskManagerCred.writeTokenStorageToStream(dob);\n      ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());\n      ctx.setTokens(securityTokens);\n    }\n catch (    Throwable t) {\n      log.error(\"Failed to add Hadoop's security tokens.\",t);\n    }\n  }\n else {\n    log.info(\"Could not set security tokens because Hadoop's token file location is unknown.\");\n  }\n  return ctx;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 747,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 518,
        "startColumnNumber" : 12,
        "endLineNumber" : 518,
        "endColumnNumber" : 78
      },
      "nodeContext" : "log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "launchCommand",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 524,
      "startColumnNumber" : 50,
      "endLineNumber" : 524,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 524,
        "startColumnNumber" : 24,
        "endLineNumber" : 524,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Collections.singletonList(launchCommand)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 524,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ctx.setCommands(Collections.singletonList(launchCommand))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 524,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ctx.setCommands(Collections.singletonList(launchCommand));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8620,
        "startLineNumber" : 400,
        "startColumnNumber" : 29,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String remoteFlinkJarPath=checkNotNull(configuration.getFlinkDistJar(),\"Environment variable %s not set\",YarnConfigKeys.FLINK_DIST_JAR);\n  String shipListString=checkNotNull(configuration.getClientShipFiles(),\"Environment variable %s not set\",YarnConfigKeys.ENV_CLIENT_SHIP_FILES);\n  final String remoteKeytabPath=configuration.getRemoteKeytabPath();\n  final String localKeytabPath=configuration.getLocalKeytabPath();\n  final String keytabPrincipal=configuration.getKeytabPrinciple();\n  final String remoteYarnConfPath=configuration.getYarnSiteXMLPath();\n  final String remoteKrb5Path=configuration.getKrb5Path();\n  if (log.isDebugEnabled()) {\n    log.debug(\"TM:remote keytab path obtained {}\",remoteKeytabPath);\n    log.debug(\"TM:local keytab path obtained {}\",localKeytabPath);\n    log.debug(\"TM:keytab principal obtained {}\",keytabPrincipal);\n    log.debug(\"TM:remote yarn conf path obtained {}\",remoteYarnConfPath);\n    log.debug(\"TM:remote krb5 path obtained {}\",remoteKrb5Path);\n  }\n  String classPathString=checkNotNull(configuration.getFlinkClasspath(),\"Environment variable %s not set\",YarnConfigKeys.ENV_FLINK_CLASSPATH);\n  LocalResource keytabResource=null;\n  if (remoteKeytabPath != null) {\n    log.info(\"TM:Adding keytab {} to the container local resource bucket\",remoteKeytabPath);\n    Path keytabPath=new Path(remoteKeytabPath);\n    FileSystem fs=keytabPath.getFileSystem(yarnConfig);\n    keytabResource=registerLocalResource(fs,keytabPath,LocalResourceType.FILE);\n  }\n  LocalResource yarnConfResource=null;\n  if (remoteYarnConfPath != null) {\n    log.info(\"TM:Adding remoteYarnConfPath {} to the container local resource bucket\",remoteYarnConfPath);\n    Path yarnConfPath=new Path(remoteYarnConfPath);\n    FileSystem fs=yarnConfPath.getFileSystem(yarnConfig);\n    yarnConfResource=registerLocalResource(fs,yarnConfPath,LocalResourceType.FILE);\n  }\n  LocalResource krb5ConfResource=null;\n  boolean hasKrb5=false;\n  if (remoteKrb5Path != null) {\n    log.info(\"Adding remoteKrb5Path {} to the container local resource bucket\",remoteKrb5Path);\n    Path krb5ConfPath=new Path(remoteKrb5Path);\n    FileSystem fs=krb5ConfPath.getFileSystem(yarnConfig);\n    krb5ConfResource=registerLocalResource(fs,krb5ConfPath,LocalResourceType.FILE);\n    hasKrb5=true;\n  }\n  Map<String,LocalResource> taskManagerLocalResources=new HashMap<>();\n  final YarnLocalResourceDescriptor flinkDistLocalResourceDesc=YarnLocalResourceDescriptor.fromString(remoteFlinkJarPath);\n  taskManagerLocalResources.put(flinkDistLocalResourceDesc.getResourceKey(),flinkDistLocalResourceDesc.toLocalResource());\n  if (yarnConfResource != null) {\n    taskManagerLocalResources.put(YARN_SITE_FILE_NAME,yarnConfResource);\n  }\n  if (krb5ConfResource != null) {\n    taskManagerLocalResources.put(KRB5_FILE_NAME,krb5ConfResource);\n  }\n  if (keytabResource != null) {\n    taskManagerLocalResources.put(localKeytabPath,keytabResource);\n  }\n  decodeYarnLocalResourceDescriptorListFromString(shipListString).forEach(resourceDesc -> taskManagerLocalResources.put(resourceDesc.getResourceKey(),resourceDesc.toLocalResource()));\n  log.info(\"Creating container launch context for TaskManagers\");\n  boolean hasLogback=new File(workingDirectory,\"logback.xml\").exists();\n  boolean hasLog4j=new File(workingDirectory,\"log4j.properties\").exists();\n  String launchCommand=BootstrapTools.getTaskManagerShellCommand(flinkConfig,tmParams,\".\",ApplicationConstants.LOG_DIR_EXPANSION_VAR,hasLogback,hasLog4j,hasKrb5,taskManagerMainClass,taskManagerDynamicProperties);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n  }\n else {\n    log.info(\"Starting TaskManagers\");\n  }\n  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);\n  ctx.setCommands(Collections.singletonList(launchCommand));\n  ctx.setLocalResources(taskManagerLocalResources);\n  Map<String,String> containerEnv=new HashMap<>();\n  containerEnv.putAll(tmParams.taskManagerEnv());\n  containerEnv.put(ENV_FLINK_CLASSPATH,classPathString);\n  setupYarnClassPath(yarnConfig,containerEnv);\n  containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME,UserGroupInformation.getCurrentUser().getUserName());\n  if (remoteKeytabPath != null && localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.REMOTE_KEYTAB_PATH,remoteKeytabPath);\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n else   if (localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n  ctx.setEnvironment(containerEnv);\n  final String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n  if (fileLocation != null) {\n    log.debug(\"Adding security tokens to TaskExecutor's container launch context.\");\n    try (DataOutputBuffer dob=new DataOutputBuffer()){\n      Credentials cred=Credentials.readTokenStorageFile(new File(fileLocation),HadoopUtils.getHadoopConfiguration(flinkConfig));\n      Credentials taskManagerCred=new Credentials();\n      Collection<Token<? extends TokenIdentifier>> userTokens=cred.getAllTokens();\n      for (      Token<? extends TokenIdentifier> token : userTokens) {\n        if (!token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n          taskManagerCred.addToken(token.getService(),token);\n        }\n      }\n      taskManagerCred.writeTokenStorageToStream(dob);\n      ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());\n      ctx.setTokens(securityTokens);\n    }\n catch (    Throwable t) {\n      log.error(\"Failed to add Hadoop's security tokens.\",t);\n    }\n  }\n else {\n    log.info(\"Could not set security tokens because Hadoop's token file location is unknown.\");\n  }\n  return ctx;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 697,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10418,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 587,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in an allocated YARN container. <p>This code is extremely YARN specific and registers all the resources that the TaskExecutor needs (such as JAR file, config file, ...) and all environment variables in a YARN container launch context. The launch context then ensures that those resources will be copied into the containers transient working directory.\n * @param flinkConfig The Flink configuration object.\n * @param yarnConfig The YARN configuration object.\n * @param configuration The YarnResourceManagerDriver configurations.\n * @param tmParams The TaskExecutor container memory parameters.\n * @param taskManagerDynamicProperties The dynamic configurations to be updated for theTaskExecutors based on client uploaded Flink config.\n * @param workingDirectory The current application master container's working directory.\n * @param taskManagerMainClass The class with the main method.\n * @param log The logger.\n * @return The launch context for the TaskManager processes.\n * @throws Exception Thrown if the launch context could not be created, for example if theresources could not be copied.\n */\nstatic ContainerLaunchContext createTaskExecutorContext(org.apache.flink.configuration.Configuration flinkConfig,YarnConfiguration yarnConfig,YarnResourceManagerDriverConfiguration configuration,ContaineredTaskManagerParameters tmParams,String taskManagerDynamicProperties,String workingDirectory,Class<?> taskManagerMainClass,Logger log) throws Exception {\n  String remoteFlinkJarPath=checkNotNull(configuration.getFlinkDistJar(),\"Environment variable %s not set\",YarnConfigKeys.FLINK_DIST_JAR);\n  String shipListString=checkNotNull(configuration.getClientShipFiles(),\"Environment variable %s not set\",YarnConfigKeys.ENV_CLIENT_SHIP_FILES);\n  final String remoteKeytabPath=configuration.getRemoteKeytabPath();\n  final String localKeytabPath=configuration.getLocalKeytabPath();\n  final String keytabPrincipal=configuration.getKeytabPrinciple();\n  final String remoteYarnConfPath=configuration.getYarnSiteXMLPath();\n  final String remoteKrb5Path=configuration.getKrb5Path();\n  if (log.isDebugEnabled()) {\n    log.debug(\"TM:remote keytab path obtained {}\",remoteKeytabPath);\n    log.debug(\"TM:local keytab path obtained {}\",localKeytabPath);\n    log.debug(\"TM:keytab principal obtained {}\",keytabPrincipal);\n    log.debug(\"TM:remote yarn conf path obtained {}\",remoteYarnConfPath);\n    log.debug(\"TM:remote krb5 path obtained {}\",remoteKrb5Path);\n  }\n  String classPathString=checkNotNull(configuration.getFlinkClasspath(),\"Environment variable %s not set\",YarnConfigKeys.ENV_FLINK_CLASSPATH);\n  LocalResource keytabResource=null;\n  if (remoteKeytabPath != null) {\n    log.info(\"TM:Adding keytab {} to the container local resource bucket\",remoteKeytabPath);\n    Path keytabPath=new Path(remoteKeytabPath);\n    FileSystem fs=keytabPath.getFileSystem(yarnConfig);\n    keytabResource=registerLocalResource(fs,keytabPath,LocalResourceType.FILE);\n  }\n  LocalResource yarnConfResource=null;\n  if (remoteYarnConfPath != null) {\n    log.info(\"TM:Adding remoteYarnConfPath {} to the container local resource bucket\",remoteYarnConfPath);\n    Path yarnConfPath=new Path(remoteYarnConfPath);\n    FileSystem fs=yarnConfPath.getFileSystem(yarnConfig);\n    yarnConfResource=registerLocalResource(fs,yarnConfPath,LocalResourceType.FILE);\n  }\n  LocalResource krb5ConfResource=null;\n  boolean hasKrb5=false;\n  if (remoteKrb5Path != null) {\n    log.info(\"Adding remoteKrb5Path {} to the container local resource bucket\",remoteKrb5Path);\n    Path krb5ConfPath=new Path(remoteKrb5Path);\n    FileSystem fs=krb5ConfPath.getFileSystem(yarnConfig);\n    krb5ConfResource=registerLocalResource(fs,krb5ConfPath,LocalResourceType.FILE);\n    hasKrb5=true;\n  }\n  Map<String,LocalResource> taskManagerLocalResources=new HashMap<>();\n  final YarnLocalResourceDescriptor flinkDistLocalResourceDesc=YarnLocalResourceDescriptor.fromString(remoteFlinkJarPath);\n  taskManagerLocalResources.put(flinkDistLocalResourceDesc.getResourceKey(),flinkDistLocalResourceDesc.toLocalResource());\n  if (yarnConfResource != null) {\n    taskManagerLocalResources.put(YARN_SITE_FILE_NAME,yarnConfResource);\n  }\n  if (krb5ConfResource != null) {\n    taskManagerLocalResources.put(KRB5_FILE_NAME,krb5ConfResource);\n  }\n  if (keytabResource != null) {\n    taskManagerLocalResources.put(localKeytabPath,keytabResource);\n  }\n  decodeYarnLocalResourceDescriptorListFromString(shipListString).forEach(resourceDesc -> taskManagerLocalResources.put(resourceDesc.getResourceKey(),resourceDesc.toLocalResource()));\n  log.info(\"Creating container launch context for TaskManagers\");\n  boolean hasLogback=new File(workingDirectory,\"logback.xml\").exists();\n  boolean hasLog4j=new File(workingDirectory,\"log4j.properties\").exists();\n  String launchCommand=BootstrapTools.getTaskManagerShellCommand(flinkConfig,tmParams,\".\",ApplicationConstants.LOG_DIR_EXPANSION_VAR,hasLogback,hasLog4j,hasKrb5,taskManagerMainClass,taskManagerDynamicProperties);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Starting TaskManagers with command: \" + launchCommand);\n  }\n else {\n    log.info(\"Starting TaskManagers\");\n  }\n  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);\n  ctx.setCommands(Collections.singletonList(launchCommand));\n  ctx.setLocalResources(taskManagerLocalResources);\n  Map<String,String> containerEnv=new HashMap<>();\n  containerEnv.putAll(tmParams.taskManagerEnv());\n  containerEnv.put(ENV_FLINK_CLASSPATH,classPathString);\n  setupYarnClassPath(yarnConfig,containerEnv);\n  containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME,UserGroupInformation.getCurrentUser().getUserName());\n  if (remoteKeytabPath != null && localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.REMOTE_KEYTAB_PATH,remoteKeytabPath);\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n else   if (localKeytabPath != null && keytabPrincipal != null) {\n    containerEnv.put(YarnConfigKeys.LOCAL_KEYTAB_PATH,localKeytabPath);\n    containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL,keytabPrincipal);\n  }\n  ctx.setEnvironment(containerEnv);\n  final String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n  if (fileLocation != null) {\n    log.debug(\"Adding security tokens to TaskExecutor's container launch context.\");\n    try (DataOutputBuffer dob=new DataOutputBuffer()){\n      Credentials cred=Credentials.readTokenStorageFile(new File(fileLocation),HadoopUtils.getHadoopConfiguration(flinkConfig));\n      Credentials taskManagerCred=new Credentials();\n      Collection<Token<? extends TokenIdentifier>> userTokens=cred.getAllTokens();\n      for (      Token<? extends TokenIdentifier> token : userTokens) {\n        if (!token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n          taskManagerCred.addToken(token.getService(),token);\n        }\n      }\n      taskManagerCred.writeTokenStorageToStream(dob);\n      ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());\n      ctx.setTokens(securityTokens);\n    }\n catch (    Throwable t) {\n      log.error(\"Failed to add Hadoop's security tokens.\",t);\n    }\n  }\n else {\n    log.info(\"Could not set security tokens because Hadoop's token file location is unknown.\");\n  }\n  return ctx;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 747,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 524,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ctx.setCommands(Collections.singletonList(launchCommand));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 518,
    "startColumnNumber" : 63,
    "endLineNumber" : 518,
    "endColumnNumber" : 76
  }, {
    "charLength" : 13,
    "startLineNumber" : 524,
    "startColumnNumber" : 50,
    "endLineNumber" : 524,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}