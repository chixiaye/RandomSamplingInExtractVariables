{
  "id" : 13,
  "expression" : "messageClassGeneratorTypes",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/generator/src/main/java/org/apache/kafka/message/MessageGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "messageClassGeneratorTypes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 232,
      "startColumnNumber" : 66,
      "endLineNumber" : 232,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 232,
        "startColumnNumber" : 24,
        "endLineNumber" : 232,
        "endColumnNumber" : 93
      },
      "nodeContext" : "createMessageClassGenerators(packageName,messageClassGeneratorTypes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 231,
        "startColumnNumber" : 48,
        "endLineNumber" : 232,
        "endColumnNumber" : 93
      },
      "nodeContext" : "generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 232,
        "endColumnNumber" : 94
      },
      "nodeContext" : "List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 228,
        "startColumnNumber" : 20,
        "endLineNumber" : 243,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n  List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n  for (  MessageClassGenerator generator : generators) {\n    String name=generator.outputName(spec) + JAVA_SUFFIX;\n    outputFileNames.add(name);\n    Path outputPath=Paths.get(outputDir,name);\n    try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n      generator.generateAndWrite(spec,writer);\n    }\n   }\n  numProcessed++;\n  typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1068,
        "startLineNumber" : 228,
        "startColumnNumber" : 16,
        "endLineNumber" : 245,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n  List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n  for (  MessageClassGenerator generator : generators) {\n    String name=generator.outputName(spec) + JAVA_SUFFIX;\n    outputFileNames.add(name);\n    Path outputPath=Paths.get(outputDir,name);\n    try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n      generator.generateAndWrite(spec,writer);\n    }\n   }\n  numProcessed++;\n  typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n}\n catch (Exception e) {\n  throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 227,
        "startColumnNumber" : 51,
        "endLineNumber" : 246,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n    List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n    for (    MessageClassGenerator generator : generators) {\n      String name=generator.outputName(spec) + JAVA_SUFFIX;\n      outputFileNames.add(name);\n      Path outputPath=Paths.get(outputDir,name);\n      try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n        generator.generateAndWrite(spec,writer);\n      }\n     }\n    numProcessed++;\n    typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 227,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Path inputPath : directoryStream) {\n  try {\n    MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n    List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n    for (    MessageClassGenerator generator : generators) {\n      String name=generator.outputName(spec) + JAVA_SUFFIX;\n      outputFileNames.add(name);\n      Path outputPath=Paths.get(outputDir,name);\n      try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n        generator.generateAndWrite(spec,writer);\n      }\n     }\n    numProcessed++;\n    typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 226,
        "startColumnNumber" : 69,
        "endLineNumber" : 247,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Path inputPath : directoryStream) {\n    try {\n      MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n      List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n      for (      MessageClassGenerator generator : generators) {\n        String name=generator.outputName(spec) + JAVA_SUFFIX;\n        outputFileNames.add(name);\n        Path outputPath=Paths.get(outputDir,name);\n        try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n          generator.generateAndWrite(spec,writer);\n        }\n       }\n      numProcessed++;\n      typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 247,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get(inputDir),JSON_GLOB)){\n  for (  Path inputPath : directoryStream) {\n    try {\n      MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n      List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n      for (      MessageClassGenerator generator : generators) {\n        String name=generator.outputName(spec) + JAVA_SUFFIX;\n        outputFileNames.add(name);\n        Path outputPath=Paths.get(outputDir,name);\n        try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n          generator.generateAndWrite(spec,writer);\n        }\n       }\n      numProcessed++;\n      typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2552,
        "startLineNumber" : 218,
        "startColumnNumber" : 100,
        "endLineNumber" : 267,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Files.createDirectories(Paths.get(outputDir));\n  int numProcessed=0;\n  List<TypeClassGenerator> typeClassGenerators=createTypeClassGenerators(packageName,typeClassGeneratorTypes);\n  HashSet<String> outputFileNames=new HashSet<>();\n  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get(inputDir),JSON_GLOB)){\n    for (    Path inputPath : directoryStream) {\n      try {\n        MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n        List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n        for (        MessageClassGenerator generator : generators) {\n          String name=generator.outputName(spec) + JAVA_SUFFIX;\n          outputFileNames.add(name);\n          Path outputPath=Paths.get(outputDir,name);\n          try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n            generator.generateAndWrite(spec,writer);\n          }\n         }\n        numProcessed++;\n        typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n      }\n catch (      Exception e) {\n        throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n      }\n    }\n  }\n   for (  TypeClassGenerator typeClassGenerator : typeClassGenerators) {\n    outputFileNames.add(typeClassGenerator.outputName());\n    Path factoryOutputPath=Paths.get(outputDir,typeClassGenerator.outputName());\n    try (BufferedWriter writer=Files.newBufferedWriter(factoryOutputPath)){\n      typeClassGenerator.generateAndWrite(writer);\n    }\n   }\n  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get(outputDir))){\n    for (    Path outputPath : directoryStream) {\n      Path fileName=outputPath.getFileName();\n      if (fileName != null) {\n        if (!outputFileNames.contains(fileName.toString())) {\n          Files.delete(outputPath);\n        }\n      }\n    }\n  }\n   System.out.printf(\"MessageGenerator: processed %d Kafka message JSON files(s).%n\",numProcessed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2909,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 267,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void processDirectories(String packageName,String outputDir,String inputDir,List<String> typeClassGeneratorTypes,List<String> messageClassGeneratorTypes) throws Exception {\n  Files.createDirectories(Paths.get(outputDir));\n  int numProcessed=0;\n  List<TypeClassGenerator> typeClassGenerators=createTypeClassGenerators(packageName,typeClassGeneratorTypes);\n  HashSet<String> outputFileNames=new HashSet<>();\n  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get(inputDir),JSON_GLOB)){\n    for (    Path inputPath : directoryStream) {\n      try {\n        MessageSpec spec=JSON_SERDE.readValue(inputPath.toFile(),MessageSpec.class);\n        List<MessageClassGenerator> generators=createMessageClassGenerators(packageName,messageClassGeneratorTypes);\n        for (        MessageClassGenerator generator : generators) {\n          String name=generator.outputName(spec) + JAVA_SUFFIX;\n          outputFileNames.add(name);\n          Path outputPath=Paths.get(outputDir,name);\n          try (BufferedWriter writer=Files.newBufferedWriter(outputPath)){\n            generator.generateAndWrite(spec,writer);\n          }\n         }\n        numProcessed++;\n        typeClassGenerators.forEach(generator -> generator.registerMessageType(spec));\n      }\n catch (      Exception e) {\n        throw new RuntimeException(\"Exception while processing \" + inputPath.toString(),e);\n      }\n    }\n  }\n   for (  TypeClassGenerator typeClassGenerator : typeClassGenerators) {\n    outputFileNames.add(typeClassGenerator.outputName());\n    Path factoryOutputPath=Paths.get(outputDir,typeClassGenerator.outputName());\n    try (BufferedWriter writer=Files.newBufferedWriter(factoryOutputPath)){\n      typeClassGenerator.generateAndWrite(writer);\n    }\n   }\n  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get(outputDir))){\n    for (    Path outputPath : directoryStream) {\n      Path fileName=outputPath.getFileName();\n      if (fileName != null) {\n        if (!outputFileNames.contains(fileName.toString())) {\n          Files.delete(outputPath);\n        }\n      }\n    }\n  }\n   System.out.printf(\"MessageGenerator: processed %d Kafka message JSON files(s).%n\",numProcessed);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 232,
        "startColumnNumber" : 24,
        "endLineNumber" : 232,
        "endColumnNumber" : 93
      },
      "nodeContext" : "createMessageClassGenerators(packageName,messageClassGeneratorTypes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 232,
    "startColumnNumber" : 66,
    "endLineNumber" : 232,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}