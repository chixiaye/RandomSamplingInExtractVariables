{
  "id" : 124,
  "expression" : "i < 0",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/client/result/VCardResultParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 151,
      "startColumnNumber" : 10,
      "endLineNumber" : 151,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1430,
        "startLineNumber" : 151,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new ArrayList<List<String>>(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    if (parseFieldDivider) {\n      element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n    }\n  }\n else {\n    if (parseFieldDivider) {\n      element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n    }\n    element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n    element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n    element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n  }\n  if (metadata == null) {\n    List<String> match=new ArrayList<String>(1);\n    match.add(element);\n    matches.add(match);\n  }\n else {\n    metadata.add(0,element);\n    matches.add(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 184,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3604,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n  if (i > 0) {\n    i--;\n  }\n  if (!matcher.find(i)) {\n    break;\n  }\n  i=matcher.end(0);\n  String metadataString=matcher.group(1);\n  List<String> metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (metadataString != null) {\n    for (    String metadatum : SEMICOLON.split(metadataString)) {\n      if (metadata == null) {\n        metadata=new ArrayList<String>(1);\n      }\n      metadata.add(metadatum);\n      String[] metadatumTokens=EQUALS.split(metadatum,2);\n      if (metadatumTokens.length > 1) {\n        String key=metadatumTokens[0];\n        String value=metadatumTokens[1];\n        if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n    }\n  }\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new ArrayList<List<String>>(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n    }\n else {\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n      element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n      element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n      element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n    }\n    if (metadata == null) {\n      List<String> match=new ArrayList<String>(1);\n      match.add(element);\n      matches.add(match);\n    }\n else {\n      metadata.add(0,element);\n      matches.add(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3620,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n  if (i > 0) {\n    i--;\n  }\n  if (!matcher.find(i)) {\n    break;\n  }\n  i=matcher.end(0);\n  String metadataString=matcher.group(1);\n  List<String> metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (metadataString != null) {\n    for (    String metadatum : SEMICOLON.split(metadataString)) {\n      if (metadata == null) {\n        metadata=new ArrayList<String>(1);\n      }\n      metadata.add(metadatum);\n      String[] metadatumTokens=EQUALS.split(metadatum,2);\n      if (metadatumTokens.length > 1) {\n        String key=metadatumTokens[0];\n        String value=metadatumTokens[1];\n        if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n      }\n    }\n  }\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new ArrayList<List<String>>(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n    }\n else {\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n      element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n      element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n      element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n    }\n    if (metadata == null) {\n      List<String> match=new ArrayList<String>(1);\n      match.add(element);\n      matches.add(match);\n    }\n else {\n      metadata.add(0,element);\n      matches.add(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 432,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3738,
        "startLineNumber" : 93,
        "startColumnNumber" : 87,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<List<String>> matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n    if (i > 0) {\n      i--;\n    }\n    if (!matcher.find(i)) {\n      break;\n    }\n    i=matcher.end(0);\n    String metadataString=matcher.group(1);\n    List<String> metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (metadataString != null) {\n      for (      String metadatum : SEMICOLON.split(metadataString)) {\n        if (metadata == null) {\n          metadata=new ArrayList<String>(1);\n        }\n        metadata.add(metadatum);\n        String[] metadatumTokens=EQUALS.split(metadatum,2);\n        if (metadatumTokens.length > 1) {\n          String key=metadatumTokens[0];\n          String value=metadatumTokens[1];\n          if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n      }\n    }\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new ArrayList<List<String>>(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n      }\n else {\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n        element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n        element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n        element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n      }\n      if (metadata == null) {\n        List<String> match=new ArrayList<String>(1);\n        match.add(element);\n        matches.add(match);\n      }\n else {\n        metadata.add(0,element);\n        matches.add(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 459,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4054,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static List<List<String>> matchVCardPrefixedField(CharSequence prefix,String rawText,boolean trim,boolean parseFieldDivider){\n  List<List<String>> matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n    if (i > 0) {\n      i--;\n    }\n    if (!matcher.find(i)) {\n      break;\n    }\n    i=matcher.end(0);\n    String metadataString=matcher.group(1);\n    List<String> metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (metadataString != null) {\n      for (      String metadatum : SEMICOLON.split(metadataString)) {\n        if (metadata == null) {\n          metadata=new ArrayList<String>(1);\n        }\n        metadata.add(metadatum);\n        String[] metadatumTokens=EQUALS.split(metadatum,2);\n        if (metadatumTokens.length > 1) {\n          String key=metadatumTokens[0];\n          String value=metadatumTokens[1];\n          if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n      }\n    }\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new ArrayList<List<String>>(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n      }\n else {\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n        element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n        element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n        element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n      }\n      if (metadata == null) {\n        List<String> match=new ArrayList<String>(1);\n        match.add(element);\n        matches.add(match);\n      }\n else {\n        metadata.add(0,element);\n        matches.add(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 485,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1430,
        "startLineNumber" : 151,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new ArrayList<List<String>>(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    if (parseFieldDivider) {\n      element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n    }\n  }\n else {\n    if (parseFieldDivider) {\n      element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n    }\n    element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n    element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n    element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n  }\n  if (metadata == null) {\n    List<String> match=new ArrayList<String>(1);\n    match.add(element);\n    matches.add(match);\n  }\n else {\n    metadata.add(0,element);\n    matches.add(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 184,
      "astHeight" : 13
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 151,
    "startColumnNumber" : 10,
    "endLineNumber" : 151,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}