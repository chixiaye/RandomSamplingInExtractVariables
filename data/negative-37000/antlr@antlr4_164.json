{
  "id" : 164,
  "expression" : "visitor",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/codegen/CodeGenPipeline.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "visitor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 100,
      "startColumnNumber" : 23,
      "endLineNumber" : 100,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 37
      },
      "nodeContext" : "gen.writeVisitor(visitor,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 38
      },
      "nodeContext" : "gen.writeVisitor(visitor,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 99,
        "startColumnNumber" : 53,
        "endLineNumber" : 101,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  gen.writeVisitor(visitor,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 99,
        "startColumnNumber" : 5,
        "endLineNumber" : 101,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (g.tool.errMgr.getNumErrors() == errorCount) {\n  gen.writeVisitor(visitor,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 97,
        "startColumnNumber" : 39,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ST visitor=gen.generateVisitor(true);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (gen.getTarget().needsHeader()) {\n  ST visitor=gen.generateVisitor(true);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,true);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 96,
        "startColumnNumber" : 29,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (gen.getTarget().needsHeader()) {\n    ST visitor=gen.generateVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,true);\n    }\n  }\n  ST visitor=gen.generateVisitor(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,false);\n  }\n  if (gen.getTarget().needsHeader()) {\n    ST baseVisitor=gen.generateBaseVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,true);\n    }\n  }\n  if (gen.getTarget().wantsBaseVisitor()) {\n    ST baseVisitor=gen.generateBaseVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,false);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 96,
        "startColumnNumber" : 3,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (g.tool.gen_visitor) {\n  if (gen.getTarget().needsHeader()) {\n    ST visitor=gen.generateVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,true);\n    }\n  }\n  ST visitor=gen.generateVisitor(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,false);\n  }\n  if (gen.getTarget().needsHeader()) {\n    ST baseVisitor=gen.generateBaseVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,true);\n    }\n  }\n  if (gen.getTarget().wantsBaseVisitor()) {\n    ST baseVisitor=gen.generateBaseVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,false);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2013,
        "startLineNumber" : 59,
        "startColumnNumber" : 7,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (gen.getTarget().needsHeader()) {\n    ST parser=gen.generateParser(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,true);\n    }\n  }\n  ST parser=gen.generateParser(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(parser,gen,false);\n  }\n  if (g.tool.gen_listener) {\n    if (gen.getTarget().needsHeader()) {\n      ST listener=gen.generateListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,true);\n      }\n    }\n    ST listener=gen.generateListener(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeListener(listener,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseListener=gen.generateBaseListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseListener()) {\n      ST baseListener=gen.generateBaseListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,false);\n      }\n    }\n  }\n  if (g.tool.gen_visitor) {\n    if (gen.getTarget().needsHeader()) {\n      ST visitor=gen.generateVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,true);\n      }\n    }\n    ST visitor=gen.generateVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseVisitor=gen.generateBaseVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseVisitor()) {\n      ST baseVisitor=gen.generateBaseVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,false);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (g.isLexer()) {\n  if (gen.getTarget().needsHeader()) {\n    ST lexer=gen.generateLexer(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,true);\n    }\n  }\n  ST lexer=gen.generateLexer(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(lexer,gen,false);\n  }\n}\n else {\n  if (gen.getTarget().needsHeader()) {\n    ST parser=gen.generateParser(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,true);\n    }\n  }\n  ST parser=gen.generateParser(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(parser,gen,false);\n  }\n  if (g.tool.gen_listener) {\n    if (gen.getTarget().needsHeader()) {\n      ST listener=gen.generateListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,true);\n      }\n    }\n    ST listener=gen.generateListener(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeListener(listener,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseListener=gen.generateBaseListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseListener()) {\n      ST baseListener=gen.generateBaseListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,false);\n      }\n    }\n  }\n  if (g.tool.gen_visitor) {\n    if (gen.getTarget().needsHeader()) {\n      ST visitor=gen.generateVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,true);\n      }\n    }\n    ST visitor=gen.generateVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseVisitor=gen.generateBaseVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseVisitor()) {\n      ST baseVisitor=gen.generateBaseVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,false);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 388,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3320,
        "startLineNumber" : 25,
        "startColumnNumber" : 23,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!CodeGenerator.targetExists(g.getOptionString(\"language\")))   return;\n  CodeGenerator gen=new CodeGenerator(g);\n  IntervalSet idTypes=new IntervalSet();\n  idTypes.add(ANTLRParser.ID);\n  idTypes.add(ANTLRParser.RULE_REF);\n  idTypes.add(ANTLRParser.TOKEN_REF);\n  List<GrammarAST> idNodes=g.ast.getNodesWithType(idTypes);\n  for (  GrammarAST idNode : idNodes) {\n    if (gen.getTarget().grammarSymbolCausesIssueInGeneratedCode(idNode)) {\n      g.tool.errMgr.grammarError(ErrorType.USE_OF_BAD_WORD,g.fileName,idNode.getToken(),idNode.getText());\n    }\n  }\n  int errorCount=g.tool.errMgr.getNumErrors();\n  if (g.isLexer()) {\n    if (gen.getTarget().needsHeader()) {\n      ST lexer=gen.generateLexer(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(lexer,gen,true);\n      }\n    }\n    ST lexer=gen.generateLexer(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,false);\n    }\n  }\n else {\n    if (gen.getTarget().needsHeader()) {\n      ST parser=gen.generateParser(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(parser,gen,true);\n      }\n    }\n    ST parser=gen.generateParser(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,false);\n    }\n    if (g.tool.gen_listener) {\n      if (gen.getTarget().needsHeader()) {\n        ST listener=gen.generateListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeListener(listener,true);\n        }\n      }\n      ST listener=gen.generateListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseListener=gen.generateBaseListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseListener()) {\n        ST baseListener=gen.generateBaseListener(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,false);\n        }\n      }\n    }\n    if (g.tool.gen_visitor) {\n      if (gen.getTarget().needsHeader()) {\n        ST visitor=gen.generateVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeVisitor(visitor,true);\n        }\n      }\n      ST visitor=gen.generateVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseVisitor=gen.generateBaseVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseVisitor()) {\n        ST baseVisitor=gen.generateBaseVisitor(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,false);\n        }\n      }\n    }\n  }\n  gen.writeVocabFile();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 501,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 25,
        "startColumnNumber" : 1,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void process(){\n  if (!CodeGenerator.targetExists(g.getOptionString(\"language\")))   return;\n  CodeGenerator gen=new CodeGenerator(g);\n  IntervalSet idTypes=new IntervalSet();\n  idTypes.add(ANTLRParser.ID);\n  idTypes.add(ANTLRParser.RULE_REF);\n  idTypes.add(ANTLRParser.TOKEN_REF);\n  List<GrammarAST> idNodes=g.ast.getNodesWithType(idTypes);\n  for (  GrammarAST idNode : idNodes) {\n    if (gen.getTarget().grammarSymbolCausesIssueInGeneratedCode(idNode)) {\n      g.tool.errMgr.grammarError(ErrorType.USE_OF_BAD_WORD,g.fileName,idNode.getToken(),idNode.getText());\n    }\n  }\n  int errorCount=g.tool.errMgr.getNumErrors();\n  if (g.isLexer()) {\n    if (gen.getTarget().needsHeader()) {\n      ST lexer=gen.generateLexer(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(lexer,gen,true);\n      }\n    }\n    ST lexer=gen.generateLexer(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,false);\n    }\n  }\n else {\n    if (gen.getTarget().needsHeader()) {\n      ST parser=gen.generateParser(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(parser,gen,true);\n      }\n    }\n    ST parser=gen.generateParser(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,false);\n    }\n    if (g.tool.gen_listener) {\n      if (gen.getTarget().needsHeader()) {\n        ST listener=gen.generateListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeListener(listener,true);\n        }\n      }\n      ST listener=gen.generateListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseListener=gen.generateBaseListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseListener()) {\n        ST baseListener=gen.generateBaseListener(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,false);\n        }\n      }\n    }\n    if (g.tool.gen_visitor) {\n      if (gen.getTarget().needsHeader()) {\n        ST visitor=gen.generateVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeVisitor(visitor,true);\n        }\n      }\n      ST visitor=gen.generateVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseVisitor=gen.generateBaseVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseVisitor()) {\n        ST baseVisitor=gen.generateBaseVisitor(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,false);\n        }\n      }\n    }\n  }\n  gen.writeVocabFile();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 38
      },
      "nodeContext" : "gen.writeVisitor(visitor,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.codegen.ST"
  }, {
    "nodeContext" : "visitor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 105,
      "startColumnNumber" : 22,
      "endLineNumber" : 105,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 37
      },
      "nodeContext" : "gen.writeVisitor(visitor,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 38
      },
      "nodeContext" : "gen.writeVisitor(visitor,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 104,
        "startColumnNumber" : 52,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  gen.writeVisitor(visitor,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (g.tool.errMgr.getNumErrors() == errorCount) {\n  gen.writeVisitor(visitor,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 96,
        "startColumnNumber" : 29,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (gen.getTarget().needsHeader()) {\n    ST visitor=gen.generateVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,true);\n    }\n  }\n  ST visitor=gen.generateVisitor(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,false);\n  }\n  if (gen.getTarget().needsHeader()) {\n    ST baseVisitor=gen.generateBaseVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,true);\n    }\n  }\n  if (gen.getTarget().wantsBaseVisitor()) {\n    ST baseVisitor=gen.generateBaseVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,false);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 96,
        "startColumnNumber" : 3,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (g.tool.gen_visitor) {\n  if (gen.getTarget().needsHeader()) {\n    ST visitor=gen.generateVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,true);\n    }\n  }\n  ST visitor=gen.generateVisitor(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    gen.writeVisitor(visitor,false);\n  }\n  if (gen.getTarget().needsHeader()) {\n    ST baseVisitor=gen.generateBaseVisitor(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,true);\n    }\n  }\n  if (gen.getTarget().wantsBaseVisitor()) {\n    ST baseVisitor=gen.generateBaseVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeBaseVisitor(baseVisitor,false);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2013,
        "startLineNumber" : 59,
        "startColumnNumber" : 7,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (gen.getTarget().needsHeader()) {\n    ST parser=gen.generateParser(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,true);\n    }\n  }\n  ST parser=gen.generateParser(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(parser,gen,false);\n  }\n  if (g.tool.gen_listener) {\n    if (gen.getTarget().needsHeader()) {\n      ST listener=gen.generateListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,true);\n      }\n    }\n    ST listener=gen.generateListener(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeListener(listener,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseListener=gen.generateBaseListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseListener()) {\n      ST baseListener=gen.generateBaseListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,false);\n      }\n    }\n  }\n  if (g.tool.gen_visitor) {\n    if (gen.getTarget().needsHeader()) {\n      ST visitor=gen.generateVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,true);\n      }\n    }\n    ST visitor=gen.generateVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseVisitor=gen.generateBaseVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseVisitor()) {\n      ST baseVisitor=gen.generateBaseVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,false);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (g.isLexer()) {\n  if (gen.getTarget().needsHeader()) {\n    ST lexer=gen.generateLexer(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,true);\n    }\n  }\n  ST lexer=gen.generateLexer(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(lexer,gen,false);\n  }\n}\n else {\n  if (gen.getTarget().needsHeader()) {\n    ST parser=gen.generateParser(true);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,true);\n    }\n  }\n  ST parser=gen.generateParser(false);\n  if (g.tool.errMgr.getNumErrors() == errorCount) {\n    writeRecognizer(parser,gen,false);\n  }\n  if (g.tool.gen_listener) {\n    if (gen.getTarget().needsHeader()) {\n      ST listener=gen.generateListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,true);\n      }\n    }\n    ST listener=gen.generateListener(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeListener(listener,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseListener=gen.generateBaseListener(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseListener()) {\n      ST baseListener=gen.generateBaseListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseListener(baseListener,false);\n      }\n    }\n  }\n  if (g.tool.gen_visitor) {\n    if (gen.getTarget().needsHeader()) {\n      ST visitor=gen.generateVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,true);\n      }\n    }\n    ST visitor=gen.generateVisitor(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      gen.writeVisitor(visitor,false);\n    }\n    if (gen.getTarget().needsHeader()) {\n      ST baseVisitor=gen.generateBaseVisitor(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,true);\n      }\n    }\n    if (gen.getTarget().wantsBaseVisitor()) {\n      ST baseVisitor=gen.generateBaseVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeBaseVisitor(baseVisitor,false);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 388,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3320,
        "startLineNumber" : 25,
        "startColumnNumber" : 23,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!CodeGenerator.targetExists(g.getOptionString(\"language\")))   return;\n  CodeGenerator gen=new CodeGenerator(g);\n  IntervalSet idTypes=new IntervalSet();\n  idTypes.add(ANTLRParser.ID);\n  idTypes.add(ANTLRParser.RULE_REF);\n  idTypes.add(ANTLRParser.TOKEN_REF);\n  List<GrammarAST> idNodes=g.ast.getNodesWithType(idTypes);\n  for (  GrammarAST idNode : idNodes) {\n    if (gen.getTarget().grammarSymbolCausesIssueInGeneratedCode(idNode)) {\n      g.tool.errMgr.grammarError(ErrorType.USE_OF_BAD_WORD,g.fileName,idNode.getToken(),idNode.getText());\n    }\n  }\n  int errorCount=g.tool.errMgr.getNumErrors();\n  if (g.isLexer()) {\n    if (gen.getTarget().needsHeader()) {\n      ST lexer=gen.generateLexer(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(lexer,gen,true);\n      }\n    }\n    ST lexer=gen.generateLexer(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,false);\n    }\n  }\n else {\n    if (gen.getTarget().needsHeader()) {\n      ST parser=gen.generateParser(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(parser,gen,true);\n      }\n    }\n    ST parser=gen.generateParser(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,false);\n    }\n    if (g.tool.gen_listener) {\n      if (gen.getTarget().needsHeader()) {\n        ST listener=gen.generateListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeListener(listener,true);\n        }\n      }\n      ST listener=gen.generateListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseListener=gen.generateBaseListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseListener()) {\n        ST baseListener=gen.generateBaseListener(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,false);\n        }\n      }\n    }\n    if (g.tool.gen_visitor) {\n      if (gen.getTarget().needsHeader()) {\n        ST visitor=gen.generateVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeVisitor(visitor,true);\n        }\n      }\n      ST visitor=gen.generateVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseVisitor=gen.generateBaseVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseVisitor()) {\n        ST baseVisitor=gen.generateBaseVisitor(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,false);\n        }\n      }\n    }\n  }\n  gen.writeVocabFile();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 501,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 25,
        "startColumnNumber" : 1,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void process(){\n  if (!CodeGenerator.targetExists(g.getOptionString(\"language\")))   return;\n  CodeGenerator gen=new CodeGenerator(g);\n  IntervalSet idTypes=new IntervalSet();\n  idTypes.add(ANTLRParser.ID);\n  idTypes.add(ANTLRParser.RULE_REF);\n  idTypes.add(ANTLRParser.TOKEN_REF);\n  List<GrammarAST> idNodes=g.ast.getNodesWithType(idTypes);\n  for (  GrammarAST idNode : idNodes) {\n    if (gen.getTarget().grammarSymbolCausesIssueInGeneratedCode(idNode)) {\n      g.tool.errMgr.grammarError(ErrorType.USE_OF_BAD_WORD,g.fileName,idNode.getToken(),idNode.getText());\n    }\n  }\n  int errorCount=g.tool.errMgr.getNumErrors();\n  if (g.isLexer()) {\n    if (gen.getTarget().needsHeader()) {\n      ST lexer=gen.generateLexer(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(lexer,gen,true);\n      }\n    }\n    ST lexer=gen.generateLexer(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(lexer,gen,false);\n    }\n  }\n else {\n    if (gen.getTarget().needsHeader()) {\n      ST parser=gen.generateParser(true);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        writeRecognizer(parser,gen,true);\n      }\n    }\n    ST parser=gen.generateParser(false);\n    if (g.tool.errMgr.getNumErrors() == errorCount) {\n      writeRecognizer(parser,gen,false);\n    }\n    if (g.tool.gen_listener) {\n      if (gen.getTarget().needsHeader()) {\n        ST listener=gen.generateListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeListener(listener,true);\n        }\n      }\n      ST listener=gen.generateListener(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeListener(listener,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseListener=gen.generateBaseListener(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseListener()) {\n        ST baseListener=gen.generateBaseListener(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseListener(baseListener,false);\n        }\n      }\n    }\n    if (g.tool.gen_visitor) {\n      if (gen.getTarget().needsHeader()) {\n        ST visitor=gen.generateVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeVisitor(visitor,true);\n        }\n      }\n      ST visitor=gen.generateVisitor(false);\n      if (g.tool.errMgr.getNumErrors() == errorCount) {\n        gen.writeVisitor(visitor,false);\n      }\n      if (gen.getTarget().needsHeader()) {\n        ST baseVisitor=gen.generateBaseVisitor(true);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,true);\n        }\n      }\n      if (gen.getTarget().wantsBaseVisitor()) {\n        ST baseVisitor=gen.generateBaseVisitor(false);\n        if (g.tool.errMgr.getNumErrors() == errorCount) {\n          gen.writeBaseVisitor(baseVisitor,false);\n        }\n      }\n    }\n  }\n  gen.writeVocabFile();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 38
      },
      "nodeContext" : "gen.writeVisitor(visitor,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.codegen.ST"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 100,
    "startColumnNumber" : 23,
    "endLineNumber" : 100,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 105,
    "startColumnNumber" : 22,
    "endLineNumber" : 105,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}