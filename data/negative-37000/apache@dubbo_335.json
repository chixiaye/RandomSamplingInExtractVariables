{
  "id" : 335,
  "expression" : "parts.length > 1 ? parts[1] : \"1\"",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/TraceTelnetHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parts.length > 1 ? parts[1] : \"1\"",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 55,
      "startColumnNumber" : 20,
      "endLineNumber" : 55,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 53
      },
      "nodeContext" : "times=parts.length > 1 ? parts[1] : \"1\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 54
      },
      "nodeContext" : "times=parts.length > 1 ? parts[1] : \"1\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 53,
        "startColumnNumber" : 15,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  method=parts.length > 0 ? parts[0] : null;\n  times=parts.length > 1 ? parts[1] : \"1\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isEmpty(service)) {\n  service=parts.length > 0 ? parts[0] : null;\n  method=parts.length > 1 ? parts[1] : null;\n  times=parts.length > 2 ? parts[2] : \"1\";\n}\n else {\n  method=parts.length > 0 ? parts[0] : null;\n  times=parts.length > 1 ? parts[1] : \"1\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2417,
        "startLineNumber" : 39,
        "startColumnNumber" : 58,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String service=(String)channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n  if ((service == null || service.length() == 0) && (message == null || message.length() == 0)) {\n    return \"Please input service name, eg: \\r\\ntrace XxxService\\r\\ntrace XxxService xxxMethod\\r\\ntrace XxxService xxxMethod 10\\r\\nor \\\"cd XxxService\\\" firstly.\";\n  }\n  String[] parts=message.split(\"\\\\s+\");\n  String method;\n  String times;\n  if (StringUtils.isEmpty(service)) {\n    service=parts.length > 0 ? parts[0] : null;\n    method=parts.length > 1 ? parts[1] : null;\n    times=parts.length > 2 ? parts[2] : \"1\";\n  }\n else {\n    method=parts.length > 0 ? parts[0] : null;\n    times=parts.length > 1 ? parts[1] : \"1\";\n  }\n  if (StringUtils.isInteger(method)) {\n    times=method;\n    method=null;\n  }\n  if (!StringUtils.isInteger(times)) {\n    return \"Illegal times \" + times + \", must be integer.\";\n  }\n  Invoker<?> invoker=null;\n  for (  Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n    if (service.equals(exporter.getInvoker().getInterface().getSimpleName()) || service.equals(exporter.getInvoker().getInterface().getName()) || service.equals(exporter.getInvoker().getUrl().getPath())) {\n      invoker=exporter.getInvoker();\n      break;\n    }\n  }\n  if (invoker != null) {\n    if (method != null && method.length() > 0) {\n      boolean found=false;\n      for (      Method m : invoker.getInterface().getMethods()) {\n        if (m.getName().equals(method)) {\n          found=true;\n          break;\n        }\n      }\n      if (!found) {\n        return \"No such method \" + method + \" in class \"+ invoker.getInterface().getName();\n      }\n    }\n    TraceFilter.addTracer(invoker.getInterface(),method,channel,Integer.parseInt(times));\n  }\n else {\n    return \"No such service \" + service;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2485,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String telnet(Channel channel,String message){\n  String service=(String)channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n  if ((service == null || service.length() == 0) && (message == null || message.length() == 0)) {\n    return \"Please input service name, eg: \\r\\ntrace XxxService\\r\\ntrace XxxService xxxMethod\\r\\ntrace XxxService xxxMethod 10\\r\\nor \\\"cd XxxService\\\" firstly.\";\n  }\n  String[] parts=message.split(\"\\\\s+\");\n  String method;\n  String times;\n  if (StringUtils.isEmpty(service)) {\n    service=parts.length > 0 ? parts[0] : null;\n    method=parts.length > 1 ? parts[1] : null;\n    times=parts.length > 2 ? parts[2] : \"1\";\n  }\n else {\n    method=parts.length > 0 ? parts[0] : null;\n    times=parts.length > 1 ? parts[1] : \"1\";\n  }\n  if (StringUtils.isInteger(method)) {\n    times=method;\n    method=null;\n  }\n  if (!StringUtils.isInteger(times)) {\n    return \"Illegal times \" + times + \", must be integer.\";\n  }\n  Invoker<?> invoker=null;\n  for (  Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n    if (service.equals(exporter.getInvoker().getInterface().getSimpleName()) || service.equals(exporter.getInvoker().getInterface().getName()) || service.equals(exporter.getInvoker().getUrl().getPath())) {\n      invoker=exporter.getInvoker();\n      break;\n    }\n  }\n  if (invoker != null) {\n    if (method != null && method.length() > 0) {\n      boolean found=false;\n      for (      Method m : invoker.getInterface().getMethods()) {\n        if (m.getName().equals(method)) {\n          found=true;\n          break;\n        }\n      }\n      if (!found) {\n        return \"No such method \" + method + \" in class \"+ invoker.getInterface().getName();\n      }\n    }\n    TraceFilter.addTracer(invoker.getInterface(),method,channel,Integer.parseInt(times));\n  }\n else {\n    return \"No such service \" + service;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 314,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 54
      },
      "nodeContext" : "times=parts.length > 1 ? parts[1] : \"1\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 55,
    "startColumnNumber" : 20,
    "endLineNumber" : 55,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}