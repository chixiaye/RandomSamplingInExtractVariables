{
  "id" : 341,
  "expression" : "builder.buildIt(annotation,field)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/support/pagefactory/Annotations.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "builder.buildIt(annotation,field)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 79,
      "startColumnNumber" : 14,
      "endLineNumber" : 79,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ans=builder.buildIt(annotation,field)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ans=builder.buildIt(annotation,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 81,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  ans=builder.buildIt(annotation,field);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (builder != null) {\n  ans=builder.buildIt(annotation,field);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 67,
        "startColumnNumber" : 65,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractFindByBuilder builder=null;\n  if (annotation.annotationType().isAnnotationPresent(PageFactoryFinder.class)) {\n    try {\n      builder=annotation.annotationType().getAnnotation(PageFactoryFinder.class).value().getDeclaredConstructor().newInstance();\n    }\n catch (    ReflectiveOperationException e) {\n    }\n  }\n  if (builder != null) {\n    ans=builder.buildIt(annotation,field);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Annotation annotation : field.getDeclaredAnnotations()) {\n  AbstractFindByBuilder builder=null;\n  if (annotation.annotationType().isAnnotationPresent(PageFactoryFinder.class)) {\n    try {\n      builder=annotation.annotationType().getAnnotation(PageFactoryFinder.class).value().getDeclaredConstructor().newInstance();\n    }\n catch (    ReflectiveOperationException e) {\n    }\n  }\n  if (builder != null) {\n    ans=builder.buildIt(annotation,field);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 62,
        "startColumnNumber" : 22,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertValidAnnotations();\n  By ans=null;\n  for (  Annotation annotation : field.getDeclaredAnnotations()) {\n    AbstractFindByBuilder builder=null;\n    if (annotation.annotationType().isAnnotationPresent(PageFactoryFinder.class)) {\n      try {\n        builder=annotation.annotationType().getAnnotation(PageFactoryFinder.class).value().getDeclaredConstructor().newInstance();\n      }\n catch (      ReflectiveOperationException e) {\n      }\n    }\n    if (builder != null) {\n      ans=builder.buildIt(annotation,field);\n      break;\n    }\n  }\n  if (ans == null) {\n    ans=buildByFromDefault();\n  }\n  return ans;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * {@inheritDoc}Looks for one of  {@link org.openqa.selenium.support.FindBy}, {@link org.openqa.selenium.support.FindBys} or{@link org.openqa.selenium.support.FindAll} field annotations. In caseno annotations provided for field, uses field name as 'id' or 'name'.\n * @throws IllegalArgumentException when more than one annotation on a field provided\n */\n@Override public By buildBy(){\n  assertValidAnnotations();\n  By ans=null;\n  for (  Annotation annotation : field.getDeclaredAnnotations()) {\n    AbstractFindByBuilder builder=null;\n    if (annotation.annotationType().isAnnotationPresent(PageFactoryFinder.class)) {\n      try {\n        builder=annotation.annotationType().getAnnotation(PageFactoryFinder.class).value().getDeclaredConstructor().newInstance();\n      }\n catch (      ReflectiveOperationException e) {\n      }\n    }\n    if (builder != null) {\n      ans=builder.buildIt(annotation,field);\n      break;\n    }\n  }\n  if (ans == null) {\n    ans=buildByFromDefault();\n  }\n  return ans;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 94,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ans=builder.buildIt(annotation,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "org.openqa.selenium.By"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 79,
    "startColumnNumber" : 14,
    "endLineNumber" : 79,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}