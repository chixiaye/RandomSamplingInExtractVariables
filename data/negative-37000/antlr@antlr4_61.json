{
  "id" : 61,
  "expression" : "tokens.getHiddenTokensToLeft(1).toString()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestCommonTokenStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tokens.getHiddenTokensToLeft(1).toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 160,
      "startColumnNumber" : 6,
      "endLineNumber" : 160,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"[[@0,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(1).toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(\"[[@0,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(1).toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3191,
        "startLineNumber" : 106,
        "startColumnNumber" : 58,
        "endLineNumber" : 195,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TokenSource lexer=new TokenSource(){\n    int i=0;\n    @SuppressWarnings(\"serial\") WritableToken[] tokens={new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"x\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"=\"),new CommonToken(1,\"34\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\";\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"\\n\"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(Token.EOF,\"\")};\n    @Override public Token nextToken(){\n      return tokens[i++];\n    }\n    @Override public String getSourceName(){\n      return \"test\";\n    }\n    @Override public int getCharPositionInLine(){\n      return 0;\n    }\n    @Override public int getLine(){\n      return 0;\n    }\n    @Override public CharStream getInputStream(){\n      return null;\n    }\n    @Override public void setTokenFactory(    TokenFactory<?> factory){\n    }\n    @Override public TokenFactory<?> getTokenFactory(){\n      return null;\n    }\n  }\n;\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  assertEquals(null,tokens.getHiddenTokensToLeft(0));\n  assertEquals(null,tokens.getHiddenTokensToRight(0));\n  assertEquals(\"[[@0,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(1).toString());\n  assertEquals(\"[[@2,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(1).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(2));\n  assertEquals(null,tokens.getHiddenTokensToRight(2));\n  assertEquals(\"[[@2,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(3).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(3));\n  assertEquals(null,tokens.getHiddenTokensToLeft(4));\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(4).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(5));\n  assertEquals(\"[[@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(5).toString());\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(6).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(6));\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(7).toString());\n  assertEquals(\"[[@8,0:0=' ',<1>,channel=1,0:-1], [@9,0:0='\\\\n',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(7).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(8));\n  assertEquals(\"[[@9,0:0='\\\\n',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(8).toString());\n  assertEquals(\"[[@8,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(9).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(9));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 406,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3248,
        "startLineNumber" : 106,
        "startColumnNumber" : 1,
        "endLineNumber" : 195,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testFetchOffChannel() throws Exception {\n  TokenSource lexer=new TokenSource(){\n    int i=0;\n    @SuppressWarnings(\"serial\") WritableToken[] tokens={new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"x\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"=\"),new CommonToken(1,\"34\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\";\"),new CommonToken(1,\" \"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(1,\"\\n\"){\n{\n        channel=Lexer.HIDDEN;\n      }\n    }\n,new CommonToken(Token.EOF,\"\")};\n    @Override public Token nextToken(){\n      return tokens[i++];\n    }\n    @Override public String getSourceName(){\n      return \"test\";\n    }\n    @Override public int getCharPositionInLine(){\n      return 0;\n    }\n    @Override public int getLine(){\n      return 0;\n    }\n    @Override public CharStream getInputStream(){\n      return null;\n    }\n    @Override public void setTokenFactory(    TokenFactory<?> factory){\n    }\n    @Override public TokenFactory<?> getTokenFactory(){\n      return null;\n    }\n  }\n;\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  assertEquals(null,tokens.getHiddenTokensToLeft(0));\n  assertEquals(null,tokens.getHiddenTokensToRight(0));\n  assertEquals(\"[[@0,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(1).toString());\n  assertEquals(\"[[@2,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(1).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(2));\n  assertEquals(null,tokens.getHiddenTokensToRight(2));\n  assertEquals(\"[[@2,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(3).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(3));\n  assertEquals(null,tokens.getHiddenTokensToLeft(4));\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(4).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(5));\n  assertEquals(\"[[@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(5).toString());\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(6).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(6));\n  assertEquals(\"[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(7).toString());\n  assertEquals(\"[[@8,0:0=' ',<1>,channel=1,0:-1], [@9,0:0='\\\\n',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(7).toString());\n  assertEquals(null,tokens.getHiddenTokensToLeft(8));\n  assertEquals(\"[[@9,0:0='\\\\n',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToRight(8).toString());\n  assertEquals(\"[[@8,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(9).toString());\n  assertEquals(null,tokens.getHiddenTokensToRight(9));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"[[@0,0:0=' ',<1>,channel=1,0:-1]]\",tokens.getHiddenTokensToLeft(1).toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 160,
    "startColumnNumber" : 6,
    "endLineNumber" : 160,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}