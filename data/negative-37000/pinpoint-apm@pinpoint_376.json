{
  "id" : 376,
  "expression" : "(short)3",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/commons-server/src/test/java/com/navercorp/pinpoint/common/server/bo/serializer/trace/v1/SpanEventBoTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(short)3",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 96,
      "startColumnNumber" : 32,
      "endLineNumber" : 96,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 42
      },
      "nodeContext" : "spanEventBo.setSequence((short)3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2462,
        "startLineNumber" : 50,
        "startColumnNumber" : 49,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanBo spanBo=new SpanBo();\n  spanBo.setAgentId(\"testAgent\");\n  spanBo.setApplicationId(\"testApp\");\n  spanBo.setAgentStartTime(1);\n  spanBo.setSpanId(12);\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(spanBo,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  SpanDecodingContext spanDecodingContext=new SpanDecodingContext();\n  Buffer buffer=new OffsetFixedBuffer(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  int i=spanDecoder.readSpanEvent(newSpanEventBo,buffer,spanDecodingContext);\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanBo.getAgentId(),spanDecodingContext.getAgentId());\n  Assert.assertEquals(spanBo.getApplicationId(),spanDecodingContext.getApplicationId());\n  Assert.assertEquals(spanBo.getAgentStartTime(),spanDecodingContext.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanBo spanBo=new SpanBo();\n  spanBo.setAgentId(\"testAgent\");\n  spanBo.setApplicationId(\"testApp\");\n  spanBo.setAgentStartTime(1);\n  spanBo.setSpanId(12);\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(spanBo,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  SpanDecodingContext spanDecodingContext=new SpanDecodingContext();\n  Buffer buffer=new OffsetFixedBuffer(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  int i=spanDecoder.readSpanEvent(newSpanEventBo,buffer,spanDecodingContext);\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanBo.getAgentId(),spanDecodingContext.getAgentId());\n  Assert.assertEquals(spanBo.getApplicationId(),spanDecodingContext.getApplicationId());\n  Assert.assertEquals(spanBo.getAgentStartTime(),spanDecodingContext.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "short"
  }, {
    "nodeContext" : "(short)3",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 97,
      "startColumnNumber" : 35,
      "endLineNumber" : 97,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 45
      },
      "nodeContext" : "newSpanEventBo.setSequence((short)3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 46
      },
      "nodeContext" : "newSpanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2462,
        "startLineNumber" : 50,
        "startColumnNumber" : 49,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanBo spanBo=new SpanBo();\n  spanBo.setAgentId(\"testAgent\");\n  spanBo.setApplicationId(\"testApp\");\n  spanBo.setAgentStartTime(1);\n  spanBo.setSpanId(12);\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(spanBo,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  SpanDecodingContext spanDecodingContext=new SpanDecodingContext();\n  Buffer buffer=new OffsetFixedBuffer(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  int i=spanDecoder.readSpanEvent(newSpanEventBo,buffer,spanDecodingContext);\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanBo.getAgentId(),spanDecodingContext.getAgentId());\n  Assert.assertEquals(spanBo.getApplicationId(),spanDecodingContext.getApplicationId());\n  Assert.assertEquals(spanBo.getAgentStartTime(),spanDecodingContext.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialize() throws Exception {\n  SpanBo spanBo=new SpanBo();\n  spanBo.setAgentId(\"testAgent\");\n  spanBo.setApplicationId(\"testApp\");\n  spanBo.setAgentStartTime(1);\n  spanBo.setSpanId(12);\n  SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setDepth(3);\n  spanEventBo.setDestinationId(\"testdest\");\n  spanEventBo.setEndElapsed(2);\n  spanEventBo.setEndPoint(\"endpoint\");\n  spanEventBo.setNextSpanId(4);\n  spanEventBo.setRpc(\"rpc\");\n  spanEventBo.setServiceType(ServiceType.STAND_ALONE.getCode());\n  spanEventBo.setStartElapsed(100);\n  spanEventBo.setNextAsyncId(1000);\n  SpanEventEncodingContext spanEventEncodingContext=new SpanEventEncodingContext(spanBo,spanEventBo);\n  ByteBuffer bytes=serializer.writeValue(spanEventEncodingContext);\n  SpanEventBo newSpanEventBo=new SpanEventBo();\n  SpanDecodingContext spanDecodingContext=new SpanDecodingContext();\n  Buffer buffer=new OffsetFixedBuffer(bytes.array(),bytes.arrayOffset(),bytes.remaining());\n  int i=spanDecoder.readSpanEvent(newSpanEventBo,buffer,spanDecodingContext);\n  Assert.assertEquals(bytes.limit(),i);\n  Assert.assertEquals(spanBo.getAgentId(),spanDecodingContext.getAgentId());\n  Assert.assertEquals(spanBo.getApplicationId(),spanDecodingContext.getApplicationId());\n  Assert.assertEquals(spanBo.getAgentStartTime(),spanDecodingContext.getAgentStartTime());\n  Assert.assertEquals(spanEventBo.getDepth(),newSpanEventBo.getDepth());\n  Assert.assertEquals(spanEventBo.getDestinationId(),newSpanEventBo.getDestinationId());\n  Assert.assertEquals(spanEventBo.getEndElapsed(),newSpanEventBo.getEndElapsed());\n  Assert.assertEquals(spanEventBo.getEndPoint(),newSpanEventBo.getEndPoint());\n  Assert.assertEquals(spanEventBo.getNextSpanId(),newSpanEventBo.getNextSpanId());\n  Assert.assertEquals(spanEventBo.getRpc(),newSpanEventBo.getRpc());\n  Assert.assertEquals(spanEventBo.getServiceType(),newSpanEventBo.getServiceType());\n  Assert.assertEquals(spanEventBo.getStartElapsed(),newSpanEventBo.getStartElapsed());\n  Assert.assertEquals(spanEventBo.getNextAsyncId(),newSpanEventBo.getNextAsyncId());\n  spanEventBo.setSequence((short)3);\n  newSpanEventBo.setSequence((short)3);\n  Assert.assertEquals(spanEventBo.getSequence(),newSpanEventBo.getSequence());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 46
      },
      "nodeContext" : "newSpanEventBo.setSequence((short)3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 96,
    "startColumnNumber" : 32,
    "endLineNumber" : 96,
    "endColumnNumber" : 41
  }, {
    "charLength" : 9,
    "startLineNumber" : 97,
    "startColumnNumber" : 35,
    "endLineNumber" : 97,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}