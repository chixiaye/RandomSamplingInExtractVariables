{
  "id" : 450,
  "expression" : "!token.trim().isEmpty()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/android/ResourceFilterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!token.trim().isEmpty()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 107,
      "startColumnNumber" : 14,
      "endLineNumber" : 107,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 107,
        "startColumnNumber" : 10,
        "endLineNumber" : 109,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!token.trim().isEmpty()) {\n  builder.add(token.trim());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 106,
        "startColumnNumber" : 49,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!token.trim().isEmpty()) {\n    builder.add(token.trim());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String token : rawValue.split(\",\")) {\n  if (!token.trim().isEmpty()) {\n    builder.add(token.trim());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 105,
        "startColumnNumber" : 34,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  String token : rawValue.split(\",\")) {\n    if (!token.trim().isEmpty()) {\n      builder.add(token.trim());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rawValue.contains(\",\")) {\n  for (  String token : rawValue.split(\",\")) {\n    if (!token.trim().isEmpty()) {\n      builder.add(token.trim());\n    }\n  }\n}\n else if (!rawValue.isEmpty()) {\n  builder.add(rawValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 104,
        "startColumnNumber" : 38,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (rawValue.contains(\",\")) {\n    for (    String token : rawValue.split(\",\")) {\n      if (!token.trim().isEmpty()) {\n        builder.add(token.trim());\n      }\n    }\n  }\n else   if (!rawValue.isEmpty()) {\n    builder.add(rawValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String rawValue : rawValues) {\n  if (rawValue.contains(\",\")) {\n    for (    String token : rawValue.split(\",\")) {\n      if (!token.trim().isEmpty()) {\n        builder.add(token.trim());\n      }\n    }\n  }\n else   if (!rawValue.isEmpty()) {\n    builder.add(rawValue);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 85,
        "startColumnNumber" : 78,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (rawValues.isEmpty()) {\n    return ImmutableList.of();\n  }\n  ImmutableSet.Builder<String> builder=ImmutableSet.builder();\n  for (  String rawValue : rawValues) {\n    if (rawValue.contains(\",\")) {\n      for (      String token : rawValue.split(\",\")) {\n        if (!token.trim().isEmpty()) {\n          builder.add(token.trim());\n        }\n      }\n    }\n else     if (!rawValue.isEmpty()) {\n      builder.add(rawValue);\n    }\n  }\n  return ImmutableList.sortedCopyOf(builder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1900,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Extracts filters from an AttributeMap, as a list of strings. <p>In BUILD files, string lists can be represented as a list of strings, a single comma-separated string, or a combination of both. This method outputs a single list of individual string values, which can then be passed directly to resource processing actions.\n * @return the values of this attribute contained in the {@link AttributeMap}, as a list.\n */\nprivate static ImmutableList<String> extractFilters(List<String> rawValues){\n  if (rawValues.isEmpty()) {\n    return ImmutableList.of();\n  }\n  ImmutableSet.Builder<String> builder=ImmutableSet.builder();\n  for (  String rawValue : rawValues) {\n    if (rawValue.contains(\",\")) {\n      for (      String token : rawValue.split(\",\")) {\n        if (!token.trim().isEmpty()) {\n          builder.add(token.trim());\n        }\n      }\n    }\n else     if (!rawValue.isEmpty()) {\n      builder.add(rawValue);\n    }\n  }\n  return ImmutableList.sortedCopyOf(builder.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 107,
        "startColumnNumber" : 10,
        "endLineNumber" : 109,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!token.trim().isEmpty()) {\n  builder.add(token.trim());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 107,
    "startColumnNumber" : 14,
    "endLineNumber" : 107,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}