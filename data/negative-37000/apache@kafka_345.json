{
  "id" : 345,
  "expression" : "\"exactly_once\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"exactly_once\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 107,
      "startColumnNumber" : 61,
      "endLineNumber" : 107,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 107,
        "startColumnNumber" : 35,
        "endLineNumber" : 107,
        "endColumnNumber" : 76
      },
      "nodeContext" : "processingMode.startsWith(\"exactly_once\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 107,
        "startColumnNumber" : 22,
        "endLineNumber" : 107,
        "endColumnNumber" : 76
      },
      "nodeContext" : "eosEnabled=processingMode.startsWith(\"exactly_once\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 77
      },
      "nodeContext" : "final boolean eosEnabled=processingMode.startsWith(\"exactly_once\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4280,
        "startLineNumber" : 51,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length < 2) {\n    System.err.println(\"BrokerCompatibilityTest are expecting two parameters: propFile, processingMode; but only see \" + args.length + \" parameter\");\n    Exit.exit(1);\n  }\n  System.out.println(\"StreamsTest instance started\");\n  final String propFileName=args[0];\n  final String processingMode=args[1];\n  final Properties streamsProperties=Utils.loadProps(propFileName);\n  final String kafka=streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n  if (kafka == null) {\n    System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n    Exit.exit(1);\n  }\n  streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG,\"kafka-streams-system-test-broker-compatibility\");\n  streamsProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n  streamsProperties.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsProperties.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsProperties.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,100L);\n  streamsProperties.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\n  streamsProperties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingMode);\n  final int timeout=6000;\n  streamsProperties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG),timeout);\n  streamsProperties.put(StreamsConfig.consumerPrefix(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG),timeout);\n  streamsProperties.put(StreamsConfig.REQUEST_TIMEOUT_MS_CONFIG,timeout + 1);\n  final Serde<String> stringSerde=Serdes.String();\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.<String,String>stream(SOURCE_TOPIC).groupByKey(Grouped.with(stringSerde,stringSerde)).count().toStream().mapValues(Object::toString).to(SINK_TOPIC);\n  final KafkaStreams streams=new KafkaStreams(builder.build(),streamsProperties);\n  streams.setUncaughtExceptionHandler(e -> {\n    Throwable cause=e;\n    if (cause instanceof StreamsException) {\n      while (cause.getCause() != null) {\n        cause=cause.getCause();\n      }\n    }\n    System.err.println(\"FATAL: An unexpected exception \" + cause);\n    e.printStackTrace(System.err);\n    System.err.flush();\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  System.out.println(\"start Kafka Streams\");\n  streams.start();\n  final boolean eosEnabled=processingMode.startsWith(\"exactly_once\");\n  System.out.println(\"send data\");\n  final Properties producerProperties=new Properties();\n  producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafka);\n  producerProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class);\n  producerProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class);\n  if (eosEnabled) {\n    producerProperties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG,\"broker-compatibility-producer-tx\");\n  }\n  try {\n    try (final KafkaProducer<String,String> producer=new KafkaProducer<>(producerProperties)){\n      if (eosEnabled) {\n        producer.initTransactions();\n        producer.beginTransaction();\n      }\n      producer.send(new ProducerRecord<>(SOURCE_TOPIC,\"key\",\"value\"));\n      if (eosEnabled) {\n        producer.commitTransaction();\n      }\n      System.out.println(\"wait for result\");\n      loopUntilRecordReceived(kafka,eosEnabled);\n      System.out.println(\"close Kafka Streams\");\n      streams.close();\n    }\n   }\n catch (  final RuntimeException e) {\n    System.err.println(\"Non-Streams exception occurred: \");\n    e.printStackTrace(System.err);\n    System.err.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4344,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(final String[] args) throws IOException {\n  if (args.length < 2) {\n    System.err.println(\"BrokerCompatibilityTest are expecting two parameters: propFile, processingMode; but only see \" + args.length + \" parameter\");\n    Exit.exit(1);\n  }\n  System.out.println(\"StreamsTest instance started\");\n  final String propFileName=args[0];\n  final String processingMode=args[1];\n  final Properties streamsProperties=Utils.loadProps(propFileName);\n  final String kafka=streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n  if (kafka == null) {\n    System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n    Exit.exit(1);\n  }\n  streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG,\"kafka-streams-system-test-broker-compatibility\");\n  streamsProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n  streamsProperties.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsProperties.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsProperties.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,100L);\n  streamsProperties.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\n  streamsProperties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingMode);\n  final int timeout=6000;\n  streamsProperties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG),timeout);\n  streamsProperties.put(StreamsConfig.consumerPrefix(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG),timeout);\n  streamsProperties.put(StreamsConfig.REQUEST_TIMEOUT_MS_CONFIG,timeout + 1);\n  final Serde<String> stringSerde=Serdes.String();\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.<String,String>stream(SOURCE_TOPIC).groupByKey(Grouped.with(stringSerde,stringSerde)).count().toStream().mapValues(Object::toString).to(SINK_TOPIC);\n  final KafkaStreams streams=new KafkaStreams(builder.build(),streamsProperties);\n  streams.setUncaughtExceptionHandler(e -> {\n    Throwable cause=e;\n    if (cause instanceof StreamsException) {\n      while (cause.getCause() != null) {\n        cause=cause.getCause();\n      }\n    }\n    System.err.println(\"FATAL: An unexpected exception \" + cause);\n    e.printStackTrace(System.err);\n    System.err.flush();\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  System.out.println(\"start Kafka Streams\");\n  streams.start();\n  final boolean eosEnabled=processingMode.startsWith(\"exactly_once\");\n  System.out.println(\"send data\");\n  final Properties producerProperties=new Properties();\n  producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafka);\n  producerProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class);\n  producerProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class);\n  if (eosEnabled) {\n    producerProperties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG,\"broker-compatibility-producer-tx\");\n  }\n  try {\n    try (final KafkaProducer<String,String> producer=new KafkaProducer<>(producerProperties)){\n      if (eosEnabled) {\n        producer.initTransactions();\n        producer.beginTransaction();\n      }\n      producer.send(new ProducerRecord<>(SOURCE_TOPIC,\"key\",\"value\"));\n      if (eosEnabled) {\n        producer.commitTransaction();\n      }\n      System.out.println(\"wait for result\");\n      loopUntilRecordReceived(kafka,eosEnabled);\n      System.out.println(\"close Kafka Streams\");\n      streams.close();\n    }\n   }\n catch (  final RuntimeException e) {\n    System.err.println(\"Non-Streams exception occurred: \");\n    e.printStackTrace(System.err);\n    System.err.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 77
      },
      "nodeContext" : "final boolean eosEnabled=processingMode.startsWith(\"exactly_once\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 107,
    "startColumnNumber" : 61,
    "endLineNumber" : 107,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}