{
  "id" : 77,
  "expression" : "HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\")",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingThreadPoolEventCounterStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 283,
      "startColumnNumber" : 45,
      "endLineNumber" : 283,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 283,
        "startColumnNumber" : 29,
        "endLineNumber" : 283,
        "endColumnNumber" : 95
      },
      "nodeContext" : "threadPoolKey=HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 283,
        "startColumnNumber" : 8,
        "endLineNumber" : 283,
        "endColumnNumber" : 96
      },
      "nodeContext" : "HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 281,
        "startColumnNumber" : 40,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey(\"ThreadPool-H\");\n  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\");\n  HystrixCommandKey key=HystrixCommandKey.Factory.asKey(\"RollingCounter-H\");\n  stream=RollingThreadPoolEventCounterStream.getInstance(threadPoolKey,10,500);\n  stream.startCachingStreamValuesIfUnstarted();\n  final CountDownLatch latch=new CountDownLatch(1);\n  stream.observe().take(5).subscribe(getSubscriber(latch));\n  List<Command> saturators=new ArrayList<Command>();\n  for (int i=0; i < 10; i++) {\n    saturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,500,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));\n  }\n  CommandStreamTest.Command rejected1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n  CommandStreamTest.Command rejected2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n  for (  final CommandStreamTest.Command saturator : saturators) {\n    new Thread(new HystrixContextRunnable(new Runnable(){\n      @Override public void run(){\n        saturator.observe();\n      }\n    }\n)).start();\n  }\n  try {\n    Thread.sleep(100);\n  }\n catch (  InterruptedException ie) {\n    fail(ie.getMessage());\n  }\n  rejected1.observe();\n  rejected2.observe();\n  try {\n    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  }\n catch (  InterruptedException ex) {\n    fail(\"Interrupted ex\");\n  }\n  System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  assertTrue(rejected1.isResponseSemaphoreRejected());\n  assertTrue(rejected2.isResponseSemaphoreRejected());\n  assertEquals(2,stream.getLatest().length);\n  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));\n  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2699,
        "startLineNumber" : 280,
        "startColumnNumber" : 4,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSemaphoreRejected(){\n  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey(\"ThreadPool-H\");\n  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\");\n  HystrixCommandKey key=HystrixCommandKey.Factory.asKey(\"RollingCounter-H\");\n  stream=RollingThreadPoolEventCounterStream.getInstance(threadPoolKey,10,500);\n  stream.startCachingStreamValuesIfUnstarted();\n  final CountDownLatch latch=new CountDownLatch(1);\n  stream.observe().take(5).subscribe(getSubscriber(latch));\n  List<Command> saturators=new ArrayList<Command>();\n  for (int i=0; i < 10; i++) {\n    saturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,500,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));\n  }\n  CommandStreamTest.Command rejected1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n  CommandStreamTest.Command rejected2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);\n  for (  final CommandStreamTest.Command saturator : saturators) {\n    new Thread(new HystrixContextRunnable(new Runnable(){\n      @Override public void run(){\n        saturator.observe();\n      }\n    }\n)).start();\n  }\n  try {\n    Thread.sleep(100);\n  }\n catch (  InterruptedException ie) {\n    fail(ie.getMessage());\n  }\n  rejected1.observe();\n  rejected2.observe();\n  try {\n    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  }\n catch (  InterruptedException ex) {\n    fail(\"Interrupted ex\");\n  }\n  System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  assertTrue(rejected1.isResponseSemaphoreRejected());\n  assertTrue(rejected2.isResponseSemaphoreRejected());\n  assertEquals(2,stream.getLatest().length);\n  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));\n  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 283,
        "startColumnNumber" : 8,
        "endLineNumber" : 283,
        "endColumnNumber" : 96
      },
      "nodeContext" : "HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-H\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.netflix.hystrix.HystrixThreadPoolKey"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 283,
    "startColumnNumber" : 45,
    "endLineNumber" : 283,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}