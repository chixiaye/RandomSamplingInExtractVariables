{
  "id" : 39,
  "expression" : "integralBuilder.build()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/math/MathTesting.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "integralBuilder.build()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 278,
      "startColumnNumber" : 33,
      "endLineNumber" : 278,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 56
      },
      "nodeContext" : "INTEGRAL_DOUBLE_CANDIDATES=integralBuilder.build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 57
      },
      "nodeContext" : "INTEGRAL_DOUBLE_CANDIDATES=integralBuilder.build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 2580,
        "startLineNumber" : 236,
        "startColumnNumber" : 9,
        "endLineNumber" : 301,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableSet.Builder<Double> integralBuilder=ImmutableSet.builder();\n  ImmutableSet.Builder<Double> fractionalBuilder=ImmutableSet.builder();\n  integralBuilder.addAll(Doubles.asList(0.0,-0.0,Double.MAX_VALUE,-Double.MAX_VALUE));\n  for (int scale=1; scale <= 4; scale++) {\n    for (    double d : Doubles.asList(Double.MIN_VALUE,Double.MIN_NORMAL)) {\n      fractionalBuilder.add(d * scale).add(-d * scale);\n    }\n  }\n  for (int i=Double.MIN_EXPONENT; i <= Double.MAX_EXPONENT; i++) {\n    for (    int direction : new int[]{1,-1}) {\n      double d=Double.longBitsToDouble(Double.doubleToLongBits(Math.scalb(1.0,i)) + direction);\n      if (d != Math.rint(d)) {\n        fractionalBuilder.add(d);\n      }\n    }\n  }\n  for (  double d : Doubles.asList(0,1,2,7,51,102,Math.scalb(1.0,53),Integer.MIN_VALUE,Integer.MAX_VALUE,Long.MIN_VALUE,Long.MAX_VALUE)) {\n    for (    double delta : Doubles.asList(0.0,1.0,2.0)) {\n      integralBuilder.addAll(Doubles.asList(d + delta,d - delta,-d - delta,-d + delta));\n    }\n    for (    double delta : Doubles.asList(0.01,0.1,0.25,0.499,0.5,0.501,0.7,0.8)) {\n      double x=d + delta;\n      if (x != Math.round(x)) {\n        fractionalBuilder.add(x);\n      }\n    }\n  }\n  INTEGRAL_DOUBLE_CANDIDATES=integralBuilder.build();\n  fractionalBuilder.add(1.414).add(1.415).add(Math.sqrt(2));\n  fractionalBuilder.add(5.656).add(5.657).add(4 * Math.sqrt(2));\n  for (  double d : INTEGRAL_DOUBLE_CANDIDATES) {\n    double x=1 / d;\n    if (x != Math.rint(x)) {\n      fractionalBuilder.add(x);\n    }\n  }\n  FRACTIONAL_DOUBLE_CANDIDATES=fractionalBuilder.build();\n  FINITE_DOUBLE_CANDIDATES=Iterables.concat(FRACTIONAL_DOUBLE_CANDIDATES,INTEGRAL_DOUBLE_CANDIDATES);\n  POSITIVE_FINITE_DOUBLE_CANDIDATES=Iterables.filter(FINITE_DOUBLE_CANDIDATES,new Predicate<Double>(){\n    @Override public boolean apply(    Double input){\n      return input.doubleValue() > 0.0;\n    }\n  }\n);\n  DOUBLE_CANDIDATES_EXCEPT_NAN=Iterables.concat(FINITE_DOUBLE_CANDIDATES,INFINITIES);\n  ALL_DOUBLE_CANDIDATES=Iterables.concat(DOUBLE_CANDIDATES_EXCEPT_NAN,asList(Double.NaN));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2587,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 301,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static {\n  ImmutableSet.Builder<Double> integralBuilder=ImmutableSet.builder();\n  ImmutableSet.Builder<Double> fractionalBuilder=ImmutableSet.builder();\n  integralBuilder.addAll(Doubles.asList(0.0,-0.0,Double.MAX_VALUE,-Double.MAX_VALUE));\n  for (int scale=1; scale <= 4; scale++) {\n    for (    double d : Doubles.asList(Double.MIN_VALUE,Double.MIN_NORMAL)) {\n      fractionalBuilder.add(d * scale).add(-d * scale);\n    }\n  }\n  for (int i=Double.MIN_EXPONENT; i <= Double.MAX_EXPONENT; i++) {\n    for (    int direction : new int[]{1,-1}) {\n      double d=Double.longBitsToDouble(Double.doubleToLongBits(Math.scalb(1.0,i)) + direction);\n      if (d != Math.rint(d)) {\n        fractionalBuilder.add(d);\n      }\n    }\n  }\n  for (  double d : Doubles.asList(0,1,2,7,51,102,Math.scalb(1.0,53),Integer.MIN_VALUE,Integer.MAX_VALUE,Long.MIN_VALUE,Long.MAX_VALUE)) {\n    for (    double delta : Doubles.asList(0.0,1.0,2.0)) {\n      integralBuilder.addAll(Doubles.asList(d + delta,d - delta,-d - delta,-d + delta));\n    }\n    for (    double delta : Doubles.asList(0.01,0.1,0.25,0.499,0.5,0.501,0.7,0.8)) {\n      double x=d + delta;\n      if (x != Math.round(x)) {\n        fractionalBuilder.add(x);\n      }\n    }\n  }\n  INTEGRAL_DOUBLE_CANDIDATES=integralBuilder.build();\n  fractionalBuilder.add(1.414).add(1.415).add(Math.sqrt(2));\n  fractionalBuilder.add(5.656).add(5.657).add(4 * Math.sqrt(2));\n  for (  double d : INTEGRAL_DOUBLE_CANDIDATES) {\n    double x=1 / d;\n    if (x != Math.rint(x)) {\n      fractionalBuilder.add(x);\n    }\n  }\n  FRACTIONAL_DOUBLE_CANDIDATES=fractionalBuilder.build();\n  FINITE_DOUBLE_CANDIDATES=Iterables.concat(FRACTIONAL_DOUBLE_CANDIDATES,INTEGRAL_DOUBLE_CANDIDATES);\n  POSITIVE_FINITE_DOUBLE_CANDIDATES=Iterables.filter(FINITE_DOUBLE_CANDIDATES,new Predicate<Double>(){\n    @Override public boolean apply(    Double input){\n      return input.doubleValue() > 0.0;\n    }\n  }\n);\n  DOUBLE_CANDIDATES_EXCEPT_NAN=Iterables.concat(FINITE_DOUBLE_CANDIDATES,INFINITIES);\n  ALL_DOUBLE_CANDIDATES=Iterables.concat(DOUBLE_CANDIDATES_EXCEPT_NAN,asList(Double.NaN));\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 370,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 57
      },
      "nodeContext" : "INTEGRAL_DOUBLE_CANDIDATES=integralBuilder.build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.common.collect.ImmutableSet<java.lang.Double>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 278,
    "startColumnNumber" : 33,
    "endLineNumber" : 278,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}