{
  "id" : 68,
  "expression" : "task.getClass()",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/misc/Injector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "task.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 35,
      "startColumnNumber" : 25,
      "endLineNumber" : 35,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 35,
        "startColumnNumber" : 17,
        "endLineNumber" : 35,
        "endColumnNumber" : 40
      },
      "nodeContext" : "clazz=task.getClass()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Class<?> clazz=task.getClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 944,
        "startLineNumber" : 33,
        "startColumnNumber" : 77,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Field> allFields=new ArrayList<Field>();\n  Class<?> clazz=task.getClass();\n  while (true) {\n    if (clazz != null) {\n      Field[] fields=clazz.getDeclaredFields();\n      allFields.addAll(Arrays.asList(fields));\n    }\n else {\n      break;\n    }\n    if (clazz.getSuperclass() != Object.class) {\n      clazz=clazz.getSuperclass();\n    }\n else {\n      clazz=null;\n    }\n  }\n  for (  Field field : allFields) {\n    if (valueClass.isAssignableFrom(field.getType()) && field.isAnnotationPresent(RInject.class)) {\n      field.setAccessible(true);\n      try {\n        field.set(task,value);\n      }\n catch (      IllegalAccessException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static <T>void inject(Object task,Class<T> valueClass,T value){\n  List<Field> allFields=new ArrayList<Field>();\n  Class<?> clazz=task.getClass();\n  while (true) {\n    if (clazz != null) {\n      Field[] fields=clazz.getDeclaredFields();\n      allFields.addAll(Arrays.asList(fields));\n    }\n else {\n      break;\n    }\n    if (clazz.getSuperclass() != Object.class) {\n      clazz=clazz.getSuperclass();\n    }\n else {\n      clazz=null;\n    }\n  }\n  for (  Field field : allFields) {\n    if (valueClass.isAssignableFrom(field.getType()) && field.isAnnotationPresent(RInject.class)) {\n      field.setAccessible(true);\n      try {\n        field.set(task,value);\n      }\n catch (      IllegalAccessException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Class<?> clazz=task.getClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 35,
    "startColumnNumber" : 25,
    "endLineNumber" : 35,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}