{
  "id" : 334,
  "expression" : "i < defaultTools.size()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Test/IntegrationTest/src/test.slow/java/ghidra/framework/main/ToolActionManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < defaultTools.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 409,
      "startColumnNumber" : 18,
      "endLineNumber" : 409,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 409,
        "startColumnNumber" : 2,
        "endLineNumber" : 414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < defaultTools.size(); i++) {\n  @SuppressWarnings(\"unchecked\") JCheckBox cb=(JCheckBox)renderer.getListCellRendererComponent(defList,null,i,false,false);\n  assertTrue(!cb.isSelected());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1843,
        "startLineNumber" : 390,
        "startColumnNumber" : 55,
        "endLineNumber" : 441,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final ToolChest tc=frontEndTool.getToolServices().getToolChest();\n  int count=tc.getToolCount();\n  ToolTemplate[] origConfigs=tc.getToolTemplates();\n  Set<String> defaultTools=ResourceManager.getResourceNames(\"defaultTools\",\".tool\");\n  Set<String> extraToolsList=ResourceManager.getResourceNames(\"extraTools\",\".tool\");\n  DockingActionIf importAction=getAction(\"Import Ghidra Tools\");\n  performAction(importAction,false);\n  waitForSwing();\n  ImportGhidraToolsDialog d=waitForDialogComponent(ImportGhidraToolsDialog.class);\n  assertNotNull(d);\n  JList<?> defList=findComponent(d,JList.class);\n  assertNotNull(defList);\n  @SuppressWarnings(\"rawtypes\") ListCellRenderer renderer=defList.getCellRenderer();\n  for (int i=0; i < defaultTools.size(); i++) {\n    @SuppressWarnings(\"unchecked\") JCheckBox cb=(JCheckBox)renderer.getListCellRendererComponent(defList,null,i,false,false);\n    assertTrue(!cb.isSelected());\n  }\n  final JButton selectAllButton=(JButton)getInstanceField(\"selectAllButton\",d);\n  runSwing(() -> selectAllButton.doClick());\n  pressButtonByText(d,\"OK\");\n  waitForSwing();\n  assertEquals(count + defaultTools.size() + extraToolsList.size(),tc.getToolCount());\n  ToolTemplate[] configs=tc.getToolTemplates();\n  ArrayList<String> origList=new ArrayList<>();\n  for (  ToolTemplate origConfig : origConfigs) {\n    origList.add(origConfig.getName());\n  }\n  final ArrayList<String> newList=new ArrayList<>();\n  for (  ToolTemplate config : configs) {\n    newList.add(config.getName());\n  }\n  newList.removeAll(origList);\n  runSwing(() -> {\n    for (int i=0; i < newList.size(); i++) {\n      tc.remove(newList.get(i));\n    }\n  }\n);\n  assertEquals(origList.size(),tc.getToolCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1905,
        "startLineNumber" : 389,
        "startColumnNumber" : 1,
        "endLineNumber" : 441,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testImportDefaultTools() throws Exception {\n  final ToolChest tc=frontEndTool.getToolServices().getToolChest();\n  int count=tc.getToolCount();\n  ToolTemplate[] origConfigs=tc.getToolTemplates();\n  Set<String> defaultTools=ResourceManager.getResourceNames(\"defaultTools\",\".tool\");\n  Set<String> extraToolsList=ResourceManager.getResourceNames(\"extraTools\",\".tool\");\n  DockingActionIf importAction=getAction(\"Import Ghidra Tools\");\n  performAction(importAction,false);\n  waitForSwing();\n  ImportGhidraToolsDialog d=waitForDialogComponent(ImportGhidraToolsDialog.class);\n  assertNotNull(d);\n  JList<?> defList=findComponent(d,JList.class);\n  assertNotNull(defList);\n  @SuppressWarnings(\"rawtypes\") ListCellRenderer renderer=defList.getCellRenderer();\n  for (int i=0; i < defaultTools.size(); i++) {\n    @SuppressWarnings(\"unchecked\") JCheckBox cb=(JCheckBox)renderer.getListCellRendererComponent(defList,null,i,false,false);\n    assertTrue(!cb.isSelected());\n  }\n  final JButton selectAllButton=(JButton)getInstanceField(\"selectAllButton\",d);\n  runSwing(() -> selectAllButton.doClick());\n  pressButtonByText(d,\"OK\");\n  waitForSwing();\n  assertEquals(count + defaultTools.size() + extraToolsList.size(),tc.getToolCount());\n  ToolTemplate[] configs=tc.getToolTemplates();\n  ArrayList<String> origList=new ArrayList<>();\n  for (  ToolTemplate origConfig : origConfigs) {\n    origList.add(origConfig.getName());\n  }\n  final ArrayList<String> newList=new ArrayList<>();\n  for (  ToolTemplate config : configs) {\n    newList.add(config.getName());\n  }\n  newList.removeAll(origList);\n  runSwing(() -> {\n    for (int i=0; i < newList.size(); i++) {\n      tc.remove(newList.get(i));\n    }\n  }\n);\n  assertEquals(origList.size(),tc.getToolCount());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 409,
        "startColumnNumber" : 2,
        "endLineNumber" : 414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < defaultTools.size(); i++) {\n  @SuppressWarnings(\"unchecked\") JCheckBox cb=(JCheckBox)renderer.getListCellRendererComponent(defList,null,i,false,false);\n  assertTrue(!cb.isSelected());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 409,
    "startColumnNumber" : 18,
    "endLineNumber" : 409,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}