{
  "id" : 444,
  "expression" : "P.x",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/dynamics/joints/RevoluteJoint.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "P.x",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 204,
      "startColumnNumber" : 19,
      "endLineNumber" : 204,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 204,
        "startColumnNumber" : 14,
        "endLineNumber" : 204,
        "endColumnNumber" : 22
      },
      "nodeContext" : "mA * P.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 204,
        "startColumnNumber" : 6,
        "endLineNumber" : 204,
        "endColumnNumber" : 22
      },
      "nodeContext" : "vA.x-=mA * P.x",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 204,
        "startColumnNumber" : 6,
        "endLineNumber" : 204,
        "endColumnNumber" : 23
      },
      "nodeContext" : "vA.x-=mA * P.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 539,
        "startLineNumber" : 194,
        "startColumnNumber" : 32,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Vec2 P=pool.popVec2();\n  m_impulse.x*=data.step.dtRatio;\n  m_impulse.y*=data.step.dtRatio;\n  m_motorImpulse*=data.step.dtRatio;\n  P.x=m_impulse.x;\n  P.y=m_impulse.y;\n  vA.x-=mA * P.x;\n  vA.y-=mA * P.y;\n  wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n  vB.x+=mB * P.x;\n  vB.y+=mB * P.y;\n  wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n  pool.pushVec2(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (data.step.warmStarting) {\n  final Vec2 P=pool.popVec2();\n  m_impulse.x*=data.step.dtRatio;\n  m_impulse.y*=data.step.dtRatio;\n  m_motorImpulse*=data.step.dtRatio;\n  P.x=m_impulse.x;\n  P.y=m_impulse.y;\n  vA.x-=mA * P.x;\n  vA.y-=mA * P.y;\n  wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n  vB.x+=mB * P.x;\n  vB.y+=mB * P.y;\n  wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n  pool.pushVec2(1);\n}\n else {\n  m_impulse.setZero();\n  m_motorImpulse=0.0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3658,
        "startLineNumber" : 109,
        "startColumnNumber" : 61,
        "endLineNumber" : 223,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  m_indexA=m_bodyA.m_islandIndex;\n  m_indexB=m_bodyB.m_islandIndex;\n  m_localCenterA.set(m_bodyA.m_sweep.localCenter);\n  m_localCenterB.set(m_bodyB.m_sweep.localCenter);\n  m_invMassA=m_bodyA.m_invMass;\n  m_invMassB=m_bodyB.m_invMass;\n  m_invIA=m_bodyA.m_invI;\n  m_invIB=m_bodyB.m_invI;\n  float aA=data.positions[m_indexA].a;\n  Vec2 vA=data.velocities[m_indexA].v;\n  float wA=data.velocities[m_indexA].w;\n  float aB=data.positions[m_indexB].a;\n  Vec2 vB=data.velocities[m_indexB].v;\n  float wB=data.velocities[m_indexB].w;\n  final Rot qA=pool.popRot();\n  final Rot qB=pool.popRot();\n  final Vec2 temp=pool.popVec2();\n  qA.set(aA);\n  qB.set(aB);\n  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);\n  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);\n  float mA=m_invMassA, mB=m_invMassB;\n  float iA=m_invIA, iB=m_invIB;\n  boolean fixedRotation=(iA + iB == 0.0f);\n  m_mass.ex.x=mA + mB + m_rA.y * m_rA.y * iA + m_rB.y * m_rB.y * iB;\n  m_mass.ey.x=-m_rA.y * m_rA.x * iA - m_rB.y * m_rB.x * iB;\n  m_mass.ez.x=-m_rA.y * iA - m_rB.y * iB;\n  m_mass.ex.y=m_mass.ey.x;\n  m_mass.ey.y=mA + mB + m_rA.x * m_rA.x * iA + m_rB.x * m_rB.x * iB;\n  m_mass.ez.y=m_rA.x * iA + m_rB.x * iB;\n  m_mass.ex.z=m_mass.ez.x;\n  m_mass.ey.z=m_mass.ez.y;\n  m_mass.ez.z=iA + iB;\n  m_motorMass=iA + iB;\n  if (m_motorMass > 0.0f) {\n    m_motorMass=1.0f / m_motorMass;\n  }\n  if (m_enableMotor == false || fixedRotation) {\n    m_motorImpulse=0.0f;\n  }\n  if (m_enableLimit && fixedRotation == false) {\n    float jointAngle=aB - aA - m_referenceAngle;\n    if (MathUtils.abs(m_upperAngle - m_lowerAngle) < 2.0f * Settings.angularSlop) {\n      m_limitState=LimitState.EQUAL;\n    }\n else     if (jointAngle <= m_lowerAngle) {\n      if (m_limitState != LimitState.AT_LOWER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_LOWER;\n    }\n else     if (jointAngle >= m_upperAngle) {\n      if (m_limitState != LimitState.AT_UPPER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_UPPER;\n    }\n else {\n      m_limitState=LimitState.INACTIVE;\n      m_impulse.z=0.0f;\n    }\n  }\n else {\n    m_limitState=LimitState.INACTIVE;\n  }\n  if (data.step.warmStarting) {\n    final Vec2 P=pool.popVec2();\n    m_impulse.x*=data.step.dtRatio;\n    m_impulse.y*=data.step.dtRatio;\n    m_motorImpulse*=data.step.dtRatio;\n    P.x=m_impulse.x;\n    P.y=m_impulse.y;\n    vA.x-=mA * P.x;\n    vA.y-=mA * P.y;\n    wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n    vB.x+=mB * P.x;\n    vB.y+=mB * P.y;\n    wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n    pool.pushVec2(1);\n  }\n else {\n    m_impulse.setZero();\n    m_motorImpulse=0.0f;\n  }\n  data.velocities[m_indexA].w=wA;\n  data.velocities[m_indexB].w=wB;\n  pool.pushVec2(1);\n  pool.pushRot(2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 681,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3729,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 223,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void initVelocityConstraints(final SolverData data){\n  m_indexA=m_bodyA.m_islandIndex;\n  m_indexB=m_bodyB.m_islandIndex;\n  m_localCenterA.set(m_bodyA.m_sweep.localCenter);\n  m_localCenterB.set(m_bodyB.m_sweep.localCenter);\n  m_invMassA=m_bodyA.m_invMass;\n  m_invMassB=m_bodyB.m_invMass;\n  m_invIA=m_bodyA.m_invI;\n  m_invIB=m_bodyB.m_invI;\n  float aA=data.positions[m_indexA].a;\n  Vec2 vA=data.velocities[m_indexA].v;\n  float wA=data.velocities[m_indexA].w;\n  float aB=data.positions[m_indexB].a;\n  Vec2 vB=data.velocities[m_indexB].v;\n  float wB=data.velocities[m_indexB].w;\n  final Rot qA=pool.popRot();\n  final Rot qB=pool.popRot();\n  final Vec2 temp=pool.popVec2();\n  qA.set(aA);\n  qB.set(aB);\n  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);\n  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);\n  float mA=m_invMassA, mB=m_invMassB;\n  float iA=m_invIA, iB=m_invIB;\n  boolean fixedRotation=(iA + iB == 0.0f);\n  m_mass.ex.x=mA + mB + m_rA.y * m_rA.y * iA + m_rB.y * m_rB.y * iB;\n  m_mass.ey.x=-m_rA.y * m_rA.x * iA - m_rB.y * m_rB.x * iB;\n  m_mass.ez.x=-m_rA.y * iA - m_rB.y * iB;\n  m_mass.ex.y=m_mass.ey.x;\n  m_mass.ey.y=mA + mB + m_rA.x * m_rA.x * iA + m_rB.x * m_rB.x * iB;\n  m_mass.ez.y=m_rA.x * iA + m_rB.x * iB;\n  m_mass.ex.z=m_mass.ez.x;\n  m_mass.ey.z=m_mass.ez.y;\n  m_mass.ez.z=iA + iB;\n  m_motorMass=iA + iB;\n  if (m_motorMass > 0.0f) {\n    m_motorMass=1.0f / m_motorMass;\n  }\n  if (m_enableMotor == false || fixedRotation) {\n    m_motorImpulse=0.0f;\n  }\n  if (m_enableLimit && fixedRotation == false) {\n    float jointAngle=aB - aA - m_referenceAngle;\n    if (MathUtils.abs(m_upperAngle - m_lowerAngle) < 2.0f * Settings.angularSlop) {\n      m_limitState=LimitState.EQUAL;\n    }\n else     if (jointAngle <= m_lowerAngle) {\n      if (m_limitState != LimitState.AT_LOWER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_LOWER;\n    }\n else     if (jointAngle >= m_upperAngle) {\n      if (m_limitState != LimitState.AT_UPPER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_UPPER;\n    }\n else {\n      m_limitState=LimitState.INACTIVE;\n      m_impulse.z=0.0f;\n    }\n  }\n else {\n    m_limitState=LimitState.INACTIVE;\n  }\n  if (data.step.warmStarting) {\n    final Vec2 P=pool.popVec2();\n    m_impulse.x*=data.step.dtRatio;\n    m_impulse.y*=data.step.dtRatio;\n    m_motorImpulse*=data.step.dtRatio;\n    P.x=m_impulse.x;\n    P.y=m_impulse.y;\n    vA.x-=mA * P.x;\n    vA.y-=mA * P.y;\n    wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n    vB.x+=mB * P.x;\n    vB.y+=mB * P.y;\n    wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n    pool.pushVec2(1);\n  }\n else {\n    m_impulse.setZero();\n    m_motorImpulse=0.0f;\n  }\n  data.velocities[m_indexA].w=wA;\n  data.velocities[m_indexB].w=wB;\n  pool.pushVec2(1);\n  pool.pushRot(2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 692,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 204,
        "startColumnNumber" : 6,
        "endLineNumber" : 204,
        "endColumnNumber" : 23
      },
      "nodeContext" : "vA.x-=mA * P.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "float"
  }, {
    "nodeContext" : "P.x",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 208,
      "startColumnNumber" : 19,
      "endLineNumber" : 208,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 208,
        "startColumnNumber" : 14,
        "endLineNumber" : 208,
        "endColumnNumber" : 22
      },
      "nodeContext" : "mB * P.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 22
      },
      "nodeContext" : "vB.x+=mB * P.x",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 23
      },
      "nodeContext" : "vB.x+=mB * P.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 539,
        "startLineNumber" : 194,
        "startColumnNumber" : 32,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Vec2 P=pool.popVec2();\n  m_impulse.x*=data.step.dtRatio;\n  m_impulse.y*=data.step.dtRatio;\n  m_motorImpulse*=data.step.dtRatio;\n  P.x=m_impulse.x;\n  P.y=m_impulse.y;\n  vA.x-=mA * P.x;\n  vA.y-=mA * P.y;\n  wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n  vB.x+=mB * P.x;\n  vB.y+=mB * P.y;\n  wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n  pool.pushVec2(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (data.step.warmStarting) {\n  final Vec2 P=pool.popVec2();\n  m_impulse.x*=data.step.dtRatio;\n  m_impulse.y*=data.step.dtRatio;\n  m_motorImpulse*=data.step.dtRatio;\n  P.x=m_impulse.x;\n  P.y=m_impulse.y;\n  vA.x-=mA * P.x;\n  vA.y-=mA * P.y;\n  wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n  vB.x+=mB * P.x;\n  vB.y+=mB * P.y;\n  wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n  pool.pushVec2(1);\n}\n else {\n  m_impulse.setZero();\n  m_motorImpulse=0.0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3658,
        "startLineNumber" : 109,
        "startColumnNumber" : 61,
        "endLineNumber" : 223,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  m_indexA=m_bodyA.m_islandIndex;\n  m_indexB=m_bodyB.m_islandIndex;\n  m_localCenterA.set(m_bodyA.m_sweep.localCenter);\n  m_localCenterB.set(m_bodyB.m_sweep.localCenter);\n  m_invMassA=m_bodyA.m_invMass;\n  m_invMassB=m_bodyB.m_invMass;\n  m_invIA=m_bodyA.m_invI;\n  m_invIB=m_bodyB.m_invI;\n  float aA=data.positions[m_indexA].a;\n  Vec2 vA=data.velocities[m_indexA].v;\n  float wA=data.velocities[m_indexA].w;\n  float aB=data.positions[m_indexB].a;\n  Vec2 vB=data.velocities[m_indexB].v;\n  float wB=data.velocities[m_indexB].w;\n  final Rot qA=pool.popRot();\n  final Rot qB=pool.popRot();\n  final Vec2 temp=pool.popVec2();\n  qA.set(aA);\n  qB.set(aB);\n  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);\n  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);\n  float mA=m_invMassA, mB=m_invMassB;\n  float iA=m_invIA, iB=m_invIB;\n  boolean fixedRotation=(iA + iB == 0.0f);\n  m_mass.ex.x=mA + mB + m_rA.y * m_rA.y * iA + m_rB.y * m_rB.y * iB;\n  m_mass.ey.x=-m_rA.y * m_rA.x * iA - m_rB.y * m_rB.x * iB;\n  m_mass.ez.x=-m_rA.y * iA - m_rB.y * iB;\n  m_mass.ex.y=m_mass.ey.x;\n  m_mass.ey.y=mA + mB + m_rA.x * m_rA.x * iA + m_rB.x * m_rB.x * iB;\n  m_mass.ez.y=m_rA.x * iA + m_rB.x * iB;\n  m_mass.ex.z=m_mass.ez.x;\n  m_mass.ey.z=m_mass.ez.y;\n  m_mass.ez.z=iA + iB;\n  m_motorMass=iA + iB;\n  if (m_motorMass > 0.0f) {\n    m_motorMass=1.0f / m_motorMass;\n  }\n  if (m_enableMotor == false || fixedRotation) {\n    m_motorImpulse=0.0f;\n  }\n  if (m_enableLimit && fixedRotation == false) {\n    float jointAngle=aB - aA - m_referenceAngle;\n    if (MathUtils.abs(m_upperAngle - m_lowerAngle) < 2.0f * Settings.angularSlop) {\n      m_limitState=LimitState.EQUAL;\n    }\n else     if (jointAngle <= m_lowerAngle) {\n      if (m_limitState != LimitState.AT_LOWER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_LOWER;\n    }\n else     if (jointAngle >= m_upperAngle) {\n      if (m_limitState != LimitState.AT_UPPER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_UPPER;\n    }\n else {\n      m_limitState=LimitState.INACTIVE;\n      m_impulse.z=0.0f;\n    }\n  }\n else {\n    m_limitState=LimitState.INACTIVE;\n  }\n  if (data.step.warmStarting) {\n    final Vec2 P=pool.popVec2();\n    m_impulse.x*=data.step.dtRatio;\n    m_impulse.y*=data.step.dtRatio;\n    m_motorImpulse*=data.step.dtRatio;\n    P.x=m_impulse.x;\n    P.y=m_impulse.y;\n    vA.x-=mA * P.x;\n    vA.y-=mA * P.y;\n    wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n    vB.x+=mB * P.x;\n    vB.y+=mB * P.y;\n    wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n    pool.pushVec2(1);\n  }\n else {\n    m_impulse.setZero();\n    m_motorImpulse=0.0f;\n  }\n  data.velocities[m_indexA].w=wA;\n  data.velocities[m_indexB].w=wB;\n  pool.pushVec2(1);\n  pool.pushRot(2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 681,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3729,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 223,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void initVelocityConstraints(final SolverData data){\n  m_indexA=m_bodyA.m_islandIndex;\n  m_indexB=m_bodyB.m_islandIndex;\n  m_localCenterA.set(m_bodyA.m_sweep.localCenter);\n  m_localCenterB.set(m_bodyB.m_sweep.localCenter);\n  m_invMassA=m_bodyA.m_invMass;\n  m_invMassB=m_bodyB.m_invMass;\n  m_invIA=m_bodyA.m_invI;\n  m_invIB=m_bodyB.m_invI;\n  float aA=data.positions[m_indexA].a;\n  Vec2 vA=data.velocities[m_indexA].v;\n  float wA=data.velocities[m_indexA].w;\n  float aB=data.positions[m_indexB].a;\n  Vec2 vB=data.velocities[m_indexB].v;\n  float wB=data.velocities[m_indexB].w;\n  final Rot qA=pool.popRot();\n  final Rot qB=pool.popRot();\n  final Vec2 temp=pool.popVec2();\n  qA.set(aA);\n  qB.set(aB);\n  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);\n  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);\n  float mA=m_invMassA, mB=m_invMassB;\n  float iA=m_invIA, iB=m_invIB;\n  boolean fixedRotation=(iA + iB == 0.0f);\n  m_mass.ex.x=mA + mB + m_rA.y * m_rA.y * iA + m_rB.y * m_rB.y * iB;\n  m_mass.ey.x=-m_rA.y * m_rA.x * iA - m_rB.y * m_rB.x * iB;\n  m_mass.ez.x=-m_rA.y * iA - m_rB.y * iB;\n  m_mass.ex.y=m_mass.ey.x;\n  m_mass.ey.y=mA + mB + m_rA.x * m_rA.x * iA + m_rB.x * m_rB.x * iB;\n  m_mass.ez.y=m_rA.x * iA + m_rB.x * iB;\n  m_mass.ex.z=m_mass.ez.x;\n  m_mass.ey.z=m_mass.ez.y;\n  m_mass.ez.z=iA + iB;\n  m_motorMass=iA + iB;\n  if (m_motorMass > 0.0f) {\n    m_motorMass=1.0f / m_motorMass;\n  }\n  if (m_enableMotor == false || fixedRotation) {\n    m_motorImpulse=0.0f;\n  }\n  if (m_enableLimit && fixedRotation == false) {\n    float jointAngle=aB - aA - m_referenceAngle;\n    if (MathUtils.abs(m_upperAngle - m_lowerAngle) < 2.0f * Settings.angularSlop) {\n      m_limitState=LimitState.EQUAL;\n    }\n else     if (jointAngle <= m_lowerAngle) {\n      if (m_limitState != LimitState.AT_LOWER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_LOWER;\n    }\n else     if (jointAngle >= m_upperAngle) {\n      if (m_limitState != LimitState.AT_UPPER) {\n        m_impulse.z=0.0f;\n      }\n      m_limitState=LimitState.AT_UPPER;\n    }\n else {\n      m_limitState=LimitState.INACTIVE;\n      m_impulse.z=0.0f;\n    }\n  }\n else {\n    m_limitState=LimitState.INACTIVE;\n  }\n  if (data.step.warmStarting) {\n    final Vec2 P=pool.popVec2();\n    m_impulse.x*=data.step.dtRatio;\n    m_impulse.y*=data.step.dtRatio;\n    m_motorImpulse*=data.step.dtRatio;\n    P.x=m_impulse.x;\n    P.y=m_impulse.y;\n    vA.x-=mA * P.x;\n    vA.y-=mA * P.y;\n    wA-=iA * (Vec2.cross(m_rA,P) + m_motorImpulse + m_impulse.z);\n    vB.x+=mB * P.x;\n    vB.y+=mB * P.y;\n    wB+=iB * (Vec2.cross(m_rB,P) + m_motorImpulse + m_impulse.z);\n    pool.pushVec2(1);\n  }\n else {\n    m_impulse.setZero();\n    m_motorImpulse=0.0f;\n  }\n  data.velocities[m_indexA].w=wA;\n  data.velocities[m_indexB].w=wB;\n  pool.pushVec2(1);\n  pool.pushRot(2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 692,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 23
      },
      "nodeContext" : "vB.x+=mB * P.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 204,
    "startColumnNumber" : 19,
    "endLineNumber" : 204,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 208,
    "startColumnNumber" : 19,
    "endLineNumber" : 208,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}