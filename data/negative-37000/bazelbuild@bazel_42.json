{
  "id" : 42,
  "expression" : "new WorkerProxy(workerKey,1,logPath,multiplexer)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/worker/WorkerMultiplexerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new WorkerProxy(workerKey,1,logPath,multiplexer)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 94,
      "startColumnNumber" : 26,
      "endLineNumber" : 94,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 77
      },
      "nodeContext" : "worker1=new WorkerProxy(workerKey,1,logPath,multiplexer)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "WorkerProxy worker1=new WorkerProxy(workerKey,1,logPath,multiplexer);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1692,
        "startLineNumber" : 86,
        "startColumnNumber" : 67,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  WorkerKey workerKey=TestUtils.createWorkerKey(fileSystem,\"test2\",true,\"fakeBinary\");\n  WorkerMultiplexer multiplexer=WorkerMultiplexerManager.getInstance(workerKey,logPath);\n  PipedInputStream serverInputStream=new PipedInputStream();\n  OutputStream workerOutputStream=new PipedOutputStream(serverInputStream);\n  multiplexer.setProcessFactory(params -> new FakeSubprocess(serverInputStream));\n  WorkerProxy worker1=new WorkerProxy(workerKey,1,logPath,multiplexer);\n  worker1.prepareExecution(null,null,null);\n  WorkRequest request1=WorkRequest.newBuilder().setRequestId(3).build();\n  worker1.putRequest(request1);\n  WorkerProxy worker2=new WorkerProxy(workerKey,2,logPath,multiplexer);\n  worker2.prepareExecution(null,null,null);\n  WorkRequest request2=WorkRequest.newBuilder().setRequestId(42).build();\n  worker2.putRequest(request2);\n  Executor executor=Executors.newFixedThreadPool(2);\n  Future<WorkResponse> response1=Futures.submit(() -> worker1.getResponse(3),executor);\n  Future<WorkResponse> response2=Futures.submit(() -> worker2.getResponse(42),executor);\n  WorkResponse fakedResponse1=WorkResponse.newBuilder().setRequestId(3).build();\n  WorkResponse fakedResponse2=WorkResponse.newBuilder().setRequestId(42).build();\n  fakedResponse2.writeDelimitedTo(workerOutputStream);\n  fakedResponse1.writeDelimitedTo(workerOutputStream);\n  workerOutputStream.flush();\n  assertThat(response1.get().getRequestId()).isEqualTo(3);\n  assertThat(response2.get().getRequestId()).isEqualTo(42);\n  assertThat(multiplexer.noOutstandingRequests()).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1814,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGetResponse_basicConcurrency() throws IOException, InterruptedException, ExecutionException {\n  WorkerKey workerKey=TestUtils.createWorkerKey(fileSystem,\"test2\",true,\"fakeBinary\");\n  WorkerMultiplexer multiplexer=WorkerMultiplexerManager.getInstance(workerKey,logPath);\n  PipedInputStream serverInputStream=new PipedInputStream();\n  OutputStream workerOutputStream=new PipedOutputStream(serverInputStream);\n  multiplexer.setProcessFactory(params -> new FakeSubprocess(serverInputStream));\n  WorkerProxy worker1=new WorkerProxy(workerKey,1,logPath,multiplexer);\n  worker1.prepareExecution(null,null,null);\n  WorkRequest request1=WorkRequest.newBuilder().setRequestId(3).build();\n  worker1.putRequest(request1);\n  WorkerProxy worker2=new WorkerProxy(workerKey,2,logPath,multiplexer);\n  worker2.prepareExecution(null,null,null);\n  WorkRequest request2=WorkRequest.newBuilder().setRequestId(42).build();\n  worker2.putRequest(request2);\n  Executor executor=Executors.newFixedThreadPool(2);\n  Future<WorkResponse> response1=Futures.submit(() -> worker1.getResponse(3),executor);\n  Future<WorkResponse> response2=Futures.submit(() -> worker2.getResponse(42),executor);\n  WorkResponse fakedResponse1=WorkResponse.newBuilder().setRequestId(3).build();\n  WorkResponse fakedResponse2=WorkResponse.newBuilder().setRequestId(42).build();\n  fakedResponse2.writeDelimitedTo(workerOutputStream);\n  fakedResponse1.writeDelimitedTo(workerOutputStream);\n  workerOutputStream.flush();\n  assertThat(response1.get().getRequestId()).isEqualTo(3);\n  assertThat(response2.get().getRequestId()).isEqualTo(42);\n  assertThat(multiplexer.noOutstandingRequests()).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "WorkerProxy worker1=new WorkerProxy(workerKey,1,logPath,multiplexer);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "com.google.devtools.build.lib.worker.WorkerProxy"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 94,
    "startColumnNumber" : 26,
    "endLineNumber" : 94,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}