{
  "id" : 217,
  "expression" : "originFile",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/apkparser/AndroidParser.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "originFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 100,
      "startColumnNumber" : 13,
      "endLineNumber" : 100,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 100,
        "startColumnNumber" : 13,
        "endLineNumber" : 100,
        "endColumnNumber" : 32
      },
      "nodeContext" : "originFile.exists()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 32
      },
      "nodeContext" : "!originFile.exists()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!originFile.exists()) {\n  throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 96,
        "startColumnNumber" : 122,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void editResourceTableString(String from,String to,File originFile,File destFile) throws IOException {\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 32
      },
      "nodeContext" : "!originFile.exists()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "originFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 101,
      "startColumnNumber" : 85,
      "endLineNumber" : 101,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 101,
        "startColumnNumber" : 85,
        "endLineNumber" : 101,
        "endColumnNumber" : 105
      },
      "nodeContext" : "originFile.getPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 101,
        "startColumnNumber" : 39,
        "endLineNumber" : 101,
        "endColumnNumber" : 105
      },
      "nodeContext" : "\"origin resources.arsc is not exist, path:\" + originFile.getPath()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 101,
        "startColumnNumber" : 18,
        "endLineNumber" : 101,
        "endColumnNumber" : 106
      },
      "nodeContext" : "new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 107
      },
      "nodeContext" : "throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!originFile.exists()) {\n  throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 96,
        "startColumnNumber" : 122,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void editResourceTableString(String from,String to,File originFile,File destFile) throws IOException {\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 107
      },
      "nodeContext" : "throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "originFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 108,
      "startColumnNumber" : 34,
      "endLineNumber" : 108,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 45
      },
      "nodeContext" : "parser.parseResourceTable(originFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 46
      },
      "nodeContext" : "parser.parseResourceTable(originFile);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 96,
        "startColumnNumber" : 122,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void editResourceTableString(String from,String to,File originFile,File destFile) throws IOException {\n  if (from == null || to == null) {\n    return;\n  }\n  if (!originFile.exists()) {\n    throw new RuntimeException(\"origin resources.arsc is not exist, path:\" + originFile.getPath());\n  }\n  if (from.length() != to.length()) {\n    throw new RuntimeException(\"only support the same string length now!\");\n  }\n  ApkParser parser=new ApkParser();\n  parser.parseResourceTable(originFile);\n  ResourceTable resourceTable=parser.getResourceTable();\n  StringPool stringPool=resourceTable.getStringPool();\n  ByteBuffer buffer=resourceTable.getBuffers();\n  byte[] array=buffer.array();\n  int length=stringPool.getPool().length;\n  boolean found=false;\n  for (int i=0; i < length; i++) {\n    String value=stringPool.get(i);\n    if (value.equals(from)) {\n      found=true;\n      long offset=stringPool.getPoolOffsets().get(i);\n      offset+=2;\n      byte[] tempByte;\n      if (stringPool.isUtf8()) {\n        tempByte=to.getBytes(ParseUtils.charsetUTF8);\n        if (to.length() != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n else {\n        tempByte=to.getBytes(ParseUtils.charsetUTF16);\n        if ((to.length() * 2) != tempByte.length) {\n          throw new RuntimeException(String.format(\"editResourceTableString length is different, name %d, tempByte %d\\n\",to.length(),tempByte.length));\n        }\n      }\n      System.arraycopy(tempByte,0,array,(int)offset,tempByte.length);\n    }\n  }\n  if (!found) {\n    throw new RuntimeException(\"can't found string:\" + from + \" in the resources.arsc file's string pool!\");\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    fileOutputStream=new FileOutputStream(destFile);\n    fileOutputStream.write(array);\n  }\n  finally {\n    IOHelper.closeQuietly(fileOutputStream);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 46
      },
      "nodeContext" : "parser.parseResourceTable(originFile);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 100,
    "startColumnNumber" : 13,
    "endLineNumber" : 100,
    "endColumnNumber" : 23
  }, {
    "charLength" : 10,
    "startLineNumber" : 101,
    "startColumnNumber" : 85,
    "endLineNumber" : 101,
    "endColumnNumber" : 95
  }, {
    "charLength" : 10,
    "startLineNumber" : 108,
    "startColumnNumber" : 34,
    "endLineNumber" : 108,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}