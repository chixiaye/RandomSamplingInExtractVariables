{
  "id" : 320,
  "expression" : "len == srstCmd",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "len == srstCmd",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 642,
      "startColumnNumber" : 23,
      "endLineNumber" : 642,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 642,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 626,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 127,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2112,
        "startLineNumber" : 603,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 250,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2749,
        "startLineNumber" : 589,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 320,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3582,
        "startLineNumber" : 573,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == dumpCmd) {\n  LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n  if (zk == null) {\n    sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n  }\n else {\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"SessionTracker dump: \\n\");\n    sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n    sb.append(\"ephemeral nodes dump:\\n\");\n    sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  }\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 412,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4472,
        "startLineNumber" : 553,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == setTraceMaskCmd) {\n  LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n  incomingBuffer=ByteBuffer.allocate(8);\n  int rc=sock.read(incomingBuffer);\n  if (rc < 0) {\n    throw new IOException(\"Read error\");\n  }\n  System.out.println(\"rc=\" + rc);\n  incomingBuffer.flip();\n  long traceMask=incomingBuffer.getLong();\n  ZooTrace.setTextTraceLevel(traceMask);\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == dumpCmd) {\n  LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n  if (zk == null) {\n    sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n  }\n else {\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"SessionTracker dump: \\n\");\n    sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n    sb.append(\"ephemeral nodes dump:\\n\");\n    sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  }\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 514,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 542,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == getTraceMaskCmd) {\n  LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n  long traceMask=ZooTrace.getTextTraceLevel();\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == setTraceMaskCmd) {\n  LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n  incomingBuffer=ByteBuffer.allocate(8);\n  int rc=sock.read(incomingBuffer);\n  if (rc < 0) {\n    throw new IOException(\"Read error\");\n  }\n  System.out.println(\"rc=\" + rc);\n  incomingBuffer.flip();\n  long traceMask=incomingBuffer.getLong();\n  ZooTrace.setTextTraceLevel(traceMask);\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == dumpCmd) {\n  LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n  if (zk == null) {\n    sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n  }\n else {\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"SessionTracker dump: \\n\");\n    sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n    sb.append(\"ephemeral nodes dump:\\n\");\n    sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  }\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 573,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5205,
        "startLineNumber" : 538,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == killCmd) {\n  LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n  System.exit(0);\n}\n else if (len == getTraceMaskCmd) {\n  LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n  long traceMask=ZooTrace.getTextTraceLevel();\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == setTraceMaskCmd) {\n  LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n  incomingBuffer=ByteBuffer.allocate(8);\n  int rc=sock.read(incomingBuffer);\n  if (rc < 0) {\n    throw new IOException(\"Read error\");\n  }\n  System.out.println(\"rc=\" + rc);\n  incomingBuffer.flip();\n  long traceMask=incomingBuffer.getLong();\n  ZooTrace.setTextTraceLevel(traceMask);\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == dumpCmd) {\n  LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n  if (zk == null) {\n    sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n  }\n else {\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"SessionTracker dump: \\n\");\n    sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n    sb.append(\"ephemeral nodes dump:\\n\");\n    sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  }\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 594,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5548,
        "startLineNumber" : 530,
        "startColumnNumber" : 12,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == ruokCmd) {\n  LOG.info(\"Processing ruok command from \" + sock.socket().getRemoteSocketAddress());\n  sendBuffer(imok.duplicate());\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == killCmd) {\n  LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n  System.exit(0);\n}\n else if (len == getTraceMaskCmd) {\n  LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n  long traceMask=ZooTrace.getTextTraceLevel();\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == setTraceMaskCmd) {\n  LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n  incomingBuffer=ByteBuffer.allocate(8);\n  int rc=sock.read(incomingBuffer);\n  if (rc < 0) {\n    throw new IOException(\"Read error\");\n  }\n  System.out.println(\"rc=\" + rc);\n  incomingBuffer.flip();\n  long traceMask=incomingBuffer.getLong();\n  ZooTrace.setTextTraceLevel(traceMask);\n  ByteBuffer resp=ByteBuffer.allocate(8);\n  resp.putLong(traceMask);\n  resp.flip();\n  sendBuffer(resp);\n  sendBuffer(NIOServerCnxn.closeConn);\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == dumpCmd) {\n  LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n  if (zk == null) {\n    sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n  }\n else {\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"SessionTracker dump: \\n\");\n    sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n    sb.append(\"ephemeral nodes dump:\\n\");\n    sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  }\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == reqsCmd) {\n  LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n    for (    Request r : outstanding) {\n      sb.append(r.toString());\n      sb.append('\\n');\n    }\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == statCmd) {\n  LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  if (zk != null) {\n    sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n    sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n      for (      NIOServerCnxn c : factory.cnxns) {\n        sb.append(c.getStats().toString());\n      }\n    }\n    sb.append(\"\\n\");\n    sb.append(zk.serverStats().toString());\n    sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n  }\n else   sb.append(\"ZooKeeperServer not running\\n\");\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == enviCmd) {\n  LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n  StringBuffer sb=new StringBuffer();\n  List<Environment.Entry> env=Environment.list();\n  sb.append(\"Environment:\\n\");\n  for (  Environment.Entry e : env) {\n    sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n  }\n  sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n else if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 630,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5721,
        "startLineNumber" : 527,
        "startColumnNumber" : 26,
        "endLineNumber" : 651,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (len == ruokCmd) {\n    LOG.info(\"Processing ruok command from \" + sock.socket().getRemoteSocketAddress());\n    sendBuffer(imok.duplicate());\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == killCmd) {\n    LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n    System.exit(0);\n  }\n else   if (len == getTraceMaskCmd) {\n    LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n    long traceMask=ZooTrace.getTextTraceLevel();\n    ByteBuffer resp=ByteBuffer.allocate(8);\n    resp.putLong(traceMask);\n    resp.flip();\n    sendBuffer(resp);\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == setTraceMaskCmd) {\n    LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n    incomingBuffer=ByteBuffer.allocate(8);\n    int rc=sock.read(incomingBuffer);\n    if (rc < 0) {\n      throw new IOException(\"Read error\");\n    }\n    System.out.println(\"rc=\" + rc);\n    incomingBuffer.flip();\n    long traceMask=incomingBuffer.getLong();\n    ZooTrace.setTextTraceLevel(traceMask);\n    ByteBuffer resp=ByteBuffer.allocate(8);\n    resp.putLong(traceMask);\n    resp.flip();\n    sendBuffer(resp);\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == dumpCmd) {\n    LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n    if (zk == null) {\n      sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n    }\n else {\n      StringBuffer sb=new StringBuffer();\n      sb.append(\"SessionTracker dump: \\n\");\n      sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n      sb.append(\"ephemeral nodes dump:\\n\");\n      sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    }\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == reqsCmd) {\n    LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n      for (      Request r : outstanding) {\n        sb.append(r.toString());\n        sb.append('\\n');\n      }\n    }\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == statCmd) {\n    LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    if (zk != null) {\n      sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n      sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n        for (        NIOServerCnxn c : factory.cnxns) {\n          sb.append(c.getStats().toString());\n        }\n      }\n      sb.append(\"\\n\");\n      sb.append(zk.serverStats().toString());\n      sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n    }\n else     sb.append(\"ZooKeeperServer not running\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == enviCmd) {\n    LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    List<Environment.Entry> env=Environment.list();\n    sb.append(\"Environment:\\n\");\n    for (    Environment.Entry e : env) {\n      sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n    }\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == srstCmd) {\n    LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n    zk.serverStats().reset();\n    sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 631,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5739,
        "startLineNumber" : 527,
        "startColumnNumber" : 8,
        "endLineNumber" : 651,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!initialized) {\n  if (len == ruokCmd) {\n    LOG.info(\"Processing ruok command from \" + sock.socket().getRemoteSocketAddress());\n    sendBuffer(imok.duplicate());\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == killCmd) {\n    LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n    System.exit(0);\n  }\n else   if (len == getTraceMaskCmd) {\n    LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n    long traceMask=ZooTrace.getTextTraceLevel();\n    ByteBuffer resp=ByteBuffer.allocate(8);\n    resp.putLong(traceMask);\n    resp.flip();\n    sendBuffer(resp);\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == setTraceMaskCmd) {\n    LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n    incomingBuffer=ByteBuffer.allocate(8);\n    int rc=sock.read(incomingBuffer);\n    if (rc < 0) {\n      throw new IOException(\"Read error\");\n    }\n    System.out.println(\"rc=\" + rc);\n    incomingBuffer.flip();\n    long traceMask=incomingBuffer.getLong();\n    ZooTrace.setTextTraceLevel(traceMask);\n    ByteBuffer resp=ByteBuffer.allocate(8);\n    resp.putLong(traceMask);\n    resp.flip();\n    sendBuffer(resp);\n    sendBuffer(NIOServerCnxn.closeConn);\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == dumpCmd) {\n    LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n    if (zk == null) {\n      sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n    }\n else {\n      StringBuffer sb=new StringBuffer();\n      sb.append(\"SessionTracker dump: \\n\");\n      sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n      sb.append(\"ephemeral nodes dump:\\n\");\n      sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    }\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == reqsCmd) {\n    LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n      for (      Request r : outstanding) {\n        sb.append(r.toString());\n        sb.append('\\n');\n      }\n    }\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == statCmd) {\n    LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    if (zk != null) {\n      sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n      sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n        for (        NIOServerCnxn c : factory.cnxns) {\n          sb.append(c.getStats().toString());\n        }\n      }\n      sb.append(\"\\n\");\n      sb.append(zk.serverStats().toString());\n      sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n    }\n else     sb.append(\"ZooKeeperServer not running\\n\");\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == enviCmd) {\n    LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n    StringBuffer sb=new StringBuffer();\n    List<Environment.Entry> env=Environment.list();\n    sb.append(\"Environment:\\n\");\n    for (    Environment.Entry e : env) {\n      sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n    }\n    sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n else   if (len == srstCmd) {\n    LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n    zk.serverStats().reset();\n    sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n    k.interestOps(SelectionKey.OP_WRITE);\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 634,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6119,
        "startLineNumber" : 524,
        "startColumnNumber" : 63,
        "endLineNumber" : 659,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int len=lenBuffer.getInt();\n  if (!initialized) {\n    if (len == ruokCmd) {\n      LOG.info(\"Processing ruok command from \" + sock.socket().getRemoteSocketAddress());\n      sendBuffer(imok.duplicate());\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == killCmd) {\n      LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n      System.exit(0);\n    }\n else     if (len == getTraceMaskCmd) {\n      LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n      long traceMask=ZooTrace.getTextTraceLevel();\n      ByteBuffer resp=ByteBuffer.allocate(8);\n      resp.putLong(traceMask);\n      resp.flip();\n      sendBuffer(resp);\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == setTraceMaskCmd) {\n      LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n      incomingBuffer=ByteBuffer.allocate(8);\n      int rc=sock.read(incomingBuffer);\n      if (rc < 0) {\n        throw new IOException(\"Read error\");\n      }\n      System.out.println(\"rc=\" + rc);\n      incomingBuffer.flip();\n      long traceMask=incomingBuffer.getLong();\n      ZooTrace.setTextTraceLevel(traceMask);\n      ByteBuffer resp=ByteBuffer.allocate(8);\n      resp.putLong(traceMask);\n      resp.flip();\n      sendBuffer(resp);\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == dumpCmd) {\n      LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n      if (zk == null) {\n        sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n      }\n else {\n        StringBuffer sb=new StringBuffer();\n        sb.append(\"SessionTracker dump: \\n\");\n        sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n        sb.append(\"ephemeral nodes dump:\\n\");\n        sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n        sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      }\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == reqsCmd) {\n      LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n        for (        Request r : outstanding) {\n          sb.append(r.toString());\n          sb.append('\\n');\n        }\n      }\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == statCmd) {\n      LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      if (zk != null) {\n        sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n        sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n          for (          NIOServerCnxn c : factory.cnxns) {\n            sb.append(c.getStats().toString());\n          }\n        }\n        sb.append(\"\\n\");\n        sb.append(zk.serverStats().toString());\n        sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n      }\n else       sb.append(\"ZooKeeperServer not running\\n\");\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == enviCmd) {\n      LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      List<Environment.Entry> env=Environment.list();\n      sb.append(\"Environment:\\n\");\n      for (      Environment.Entry e : env) {\n        sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n      }\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == srstCmd) {\n      LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n      zk.serverStats().reset();\n      sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n  }\n  if (len < 0 || len > BinaryInputArchive.maxBuffer) {\n    throw new IOException(\"Len error \" + len);\n  }\n  if (zk == null) {\n    throw new IOException(\"ZooKeeperServer not running\");\n  }\n  incomingBuffer=ByteBuffer.allocate(len);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 677,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6178,
        "startLineNumber" : 524,
        "startColumnNumber" : 4,
        "endLineNumber" : 659,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void readLength(SelectionKey k) throws IOException {\n  int len=lenBuffer.getInt();\n  if (!initialized) {\n    if (len == ruokCmd) {\n      LOG.info(\"Processing ruok command from \" + sock.socket().getRemoteSocketAddress());\n      sendBuffer(imok.duplicate());\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == killCmd) {\n      LOG.info(\"Processing kill command from \" + sock.socket().getRemoteSocketAddress());\n      System.exit(0);\n    }\n else     if (len == getTraceMaskCmd) {\n      LOG.info(\"Processing getracemask command from \" + sock.socket().getRemoteSocketAddress());\n      long traceMask=ZooTrace.getTextTraceLevel();\n      ByteBuffer resp=ByteBuffer.allocate(8);\n      resp.putLong(traceMask);\n      resp.flip();\n      sendBuffer(resp);\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == setTraceMaskCmd) {\n      LOG.info(\"Processing settracemask command from \" + sock.socket().getRemoteSocketAddress());\n      incomingBuffer=ByteBuffer.allocate(8);\n      int rc=sock.read(incomingBuffer);\n      if (rc < 0) {\n        throw new IOException(\"Read error\");\n      }\n      System.out.println(\"rc=\" + rc);\n      incomingBuffer.flip();\n      long traceMask=incomingBuffer.getLong();\n      ZooTrace.setTextTraceLevel(traceMask);\n      ByteBuffer resp=ByteBuffer.allocate(8);\n      resp.putLong(traceMask);\n      resp.flip();\n      sendBuffer(resp);\n      sendBuffer(NIOServerCnxn.closeConn);\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == dumpCmd) {\n      LOG.info(\"Processing dump command from \" + sock.socket().getRemoteSocketAddress());\n      if (zk == null) {\n        sendBuffer(ByteBuffer.wrap(\"ZooKeeper not active \\n\".getBytes()));\n      }\n else {\n        StringBuffer sb=new StringBuffer();\n        sb.append(\"SessionTracker dump: \\n\");\n        sb.append(zk.sessionTracker.toString()).append(\"\\n\");\n        sb.append(\"ephemeral nodes dump:\\n\");\n        sb.append(zk.dataTree.dumpEphemerals()).append(\"\\n\");\n        sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      }\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == reqsCmd) {\n      LOG.info(\"Processing reqs command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      sb.append(\"Requests:\\n\");\nsynchronized (outstanding) {\n        for (        Request r : outstanding) {\n          sb.append(r.toString());\n          sb.append('\\n');\n        }\n      }\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == statCmd) {\n      LOG.info(\"Processing stat command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      if (zk != null) {\n        sb.append(\"Zookeeper version: \").append(Version.getFullVersion()).append(\"\\n\");\n        sb.append(\"Clients:\\n\");\nsynchronized (factory.cnxns) {\n          for (          NIOServerCnxn c : factory.cnxns) {\n            sb.append(c.getStats().toString());\n          }\n        }\n        sb.append(\"\\n\");\n        sb.append(zk.serverStats().toString());\n        sb.append(\"Node count: \").append(zk.dataTree.getNodeCount()).append(\"\\n\");\n      }\n else       sb.append(\"ZooKeeperServer not running\\n\");\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == enviCmd) {\n      LOG.info(\"Processing envi command from \" + sock.socket().getRemoteSocketAddress());\n      StringBuffer sb=new StringBuffer();\n      List<Environment.Entry> env=Environment.list();\n      sb.append(\"Environment:\\n\");\n      for (      Environment.Entry e : env) {\n        sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\"\\n\");\n      }\n      sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n else     if (len == srstCmd) {\n      LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n      zk.serverStats().reset();\n      sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n      k.interestOps(SelectionKey.OP_WRITE);\n      return;\n    }\n  }\n  if (len < 0 || len > BinaryInputArchive.maxBuffer) {\n    throw new IOException(\"Len error \" + len);\n  }\n  if (zk == null) {\n    throw new IOException(\"ZooKeeperServer not running\");\n  }\n  incomingBuffer=ByteBuffer.allocate(len);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 687,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 642,
        "startColumnNumber" : 19,
        "endLineNumber" : 650,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (len == srstCmd) {\n  LOG.info(\"Processing srst command from \" + sock.socket().getRemoteSocketAddress());\n  zk.serverStats().reset();\n  sendBuffer(ByteBuffer.wrap(\"Stats reset.\\n\".getBytes()));\n  k.interestOps(SelectionKey.OP_WRITE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 642,
    "startColumnNumber" : 23,
    "endLineNumber" : 642,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}