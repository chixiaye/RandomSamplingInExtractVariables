{
  "id" : 21,
  "expression" : "page.getPageItems()",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePaginationHelperImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "page.getPageItems()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 99,
      "startColumnNumber" : 12,
      "endLineNumber" : 99,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 41
      },
      "nodeContext" : "page.getPageItems().add(item)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "page.getPageItems().add(item);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  page.getPageItems().add(item);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (E item : result) {\n  page.getPageItems().add(item);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 60,
        "startColumnNumber" : 99,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pageNo <= 0 || pageSize <= 0) {\n    throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n  }\n  Integer rowCountInt=jdbcTemplate.queryForObject(sqlCountRows,args,Integer.class);\n  if (rowCountInt == null) {\n    throw new IllegalArgumentException(\"fetchPageLimit error\");\n  }\n  int pageCount=rowCountInt / pageSize;\n  if (rowCountInt > pageSize * pageCount) {\n    pageCount++;\n  }\n  final Page<E> page=new Page<E>();\n  page.setPageNumber(pageNo);\n  page.setPagesAvailable(pageCount);\n  page.setTotalCount(rowCountInt);\n  if (pageNo > pageCount) {\n    return page;\n  }\n  final int startRow=(pageNo - 1) * pageSize;\n  String selectSql=\"\";\n  if (isDerby()) {\n    selectSql=sqlFetchRows + \" OFFSET \" + startRow+ \" ROWS FETCH NEXT \"+ pageSize+ \" ROWS ONLY\";\n  }\n else   if (lastMaxId != null) {\n    selectSql=sqlFetchRows + \" and id > \" + lastMaxId+ \" order by id asc\"+ \" limit \"+ 0+ \",\"+ pageSize;\n  }\n else {\n    selectSql=sqlFetchRows + \" limit \" + startRow+ \",\"+ pageSize;\n  }\n  List<E> result=jdbcTemplate.query(selectSql,args,rowMapper);\n  for (  E item : result) {\n    page.getPageItems().add(item);\n  }\n  return page;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Page<E> fetchPage(final String sqlCountRows,final String sqlFetchRows,final Object[] args,final int pageNo,final int pageSize,final Long lastMaxId,final RowMapper rowMapper){\n  if (pageNo <= 0 || pageSize <= 0) {\n    throw new IllegalArgumentException(\"pageNo and pageSize must be greater than zero\");\n  }\n  Integer rowCountInt=jdbcTemplate.queryForObject(sqlCountRows,args,Integer.class);\n  if (rowCountInt == null) {\n    throw new IllegalArgumentException(\"fetchPageLimit error\");\n  }\n  int pageCount=rowCountInt / pageSize;\n  if (rowCountInt > pageSize * pageCount) {\n    pageCount++;\n  }\n  final Page<E> page=new Page<E>();\n  page.setPageNumber(pageNo);\n  page.setPagesAvailable(pageCount);\n  page.setTotalCount(rowCountInt);\n  if (pageNo > pageCount) {\n    return page;\n  }\n  final int startRow=(pageNo - 1) * pageSize;\n  String selectSql=\"\";\n  if (isDerby()) {\n    selectSql=sqlFetchRows + \" OFFSET \" + startRow+ \" ROWS FETCH NEXT \"+ pageSize+ \" ROWS ONLY\";\n  }\n else   if (lastMaxId != null) {\n    selectSql=sqlFetchRows + \" and id > \" + lastMaxId+ \" order by id asc\"+ \" limit \"+ 0+ \",\"+ pageSize;\n  }\n else {\n    selectSql=sqlFetchRows + \" limit \" + startRow+ \",\"+ pageSize;\n  }\n  List<E> result=jdbcTemplate.query(selectSql,args,rowMapper);\n  for (  E item : result) {\n    page.getPageItems().add(item);\n  }\n  return page;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 223,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "page.getPageItems().add(item);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<E>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 99,
    "startColumnNumber" : 12,
    "endLineNumber" : 99,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}