{
  "id" : 425,
  "expression" : "mode",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/editor/WaveGraph.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 47,
      "startColumnNumber" : 15,
      "endLineNumber" : 47,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 47,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mode == Mode.counts",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.counts) {\n  for (  UnitType type : used.orderedItems()) {\n    Draw.color(color(type));\n    Draw.alpha(parentAlpha);\n    Lines.beginLine();\n    for (int i=0; i < values.length; i++) {\n      int val=values[i][type.id];\n      float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n}\n else if (mode == Mode.totals) {\n  Lines.beginLine();\n  Draw.color(Pal.accent);\n  for (int i=0; i < values.length; i++) {\n    int sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n else if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3312,
        "startLineNumber" : 33,
        "startColumnNumber" : 38,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 581,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 33,
        "startColumnNumber" : 13,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(x,y,width,height) -> {\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 590,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 47,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mode == Mode.counts",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "mode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 62,
      "startColumnNumber" : 21,
      "endLineNumber" : 62,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 62,
        "startColumnNumber" : 21,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mode == Mode.totals",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 62,
        "startColumnNumber" : 18,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.totals) {\n  Lines.beginLine();\n  Draw.color(Pal.accent);\n  for (int i=0; i < values.length; i++) {\n    int sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n else if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.counts) {\n  for (  UnitType type : used.orderedItems()) {\n    Draw.color(color(type));\n    Draw.alpha(parentAlpha);\n    Lines.beginLine();\n    for (int i=0; i < values.length; i++) {\n      int val=values[i][type.id];\n      float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n}\n else if (mode == Mode.totals) {\n  Lines.beginLine();\n  Draw.color(Pal.accent);\n  for (int i=0; i < values.length; i++) {\n    int sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n else if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3312,
        "startLineNumber" : 33,
        "startColumnNumber" : 38,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 581,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 33,
        "startColumnNumber" : 13,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(x,y,width,height) -> {\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 590,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 62,
        "startColumnNumber" : 21,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mode == Mode.totals",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "mode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 77,
      "startColumnNumber" : 21,
      "endLineNumber" : 77,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mode == Mode.health",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 77,
        "startColumnNumber" : 18,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 62,
        "startColumnNumber" : 18,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.totals) {\n  Lines.beginLine();\n  Draw.color(Pal.accent);\n  for (int i=0; i < values.length; i++) {\n    int sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n else if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mode == Mode.counts) {\n  for (  UnitType type : used.orderedItems()) {\n    Draw.color(color(type));\n    Draw.alpha(parentAlpha);\n    Lines.beginLine();\n    for (int i=0; i < values.length; i++) {\n      int val=values[i][type.id];\n      float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n}\n else if (mode == Mode.totals) {\n  Lines.beginLine();\n  Draw.color(Pal.accent);\n  for (int i=0; i < values.length; i++) {\n    int sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n else if (mode == Mode.health) {\n  Lines.beginLine();\n  Draw.color(Pal.health);\n  for (int i=0; i < values.length; i++) {\n    float sum=0;\n    for (    UnitType type : used.orderedItems()) {\n      sum+=(type.health) * values[i][type.id];\n    }\n    float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n    Lines.linePoint(cx,cy);\n  }\n  Lines.endLine();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3312,
        "startLineNumber" : 33,
        "startColumnNumber" : 38,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 581,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 33,
        "startColumnNumber" : 13,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(x,y,width,height) -> {\n  Lines.stroke(Scl.scl(3f));\n  GlyphLayout lay=Pools.obtain(GlyphLayout.class,GlyphLayout::new);\n  Font font=Fonts.outline;\n  lay.setText(font,\"1\");\n  float fh=lay.height;\n  float offsetX=Scl.scl(30f), offsetY=Scl.scl(22f) + fh + Scl.scl(5f);\n  float graphX=x + offsetX, graphY=y + offsetY, graphW=width - offsetX, graphH=height - offsetY;\n  float spacing=graphW / (values.length - 1);\n  if (mode == Mode.counts) {\n    for (    UnitType type : used.orderedItems()) {\n      Draw.color(color(type));\n      Draw.alpha(parentAlpha);\n      Lines.beginLine();\n      for (int i=0; i < values.length; i++) {\n        int val=values[i][type.id];\n        float cx=graphX + i * spacing, cy=2f + graphY + val * (graphH - 4f) / max;\n        Lines.linePoint(cx,cy);\n      }\n      Lines.endLine();\n    }\n  }\n else   if (mode == Mode.totals) {\n    Lines.beginLine();\n    Draw.color(Pal.accent);\n    for (int i=0; i < values.length; i++) {\n      int sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxTotal;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n else   if (mode == Mode.health) {\n    Lines.beginLine();\n    Draw.color(Pal.health);\n    for (int i=0; i < values.length; i++) {\n      float sum=0;\n      for (      UnitType type : used.orderedItems()) {\n        sum+=(type.health) * values[i][type.id];\n      }\n      float cx=graphX + i * spacing, cy=2f + graphY + sum * (graphH - 4f) / maxHealth;\n      Lines.linePoint(cx,cy);\n    }\n    Lines.endLine();\n  }\n  float totalMarks=(height - offsetY - getMarginBottom() * 2f - 1f) / (lay.height * 2);\n  int markSpace=Math.max(1,Mathf.ceil(max / totalMarks));\n  Draw.color(Color.lightGray);\n  for (int i=0; i < max; i+=markSpace) {\n    float cy=2f + y + i * (height - 4f) / max + offsetY, cx=x + offsetX;\n    lay.setText(font,\"\" + i);\n    font.draw(\"\" + i,cx,cy + lay.height / 2f - Scl.scl(3f),Align.right);\n  }\n  float len=Scl.scl(4f);\n  font.setColor(Color.lightGray);\n  for (int i=0; i < values.length; i++) {\n    float cy=y + fh, cx=x + graphW / (values.length - 1) * i + offsetX;\n    Lines.line(cx,cy,cx,cy + len);\n    if (i == values.length / 2) {\n      font.draw(\"\" + (i + from + 1),cx,cy - 2f,Align.center);\n    }\n  }\n  font.setColor(Color.white);\n  Pools.free(lay);\n  Draw.reset();\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 590,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mode == Mode.health",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 47,
    "startColumnNumber" : 15,
    "endLineNumber" : 47,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 62,
    "startColumnNumber" : 21,
    "endLineNumber" : 62,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 77,
    "startColumnNumber" : 21,
    "endLineNumber" : 77,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}