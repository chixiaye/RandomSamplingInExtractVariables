{
  "id" : 413,
  "expression" : "h",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 288,
      "startColumnNumber" : 6,
      "endLineNumber" : 288,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 288,
        "startColumnNumber" : 6,
        "endLineNumber" : 288,
        "endColumnNumber" : 70
      },
      "nodeContext" : "h.method(method != HttpMethod.OTHER ? method.name() : rawMethod)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 288,
        "startColumnNumber" : 6,
        "endLineNumber" : 288,
        "endColumnNumber" : 71
      },
      "nodeContext" : "h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 288,
        "startColumnNumber" : 6,
        "endLineNumber" : 288,
        "endColumnNumber" : 71
      },
      "nodeContext" : "h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 293,
      "startColumnNumber" : 8,
      "endLineNumber" : 293,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 31
      },
      "nodeContext" : "h.authority(hostHeader)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 32
      },
      "nodeContext" : "h.authority(hostHeader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 289,
        "startColumnNumber" : 40,
        "endLineNumber" : 294,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (hostHeader == null) {\n    throw new IllegalArgumentException(\"Missing :authority / host header\");\n  }\n  h.authority(hostHeader);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (method == HttpMethod.CONNECT) {\n  if (hostHeader == null) {\n    throw new IllegalArgumentException(\"Missing :authority / host header\");\n  }\n  h.authority(hostHeader);\n}\n else {\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 32
      },
      "nodeContext" : "h.authority(hostHeader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 295,
      "startColumnNumber" : 8,
      "endLineNumber" : 295,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 295,
        "endColumnNumber" : 19
      },
      "nodeContext" : "h.path(uri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 295,
        "endColumnNumber" : 20
      },
      "nodeContext" : "h.path(uri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 294,
        "startColumnNumber" : 13,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (method == HttpMethod.CONNECT) {\n  if (hostHeader == null) {\n    throw new IllegalArgumentException(\"Missing :authority / host header\");\n  }\n  h.authority(hostHeader);\n}\n else {\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 295,
        "endColumnNumber" : 20
      },
      "nodeContext" : "h.path(uri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 296,
      "startColumnNumber" : 8,
      "endLineNumber" : 296,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 25
      },
      "nodeContext" : "h.scheme(\"https\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 26
      },
      "nodeContext" : "h.scheme(\"https\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 294,
        "startColumnNumber" : 13,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (method == HttpMethod.CONNECT) {\n  if (hostHeader == null) {\n    throw new IllegalArgumentException(\"Missing :authority / host header\");\n  }\n  h.authority(hostHeader);\n}\n else {\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 26
      },
      "nodeContext" : "h.scheme(\"https\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 298,
      "startColumnNumber" : 10,
      "endLineNumber" : 298,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 298,
        "startColumnNumber" : 10,
        "endLineNumber" : 298,
        "endColumnNumber" : 33
      },
      "nodeContext" : "h.authority(hostHeader)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 298,
        "startColumnNumber" : 10,
        "endLineNumber" : 298,
        "endColumnNumber" : 34
      },
      "nodeContext" : "h.authority(hostHeader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 297,
        "startColumnNumber" : 32,
        "endLineNumber" : 299,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  h.authority(hostHeader);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 299,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hostHeader != null) {\n  h.authority(hostHeader);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 294,
        "startColumnNumber" : 13,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (method == HttpMethod.CONNECT) {\n  if (hostHeader == null) {\n    throw new IllegalArgumentException(\"Missing :authority / host header\");\n  }\n  h.authority(hostHeader);\n}\n else {\n  h.path(uri);\n  h.scheme(\"https\");\n  if (hostHeader != null) {\n    h.authority(hostHeader);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 298,
        "startColumnNumber" : 10,
        "endLineNumber" : 298,
        "endColumnNumber" : 34
      },
      "nodeContext" : "h.authority(hostHeader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 303,
      "startColumnNumber" : 10,
      "endLineNumber" : 303,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 303,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 84
      },
      "nodeContext" : "h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 303,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 85
      },
      "nodeContext" : "h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 302,
        "startColumnNumber" : 57,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,String> header : headers) {\n  h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 301,
        "startColumnNumber" : 49,
        "endLineNumber" : 305,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  Map.Entry<String,String> header : headers) {\n    h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 301,
        "startColumnNumber" : 6,
        "endLineNumber" : 305,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (headers != null && headers.size() > 0) {\n  for (  Map.Entry<String,String> header : headers) {\n    h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 303,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 85
      },
      "nodeContext" : "h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 306,
      "startColumnNumber" : 70,
      "endLineNumber" : 306,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 306,
        "startColumnNumber" : 70,
        "endLineNumber" : 306,
        "endColumnNumber" : 108
      },
      "nodeContext" : "h.get(HttpHeaderNames.ACCEPT_ENCODING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 306,
        "startColumnNumber" : 70,
        "endLineNumber" : 306,
        "endColumnNumber" : 116
      },
      "nodeContext" : "h.get(HttpHeaderNames.ACCEPT_ENCODING) == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 306,
        "startColumnNumber" : 10,
        "endLineNumber" : 306,
        "endColumnNumber" : 116
      },
      "nodeContext" : "conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 306,
        "startColumnNumber" : 6,
        "endLineNumber" : 308,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n  h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 306,
        "startColumnNumber" : 10,
        "endLineNumber" : 306,
        "endColumnNumber" : 116
      },
      "nodeContext" : "conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 307,
      "startColumnNumber" : 8,
      "endLineNumber" : 307,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 307,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 60
      },
      "nodeContext" : "h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 307,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 61
      },
      "nodeContext" : "h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 306,
        "startColumnNumber" : 118,
        "endLineNumber" : 308,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 306,
        "startColumnNumber" : 6,
        "endLineNumber" : 308,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n  h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 307,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 61
      },
      "nodeContext" : "h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  }, {
    "nodeContext" : "h",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 312,
      "startColumnNumber" : 19,
      "endLineNumber" : 312,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 312,
        "startColumnNumber" : 6,
        "endLineNumber" : 312,
        "endColumnNumber" : 45
      },
      "nodeContext" : "writeHeaders(h,end && content == null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 312,
        "startColumnNumber" : 6,
        "endLineNumber" : 312,
        "endColumnNumber" : 46
      },
      "nodeContext" : "writeHeaders(h,end && content == null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 286,
        "startColumnNumber" : 170,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void writeHeadWithContent(HttpMethod method,String rawMethod,String uri,MultiMap headers,String hostHeader,boolean chunked,ByteBuf content,boolean end){\n  Http2Headers h=new DefaultHttp2Headers();\n  h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);\n  if (method == HttpMethod.CONNECT) {\n    if (hostHeader == null) {\n      throw new IllegalArgumentException(\"Missing :authority / host header\");\n    }\n    h.authority(hostHeader);\n  }\n else {\n    h.path(uri);\n    h.scheme(\"https\");\n    if (hostHeader != null) {\n      h.authority(hostHeader);\n    }\n  }\n  if (headers != null && headers.size() > 0) {\n    for (    Map.Entry<String,String> header : headers) {\n      h.add(Http2HeadersAdaptor.toLowerCase(header.getKey()),header.getValue());\n    }\n  }\n  if (conn.http2Pool.client.getOptions().isTryUseCompression() && h.get(HttpHeaderNames.ACCEPT_ENCODING) == null) {\n    h.set(HttpHeaderNames.ACCEPT_ENCODING,DEFLATE_GZIP);\n  }\n  if (conn.metrics.isEnabled()) {\n    request.metric(conn.metrics.requestBegin(conn.metric,conn.localAddress(),conn.remoteAddress(),request));\n  }\n  writeHeaders(h,end && content == null);\n  if (content != null) {\n    writeBuffer(content,end);\n  }\n else {\n    handlerContext.flush();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 312,
        "startColumnNumber" : 6,
        "endLineNumber" : 312,
        "endColumnNumber" : 46
      },
      "nodeContext" : "writeHeaders(h,end && content == null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.impl.Http2Headers"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 288,
    "startColumnNumber" : 6,
    "endLineNumber" : 288,
    "endColumnNumber" : 7
  }, {
    "charLength" : 1,
    "startLineNumber" : 293,
    "startColumnNumber" : 8,
    "endLineNumber" : 293,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 295,
    "startColumnNumber" : 8,
    "endLineNumber" : 295,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 296,
    "startColumnNumber" : 8,
    "endLineNumber" : 296,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 298,
    "startColumnNumber" : 10,
    "endLineNumber" : 298,
    "endColumnNumber" : 11
  }, {
    "charLength" : 1,
    "startLineNumber" : 303,
    "startColumnNumber" : 10,
    "endLineNumber" : 303,
    "endColumnNumber" : 11
  }, {
    "charLength" : 1,
    "startLineNumber" : 306,
    "startColumnNumber" : 70,
    "endLineNumber" : 306,
    "endColumnNumber" : 71
  }, {
    "charLength" : 1,
    "startLineNumber" : 307,
    "startColumnNumber" : 8,
    "endLineNumber" : 307,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 312,
    "startColumnNumber" : 19,
    "endLineNumber" : 312,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  } ]
}