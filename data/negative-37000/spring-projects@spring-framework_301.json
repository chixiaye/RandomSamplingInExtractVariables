{
  "id" : 301,
  "expression" : "\" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-beans/src/main/java/org/springframework/beans/TypeMismatchException.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 72,
      "startColumnNumber" : 4,
      "endLineNumber" : 72,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 71,
        "startColumnNumber" : 5,
        "endLineNumber" : 72,
        "endColumnNumber" : 80
      },
      "nodeContext" : "requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperConstructorInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "\"Failed to convert property value of type '\" + ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + \"'\"+ (requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\")+ (propertyChangeEvent.getPropertyName() != null ? \" for property '\" + propertyChangeEvent.getPropertyName() + \"'\" : \"\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 11
      },
      "nodeContext" : "super(propertyChangeEvent,\"Failed to convert property value of type '\" + ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + \"'\"+ (requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\")+ (propertyChangeEvent.getPropertyName() != null ? \" for property '\" + propertyChangeEvent.getPropertyName() + \"'\" : \"\"),cause);\n",
      "nodeType" : "SuperConstructorInvocation",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 561,
        "startLineNumber" : 66,
        "startColumnNumber" : 30,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super(propertyChangeEvent,\"Failed to convert property value of type '\" + ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + \"'\"+ (requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\")+ (propertyChangeEvent.getPropertyName() != null ? \" for property '\" + propertyChangeEvent.getPropertyName() + \"'\" : \"\"),cause);\n  this.propertyName=propertyChangeEvent.getPropertyName();\n  this.value=propertyChangeEvent.getNewValue();\n  this.requiredType=requiredType;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Create a new  {@code TypeMismatchException}.\n * @param propertyChangeEvent the PropertyChangeEvent that resulted in the problem\n * @param requiredType the required target type (or {@code null} if not known)\n * @param cause the root cause (may be {@code null})\n */\npublic TypeMismatchException(PropertyChangeEvent propertyChangeEvent,@Nullable Class<?> requiredType,@Nullable Throwable cause){\n  super(propertyChangeEvent,\"Failed to convert property value of type '\" + ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + \"'\"+ (requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\")+ (propertyChangeEvent.getPropertyName() != null ? \" for property '\" + propertyChangeEvent.getPropertyName() + \"'\" : \"\"),cause);\n  this.propertyName=propertyChangeEvent.getPropertyName();\n  this.value=propertyChangeEvent.getNewValue();\n  this.requiredType=requiredType;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 71,
        "startColumnNumber" : 5,
        "endLineNumber" : 72,
        "endColumnNumber" : 80
      },
      "nodeContext" : "requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 71,
    "startLineNumber" : 72,
    "startColumnNumber" : 4,
    "endLineNumber" : 72,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}