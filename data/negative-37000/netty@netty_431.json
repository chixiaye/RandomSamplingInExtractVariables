{
  "id" : 431,
  "expression" : "new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1))",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/compression/PerFrameDeflateEncoderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 107,
      "startLineNumber" : 115,
      "startColumnNumber" : 38,
      "endLineNumber" : 116,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 11,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 115,
        "startColumnNumber" : 29,
        "endLineNumber" : 116,
        "endColumnNumber" : 74
      },
      "nodeContext" : "frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 75
      },
      "nodeContext" : "BinaryWebSocketFrame frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3347,
        "startLineNumber" : 102,
        "startColumnNumber" : 39,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EmbeddedChannel encoderChannel=new EmbeddedChannel(new PerFrameDeflateEncoder(9,15,false));\n  EmbeddedChannel decoderChannel=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));\n  byte[] payload1=new byte[100];\n  random.nextBytes(payload1);\n  byte[] payload2=new byte[100];\n  random.nextBytes(payload2);\n  byte[] payload3=new byte[100];\n  random.nextBytes(payload3);\n  BinaryWebSocketFrame frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1));\n  ContinuationWebSocketFrame frame2=new ContinuationWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload2));\n  ContinuationWebSocketFrame frame3=new ContinuationWebSocketFrame(true,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload3));\n  assertTrue(encoderChannel.writeOutbound(frame1));\n  assertTrue(encoderChannel.writeOutbound(frame2));\n  assertTrue(encoderChannel.writeOutbound(frame3));\n  BinaryWebSocketFrame compressedFrame1=encoderChannel.readOutbound();\n  ContinuationWebSocketFrame compressedFrame2=encoderChannel.readOutbound();\n  ContinuationWebSocketFrame compressedFrame3=encoderChannel.readOutbound();\n  assertNotNull(compressedFrame1);\n  assertNotNull(compressedFrame2);\n  assertNotNull(compressedFrame3);\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame1.rsv());\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame2.rsv());\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame3.rsv());\n  assertFalse(compressedFrame1.isFinalFragment());\n  assertFalse(compressedFrame2.isFinalFragment());\n  assertTrue(compressedFrame3.isFinalFragment());\n  assertTrue(decoderChannel.writeInbound(compressedFrame1.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload1=decoderChannel.readInbound();\n  byte[] finalPayload1=new byte[100];\n  uncompressedPayload1.readBytes(finalPayload1);\n  assertArrayEquals(finalPayload1,payload1);\n  uncompressedPayload1.release();\n  assertTrue(decoderChannel.writeInbound(compressedFrame2.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload2=decoderChannel.readInbound();\n  byte[] finalPayload2=new byte[100];\n  uncompressedPayload2.readBytes(finalPayload2);\n  assertArrayEquals(finalPayload2,payload2);\n  uncompressedPayload2.release();\n  assertTrue(decoderChannel.writeInbound(compressedFrame3.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload3=decoderChannel.readInbound();\n  byte[] finalPayload3=new byte[100];\n  uncompressedPayload3.readBytes(finalPayload3);\n  assertArrayEquals(finalPayload3,payload3);\n  uncompressedPayload3.release();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3393,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFramementedFrame(){\n  EmbeddedChannel encoderChannel=new EmbeddedChannel(new PerFrameDeflateEncoder(9,15,false));\n  EmbeddedChannel decoderChannel=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));\n  byte[] payload1=new byte[100];\n  random.nextBytes(payload1);\n  byte[] payload2=new byte[100];\n  random.nextBytes(payload2);\n  byte[] payload3=new byte[100];\n  random.nextBytes(payload3);\n  BinaryWebSocketFrame frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1));\n  ContinuationWebSocketFrame frame2=new ContinuationWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload2));\n  ContinuationWebSocketFrame frame3=new ContinuationWebSocketFrame(true,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload3));\n  assertTrue(encoderChannel.writeOutbound(frame1));\n  assertTrue(encoderChannel.writeOutbound(frame2));\n  assertTrue(encoderChannel.writeOutbound(frame3));\n  BinaryWebSocketFrame compressedFrame1=encoderChannel.readOutbound();\n  ContinuationWebSocketFrame compressedFrame2=encoderChannel.readOutbound();\n  ContinuationWebSocketFrame compressedFrame3=encoderChannel.readOutbound();\n  assertNotNull(compressedFrame1);\n  assertNotNull(compressedFrame2);\n  assertNotNull(compressedFrame3);\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame1.rsv());\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame2.rsv());\n  assertEquals(WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedFrame3.rsv());\n  assertFalse(compressedFrame1.isFinalFragment());\n  assertFalse(compressedFrame2.isFinalFragment());\n  assertTrue(compressedFrame3.isFinalFragment());\n  assertTrue(decoderChannel.writeInbound(compressedFrame1.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload1=decoderChannel.readInbound();\n  byte[] finalPayload1=new byte[100];\n  uncompressedPayload1.readBytes(finalPayload1);\n  assertArrayEquals(finalPayload1,payload1);\n  uncompressedPayload1.release();\n  assertTrue(decoderChannel.writeInbound(compressedFrame2.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload2=decoderChannel.readInbound();\n  byte[] finalPayload2=new byte[100];\n  uncompressedPayload2.readBytes(finalPayload2);\n  assertArrayEquals(finalPayload2,payload2);\n  uncompressedPayload2.release();\n  assertTrue(decoderChannel.writeInbound(compressedFrame3.content()));\n  assertTrue(decoderChannel.writeInbound(DeflateDecoder.FRAME_TAIL.duplicate()));\n  ByteBuf uncompressedPayload3=decoderChannel.readInbound();\n  byte[] finalPayload3=new byte[100];\n  uncompressedPayload3.readBytes(finalPayload3);\n  assertArrayEquals(finalPayload3,payload3);\n  uncompressedPayload3.release();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 75
      },
      "nodeContext" : "BinaryWebSocketFrame frame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV3,Unpooled.wrappedBuffer(payload1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame"
  } ],
  "positionList" : [ {
    "charLength" : 107,
    "startLineNumber" : 115,
    "startColumnNumber" : 38,
    "endLineNumber" : 116,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}