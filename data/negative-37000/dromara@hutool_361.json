{
  "id" : 361,
  "expression" : "c == '<'",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-json/src/main/java/cn/hutool/json/XMLTokener.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c == '<'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 75,
      "startColumnNumber" : 6,
      "endLineNumber" : 75,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (c == '<') {\n  return XML.LT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 66,
        "startColumnNumber" : 50,
        "endLineNumber" : 91,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  char c;\n  StringBuilder sb;\n  do {\n    c=next();\n  }\n while (Character.isWhitespace(c));\n  if (c == 0) {\n    return null;\n  }\n  if (c == '<') {\n    return XML.LT;\n  }\n  sb=new StringBuilder();\n  for (; ; ) {\n    if (c == '<' || c == 0) {\n      back();\n      return sb.toString().trim();\n    }\n    if (c == '&') {\n      sb.append(nextEntity(c));\n    }\n else {\n      sb.append(c);\n    }\n    c=next();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 91,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get the next XML outer token, trimming whitespace. There are two kinds of tokens: the '&gt;' character which begins a markup tag, and the content text between markup tags.\n * @return A string, or a '&gt;' Character, or null if there is no more source text.\n * @throws JSONException JSON\n */\npublic Object nextContent() throws JSONException {\n  char c;\n  StringBuilder sb;\n  do {\n    c=next();\n  }\n while (Character.isWhitespace(c));\n  if (c == 0) {\n    return null;\n  }\n  if (c == '<') {\n    return XML.LT;\n  }\n  sb=new StringBuilder();\n  for (; ; ) {\n    if (c == '<' || c == 0) {\n      back();\n      return sb.toString().trim();\n    }\n    if (c == '&') {\n      sb.append(nextEntity(c));\n    }\n else {\n      sb.append(c);\n    }\n    c=next();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 94,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (c == '<') {\n  return XML.LT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "c == '<'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 80,
      "startColumnNumber" : 7,
      "endLineNumber" : 80,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 25
      },
      "nodeContext" : "c == '<' || c == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 80,
        "startColumnNumber" : 3,
        "endLineNumber" : 83,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (c == '<' || c == 0) {\n  back();\n  return sb.toString().trim();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 79,
        "startColumnNumber" : 13,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (c == '<' || c == 0) {\n    back();\n    return sb.toString().trim();\n  }\n  if (c == '&') {\n    sb.append(nextEntity(c));\n  }\n else {\n    sb.append(c);\n  }\n  c=next();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (; ; ) {\n  if (c == '<' || c == 0) {\n    back();\n    return sb.toString().trim();\n  }\n  if (c == '&') {\n    sb.append(nextEntity(c));\n  }\n else {\n    sb.append(c);\n  }\n  c=next();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 66,
        "startColumnNumber" : 50,
        "endLineNumber" : 91,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  char c;\n  StringBuilder sb;\n  do {\n    c=next();\n  }\n while (Character.isWhitespace(c));\n  if (c == 0) {\n    return null;\n  }\n  if (c == '<') {\n    return XML.LT;\n  }\n  sb=new StringBuilder();\n  for (; ; ) {\n    if (c == '<' || c == 0) {\n      back();\n      return sb.toString().trim();\n    }\n    if (c == '&') {\n      sb.append(nextEntity(c));\n    }\n else {\n      sb.append(c);\n    }\n    c=next();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 91,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get the next XML outer token, trimming whitespace. There are two kinds of tokens: the '&gt;' character which begins a markup tag, and the content text between markup tags.\n * @return A string, or a '&gt;' Character, or null if there is no more source text.\n * @throws JSONException JSON\n */\npublic Object nextContent() throws JSONException {\n  char c;\n  StringBuilder sb;\n  do {\n    c=next();\n  }\n while (Character.isWhitespace(c));\n  if (c == 0) {\n    return null;\n  }\n  if (c == '<') {\n    return XML.LT;\n  }\n  sb=new StringBuilder();\n  for (; ; ) {\n    if (c == '<' || c == 0) {\n      back();\n      return sb.toString().trim();\n    }\n    if (c == '&') {\n      sb.append(nextEntity(c));\n    }\n else {\n      sb.append(c);\n    }\n    c=next();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 94,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 25
      },
      "nodeContext" : "c == '<' || c == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 75,
    "startColumnNumber" : 6,
    "endLineNumber" : 75,
    "endColumnNumber" : 14
  }, {
    "charLength" : 8,
    "startLineNumber" : 80,
    "startColumnNumber" : 7,
    "endLineNumber" : 80,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}