{
  "id" : 244,
  "expression" : "groups",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/legacy/PApplet.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 480,
      "startColumnNumber" : 8,
      "endLineNumber" : 480,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 480,
        "startColumnNumber" : 8,
        "endLineNumber" : 480,
        "endColumnNumber" : 17
      },
      "nodeContext" : "groups[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 480,
        "startColumnNumber" : 8,
        "endLineNumber" : 480,
        "endColumnNumber" : 30
      },
      "nodeContext" : "groups[i]=m.group(i)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 480,
        "startColumnNumber" : 8,
        "endLineNumber" : 480,
        "endColumnNumber" : 31
      },
      "nodeContext" : "groups[i]=m.group(i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 479,
        "startColumnNumber" : 38,
        "endLineNumber" : 481,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  groups[i]=m.group(i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 479,
        "startColumnNumber" : 6,
        "endLineNumber" : 481,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  groups[i]=m.group(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 477,
        "startColumnNumber" : 21,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] groups=new String[count];\n  for (int i=0; i < count; i++) {\n    groups[i]=m.group(i);\n  }\n  results.add(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (m.find()) {\n  String[] groups=new String[count];\n  for (int i=0; i < count; i++) {\n    groups[i]=m.group(i);\n  }\n  results.add(groups);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 472,
        "startColumnNumber" : 64,
        "endLineNumber" : 492,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Pattern p=Pattern.compile(regexp,Pattern.MULTILINE | Pattern.DOTALL);\n  Matcher m=p.matcher(what);\n  ArrayList<String[]> results=new ArrayList<String[]>();\n  int count=m.groupCount() + 1;\n  while (m.find()) {\n    String[] groups=new String[count];\n    for (int i=0; i < count; i++) {\n      groups[i]=m.group(i);\n    }\n    results.add(groups);\n  }\n  if (results.isEmpty()) {\n    return null;\n  }\n  String[][] matches=new String[results.size()][count];\n  for (int i=0; i < matches.length; i++) {\n    matches[i]=(String[])results.get(i);\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 468,
        "startColumnNumber" : 2,
        "endLineNumber" : 492,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Identical to match(), except that it returns an array of all matches in the specified String, rather than just the first.\n */\nstatic public String[][] matchAll(String what,String regexp){\n  Pattern p=Pattern.compile(regexp,Pattern.MULTILINE | Pattern.DOTALL);\n  Matcher m=p.matcher(what);\n  ArrayList<String[]> results=new ArrayList<String[]>();\n  int count=m.groupCount() + 1;\n  while (m.find()) {\n    String[] groups=new String[count];\n    for (int i=0; i < count; i++) {\n      groups[i]=m.group(i);\n    }\n    results.add(groups);\n  }\n  if (results.isEmpty()) {\n    return null;\n  }\n  String[][] matches=new String[results.size()][count];\n  for (int i=0; i < matches.length; i++) {\n    matches[i]=(String[])results.get(i);\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 480,
        "startColumnNumber" : 8,
        "endLineNumber" : 480,
        "endColumnNumber" : 31
      },
      "nodeContext" : "groups[i]=m.group(i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 482,
      "startColumnNumber" : 18,
      "endLineNumber" : 482,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 482,
        "startColumnNumber" : 6,
        "endLineNumber" : 482,
        "endColumnNumber" : 25
      },
      "nodeContext" : "results.add(groups)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 482,
        "startColumnNumber" : 6,
        "endLineNumber" : 482,
        "endColumnNumber" : 26
      },
      "nodeContext" : "results.add(groups);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 477,
        "startColumnNumber" : 21,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] groups=new String[count];\n  for (int i=0; i < count; i++) {\n    groups[i]=m.group(i);\n  }\n  results.add(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 483,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (m.find()) {\n  String[] groups=new String[count];\n  for (int i=0; i < count; i++) {\n    groups[i]=m.group(i);\n  }\n  results.add(groups);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 472,
        "startColumnNumber" : 64,
        "endLineNumber" : 492,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Pattern p=Pattern.compile(regexp,Pattern.MULTILINE | Pattern.DOTALL);\n  Matcher m=p.matcher(what);\n  ArrayList<String[]> results=new ArrayList<String[]>();\n  int count=m.groupCount() + 1;\n  while (m.find()) {\n    String[] groups=new String[count];\n    for (int i=0; i < count; i++) {\n      groups[i]=m.group(i);\n    }\n    results.add(groups);\n  }\n  if (results.isEmpty()) {\n    return null;\n  }\n  String[][] matches=new String[results.size()][count];\n  for (int i=0; i < matches.length; i++) {\n    matches[i]=(String[])results.get(i);\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 468,
        "startColumnNumber" : 2,
        "endLineNumber" : 492,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Identical to match(), except that it returns an array of all matches in the specified String, rather than just the first.\n */\nstatic public String[][] matchAll(String what,String regexp){\n  Pattern p=Pattern.compile(regexp,Pattern.MULTILINE | Pattern.DOTALL);\n  Matcher m=p.matcher(what);\n  ArrayList<String[]> results=new ArrayList<String[]>();\n  int count=m.groupCount() + 1;\n  while (m.find()) {\n    String[] groups=new String[count];\n    for (int i=0; i < count; i++) {\n      groups[i]=m.group(i);\n    }\n    results.add(groups);\n  }\n  if (results.isEmpty()) {\n    return null;\n  }\n  String[][] matches=new String[results.size()][count];\n  for (int i=0; i < matches.length; i++) {\n    matches[i]=(String[])results.get(i);\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 482,
        "startColumnNumber" : 6,
        "endLineNumber" : 482,
        "endColumnNumber" : 26
      },
      "nodeContext" : "results.add(groups);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 480,
    "startColumnNumber" : 8,
    "endLineNumber" : 480,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 482,
    "startColumnNumber" : 18,
    "endLineNumber" : 482,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}