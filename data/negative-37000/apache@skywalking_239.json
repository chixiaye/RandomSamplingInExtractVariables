{
  "id" : 239,
  "expression" : "10",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/common/AtomicRangeIntegerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 37,
      "startColumnNumber" : 63,
      "endLineNumber" : 37,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 37,
        "startColumnNumber" : 37,
        "endLineNumber" : 37,
        "endColumnNumber" : 66
      },
      "nodeContext" : "new AtomicRangeInteger(0,10)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 37,
        "startColumnNumber" : 27,
        "endLineNumber" : 37,
        "endColumnNumber" : 66
      },
      "nodeContext" : "atomicI=new AtomicRangeInteger(0,10)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 67
      },
      "nodeContext" : "AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 36,
        "startColumnNumber" : 38,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n  for (int i=0; i < 10; i++) {\n    Assert.assertEquals(i,atomicI.getAndIncrement());\n  }\n  Assert.assertEquals(0,atomicI.getAndIncrement());\n  Assert.assertEquals(1,atomicI.get());\n  Assert.assertEquals(1,atomicI.intValue());\n  Assert.assertEquals(1,atomicI.longValue());\n  Assert.assertEquals(1,(int)atomicI.floatValue());\n  Assert.assertEquals(1,(int)atomicI.doubleValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetAndIncrement(){\n  AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n  for (int i=0; i < 10; i++) {\n    Assert.assertEquals(i,atomicI.getAndIncrement());\n  }\n  Assert.assertEquals(0,atomicI.getAndIncrement());\n  Assert.assertEquals(1,atomicI.get());\n  Assert.assertEquals(1,atomicI.intValue());\n  Assert.assertEquals(1,atomicI.longValue());\n  Assert.assertEquals(1,(int)atomicI.floatValue());\n  Assert.assertEquals(1,(int)atomicI.doubleValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 67
      },
      "nodeContext" : "AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 38,
      "startColumnNumber" : 28,
      "endLineNumber" : 38,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 38,
        "startColumnNumber" : 24,
        "endLineNumber" : 38,
        "endColumnNumber" : 30
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 10; i++) {\n  Assert.assertEquals(i,atomicI.getAndIncrement());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 36,
        "startColumnNumber" : 38,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n  for (int i=0; i < 10; i++) {\n    Assert.assertEquals(i,atomicI.getAndIncrement());\n  }\n  Assert.assertEquals(0,atomicI.getAndIncrement());\n  Assert.assertEquals(1,atomicI.get());\n  Assert.assertEquals(1,atomicI.intValue());\n  Assert.assertEquals(1,atomicI.longValue());\n  Assert.assertEquals(1,(int)atomicI.floatValue());\n  Assert.assertEquals(1,(int)atomicI.doubleValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetAndIncrement(){\n  AtomicRangeInteger atomicI=new AtomicRangeInteger(0,10);\n  for (int i=0; i < 10; i++) {\n    Assert.assertEquals(i,atomicI.getAndIncrement());\n  }\n  Assert.assertEquals(0,atomicI.getAndIncrement());\n  Assert.assertEquals(1,atomicI.get());\n  Assert.assertEquals(1,atomicI.intValue());\n  Assert.assertEquals(1,atomicI.longValue());\n  Assert.assertEquals(1,(int)atomicI.floatValue());\n  Assert.assertEquals(1,(int)atomicI.doubleValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 38,
        "startColumnNumber" : 24,
        "endLineNumber" : 38,
        "endColumnNumber" : 30
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 37,
    "startColumnNumber" : 63,
    "endLineNumber" : 37,
    "endColumnNumber" : 65
  }, {
    "charLength" : 2,
    "startLineNumber" : 38,
    "startColumnNumber" : 28,
    "endLineNumber" : 38,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}