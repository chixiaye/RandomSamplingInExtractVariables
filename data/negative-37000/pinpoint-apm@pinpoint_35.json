{
  "id" : 35,
  "expression" : "\"span target parent:{} {} -> span:{} {}\"",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/web/src/main/java/com/navercorp/pinpoint/web/service/FilteredMapServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"span target parent:{} {} -> span:{} {}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 342,
      "startColumnNumber" : 37,
      "endLineNumber" : 342,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 342,
        "startColumnNumber" : 24,
        "endLineNumber" : 342,
        "endColumnNumber" : 152
      },
      "nodeContext" : "logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 342,
        "startColumnNumber" : 24,
        "endLineNumber" : 342,
        "endColumnNumber" : 153
      },
      "nodeContext" : "logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 341,
        "startColumnNumber" : 49,
        "endLineNumber" : 343,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 341,
        "startColumnNumber" : 20,
        "endLineNumber" : 343,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (logger.isTraceEnabled()) {\n  logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 339,
        "startColumnNumber" : 23,
        "endLineNumber" : 346,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n  }\n  final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n  targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 325,
        "startColumnNumber" : 16,
        "endLineNumber" : 346,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (parentApplication.getServiceType() == ServiceType.USER) {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n  }\n  final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n  sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n  }\n  final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n  targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n}\n else {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n  }\n  final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n  targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3091,
        "startLineNumber" : 307,
        "startColumnNumber" : 44,
        "endLineNumber" : 353,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final Application parentApplication=createParentApplication(span,transactionSpanMap);\n  final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n  recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n  if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n    logger.warn(\"invalid span application:{}\",spanApplication);\n    continue;\n  }\n  final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n  long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n  if (parentApplication.getServiceType() == ServiceType.USER) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n    sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n    targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n  }\n else {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n    targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n  }\n  if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n    continue;\n  }\n  addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3123,
        "startLineNumber" : 307,
        "startColumnNumber" : 12,
        "endLineNumber" : 353,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (SpanBo span : transaction) {\n  final Application parentApplication=createParentApplication(span,transactionSpanMap);\n  final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n  recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n  if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n    logger.warn(\"invalid span application:{}\",spanApplication);\n    continue;\n  }\n  final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n  long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n  if (parentApplication.getServiceType() == ServiceType.USER) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n    sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n    targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n  }\n else {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n    }\n    final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n    targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n  }\n  if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n    continue;\n  }\n  addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 239,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 304,
        "startColumnNumber" : 52,
        "endLineNumber" : 354,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);\n  for (  SpanBo span : transaction) {\n    final Application parentApplication=createParentApplication(span,transactionSpanMap);\n    final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n    recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n    if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n      logger.warn(\"invalid span application:{}\",spanApplication);\n      continue;\n    }\n    final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n    long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n    if (parentApplication.getServiceType() == ServiceType.USER) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n      sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n      targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n      targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    }\n    if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n      continue;\n    }\n    addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3285,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (List<SpanBo> transaction : filterList) {\n  final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);\n  for (  SpanBo span : transaction) {\n    final Application parentApplication=createParentApplication(span,transactionSpanMap);\n    final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n    recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n    if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n      logger.warn(\"invalid span application:{}\",spanApplication);\n      continue;\n    }\n    final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n    long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n    if (parentApplication.getServiceType() == ServiceType.USER) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n      sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n      targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n      }\n      final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n      targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n    }\n    if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n      continue;\n    }\n    addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4071,
        "startLineNumber" : 292,
        "startColumnNumber" : 98,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TimeWindow window=new TimeWindow(range,TimeWindowDownSampler.SAMPLER);\n  final LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();\n  final ResponseHistogramBuilder mapHistogramSummary=new ResponseHistogramBuilder(range);\n  for (  List<SpanBo> transaction : filterList) {\n    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);\n    for (    SpanBo span : transaction) {\n      final Application parentApplication=createParentApplication(span,transactionSpanMap);\n      final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n      recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n      if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n        logger.warn(\"invalid span application:{}\",spanApplication);\n        continue;\n      }\n      final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n      if (parentApplication.getServiceType() == ServiceType.USER) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n        sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      }\n else {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      }\n      if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n        continue;\n      }\n      addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n    }\n  }\n  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range);\n  mapHistogramSummary.build();\n  ApplicationMap map=applicationMapBuilder.build(linkDataDuplexMap,agentInfoService,mapHistogramSummary);\n  if (serverMapDataFilter != null) {\n    map=serverMapDataFilter.dataFiltering(map);\n  }\n  return map;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4165,
        "startLineNumber" : 292,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ApplicationMap createMap(Range range,Range scanRange,List<List<SpanBo>> filterList){\n  final TimeWindow window=new TimeWindow(range,TimeWindowDownSampler.SAMPLER);\n  final LinkDataDuplexMap linkDataDuplexMap=new LinkDataDuplexMap();\n  final ResponseHistogramBuilder mapHistogramSummary=new ResponseHistogramBuilder(range);\n  for (  List<SpanBo> transaction : filterList) {\n    final Map<Long,SpanBo> transactionSpanMap=checkDuplicatedSpanId(transaction);\n    for (    SpanBo span : transaction) {\n      final Application parentApplication=createParentApplication(span,transactionSpanMap);\n      final Application spanApplication=this.applicationFactory.createApplication(span.getApplicationId(),span.getApplicationServiceType());\n      recordSpanResponseTime(spanApplication,span,mapHistogramSummary,span.getCollectorAcceptTime());\n      if (!spanApplication.getServiceType().isRecordStatistics() || spanApplication.getServiceType().isRpcClient()) {\n        logger.warn(\"invalid span application:{}\",spanApplication);\n        continue;\n      }\n      final short slotTime=getHistogramSlotTime(span,spanApplication.getServiceType());\n      long timestamp=window.refineTimestamp(span.getCollectorAcceptTime());\n      if (parentApplication.getServiceType() == ServiceType.USER) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap sourceLinkData=linkDataDuplexMap.getSourceLinkDataMap();\n        sourceLinkData.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span target user:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      }\n else {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n        }\n        final LinkDataMap targetLinkDataMap=linkDataDuplexMap.getTargetLinkDataMap();\n        targetLinkDataMap.addLinkData(parentApplication,span.getAgentId(),spanApplication,span.getAgentId(),timestamp,slotTime,1);\n      }\n      if (serverMapDataFilter != null && serverMapDataFilter.filter(spanApplication)) {\n        continue;\n      }\n      addNodeFromSpanEvent(span,window,linkDataDuplexMap,transactionSpanMap);\n    }\n  }\n  ApplicationMapBuilder applicationMapBuilder=new ApplicationMapBuilder(range);\n  mapHistogramSummary.build();\n  ApplicationMap map=applicationMapBuilder.build(linkDataDuplexMap,agentInfoService,mapHistogramSummary);\n  if (serverMapDataFilter != null) {\n    map=serverMapDataFilter.dataFiltering(map);\n  }\n  return map;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 357,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 342,
        "startColumnNumber" : 24,
        "endLineNumber" : 342,
        "endColumnNumber" : 153
      },
      "nodeContext" : "logger.trace(\"span target parent:{} {} -> span:{} {}\",parentApplication,span.getAgentId(),spanApplication,span.getAgentId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 342,
    "startColumnNumber" : 37,
    "endLineNumber" : 342,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}