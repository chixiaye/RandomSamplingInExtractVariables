{
  "id" : 12,
  "expression" : "StepVerifier",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StepVerifier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 47,
      "startColumnNumber" : 2,
      "endLineNumber" : 47,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 47
      },
      "nodeContext" : "StepVerifier.create(healthIndicator.health())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 4
      },
      "nodeContext" : "StepVerifier.create(healthIndicator.health()).consumeNextWith((h) -> {\n  assertThat(h.getStatus()).isEqualTo(Status.UP);\n  assertThat(h.getDetails()).containsOnlyKeys(\"test\");\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 21
      },
      "nodeContext" : "StepVerifier.create(healthIndicator.health()).consumeNextWith((h) -> {\n  assertThat(h.getStatus()).isEqualTo(Status.UP);\n  assertThat(h.getDetails()).containsOnlyKeys(\"test\");\n}\n).verifyComplete()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 22
      },
      "nodeContext" : "StepVerifier.create(healthIndicator.health()).consumeNextWith((h) -> {\n  assertThat(h.getStatus()).isEqualTo(Status.UP);\n  assertThat(h.getDetails()).containsOnlyKeys(\"test\");\n}\n).verifyComplete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 44,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ReactiveHealthIndicator healthIndicator=createHealthIndicator(Collections.singletonMap(\"test\",() -> Mono.just(UP)),null);\n  StepVerifier.create(healthIndicator.health()).consumeNextWith((h) -> {\n    assertThat(h.getStatus()).isEqualTo(Status.UP);\n    assertThat(h.getDetails()).containsOnlyKeys(\"test\");\n  }\n).verifyComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 43,
        "startColumnNumber" : 1,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void noHealthIndicator(){\n  ReactiveHealthIndicator healthIndicator=createHealthIndicator(Collections.singletonMap(\"test\",() -> Mono.just(UP)),null);\n  StepVerifier.create(healthIndicator.health()).consumeNextWith((h) -> {\n    assertThat(h.getStatus()).isEqualTo(Status.UP);\n    assertThat(h.getDetails()).containsOnlyKeys(\"test\");\n  }\n).verifyComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 47
      },
      "nodeContext" : "StepVerifier.create(healthIndicator.health())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 47,
    "startColumnNumber" : 2,
    "endLineNumber" : 47,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}