{
  "id" : 360,
  "expression" : "values.get(p90Index - 1)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/metrics/MetricsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "values.get(p90Index - 1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 573,
      "startColumnNumber" : 33,
      "endLineNumber" : 573,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 573,
        "startColumnNumber" : 19,
        "endLineNumber" : 573,
        "endColumnNumber" : 57
      },
      "nodeContext" : "expectedP90=values.get(p90Index - 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 573,
        "startColumnNumber" : 12,
        "endLineNumber" : 573,
        "endColumnNumber" : 58
      },
      "nodeContext" : "double expectedP90=values.get(p90Index - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1760,
        "startLineNumber" : 545,
        "startColumnNumber" : 12,
        "endLineNumber" : 578,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random prng=new Random(seed);\n  int numberOfValues=5000 + prng.nextInt(10_000);\n  Percentiles percs=new Percentiles(sizeInBytes,maximumValue,BucketSizing.LINEAR,new Percentile(metrics.metricName(\"test.p90\",\"grp1\"),90),new Percentile(metrics.metricName(\"test.p99\",\"grp1\"),99));\n  MetricConfig config=new MetricConfig().eventWindow(50).samples(2);\n  Sensor sensor=metrics.sensor(\"test\",config);\n  sensor.add(percs);\n  Metric p90=this.metrics.metrics().get(metrics.metricName(\"test.p90\",\"grp1\"));\n  Metric p99=this.metrics.metrics().get(metrics.metricName(\"test.p99\",\"grp1\"));\n  final List<Long> values=new ArrayList<>(numberOfValues);\n  for (int i=0; i < numberOfValues; ++i) {\n    long value=(Math.abs(prng.nextLong()) - 1) % maximumValue;\n    values.add(value);\n    sensor.record(value);\n  }\n  Collections.sort(values);\n  int p90Index=(int)Math.ceil(((double)(90 * numberOfValues)) / 100);\n  int p99Index=(int)Math.ceil(((double)(99 * numberOfValues)) / 100);\n  double expectedP90=values.get(p90Index - 1);\n  double expectedP99=values.get(p99Index - 1);\n  assertEquals(expectedP90,(Double)p90.metricValue(),expectedP90 / 5);\n  assertEquals(expectedP99,(Double)p99.metricValue(),expectedP99 / 5);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 545,
        "startColumnNumber" : 8,
        "endLineNumber" : 580,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Random prng=new Random(seed);\n  int numberOfValues=5000 + prng.nextInt(10_000);\n  Percentiles percs=new Percentiles(sizeInBytes,maximumValue,BucketSizing.LINEAR,new Percentile(metrics.metricName(\"test.p90\",\"grp1\"),90),new Percentile(metrics.metricName(\"test.p99\",\"grp1\"),99));\n  MetricConfig config=new MetricConfig().eventWindow(50).samples(2);\n  Sensor sensor=metrics.sensor(\"test\",config);\n  sensor.add(percs);\n  Metric p90=this.metrics.metrics().get(metrics.metricName(\"test.p90\",\"grp1\"));\n  Metric p99=this.metrics.metrics().get(metrics.metricName(\"test.p99\",\"grp1\"));\n  final List<Long> values=new ArrayList<>(numberOfValues);\n  for (int i=0; i < numberOfValues; ++i) {\n    long value=(Math.abs(prng.nextLong()) - 1) % maximumValue;\n    values.add(value);\n    sensor.record(value);\n  }\n  Collections.sort(values);\n  int p90Index=(int)Math.ceil(((double)(90 * numberOfValues)) / 100);\n  int p99Index=(int)Math.ceil(((double)(99 * numberOfValues)) / 100);\n  double expectedP90=values.get(p90Index - 1);\n  double expectedP99=values.get(p99Index - 1);\n  assertEquals(expectedP90,(Double)p90.metricValue(),expectedP90 / 5);\n  assertEquals(expectedP99,(Double)p99.metricValue(),expectedP99 / 5);\n}\n catch (AssertionError e) {\n  throw new AssertionError(\"Assertion failed in randomized test. Reproduce with seed = \" + seed + \" .\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 268,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2125,
        "startLineNumber" : 540,
        "startColumnNumber" : 69,
        "endLineNumber" : 581,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long seed=new Random().nextLong();\n  int sizeInBytes=100 * 1000;\n  long maximumValue=1000 * 24 * 60* 60* 1000L;\n  try {\n    Random prng=new Random(seed);\n    int numberOfValues=5000 + prng.nextInt(10_000);\n    Percentiles percs=new Percentiles(sizeInBytes,maximumValue,BucketSizing.LINEAR,new Percentile(metrics.metricName(\"test.p90\",\"grp1\"),90),new Percentile(metrics.metricName(\"test.p99\",\"grp1\"),99));\n    MetricConfig config=new MetricConfig().eventWindow(50).samples(2);\n    Sensor sensor=metrics.sensor(\"test\",config);\n    sensor.add(percs);\n    Metric p90=this.metrics.metrics().get(metrics.metricName(\"test.p90\",\"grp1\"));\n    Metric p99=this.metrics.metrics().get(metrics.metricName(\"test.p99\",\"grp1\"));\n    final List<Long> values=new ArrayList<>(numberOfValues);\n    for (int i=0; i < numberOfValues; ++i) {\n      long value=(Math.abs(prng.nextLong()) - 1) % maximumValue;\n      values.add(value);\n      sensor.record(value);\n    }\n    Collections.sort(values);\n    int p90Index=(int)Math.ceil(((double)(90 * numberOfValues)) / 100);\n    int p99Index=(int)Math.ceil(((double)(99 * numberOfValues)) / 100);\n    double expectedP90=values.get(p90Index - 1);\n    double expectedP99=values.get(p99Index - 1);\n    assertEquals(expectedP90,(Double)p90.metricValue(),expectedP90 / 5);\n    assertEquals(expectedP99,(Double)p99.metricValue(),expectedP99 / 5);\n  }\n catch (  AssertionError e) {\n    throw new AssertionError(\"Assertion failed in randomized test. Reproduce with seed = \" + seed + \" .\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2200,
        "startLineNumber" : 539,
        "startColumnNumber" : 4,
        "endLineNumber" : 581,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPercentilesWithRandomNumbersAndLinearBucketing(){\n  long seed=new Random().nextLong();\n  int sizeInBytes=100 * 1000;\n  long maximumValue=1000 * 24 * 60* 60* 1000L;\n  try {\n    Random prng=new Random(seed);\n    int numberOfValues=5000 + prng.nextInt(10_000);\n    Percentiles percs=new Percentiles(sizeInBytes,maximumValue,BucketSizing.LINEAR,new Percentile(metrics.metricName(\"test.p90\",\"grp1\"),90),new Percentile(metrics.metricName(\"test.p99\",\"grp1\"),99));\n    MetricConfig config=new MetricConfig().eventWindow(50).samples(2);\n    Sensor sensor=metrics.sensor(\"test\",config);\n    sensor.add(percs);\n    Metric p90=this.metrics.metrics().get(metrics.metricName(\"test.p90\",\"grp1\"));\n    Metric p99=this.metrics.metrics().get(metrics.metricName(\"test.p99\",\"grp1\"));\n    final List<Long> values=new ArrayList<>(numberOfValues);\n    for (int i=0; i < numberOfValues; ++i) {\n      long value=(Math.abs(prng.nextLong()) - 1) % maximumValue;\n      values.add(value);\n      sensor.record(value);\n    }\n    Collections.sort(values);\n    int p90Index=(int)Math.ceil(((double)(90 * numberOfValues)) / 100);\n    int p99Index=(int)Math.ceil(((double)(99 * numberOfValues)) / 100);\n    double expectedP90=values.get(p90Index - 1);\n    double expectedP99=values.get(p99Index - 1);\n    assertEquals(expectedP90,(Double)p90.metricValue(),expectedP90 / 5);\n    assertEquals(expectedP99,(Double)p99.metricValue(),expectedP99 / 5);\n  }\n catch (  AssertionError e) {\n    throw new AssertionError(\"Assertion failed in randomized test. Reproduce with seed = \" + seed + \" .\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 301,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 573,
        "startColumnNumber" : 12,
        "endLineNumber" : 573,
        "endColumnNumber" : 58
      },
      "nodeContext" : "double expectedP90=values.get(p90Index - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.Long"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 573,
    "startColumnNumber" : 33,
    "endLineNumber" : 573,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}