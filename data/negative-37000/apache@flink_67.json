{
  "id" : 67,
  "expression" : "keyPositions2",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-core/src/main/java/org/apache/flink/api/common/operators/DualInputOperator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "keyPositions2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 92,
      "startColumnNumber" : 26,
      "endLineNumber" : 92,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 39
      },
      "nodeContext" : "this.keyFields2=keyPositions2",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.keyFields2=keyPositions2;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 89,
        "startColumnNumber" : 25,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super(stub,operatorInfo,name);\n  this.keyFields1=keyPositions1;\n  this.keyFields2=keyPositions2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a new abstract dual-input operator with the given name wrapping the given user function. This constructor is specialized only for operator that require no keys for their processing.\n * @param stub The object containing the user function.\n * @param keyPositions1 The positions of the fields in the first input that act as keys.\n * @param keyPositions2 The positions of the fields in the second input that act as keys.\n * @param name The given name for the operator, used in plans, logs and progress messages.\n */\nprotected DualInputOperator(UserCodeWrapper<FT> stub,BinaryOperatorInformation<IN1,IN2,OUT> operatorInfo,int[] keyPositions1,int[] keyPositions2,String name){\n  super(stub,operatorInfo,name);\n  this.keyFields1=keyPositions1;\n  this.keyFields2=keyPositions2;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 53,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.keyFields2=keyPositions2;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 92,
    "startColumnNumber" : 26,
    "endLineNumber" : 92,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}