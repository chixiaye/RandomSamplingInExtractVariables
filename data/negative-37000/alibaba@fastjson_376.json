{
  "id" : 376,
  "expression" : "new BigInteger(\"123\")",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/DefaultExtJSONParserTest_1.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BigInteger(\"123\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 39,
      "startColumnNumber" : 17,
      "endLineNumber" : 39,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 39
      },
      "nodeContext" : "a.setF11(new BigInteger(\"123\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "a.setF11(new BigInteger(\"123\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1855,
        "startLineNumber" : 27,
        "startColumnNumber" : 44,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestEntity a=new TestEntity();\n  a.setF1(true);\n  a.setF2(Boolean.TRUE);\n  a.setF3((byte)123);\n  a.setF4((byte)123);\n  a.setF5((short)123);\n  a.setF6((short)123);\n  a.setF7((int)123);\n  a.setF8((int)123);\n  a.setF9((long)123);\n  a.setF10((long)123);\n  a.setF11(new BigInteger(\"123\"));\n  a.setF12(new BigDecimal(\"123\"));\n  a.setF13(\"abc\");\n  a.setF14(null);\n  a.setF15(12.34F);\n  a.setF16(12.35F);\n  a.setF17(12.345D);\n  a.setF18(12.345D);\n  String text=JSON.toJSONString(a);\n  System.out.println(text);\n  TestEntity b=new TestEntity();\n{\n    DefaultJSONParser parser=new DefaultJSONParser(text);\n    parser.parseObject(b);\n  }\n  Assert.assertEquals(\"f1\",a.isF1(),b.isF1());\n  Assert.assertEquals(\"f2\",a.getF2(),b.getF2());\n  Assert.assertEquals(\"f3\",a.getF3(),b.getF3());\n  Assert.assertEquals(\"f4\",a.getF4(),b.getF4());\n  Assert.assertEquals(\"f5\",a.getF5(),b.getF5());\n  Assert.assertEquals(\"f6\",a.getF6(),b.getF6());\n  Assert.assertEquals(\"f7\",a.getF7(),b.getF7());\n  Assert.assertEquals(\"f8\",a.getF8(),b.getF8());\n  Assert.assertEquals(\"f9\",a.getF9(),b.getF9());\n  Assert.assertEquals(a.getF10(),b.getF10());\n  Assert.assertEquals(a.getF11(),b.getF11());\n  Assert.assertEquals(a.getF12(),b.getF12());\n  Assert.assertEquals(a.getF13(),b.getF13());\n  Assert.assertEquals(a.getF14(),b.getF14());\n  Assert.assertEquals(a.getF15(),b.getF15());\n  Assert.assertEquals(a.getF16(),b.getF16());\n  Assert.assertEquals(a.getF17(),b.getF17());\n  Assert.assertEquals(a.getF18(),b.getF18());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1895,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void f_test_2() throws Exception {\n  TestEntity a=new TestEntity();\n  a.setF1(true);\n  a.setF2(Boolean.TRUE);\n  a.setF3((byte)123);\n  a.setF4((byte)123);\n  a.setF5((short)123);\n  a.setF6((short)123);\n  a.setF7((int)123);\n  a.setF8((int)123);\n  a.setF9((long)123);\n  a.setF10((long)123);\n  a.setF11(new BigInteger(\"123\"));\n  a.setF12(new BigDecimal(\"123\"));\n  a.setF13(\"abc\");\n  a.setF14(null);\n  a.setF15(12.34F);\n  a.setF16(12.35F);\n  a.setF17(12.345D);\n  a.setF18(12.345D);\n  String text=JSON.toJSONString(a);\n  System.out.println(text);\n  TestEntity b=new TestEntity();\n{\n    DefaultJSONParser parser=new DefaultJSONParser(text);\n    parser.parseObject(b);\n  }\n  Assert.assertEquals(\"f1\",a.isF1(),b.isF1());\n  Assert.assertEquals(\"f2\",a.getF2(),b.getF2());\n  Assert.assertEquals(\"f3\",a.getF3(),b.getF3());\n  Assert.assertEquals(\"f4\",a.getF4(),b.getF4());\n  Assert.assertEquals(\"f5\",a.getF5(),b.getF5());\n  Assert.assertEquals(\"f6\",a.getF6(),b.getF6());\n  Assert.assertEquals(\"f7\",a.getF7(),b.getF7());\n  Assert.assertEquals(\"f8\",a.getF8(),b.getF8());\n  Assert.assertEquals(\"f9\",a.getF9(),b.getF9());\n  Assert.assertEquals(a.getF10(),b.getF10());\n  Assert.assertEquals(a.getF11(),b.getF11());\n  Assert.assertEquals(a.getF12(),b.getF12());\n  Assert.assertEquals(a.getF13(),b.getF13());\n  Assert.assertEquals(a.getF14(),b.getF14());\n  Assert.assertEquals(a.getF15(),b.getF15());\n  Assert.assertEquals(a.getF16(),b.getF16());\n  Assert.assertEquals(a.getF17(),b.getF17());\n  Assert.assertEquals(a.getF18(),b.getF18());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 357,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "a.setF11(new BigInteger(\"123\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 39,
    "startColumnNumber" : 17,
    "endLineNumber" : 39,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}