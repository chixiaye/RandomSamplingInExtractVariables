{
  "id" : 119,
  "expression" : "\"sex\"",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/test/java/io/seata/rm/datasource/DataCompareUtilsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"sex\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 96,
      "startColumnNumber" : 24,
      "endLineNumber" : 96,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 30
      },
      "nodeContext" : "field12.setName(\"sex\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 31
      },
      "nodeContext" : "field12.setName(\"sex\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2394,
        "startLineNumber" : 56,
        "startColumnNumber" : 34,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableMeta tableMeta=Mockito.mock(TableMeta.class);\n  Mockito.when(tableMeta.getPkName()).thenReturn(\"pk\");\n  Mockito.when(tableMeta.getTableName()).thenReturn(\"table_name\");\n  TableRecords beforeImage=new TableRecords();\n  beforeImage.setTableName(\"table_name\");\n  beforeImage.setTableMeta(tableMeta);\n  List<Row> rows=new ArrayList<>();\n  Row row=new Row();\n  Field field01=addField(row,\"pk\",1,\"12345\");\n  Field field02=addField(row,\"age\",1,\"18\");\n  rows.add(row);\n  beforeImage.setRows(rows);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,null));\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(null,beforeImage));\n  TableRecords afterImage=new TableRecords();\n  afterImage.setTableName(\"table_name1\");\n  afterImage.setTableMeta(tableMeta);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  afterImage.setTableName(\"table_name\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  List<Row> rows2=new ArrayList<>();\n  Row row2=new Row();\n  Field field11=addField(row2,\"pk\",1,\"12345\");\n  Field field12=addField(row2,\"age\",1,\"18\");\n  rows2.add(row2);\n  afterImage.setRows(rows2);\n  Assertions.assertTrue(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field11.setValue(\"23456\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field11.setValue(\"12345\");\n  field12.setName(\"sex\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field12.setName(\"age\");\n  field12.setValue(\"19\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field12.setName(\"18\");\n  Field field3=new Field(\"pk\",1,\"12346\");\n  Row row3=new Row();\n  row3.add(field3);\n  rows2.add(row3);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  beforeImage.setRows(new ArrayList<>());\n  afterImage.setRows(new ArrayList<>());\n  Assertions.assertTrue(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2434,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void isRecordsEquals(){\n  TableMeta tableMeta=Mockito.mock(TableMeta.class);\n  Mockito.when(tableMeta.getPkName()).thenReturn(\"pk\");\n  Mockito.when(tableMeta.getTableName()).thenReturn(\"table_name\");\n  TableRecords beforeImage=new TableRecords();\n  beforeImage.setTableName(\"table_name\");\n  beforeImage.setTableMeta(tableMeta);\n  List<Row> rows=new ArrayList<>();\n  Row row=new Row();\n  Field field01=addField(row,\"pk\",1,\"12345\");\n  Field field02=addField(row,\"age\",1,\"18\");\n  rows.add(row);\n  beforeImage.setRows(rows);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,null));\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(null,beforeImage));\n  TableRecords afterImage=new TableRecords();\n  afterImage.setTableName(\"table_name1\");\n  afterImage.setTableMeta(tableMeta);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  afterImage.setTableName(\"table_name\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  List<Row> rows2=new ArrayList<>();\n  Row row2=new Row();\n  Field field11=addField(row2,\"pk\",1,\"12345\");\n  Field field12=addField(row2,\"age\",1,\"18\");\n  rows2.add(row2);\n  afterImage.setRows(rows2);\n  Assertions.assertTrue(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field11.setValue(\"23456\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field11.setValue(\"12345\");\n  field12.setName(\"sex\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field12.setName(\"age\");\n  field12.setValue(\"19\");\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  field12.setName(\"18\");\n  Field field3=new Field(\"pk\",1,\"12346\");\n  Row row3=new Row();\n  row3.add(field3);\n  rows2.add(row3);\n  Assertions.assertFalse(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n  beforeImage.setRows(new ArrayList<>());\n  afterImage.setRows(new ArrayList<>());\n  Assertions.assertTrue(DataCompareUtils.isRecordsEquals(beforeImage,afterImage));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 348,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 31
      },
      "nodeContext" : "field12.setName(\"sex\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 96,
    "startColumnNumber" : 24,
    "endLineNumber" : 96,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}