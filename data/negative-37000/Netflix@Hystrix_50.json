{
  "id" : 50,
  "expression" : "10000",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/HystrixDashboardStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 94,
      "startColumnNumber" : 31,
      "endLineNumber" : 94,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 94,
        "startColumnNumber" : 19,
        "endLineNumber" : 94,
        "endColumnNumber" : 60
      },
      "nodeContext" : "latch.await(10000,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1784,
        "startLineNumber" : 59,
        "startColumnNumber" : 53,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixDashboardStream.DashboardData>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixDashboardStream.DashboardData dashboardData){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ dashboardData.commandMetrics.size()+ \" commands\");\n      for (      HystrixCommandMetrics metrics : dashboardData.commandMetrics) {\n        if (metrics.getCommandKey().equals(commandKey)) {\n          commandShowsUp.set(true);\n        }\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1843,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testStreamHasData() throws Exception {\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixDashboardStream.DashboardData>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixDashboardStream.DashboardData dashboardData){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ dashboardData.commandMetrics.size()+ \" commands\");\n      for (      HystrixCommandMetrics metrics : dashboardData.commandMetrics) {\n        if (metrics.getCommandKey().equals(commandKey)) {\n          commandShowsUp.set(true);\n        }\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 94,
    "startColumnNumber" : 31,
    "endLineNumber" : 94,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}