{
  "id" : 218,
  "expression" : "Mode.PUNCT",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mode.PUNCT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 279,
      "startColumnNumber" : 24,
      "endLineNumber" : 279,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 279,
        "startColumnNumber" : 14,
        "endLineNumber" : 279,
        "endColumnNumber" : 34
      },
      "nodeContext" : "subMode=Mode.PUNCT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 279,
        "startColumnNumber" : 14,
        "endLineNumber" : 279,
        "endColumnNumber" : 35
      },
      "nodeContext" : "subMode=Mode.PUNCT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 278,
        "startColumnNumber" : 33,
        "endLineNumber" : 280,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  subMode=Mode.PUNCT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 709,
        "startLineNumber" : 278,
        "startColumnNumber" : 12,
        "endLineNumber" : 294,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (subModeCh == PL) {\n  subMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\n  ch=' ';\n}\n else if (subModeCh == LL) {\n  subMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\n  subMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n  result.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n  subMode=Mode.ALPHA;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 737,
        "startLineNumber" : 277,
        "startColumnNumber" : 17,
        "endLineNumber" : 295,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (subModeCh == PL) {\n    subMode=Mode.PUNCT;\n  }\n else   if (subModeCh == 26) {\n    ch=' ';\n  }\n else   if (subModeCh == LL) {\n    subMode=Mode.LOWER;\n  }\n else   if (subModeCh == AL) {\n    subMode=Mode.ALPHA;\n  }\n else   if (subModeCh == PS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.PUNCT_SHIFT;\n  }\n else   if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n    result.append((char)byteCompactionData[i]);\n  }\n else   if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n    subMode=Mode.ALPHA;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 275,
        "startColumnNumber" : 10,
        "endLineNumber" : 295,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (subModeCh < PL) {\n  ch=MIXED_CHARS[subModeCh];\n}\n else {\n  if (subModeCh == PL) {\n    subMode=Mode.PUNCT;\n  }\n else   if (subModeCh == 26) {\n    ch=' ';\n  }\n else   if (subModeCh == LL) {\n    subMode=Mode.LOWER;\n  }\n else   if (subModeCh == AL) {\n    subMode=Mode.ALPHA;\n  }\n else   if (subModeCh == PS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.PUNCT_SHIFT;\n  }\n else   if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n    result.append((char)byteCompactionData[i]);\n  }\n else   if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n    subMode=Mode.ALPHA;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4939,
        "startLineNumber" : 219,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (subMode) {\ncase ALPHA:  if (subModeCh < 26) {\n    ch=(char)('A' + subModeCh);\n  }\n else {\n    if (subModeCh == 26) {\n      ch=' ';\n    }\n else     if (subModeCh == LL) {\n      subMode=Mode.LOWER;\n    }\n else     if (subModeCh == ML) {\n      subMode=Mode.MIXED;\n    }\n else     if (subModeCh == PS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.PUNCT_SHIFT;\n    }\n else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n      result.append((char)byteCompactionData[i]);\n    }\n else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n      subMode=Mode.ALPHA;\n    }\n  }\nbreak;\ncase LOWER:if (subModeCh < 26) {\nch=(char)('a' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\n  ch=' ';\n}\n else if (subModeCh == AS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.ALPHA_SHIFT;\n}\n else if (subModeCh == ML) {\n  subMode=Mode.MIXED;\n}\n else if (subModeCh == PS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n  result.append((char)byteCompactionData[i]);\n  subMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n  subMode=Mode.ALPHA;\n}\n}\nbreak;\ncase MIXED:if (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\nsubMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == LL) {\nsubMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\npriorToShiftMode=subMode;\nsubMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:if (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n else {\n}\n}\nbreak;\ncase PUNCT_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 442,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 5139,
        "startLineNumber" : 216,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subModeCh=textCompactionData[i];\n  char ch=0;\nswitch (subMode) {\ncase ALPHA:    if (subModeCh < 26) {\n      ch=(char)('A' + subModeCh);\n    }\n else {\n      if (subModeCh == 26) {\n        ch=' ';\n      }\n else       if (subModeCh == LL) {\n        subMode=Mode.LOWER;\n      }\n else       if (subModeCh == ML) {\n        subMode=Mode.MIXED;\n      }\n else       if (subModeCh == PS) {\n        priorToShiftMode=subMode;\n        subMode=Mode.PUNCT_SHIFT;\n      }\n else       if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n        result.append((char)byteCompactionData[i]);\n      }\n else       if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n        subMode=Mode.ALPHA;\n      }\n    }\n  break;\ncase LOWER:if (subModeCh < 26) {\n  ch=(char)('a' + subModeCh);\n}\n else {\n  if (subModeCh == 26) {\n    ch=' ';\n  }\n else   if (subModeCh == AS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.ALPHA_SHIFT;\n  }\n else   if (subModeCh == ML) {\n    subMode=Mode.MIXED;\n  }\n else   if (subModeCh == PS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.PUNCT_SHIFT;\n  }\n else   if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n    result.append((char)byteCompactionData[i]);\n    subMode=Mode.ALPHA;\n  }\n else   if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n    subMode=Mode.ALPHA;\n  }\n}\nbreak;\ncase MIXED:if (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\nsubMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == LL) {\nsubMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\npriorToShiftMode=subMode;\nsubMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:if (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n else {\n}\n}\nbreak;\ncase PUNCT_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\nif (ch != 0) {\nresult.append(ch);\n}\ni++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5158,
        "startLineNumber" : 216,
        "startColumnNumber" : 4,
        "endLineNumber" : 356,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < length) {\n  int subModeCh=textCompactionData[i];\n  char ch=0;\nswitch (subMode) {\ncase ALPHA:    if (subModeCh < 26) {\n      ch=(char)('A' + subModeCh);\n    }\n else {\n      if (subModeCh == 26) {\n        ch=' ';\n      }\n else       if (subModeCh == LL) {\n        subMode=Mode.LOWER;\n      }\n else       if (subModeCh == ML) {\n        subMode=Mode.MIXED;\n      }\n else       if (subModeCh == PS) {\n        priorToShiftMode=subMode;\n        subMode=Mode.PUNCT_SHIFT;\n      }\n else       if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n        result.append((char)byteCompactionData[i]);\n      }\n else       if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n        subMode=Mode.ALPHA;\n      }\n    }\n  break;\ncase LOWER:if (subModeCh < 26) {\n  ch=(char)('a' + subModeCh);\n}\n else {\n  if (subModeCh == 26) {\n    ch=' ';\n  }\n else   if (subModeCh == AS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.ALPHA_SHIFT;\n  }\n else   if (subModeCh == ML) {\n    subMode=Mode.MIXED;\n  }\n else   if (subModeCh == PS) {\n    priorToShiftMode=subMode;\n    subMode=Mode.PUNCT_SHIFT;\n  }\n else   if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n    result.append((char)byteCompactionData[i]);\n    subMode=Mode.ALPHA;\n  }\n else   if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n    subMode=Mode.ALPHA;\n  }\n}\nbreak;\ncase MIXED:if (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\nsubMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == LL) {\nsubMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\npriorToShiftMode=subMode;\nsubMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:if (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n else {\n}\n}\nbreak;\ncase PUNCT_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\nif (ch != 0) {\nresult.append(ch);\n}\ni++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5620,
        "startLineNumber" : 208,
        "startColumnNumber" : 65,
        "endLineNumber" : 357,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Mode subMode=Mode.ALPHA;\n  Mode priorToShiftMode=Mode.ALPHA;\n  int i=0;\n  while (i < length) {\n    int subModeCh=textCompactionData[i];\n    char ch=0;\nswitch (subMode) {\ncase ALPHA:      if (subModeCh < 26) {\n        ch=(char)('A' + subModeCh);\n      }\n else {\n        if (subModeCh == 26) {\n          ch=' ';\n        }\n else         if (subModeCh == LL) {\n          subMode=Mode.LOWER;\n        }\n else         if (subModeCh == ML) {\n          subMode=Mode.MIXED;\n        }\n else         if (subModeCh == PS) {\n          priorToShiftMode=subMode;\n          subMode=Mode.PUNCT_SHIFT;\n        }\n else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n          result.append((char)byteCompactionData[i]);\n        }\n else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n          subMode=Mode.ALPHA;\n        }\n      }\n    break;\ncase LOWER:  if (subModeCh < 26) {\n    ch=(char)('a' + subModeCh);\n  }\n else {\n    if (subModeCh == 26) {\n      ch=' ';\n    }\n else     if (subModeCh == AS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.ALPHA_SHIFT;\n    }\n else     if (subModeCh == ML) {\n      subMode=Mode.MIXED;\n    }\n else     if (subModeCh == PS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.PUNCT_SHIFT;\n    }\n else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n      result.append((char)byteCompactionData[i]);\n      subMode=Mode.ALPHA;\n    }\n else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n      subMode=Mode.ALPHA;\n    }\n  }\nbreak;\ncase MIXED:if (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\n  subMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\n  ch=' ';\n}\n else if (subModeCh == LL) {\n  subMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\n  subMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n  result.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n  subMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:if (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n else {\n}\n}\nbreak;\ncase PUNCT_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\nif (ch != 0) {\nresult.append(ch);\n}\ni++;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 494,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6843,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 357,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * The Text Compaction mode includes all the printable ASCII characters (i.e. values from 32 to 126) and three ASCII control characters: HT or tab (ASCII value 9), LF or line feed (ASCII value 10), and CR or carriage return (ASCII value 13). The Text Compaction mode also includes various latch and shift characters which are used exclusively within the mode. The Text Compaction mode encodes up to 2 characters per codeword. The compaction rules for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode switches are defined in 5.4.2.3.\n * @param textCompactionData The text compaction data.\n * @param byteCompactionData The byte compaction data if therewas a mode shift.\n * @param length             The size of the text compaction and byte compaction data.\n * @param result             The decoded data is appended to the result.\n */\nprivate static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){\n  Mode subMode=Mode.ALPHA;\n  Mode priorToShiftMode=Mode.ALPHA;\n  int i=0;\n  while (i < length) {\n    int subModeCh=textCompactionData[i];\n    char ch=0;\nswitch (subMode) {\ncase ALPHA:      if (subModeCh < 26) {\n        ch=(char)('A' + subModeCh);\n      }\n else {\n        if (subModeCh == 26) {\n          ch=' ';\n        }\n else         if (subModeCh == LL) {\n          subMode=Mode.LOWER;\n        }\n else         if (subModeCh == ML) {\n          subMode=Mode.MIXED;\n        }\n else         if (subModeCh == PS) {\n          priorToShiftMode=subMode;\n          subMode=Mode.PUNCT_SHIFT;\n        }\n else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n          result.append((char)byteCompactionData[i]);\n        }\n else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n          subMode=Mode.ALPHA;\n        }\n      }\n    break;\ncase LOWER:  if (subModeCh < 26) {\n    ch=(char)('a' + subModeCh);\n  }\n else {\n    if (subModeCh == 26) {\n      ch=' ';\n    }\n else     if (subModeCh == AS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.ALPHA_SHIFT;\n    }\n else     if (subModeCh == ML) {\n      subMode=Mode.MIXED;\n    }\n else     if (subModeCh == PS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.PUNCT_SHIFT;\n    }\n else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n      result.append((char)byteCompactionData[i]);\n      subMode=Mode.ALPHA;\n    }\n else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n      subMode=Mode.ALPHA;\n    }\n  }\nbreak;\ncase MIXED:if (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\n  subMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\n  ch=' ';\n}\n else if (subModeCh == LL) {\n  subMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\n  subMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n  result.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n  subMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:if (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n else {\n}\n}\nbreak;\ncase PUNCT_SHIFT:subMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\nif (ch != 0) {\nresult.append(ch);\n}\ni++;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 517,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 279,
        "startColumnNumber" : 14,
        "endLineNumber" : 279,
        "endColumnNumber" : 35
      },
      "nodeContext" : "subMode=Mode.PUNCT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.zxing.pdf417.decoder.DecodedBitStreamParser.Mode"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 279,
    "startColumnNumber" : 24,
    "endLineNumber" : 279,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}