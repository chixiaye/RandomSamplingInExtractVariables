{
  "id" : 89,
  "expression" : "v2.getPrivateAddress()",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-bridge/src/test/java/com/netflix/eureka2/server/bridge/InstanceInfoConverterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "v2.getPrivateAddress()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 101,
      "startColumnNumber" : 19,
      "endLineNumber" : 101,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 101,
        "startColumnNumber" : 19,
        "endLineNumber" : 101,
        "endColumnNumber" : 56
      },
      "nodeContext" : "v2.getPrivateAddress().getIpAddress()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertThat(v2.getPrivateAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.localIpv4)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertThat(v2.getPrivateAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.localIpv4)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 70,
        "startColumnNumber" : 29,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo v2Info=converter.fromV1(sourceV1Info);\n  assertThat(v2Info.getApp(),equalTo(sourceV1Info.getAppName()));\n  assertThat(v2Info.getAppGroup(),equalTo(sourceV1Info.getAppGroupName()));\n  assertThat(v2Info.getStatus().name(),equalTo(sourceV1Info.getStatus().name()));\n  assertThat(v2Info.getPorts(),containsInAnyOrder(new ServicePort(sourceV1Info.getPort(),false),new ServicePort(sourceV1Info.getSecurePort(),true)));\n  assertThat(v2Info.getHomePageUrl(),equalTo(sourceV1Info.getHomePageUrl()));\n  assertThat(v2Info.getStatusPageUrl(),equalTo(sourceV1Info.getStatusPageUrl()));\n  assertThat(v2Info.getHealthCheckUrls(),equalTo(sourceV1Info.getHealthCheckUrls()));\n  assertThat(v2Info.getVipAddress(),equalTo(sourceV1Info.getVIPAddress()));\n  assertThat(v2Info.getAsg(),equalTo(sourceV1Info.getASGName()));\n  assertThat(v2Info.getSecureVipAddress(),equalTo(sourceV1Info.getSecureVipAddress()));\n  DataCenterInfo v2DataCenterInfo=v2Info.getDataCenterInfo();\n  com.netflix.appinfo.DataCenterInfo v1DataCenterInfo=sourceV1Info.getDataCenterInfo();\n  AwsDataCenterInfo v2=(AwsDataCenterInfo)v2DataCenterInfo;\n  AmazonInfo v1=(AmazonInfo)v1DataCenterInfo;\n  assertThat(v2.getAmiId(),equalTo(v1.get(AmazonInfo.MetaDataKey.amiId)));\n  assertThat(v2.getInstanceId(),equalTo(v1.get(AmazonInfo.MetaDataKey.instanceId)));\n  assertThat(v2.getInstanceType(),equalTo(v1.get(AmazonInfo.MetaDataKey.instanceType)));\n  assertThat(v2.getZone(),equalTo(v1.get(AmazonInfo.MetaDataKey.availabilityZone)));\n  assertThat(v2.getRegion(),equalTo(\"us-east-1\"));\n  assertThat(v2.getAddresses().size(),equalTo(2));\n  assertThat(v2.getPublicAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.publicIpv4)));\n  assertThat(v2.getPublicAddress().getHostName(),equalTo(v1.get(AmazonInfo.MetaDataKey.publicHostname)));\n  assertThat(v2.getPrivateAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.localIpv4)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2167,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testV1ToV2(){\n  InstanceInfo v2Info=converter.fromV1(sourceV1Info);\n  assertThat(v2Info.getApp(),equalTo(sourceV1Info.getAppName()));\n  assertThat(v2Info.getAppGroup(),equalTo(sourceV1Info.getAppGroupName()));\n  assertThat(v2Info.getStatus().name(),equalTo(sourceV1Info.getStatus().name()));\n  assertThat(v2Info.getPorts(),containsInAnyOrder(new ServicePort(sourceV1Info.getPort(),false),new ServicePort(sourceV1Info.getSecurePort(),true)));\n  assertThat(v2Info.getHomePageUrl(),equalTo(sourceV1Info.getHomePageUrl()));\n  assertThat(v2Info.getStatusPageUrl(),equalTo(sourceV1Info.getStatusPageUrl()));\n  assertThat(v2Info.getHealthCheckUrls(),equalTo(sourceV1Info.getHealthCheckUrls()));\n  assertThat(v2Info.getVipAddress(),equalTo(sourceV1Info.getVIPAddress()));\n  assertThat(v2Info.getAsg(),equalTo(sourceV1Info.getASGName()));\n  assertThat(v2Info.getSecureVipAddress(),equalTo(sourceV1Info.getSecureVipAddress()));\n  DataCenterInfo v2DataCenterInfo=v2Info.getDataCenterInfo();\n  com.netflix.appinfo.DataCenterInfo v1DataCenterInfo=sourceV1Info.getDataCenterInfo();\n  AwsDataCenterInfo v2=(AwsDataCenterInfo)v2DataCenterInfo;\n  AmazonInfo v1=(AmazonInfo)v1DataCenterInfo;\n  assertThat(v2.getAmiId(),equalTo(v1.get(AmazonInfo.MetaDataKey.amiId)));\n  assertThat(v2.getInstanceId(),equalTo(v1.get(AmazonInfo.MetaDataKey.instanceId)));\n  assertThat(v2.getInstanceType(),equalTo(v1.get(AmazonInfo.MetaDataKey.instanceType)));\n  assertThat(v2.getZone(),equalTo(v1.get(AmazonInfo.MetaDataKey.availabilityZone)));\n  assertThat(v2.getRegion(),equalTo(\"us-east-1\"));\n  assertThat(v2.getAddresses().size(),equalTo(2));\n  assertThat(v2.getPublicAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.publicIpv4)));\n  assertThat(v2.getPublicAddress().getHostName(),equalTo(v1.get(AmazonInfo.MetaDataKey.publicHostname)));\n  assertThat(v2.getPrivateAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.localIpv4)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 319,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertThat(v2.getPrivateAddress().getIpAddress(),equalTo(v1.get(AmazonInfo.MetaDataKey.localIpv4)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "com.netflix.eureka2.registry.instance.NetworkAddress"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 101,
    "startColumnNumber" : 19,
    "endLineNumber" : 101,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}