{
  "id" : 510,
  "expression" : "listener",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/RedissonSemaphore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "listener",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 189,
      "startColumnNumber" : 34,
      "endLineNumber" : 189,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 189,
        "startColumnNumber" : 16,
        "endLineNumber" : 189,
        "endColumnNumber" : 43
      },
      "nodeContext" : "entry.addListener(listener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 189,
        "startColumnNumber" : 16,
        "endLineNumber" : 189,
        "endColumnNumber" : 44
      },
      "nodeContext" : "entry.addListener(listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 175,
        "startColumnNumber" : 19,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicReference<Timeout> futureRef=new AtomicReference<Timeout>();\n  Runnable listener=() -> {\n    executed.set(true);\n    if (futureRef.get() != null && !futureRef.get().cancel()) {\n      entry.getLatch().release();\n      return;\n    }\n    long elapsed=System.currentTimeMillis() - current;\n    time.addAndGet(-elapsed);\n    tryAcquireAsync(time,permits,subscribeFuture,result);\n  }\n;\n  entry.addListener(listener);\n  long t=time.get();\n  if (!executed.get()) {\n    Timeout scheduledFuture=commandExecutor.getConnectionManager().newTimeout(new TimerTask(){\n      @Override public void run(      Timeout timeout) throws Exception {\n        if (entry.removeListener(listener)) {\n          long elapsed=System.currentTimeMillis() - current;\n          time.addAndGet(-elapsed);\n          tryAcquireAsync(time,permits,subscribeFuture,result);\n        }\n      }\n    }\n,t,TimeUnit.MILLISECONDS);\n    futureRef.set(scheduledFuture);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getLatch().tryAcquire()) {\n  tryAcquireAsync(time,permits,subscribeFuture,result);\n}\n else {\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicReference<Timeout> futureRef=new AtomicReference<Timeout>();\n  Runnable listener=() -> {\n    executed.set(true);\n    if (futureRef.get() != null && !futureRef.get().cancel()) {\n      entry.getLatch().release();\n      return;\n    }\n    long elapsed=System.currentTimeMillis() - current;\n    time.addAndGet(-elapsed);\n    tryAcquireAsync(time,permits,subscribeFuture,result);\n  }\n;\n  entry.addListener(listener);\n  long t=time.get();\n  if (!executed.get()) {\n    Timeout scheduledFuture=commandExecutor.getConnectionManager().newTimeout(new TimerTask(){\n      @Override public void run(      Timeout timeout) throws Exception {\n        if (entry.removeListener(listener)) {\n          long elapsed=System.currentTimeMillis() - current;\n          time.addAndGet(-elapsed);\n          tryAcquireAsync(time,permits,subscribeFuture,result);\n        }\n      }\n    }\n,t,TimeUnit.MILLISECONDS);\n    futureRef.set(scheduledFuture);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 146,
        "startColumnNumber" : 48,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (e != null) {\n    unsubscribe(subscribeFuture);\n    result.tryFailure(e);\n    return;\n  }\n  if (res) {\n    unsubscribe(subscribeFuture);\n    if (!result.trySuccess(true)) {\n      releaseAsync(permits);\n    }\n    return;\n  }\n  long el=System.currentTimeMillis() - curr;\n  time.addAndGet(-el);\n  if (time.get() <= 0) {\n    unsubscribe(subscribeFuture);\n    result.trySuccess(false);\n    return;\n  }\n  long current=System.currentTimeMillis();\n  RedissonLockEntry entry=subscribeFuture.getNow();\n  if (entry.getLatch().tryAcquire()) {\n    tryAcquireAsync(time,permits,subscribeFuture,result);\n  }\n else {\n    AtomicBoolean executed=new AtomicBoolean();\n    AtomicReference<Timeout> futureRef=new AtomicReference<Timeout>();\n    Runnable listener=() -> {\n      executed.set(true);\n      if (futureRef.get() != null && !futureRef.get().cancel()) {\n        entry.getLatch().release();\n        return;\n      }\n      long elapsed=System.currentTimeMillis() - current;\n      time.addAndGet(-elapsed);\n      tryAcquireAsync(time,permits,subscribeFuture,result);\n    }\n;\n    entry.addListener(listener);\n    long t=time.get();\n    if (!executed.get()) {\n      Timeout scheduledFuture=commandExecutor.getConnectionManager().newTimeout(new TimerTask(){\n        @Override public void run(        Timeout timeout) throws Exception {\n          if (entry.removeListener(listener)) {\n            long elapsed=System.currentTimeMillis() - current;\n            time.addAndGet(-elapsed);\n            tryAcquireAsync(time,permits,subscribeFuture,result);\n          }\n        }\n      }\n,t,TimeUnit.MILLISECONDS);\n      futureRef.set(scheduledFuture);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2466,
        "startLineNumber" : 146,
        "startColumnNumber" : 36,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(res,e) -> {\n  if (e != null) {\n    unsubscribe(subscribeFuture);\n    result.tryFailure(e);\n    return;\n  }\n  if (res) {\n    unsubscribe(subscribeFuture);\n    if (!result.trySuccess(true)) {\n      releaseAsync(permits);\n    }\n    return;\n  }\n  long el=System.currentTimeMillis() - curr;\n  time.addAndGet(-el);\n  if (time.get() <= 0) {\n    unsubscribe(subscribeFuture);\n    result.trySuccess(false);\n    return;\n  }\n  long current=System.currentTimeMillis();\n  RedissonLockEntry entry=subscribeFuture.getNow();\n  if (entry.getLatch().tryAcquire()) {\n    tryAcquireAsync(time,permits,subscribeFuture,result);\n  }\n else {\n    AtomicBoolean executed=new AtomicBoolean();\n    AtomicReference<Timeout> futureRef=new AtomicReference<Timeout>();\n    Runnable listener=() -> {\n      executed.set(true);\n      if (futureRef.get() != null && !futureRef.get().cancel()) {\n        entry.getLatch().release();\n        return;\n      }\n      long elapsed=System.currentTimeMillis() - current;\n      time.addAndGet(-elapsed);\n      tryAcquireAsync(time,permits,subscribeFuture,result);\n    }\n;\n    entry.addListener(listener);\n    long t=time.get();\n    if (!executed.get()) {\n      Timeout scheduledFuture=commandExecutor.getConnectionManager().newTimeout(new TimerTask(){\n        @Override public void run(        Timeout timeout) throws Exception {\n          if (entry.removeListener(listener)) {\n            long elapsed=System.currentTimeMillis() - current;\n            time.addAndGet(-elapsed);\n            tryAcquireAsync(time,permits,subscribeFuture,result);\n          }\n        }\n      }\n,t,TimeUnit.MILLISECONDS);\n      futureRef.set(scheduledFuture);\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 261,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 189,
        "startColumnNumber" : 16,
        "endLineNumber" : 189,
        "endColumnNumber" : 44
      },
      "nodeContext" : "entry.addListener(listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 189,
    "startColumnNumber" : 34,
    "endLineNumber" : 189,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}