{
  "id" : 214,
  "expression" : "Cleanup",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/NegativeAcksTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Cleanup",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 110,
      "startColumnNumber" : 9,
      "endLineNumber" : 110,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 16
      },
      "nodeContext" : "@Cleanup",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 29
      },
      "nodeContext" : "@Cleanup Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(\"sub1\").acknowledgmentGroupTime(0,TimeUnit.SECONDS).subscriptionType(subscriptionType).negativeAckRedeliveryDelay(negAcksDelayMillis,TimeUnit.MILLISECONDS).ackTimeout(ackTimeout,TimeUnit.MILLISECONDS).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 105,
        "startColumnNumber" : 29,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"Test negative acks batching={} partitions={} subType={} negAckDelayMs={}\",batching,usePartitions,subscriptionType,negAcksDelayMillis);\n  String topic=BrokerTestUtil.newUniqueName(\"testNegativeAcks\");\n  @Cleanup Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(\"sub1\").acknowledgmentGroupTime(0,TimeUnit.SECONDS).subscriptionType(subscriptionType).negativeAckRedeliveryDelay(negAcksDelayMillis,TimeUnit.MILLISECONDS).ackTimeout(ackTimeout,TimeUnit.MILLISECONDS).subscribe();\n  @Cleanup Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).enableBatching(batching).create();\n  Set<String> sentMessages=new HashSet<>();\n  final int N=10;\n  for (int i=0; i < N; i++) {\n    String value=\"test-\" + i;\n    producer.sendAsync(value);\n    sentMessages.add(value);\n  }\n  producer.flush();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    consumer.negativeAcknowledge(msg);\n  }\n  Set<String> receivedMessages=new HashSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    receivedMessages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(receivedMessages,sentMessages);\n  assertNull(consumer.receive(100,TimeUnit.MILLISECONDS));\n  consumer.close();\n  producer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"variations\") public void testNegativeAcks(boolean batching,boolean usePartitions,SubscriptionType subscriptionType,int negAcksDelayMillis,int ackTimeout) throws Exception {\n  log.info(\"Test negative acks batching={} partitions={} subType={} negAckDelayMs={}\",batching,usePartitions,subscriptionType,negAcksDelayMillis);\n  String topic=BrokerTestUtil.newUniqueName(\"testNegativeAcks\");\n  @Cleanup Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(\"sub1\").acknowledgmentGroupTime(0,TimeUnit.SECONDS).subscriptionType(subscriptionType).negativeAckRedeliveryDelay(negAcksDelayMillis,TimeUnit.MILLISECONDS).ackTimeout(ackTimeout,TimeUnit.MILLISECONDS).subscribe();\n  @Cleanup Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).enableBatching(batching).create();\n  Set<String> sentMessages=new HashSet<>();\n  final int N=10;\n  for (int i=0; i < N; i++) {\n    String value=\"test-\" + i;\n    producer.sendAsync(value);\n    sentMessages.add(value);\n  }\n  producer.flush();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    consumer.negativeAcknowledge(msg);\n  }\n  Set<String> receivedMessages=new HashSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    receivedMessages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(receivedMessages,sentMessages);\n  assertNull(consumer.receive(100,TimeUnit.MILLISECONDS));\n  consumer.close();\n  producer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 16
      },
      "nodeContext" : "@Cleanup",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "Cleanup"
  }, {
    "nodeContext" : "Cleanup",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 120,
      "startColumnNumber" : 9,
      "endLineNumber" : 120,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 16
      },
      "nodeContext" : "@Cleanup",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 26
      },
      "nodeContext" : "@Cleanup Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).enableBatching(batching).create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 105,
        "startColumnNumber" : 29,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"Test negative acks batching={} partitions={} subType={} negAckDelayMs={}\",batching,usePartitions,subscriptionType,negAcksDelayMillis);\n  String topic=BrokerTestUtil.newUniqueName(\"testNegativeAcks\");\n  @Cleanup Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(\"sub1\").acknowledgmentGroupTime(0,TimeUnit.SECONDS).subscriptionType(subscriptionType).negativeAckRedeliveryDelay(negAcksDelayMillis,TimeUnit.MILLISECONDS).ackTimeout(ackTimeout,TimeUnit.MILLISECONDS).subscribe();\n  @Cleanup Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).enableBatching(batching).create();\n  Set<String> sentMessages=new HashSet<>();\n  final int N=10;\n  for (int i=0; i < N; i++) {\n    String value=\"test-\" + i;\n    producer.sendAsync(value);\n    sentMessages.add(value);\n  }\n  producer.flush();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    consumer.negativeAcknowledge(msg);\n  }\n  Set<String> receivedMessages=new HashSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    receivedMessages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(receivedMessages,sentMessages);\n  assertNull(consumer.receive(100,TimeUnit.MILLISECONDS));\n  consumer.close();\n  producer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"variations\") public void testNegativeAcks(boolean batching,boolean usePartitions,SubscriptionType subscriptionType,int negAcksDelayMillis,int ackTimeout) throws Exception {\n  log.info(\"Test negative acks batching={} partitions={} subType={} negAckDelayMs={}\",batching,usePartitions,subscriptionType,negAcksDelayMillis);\n  String topic=BrokerTestUtil.newUniqueName(\"testNegativeAcks\");\n  @Cleanup Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(\"sub1\").acknowledgmentGroupTime(0,TimeUnit.SECONDS).subscriptionType(subscriptionType).negativeAckRedeliveryDelay(negAcksDelayMillis,TimeUnit.MILLISECONDS).ackTimeout(ackTimeout,TimeUnit.MILLISECONDS).subscribe();\n  @Cleanup Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).enableBatching(batching).create();\n  Set<String> sentMessages=new HashSet<>();\n  final int N=10;\n  for (int i=0; i < N; i++) {\n    String value=\"test-\" + i;\n    producer.sendAsync(value);\n    sentMessages.add(value);\n  }\n  producer.flush();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    consumer.negativeAcknowledge(msg);\n  }\n  Set<String> receivedMessages=new HashSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    receivedMessages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(receivedMessages,sentMessages);\n  assertNull(consumer.receive(100,TimeUnit.MILLISECONDS));\n  consumer.close();\n  producer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 16
      },
      "nodeContext" : "@Cleanup",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "Cleanup"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 110,
    "startColumnNumber" : 9,
    "endLineNumber" : 110,
    "endColumnNumber" : 16
  }, {
    "charLength" : 7,
    "startLineNumber" : 120,
    "startColumnNumber" : 9,
    "endLineNumber" : 120,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}