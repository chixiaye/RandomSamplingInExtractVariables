{
  "id" : 274,
  "expression" : "v[0]",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/version/util/VerGen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "v[0]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 111,
      "startColumnNumber" : 39,
      "endLineNumber" : 111,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 111,
        "startColumnNumber" : 22,
        "endLineNumber" : 111,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Integer.parseInt(v[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 111,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 44
      },
      "nodeContext" : "maj=Integer.parseInt(v[0])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int maj=Integer.parseInt(v[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] v=args[0].split(\"\\\\.\");\n  if (v.length != 3) {\n    System.err.println(\"Invalid version number format, must be \\\"x.y.z\\\"\");\n    System.exit(1);\n  }\n  int maj=Integer.parseInt(v[0]);\n  int min=Integer.parseInt(v[1]);\n  int micro=Integer.parseInt(v[2]);\n  int rev;\n  try {\n    rev=Integer.parseInt(args[1]);\n  }\n catch (  NumberFormatException e) {\n    rev=-1;\n  }\n  generateFile(new File(\".\"),maj,min,micro,rev,args[2]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 814,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String[] v=args[0].split(\"\\\\.\");\n  if (v.length != 3) {\n    System.err.println(\"Invalid version number format, must be \\\"x.y.z\\\"\");\n    System.exit(1);\n  }\n  int maj=Integer.parseInt(v[0]);\n  int min=Integer.parseInt(v[1]);\n  int micro=Integer.parseInt(v[2]);\n  int rev;\n  try {\n    rev=Integer.parseInt(args[1]);\n  }\n catch (  NumberFormatException e) {\n    rev=-1;\n  }\n  generateFile(new File(\".\"),maj,min,micro,rev,args[2]);\n}\n catch (NumberFormatException e) {\n  System.err.println(\"All version-related parameters must be valid integers!\");\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 101,
        "startColumnNumber" : 43,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length != 3)   printUsage();\n  try {\n    String[] v=args[0].split(\"\\\\.\");\n    if (v.length != 3) {\n      System.err.println(\"Invalid version number format, must be \\\"x.y.z\\\"\");\n      System.exit(1);\n    }\n    int maj=Integer.parseInt(v[0]);\n    int min=Integer.parseInt(v[1]);\n    int micro=Integer.parseInt(v[2]);\n    int rev;\n    try {\n      rev=Integer.parseInt(args[1]);\n    }\n catch (    NumberFormatException e) {\n      rev=-1;\n    }\n    generateFile(new File(\".\"),maj,min,micro,rev,args[2]);\n  }\n catch (  NumberFormatException e) {\n    System.err.println(\"All version-related parameters must be valid integers!\");\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1602,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Emits a org.apache.zookeeper.version.Info interface file with version and revision information constants set to the values passed in as command line parameters. The file is created in the current directory. <br> Usage: java org.apache.zookeeper.version.util.VerGen maj.min.micro rev buildDate\n * @param args <ul> <li>maj - major version number <li>min - minor version number <li>micro - minor minor version number <li>rev - current SVN revision number <li>buildDate - date the build </ul>\n */\npublic static void main(String[] args){\n  if (args.length != 3)   printUsage();\n  try {\n    String[] v=args[0].split(\"\\\\.\");\n    if (v.length != 3) {\n      System.err.println(\"Invalid version number format, must be \\\"x.y.z\\\"\");\n      System.exit(1);\n    }\n    int maj=Integer.parseInt(v[0]);\n    int min=Integer.parseInt(v[1]);\n    int micro=Integer.parseInt(v[2]);\n    int rev;\n    try {\n      rev=Integer.parseInt(args[1]);\n    }\n catch (    NumberFormatException e) {\n      rev=-1;\n    }\n    generateFile(new File(\".\"),maj,min,micro,rev,args[2]);\n  }\n catch (  NumberFormatException e) {\n    System.err.println(\"All version-related parameters must be valid integers!\");\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int maj=Integer.parseInt(v[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 111,
    "startColumnNumber" : 39,
    "endLineNumber" : 111,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}