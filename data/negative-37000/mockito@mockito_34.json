{
  "id" : 34,
  "expression" : "List.class",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockito/internal/listeners/VerificationStartedNotifierTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "List.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 94,
      "startColumnNumber" : 72,
      "endLineNumber" : 94,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 94,
        "startColumnNumber" : 41,
        "endLineNumber" : 94,
        "endColumnNumber" : 83
      },
      "nodeContext" : "withSettings().extraInterfaces(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 94,
        "startColumnNumber" : 25,
        "endLineNumber" : 94,
        "endColumnNumber" : 84
      },
      "nodeContext" : "mock(Set.class,withSettings().extraInterfaces(List.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 94,
        "startColumnNumber" : 18,
        "endLineNumber" : 94,
        "endColumnNumber" : 84
      },
      "nodeContext" : "mock=mock(Set.class,withSettings().extraInterfaces(List.class))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 85
      },
      "nodeContext" : "final Set mock=mock(Set.class,withSettings().extraInterfaces(List.class));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1112,
        "startLineNumber" : 93,
        "startColumnNumber" : 29,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set mock=mock(Set.class,withSettings().extraInterfaces(List.class));\n  final Set missingExtraInterface=mock(Set.class);\n  VerificationStartedNotifier.Event event=new VerificationStartedNotifier.Event(mockingDetails(mock));\n  try {\n    event.setMock(missingExtraInterface);\n    fail();\n  }\n catch (  Exception e) {\n    assertEquals(filterHashCode(\"VerificationStartedEvent.setMock() does not accept parameter which does not implement all extra interfaces of the original mock.\\n\" + \"  Required type: java.util.Set\\n\" + \"  Required extra interface: java.util.List\\n\"+ \"  Received parameter: Mock for Set, hashCode: xxx.\\n\"+ \"  See the Javadoc.\"),filterHashCode(e.getMessage()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void decent_exception_when_setting_mock_that_does_not_implement_all_desired_interfaces() throws Exception {\n  final Set mock=mock(Set.class,withSettings().extraInterfaces(List.class));\n  final Set missingExtraInterface=mock(Set.class);\n  VerificationStartedNotifier.Event event=new VerificationStartedNotifier.Event(mockingDetails(mock));\n  try {\n    event.setMock(missingExtraInterface);\n    fail();\n  }\n catch (  Exception e) {\n    assertEquals(filterHashCode(\"VerificationStartedEvent.setMock() does not accept parameter which does not implement all extra interfaces of the original mock.\\n\" + \"  Required type: java.util.Set\\n\" + \"  Required extra interface: java.util.List\\n\"+ \"  Received parameter: Mock for Set, hashCode: xxx.\\n\"+ \"  See the Javadoc.\"),filterHashCode(e.getMessage()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 85,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 85
      },
      "nodeContext" : "final Set mock=mock(Set.class,withSettings().extraInterfaces(List.class));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.util.List>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 94,
    "startColumnNumber" : 72,
    "endLineNumber" : 94,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}