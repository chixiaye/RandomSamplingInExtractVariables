{
  "id" : 195,
  "expression" : "new IOException(\"Mock network error!\")",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IOException(\"Mock network error!\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 304,
      "startColumnNumber" : 32,
      "endLineNumber" : 304,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 304,
        "startColumnNumber" : 20,
        "endLineNumber" : 304,
        "endColumnNumber" : 70
      },
      "nodeContext" : "exception=new IOException(\"Mock network error!\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 71
      },
      "nodeContext" : "IOException exception=new IOException(\"Mock network error!\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 302,
        "startColumnNumber" : 32,
        "endLineNumber" : 309,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  sleep(calculateDelayForError());\n  IOException exception=new IOException(\"Mock network error!\");\n  if (restAdapter.logLevel.log()) {\n    restAdapter.logException(exception,url);\n  }\n  throw RetrofitError.networkError(url,exception);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 302,
        "startColumnNumber" : 6,
        "endLineNumber" : 309,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (calculateIsFailure()) {\n  sleep(calculateDelayForError());\n  IOException exception=new IOException(\"Mock network error!\");\n  if (restAdapter.logLevel.log()) {\n    restAdapter.logException(exception,url);\n  }\n  throw RetrofitError.networkError(url,exception);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 298,
        "startColumnNumber" : 40,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 355,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Object invokeSync(RestMethodInfo methodInfo,RequestInterceptor interceptor,Object[] args) throws Throwable {\n  Request request=buildRequest(methodInfo,interceptor,args);\n  String url=request.getUrl();\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    throw RetrofitError.networkError(url,exception);\n  }\n  LogLevel logLevel=restAdapter.logLevel;\n  RestAdapter.Log log=restAdapter.log;\n  int callDelay=calculateDelayForCall();\n  long beforeNanos=System.nanoTime();\n  try {\n    Object returnValue=methodInfo.method.invoke(mockService,args);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(returnValue + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    return returnValue;\n  }\n catch (  InvocationTargetException e) {\n    Throwable innerEx=e.getCause();\n    if (!(innerEx instanceof MockHttpException)) {\n      throw innerEx;\n    }\n    MockHttpException httpEx=(MockHttpException)innerEx;\n    Response response=httpEx.toResponse(restAdapter.converter);\n    long tookMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beforeNanos);\n    sleep(callDelay - tookMs);\n    if (logLevel.log()) {\n      log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        log.log(httpEx.responseBody + \"\");\n        log.log(\"<--- END MOCK\");\n      }\n    }\n    throw new MockHttpRetrofitError(httpEx.reason,url,response,httpEx.responseBody,methodInfo.responseObjectType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 71
      },
      "nodeContext" : "IOException exception=new IOException(\"Mock network error!\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 304,
    "startColumnNumber" : 32,
    "endLineNumber" : 304,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}