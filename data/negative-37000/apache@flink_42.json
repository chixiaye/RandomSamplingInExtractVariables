{
  "id" : 42,
  "expression" : "memMan.allocatePages(owner,NUM_PAGES - 6)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/operators/sort/LargeRecordHandlerITCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "memMan.allocatePages(owner,NUM_PAGES - 6)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 74,
      "startColumnNumber" : 51,
      "endLineNumber" : 74,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 74,
        "startColumnNumber" : 38,
        "endLineNumber" : 74,
        "endColumnNumber" : 93
      },
      "nodeContext" : "sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 94
      },
      "nodeContext" : "final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 65,
        "startColumnNumber" : 59,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final MemoryManager memMan=MemoryManagerBuilder.newBuilder().setMemorySize(NUM_PAGES * PAGE_SIZE).setPageSize(PAGE_SIZE).build();\n  final AbstractInvokable owner=new DummyInvokable();\n  final List<MemorySegment> initialMemory=memMan.allocatePages(owner,6);\n  final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n  final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeVeryLongValue>(SomeVeryLongValue.class),BasicTypeInfo.BYTE_TYPE_INFO};\n  final TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>> typeInfo=new TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>>(types);\n  final TypeSerializer<Tuple3<Long,SomeVeryLongValue,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());\n  final TypeComparator<Tuple3<Long,SomeVeryLongValue,Byte>> comparator=typeInfo.createComparator(new int[]{2,0},new boolean[]{true,true},0,new ExecutionConfig());\n  LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>> handler=new LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>>(serializer,comparator,ioMan,memMan,initialMemory,owner,128,owner.getExecutionConfig());\n  assertFalse(handler.hasData());\n  Random rnd=new Random();\n  for (int i=0; i < NUM_RECORDS; i++) {\n    long val=rnd.nextLong();\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(val,new SomeVeryLongValue((int)val),(byte)val));\n    assertTrue(handler.hasData());\n  }\n  MutableObjectIterator<Tuple3<Long,SomeVeryLongValue,Byte>> sorted=handler.finishWriteAndSortKeys(sortMemory);\n  try {\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n    fail(\"should throw an exception\");\n  }\n catch (  IllegalStateException e) {\n  }\n  Tuple3<Long,SomeVeryLongValue,Byte> previous=null;\n  Tuple3<Long,SomeVeryLongValue,Byte> next;\n  while ((next=sorted.next(null)) != null) {\n    assertTrue(next.f0.intValue() == next.f1.val());\n    assertTrue(next.f0.byteValue() == next.f2);\n    if (previous != null) {\n      assertTrue(previous.f2 <= next.f2);\n      assertTrue(previous.f2.byteValue() != next.f2.byteValue() || previous.f0 <= next.f0);\n    }\n    previous=next;\n  }\n  handler.close();\n  assertFalse(handler.hasData());\n  handler.close();\n  try {\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n    fail(\"should throw an exception\");\n  }\n catch (  IllegalStateException e) {\n  }\n  assertTrue(memMan.verifyEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 486,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4019,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (final IOManager ioMan=new IOManagerAsync()){\n  final MemoryManager memMan=MemoryManagerBuilder.newBuilder().setMemorySize(NUM_PAGES * PAGE_SIZE).setPageSize(PAGE_SIZE).build();\n  final AbstractInvokable owner=new DummyInvokable();\n  final List<MemorySegment> initialMemory=memMan.allocatePages(owner,6);\n  final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n  final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeVeryLongValue>(SomeVeryLongValue.class),BasicTypeInfo.BYTE_TYPE_INFO};\n  final TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>> typeInfo=new TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>>(types);\n  final TypeSerializer<Tuple3<Long,SomeVeryLongValue,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());\n  final TypeComparator<Tuple3<Long,SomeVeryLongValue,Byte>> comparator=typeInfo.createComparator(new int[]{2,0},new boolean[]{true,true},0,new ExecutionConfig());\n  LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>> handler=new LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>>(serializer,comparator,ioMan,memMan,initialMemory,owner,128,owner.getExecutionConfig());\n  assertFalse(handler.hasData());\n  Random rnd=new Random();\n  for (int i=0; i < NUM_RECORDS; i++) {\n    long val=rnd.nextLong();\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(val,new SomeVeryLongValue((int)val),(byte)val));\n    assertTrue(handler.hasData());\n  }\n  MutableObjectIterator<Tuple3<Long,SomeVeryLongValue,Byte>> sorted=handler.finishWriteAndSortKeys(sortMemory);\n  try {\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n    fail(\"should throw an exception\");\n  }\n catch (  IllegalStateException e) {\n  }\n  Tuple3<Long,SomeVeryLongValue,Byte> previous=null;\n  Tuple3<Long,SomeVeryLongValue,Byte> next;\n  while ((next=sorted.next(null)) != null) {\n    assertTrue(next.f0.intValue() == next.f1.val());\n    assertTrue(next.f0.byteValue() == next.f2);\n    if (previous != null) {\n      assertTrue(previous.f2 <= next.f2);\n      assertTrue(previous.f2.byteValue() != next.f2.byteValue() || previous.f0 <= next.f0);\n    }\n    previous=next;\n  }\n  handler.close();\n  assertFalse(handler.hasData());\n  handler.close();\n  try {\n    handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n    fail(\"should throw an exception\");\n  }\n catch (  IllegalStateException e) {\n  }\n  assertTrue(memMan.verifyEmpty());\n}\n catch (Exception e) {\n  e.printStackTrace();\n  fail(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 512,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4148,
        "startLineNumber" : 60,
        "startColumnNumber" : 48,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int PAGE_SIZE=4 * 1024;\n  final int NUM_PAGES=1000;\n  final int NUM_RECORDS=10;\n  try (final IOManager ioMan=new IOManagerAsync()){\n    final MemoryManager memMan=MemoryManagerBuilder.newBuilder().setMemorySize(NUM_PAGES * PAGE_SIZE).setPageSize(PAGE_SIZE).build();\n    final AbstractInvokable owner=new DummyInvokable();\n    final List<MemorySegment> initialMemory=memMan.allocatePages(owner,6);\n    final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n    final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeVeryLongValue>(SomeVeryLongValue.class),BasicTypeInfo.BYTE_TYPE_INFO};\n    final TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>> typeInfo=new TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>>(types);\n    final TypeSerializer<Tuple3<Long,SomeVeryLongValue,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());\n    final TypeComparator<Tuple3<Long,SomeVeryLongValue,Byte>> comparator=typeInfo.createComparator(new int[]{2,0},new boolean[]{true,true},0,new ExecutionConfig());\n    LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>> handler=new LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>>(serializer,comparator,ioMan,memMan,initialMemory,owner,128,owner.getExecutionConfig());\n    assertFalse(handler.hasData());\n    Random rnd=new Random();\n    for (int i=0; i < NUM_RECORDS; i++) {\n      long val=rnd.nextLong();\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(val,new SomeVeryLongValue((int)val),(byte)val));\n      assertTrue(handler.hasData());\n    }\n    MutableObjectIterator<Tuple3<Long,SomeVeryLongValue,Byte>> sorted=handler.finishWriteAndSortKeys(sortMemory);\n    try {\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n      fail(\"should throw an exception\");\n    }\n catch (    IllegalStateException e) {\n    }\n    Tuple3<Long,SomeVeryLongValue,Byte> previous=null;\n    Tuple3<Long,SomeVeryLongValue,Byte> next;\n    while ((next=sorted.next(null)) != null) {\n      assertTrue(next.f0.intValue() == next.f1.val());\n      assertTrue(next.f0.byteValue() == next.f2);\n      if (previous != null) {\n        assertTrue(previous.f2 <= next.f2);\n        assertTrue(previous.f2.byteValue() != next.f2.byteValue() || previous.f0 <= next.f0);\n      }\n      previous=next;\n    }\n    handler.close();\n    assertFalse(handler.hasData());\n    handler.close();\n    try {\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n      fail(\"should throw an exception\");\n    }\n catch (    IllegalStateException e) {\n    }\n    assertTrue(memMan.verifyEmpty());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 533,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4202,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordHandlerCompositeKey(){\n  final int PAGE_SIZE=4 * 1024;\n  final int NUM_PAGES=1000;\n  final int NUM_RECORDS=10;\n  try (final IOManager ioMan=new IOManagerAsync()){\n    final MemoryManager memMan=MemoryManagerBuilder.newBuilder().setMemorySize(NUM_PAGES * PAGE_SIZE).setPageSize(PAGE_SIZE).build();\n    final AbstractInvokable owner=new DummyInvokable();\n    final List<MemorySegment> initialMemory=memMan.allocatePages(owner,6);\n    final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n    final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeVeryLongValue>(SomeVeryLongValue.class),BasicTypeInfo.BYTE_TYPE_INFO};\n    final TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>> typeInfo=new TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>>(types);\n    final TypeSerializer<Tuple3<Long,SomeVeryLongValue,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());\n    final TypeComparator<Tuple3<Long,SomeVeryLongValue,Byte>> comparator=typeInfo.createComparator(new int[]{2,0},new boolean[]{true,true},0,new ExecutionConfig());\n    LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>> handler=new LargeRecordHandler<Tuple3<Long,SomeVeryLongValue,Byte>>(serializer,comparator,ioMan,memMan,initialMemory,owner,128,owner.getExecutionConfig());\n    assertFalse(handler.hasData());\n    Random rnd=new Random();\n    for (int i=0; i < NUM_RECORDS; i++) {\n      long val=rnd.nextLong();\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(val,new SomeVeryLongValue((int)val),(byte)val));\n      assertTrue(handler.hasData());\n    }\n    MutableObjectIterator<Tuple3<Long,SomeVeryLongValue,Byte>> sorted=handler.finishWriteAndSortKeys(sortMemory);\n    try {\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n      fail(\"should throw an exception\");\n    }\n catch (    IllegalStateException e) {\n    }\n    Tuple3<Long,SomeVeryLongValue,Byte> previous=null;\n    Tuple3<Long,SomeVeryLongValue,Byte> next;\n    while ((next=sorted.next(null)) != null) {\n      assertTrue(next.f0.intValue() == next.f1.val());\n      assertTrue(next.f0.byteValue() == next.f2);\n      if (previous != null) {\n        assertTrue(previous.f2 <= next.f2);\n        assertTrue(previous.f2.byteValue() != next.f2.byteValue() || previous.f0 <= next.f0);\n      }\n      previous=next;\n    }\n    handler.close();\n    assertFalse(handler.hasData());\n    handler.close();\n    try {\n      handler.addRecord(new Tuple3<Long,SomeVeryLongValue,Byte>(92L,null,(byte)1));\n      fail(\"should throw an exception\");\n    }\n catch (    IllegalStateException e) {\n    }\n    assertTrue(memMan.verifyEmpty());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 539,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 94
      },
      "nodeContext" : "final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.util.List<org.apache.flink.core.memory.MemorySegment>"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 74,
    "startColumnNumber" : 51,
    "endLineNumber" : 74,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}