{
  "id" : 201,
  "expression" : "\"--cluster_name\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"--cluster_name\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 436,
      "startColumnNumber" : 17,
      "endLineNumber" : 436,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 436,
        "startColumnNumber" : 8,
        "endLineNumber" : 436,
        "endColumnNumber" : 34
      },
      "nodeContext" : "args.add(\"--cluster_name\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 436,
        "startColumnNumber" : 8,
        "endLineNumber" : 436,
        "endColumnNumber" : 35
      },
      "nodeContext" : "args.add(\"--cluster_name\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8488,
        "startLineNumber" : 276,
        "startColumnNumber" : 83,
        "endLineNumber" : 446,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> args=new LinkedList<>();\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.GO) {\n    return getGoInstanceCmd(instanceConfig,originalCodeFileName,pulsarServiceUrl,k8sRuntime);\n  }\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    args.add(\"java\");\n    args.add(\"-cp\");\n    String classpath=instanceFile;\n    if (StringUtils.isNotEmpty(extraDependenciesDir)) {\n      classpath=classpath + \":\" + extraDependenciesDir+ \"/*\";\n    }\n    args.add(classpath);\n    if (StringUtils.isNotEmpty(extraDependenciesDir)) {\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_EXTRA_DEPS_PROPERTY,extraDependenciesDir));\n    }\n    if (StringUtils.isNotEmpty(functionInstanceClassPath)) {\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_INSTANCE_CLASSPATH,functionInstanceClassPath));\n    }\n else {\n      String systemFunctionInstanceClasspath=System.getProperty(FUNCTIONS_INSTANCE_CLASSPATH);\n      if (systemFunctionInstanceClasspath == null) {\n        log.warn(\"Property {} is not set.  Falling back to using classpath of current JVM\",FUNCTIONS_INSTANCE_CLASSPATH);\n        systemFunctionInstanceClasspath=System.getProperty(\"java.class.path\");\n      }\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_INSTANCE_CLASSPATH,systemFunctionInstanceClasspath));\n    }\n    args.add(\"-Dlog4j.configurationFile=\" + logConfigFile);\n    args.add(\"-Dpulsar.function.log.dir=\" + genFunctionLogFolder(logDirectory,instanceConfig));\n    args.add(\"-Dpulsar.function.log.file=\" + String.format(\"%s-%s\",instanceConfig.getFunctionDetails().getName(),shardId));\n    if (!isEmpty(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n      for (      String runtimeFlagArg : splitRuntimeArgs(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n        args.add(runtimeFlagArg);\n      }\n    }\n    if (instanceConfig.getFunctionDetails().getResources() != null) {\n      Function.Resources resources=instanceConfig.getFunctionDetails().getResources();\n      if (resources.getRam() != 0) {\n        args.add(\"-Xmx\" + String.valueOf(resources.getRam()));\n      }\n    }\n    args.add(\"org.apache.pulsar.functions.instance.JavaInstanceMain\");\n    args.add(\"--jar\");\n    args.add(originalCodeFileName);\n  }\n else   if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.PYTHON) {\n    args.add(\"python\");\n    if (!isEmpty(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n      for (      String runtimeFlagArg : splitRuntimeArgs(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n        args.add(runtimeFlagArg);\n      }\n    }\n    args.add(instanceFile);\n    args.add(\"--py\");\n    args.add(originalCodeFileName);\n    args.add(\"--logging_directory\");\n    args.add(logDirectory);\n    args.add(\"--logging_file\");\n    args.add(instanceConfig.getFunctionDetails().getName());\n    args.add(\"--logging_config_file\");\n    args.add(logConfigFile);\n    if (installUserCodeDependencies != null && installUserCodeDependencies) {\n      args.add(\"--install_usercode_dependencies\");\n      args.add(\"True\");\n    }\n    if (!isEmpty(pythonDependencyRepository)) {\n      args.add(\"--dependency_repository\");\n      args.add(pythonDependencyRepository);\n    }\n    if (!isEmpty(pythonExtraDependencyRepository)) {\n      args.add(\"--extra_dependency_repository\");\n      args.add(pythonExtraDependencyRepository);\n    }\n  }\n  args.add(\"--instance_id\");\n  args.add(shardId);\n  args.add(\"--function_id\");\n  args.add(instanceConfig.getFunctionId());\n  args.add(\"--function_version\");\n  args.add(instanceConfig.getFunctionVersion());\n  args.add(\"--function_details\");\n  args.add(\"'\" + JsonFormat.printer().omittingInsignificantWhitespace().print(instanceConfig.getFunctionDetails()) + \"'\");\n  args.add(\"--pulsar_serviceurl\");\n  args.add(pulsarServiceUrl);\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    if (instanceConfig.isExposePulsarAdminClientEnabled() && StringUtils.isNotBlank(pulsarWebServiceUrl)) {\n      args.add(\"--web_serviceurl\");\n      args.add(pulsarWebServiceUrl);\n      args.add(\"--expose_pulsaradmin\");\n    }\n  }\n  if (authConfig != null) {\n    if (isNotBlank(authConfig.getClientAuthenticationPlugin()) && isNotBlank(authConfig.getClientAuthenticationParameters())) {\n      args.add(\"--client_auth_plugin\");\n      args.add(authConfig.getClientAuthenticationPlugin());\n      args.add(\"--client_auth_params\");\n      args.add(authConfig.getClientAuthenticationParameters());\n    }\n    args.add(\"--use_tls\");\n    args.add(Boolean.toString(authConfig.isUseTls()));\n    args.add(\"--tls_allow_insecure\");\n    args.add(Boolean.toString(authConfig.isTlsAllowInsecureConnection()));\n    args.add(\"--hostname_verification_enabled\");\n    args.add(Boolean.toString(authConfig.isTlsHostnameVerificationEnable()));\n    if (isNotBlank(authConfig.getTlsTrustCertsFilePath())) {\n      args.add(\"--tls_trust_cert_path\");\n      args.add(authConfig.getTlsTrustCertsFilePath());\n    }\n  }\n  args.add(\"--max_buffered_tuples\");\n  args.add(String.valueOf(instanceConfig.getMaxBufferedTuples()));\n  args.add(\"--port\");\n  args.add(String.valueOf(grpcPort));\n  args.add(\"--metrics_port\");\n  args.add(String.valueOf(instanceConfig.getMetricsPort()));\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    args.add(\"--pending_async_requests\");\n    args.add(String.valueOf(instanceConfig.getMaxPendingAsyncRequests()));\n  }\n  if (null != stateStorageServiceUrl) {\n    args.add(\"--state_storage_serviceurl\");\n    args.add(stateStorageServiceUrl);\n  }\n  args.add(\"--expected_healthcheck_interval\");\n  args.add(String.valueOf(expectedHealthCheckInterval));\n  if (!StringUtils.isEmpty(secretsProviderClassName)) {\n    args.add(\"--secrets_provider\");\n    args.add(secretsProviderClassName);\n    if (!StringUtils.isEmpty(secretsProviderConfig)) {\n      args.add(\"--secrets_provider_config\");\n      args.add(\"'\" + secretsProviderConfig + \"'\");\n    }\n  }\n  args.add(\"--cluster_name\");\n  args.add(instanceConfig.getClusterName());\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    if (!StringUtils.isEmpty(narExtractionDirectory)) {\n      args.add(\"--nar_extraction_directory\");\n      args.add(narExtractionDirectory);\n    }\n  }\n  return args;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9944,
        "startLineNumber" : 256,
        "startColumnNumber" : 4,
        "endLineNumber" : 446,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<String> getCmd(InstanceConfig instanceConfig,String instanceFile,String extraDependenciesDir,String logDirectory,String originalCodeFileName,String pulsarServiceUrl,String stateStorageServiceUrl,AuthenticationConfig authConfig,String shardId,Integer grpcPort,Long expectedHealthCheckInterval,String logConfigFile,String secretsProviderClassName,String secretsProviderConfig,Boolean installUserCodeDependencies,String pythonDependencyRepository,String pythonExtraDependencyRepository,String narExtractionDirectory,String functionInstanceClassPath,boolean k8sRuntime,String pulsarWebServiceUrl) throws Exception {\n  final List<String> args=new LinkedList<>();\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.GO) {\n    return getGoInstanceCmd(instanceConfig,originalCodeFileName,pulsarServiceUrl,k8sRuntime);\n  }\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    args.add(\"java\");\n    args.add(\"-cp\");\n    String classpath=instanceFile;\n    if (StringUtils.isNotEmpty(extraDependenciesDir)) {\n      classpath=classpath + \":\" + extraDependenciesDir+ \"/*\";\n    }\n    args.add(classpath);\n    if (StringUtils.isNotEmpty(extraDependenciesDir)) {\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_EXTRA_DEPS_PROPERTY,extraDependenciesDir));\n    }\n    if (StringUtils.isNotEmpty(functionInstanceClassPath)) {\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_INSTANCE_CLASSPATH,functionInstanceClassPath));\n    }\n else {\n      String systemFunctionInstanceClasspath=System.getProperty(FUNCTIONS_INSTANCE_CLASSPATH);\n      if (systemFunctionInstanceClasspath == null) {\n        log.warn(\"Property {} is not set.  Falling back to using classpath of current JVM\",FUNCTIONS_INSTANCE_CLASSPATH);\n        systemFunctionInstanceClasspath=System.getProperty(\"java.class.path\");\n      }\n      args.add(String.format(\"-D%s=%s\",FUNCTIONS_INSTANCE_CLASSPATH,systemFunctionInstanceClasspath));\n    }\n    args.add(\"-Dlog4j.configurationFile=\" + logConfigFile);\n    args.add(\"-Dpulsar.function.log.dir=\" + genFunctionLogFolder(logDirectory,instanceConfig));\n    args.add(\"-Dpulsar.function.log.file=\" + String.format(\"%s-%s\",instanceConfig.getFunctionDetails().getName(),shardId));\n    if (!isEmpty(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n      for (      String runtimeFlagArg : splitRuntimeArgs(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n        args.add(runtimeFlagArg);\n      }\n    }\n    if (instanceConfig.getFunctionDetails().getResources() != null) {\n      Function.Resources resources=instanceConfig.getFunctionDetails().getResources();\n      if (resources.getRam() != 0) {\n        args.add(\"-Xmx\" + String.valueOf(resources.getRam()));\n      }\n    }\n    args.add(\"org.apache.pulsar.functions.instance.JavaInstanceMain\");\n    args.add(\"--jar\");\n    args.add(originalCodeFileName);\n  }\n else   if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.PYTHON) {\n    args.add(\"python\");\n    if (!isEmpty(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n      for (      String runtimeFlagArg : splitRuntimeArgs(instanceConfig.getFunctionDetails().getRuntimeFlags())) {\n        args.add(runtimeFlagArg);\n      }\n    }\n    args.add(instanceFile);\n    args.add(\"--py\");\n    args.add(originalCodeFileName);\n    args.add(\"--logging_directory\");\n    args.add(logDirectory);\n    args.add(\"--logging_file\");\n    args.add(instanceConfig.getFunctionDetails().getName());\n    args.add(\"--logging_config_file\");\n    args.add(logConfigFile);\n    if (installUserCodeDependencies != null && installUserCodeDependencies) {\n      args.add(\"--install_usercode_dependencies\");\n      args.add(\"True\");\n    }\n    if (!isEmpty(pythonDependencyRepository)) {\n      args.add(\"--dependency_repository\");\n      args.add(pythonDependencyRepository);\n    }\n    if (!isEmpty(pythonExtraDependencyRepository)) {\n      args.add(\"--extra_dependency_repository\");\n      args.add(pythonExtraDependencyRepository);\n    }\n  }\n  args.add(\"--instance_id\");\n  args.add(shardId);\n  args.add(\"--function_id\");\n  args.add(instanceConfig.getFunctionId());\n  args.add(\"--function_version\");\n  args.add(instanceConfig.getFunctionVersion());\n  args.add(\"--function_details\");\n  args.add(\"'\" + JsonFormat.printer().omittingInsignificantWhitespace().print(instanceConfig.getFunctionDetails()) + \"'\");\n  args.add(\"--pulsar_serviceurl\");\n  args.add(pulsarServiceUrl);\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    if (instanceConfig.isExposePulsarAdminClientEnabled() && StringUtils.isNotBlank(pulsarWebServiceUrl)) {\n      args.add(\"--web_serviceurl\");\n      args.add(pulsarWebServiceUrl);\n      args.add(\"--expose_pulsaradmin\");\n    }\n  }\n  if (authConfig != null) {\n    if (isNotBlank(authConfig.getClientAuthenticationPlugin()) && isNotBlank(authConfig.getClientAuthenticationParameters())) {\n      args.add(\"--client_auth_plugin\");\n      args.add(authConfig.getClientAuthenticationPlugin());\n      args.add(\"--client_auth_params\");\n      args.add(authConfig.getClientAuthenticationParameters());\n    }\n    args.add(\"--use_tls\");\n    args.add(Boolean.toString(authConfig.isUseTls()));\n    args.add(\"--tls_allow_insecure\");\n    args.add(Boolean.toString(authConfig.isTlsAllowInsecureConnection()));\n    args.add(\"--hostname_verification_enabled\");\n    args.add(Boolean.toString(authConfig.isTlsHostnameVerificationEnable()));\n    if (isNotBlank(authConfig.getTlsTrustCertsFilePath())) {\n      args.add(\"--tls_trust_cert_path\");\n      args.add(authConfig.getTlsTrustCertsFilePath());\n    }\n  }\n  args.add(\"--max_buffered_tuples\");\n  args.add(String.valueOf(instanceConfig.getMaxBufferedTuples()));\n  args.add(\"--port\");\n  args.add(String.valueOf(grpcPort));\n  args.add(\"--metrics_port\");\n  args.add(String.valueOf(instanceConfig.getMetricsPort()));\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    args.add(\"--pending_async_requests\");\n    args.add(String.valueOf(instanceConfig.getMaxPendingAsyncRequests()));\n  }\n  if (null != stateStorageServiceUrl) {\n    args.add(\"--state_storage_serviceurl\");\n    args.add(stateStorageServiceUrl);\n  }\n  args.add(\"--expected_healthcheck_interval\");\n  args.add(String.valueOf(expectedHealthCheckInterval));\n  if (!StringUtils.isEmpty(secretsProviderClassName)) {\n    args.add(\"--secrets_provider\");\n    args.add(secretsProviderClassName);\n    if (!StringUtils.isEmpty(secretsProviderConfig)) {\n      args.add(\"--secrets_provider_config\");\n      args.add(\"'\" + secretsProviderConfig + \"'\");\n    }\n  }\n  args.add(\"--cluster_name\");\n  args.add(instanceConfig.getClusterName());\n  if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {\n    if (!StringUtils.isEmpty(narExtractionDirectory)) {\n      args.add(\"--nar_extraction_directory\");\n      args.add(narExtractionDirectory);\n    }\n  }\n  return args;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 908,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 436,
        "startColumnNumber" : 8,
        "endLineNumber" : 436,
        "endColumnNumber" : 35
      },
      "nodeContext" : "args.add(\"--cluster_name\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 436,
    "startColumnNumber" : 17,
    "endLineNumber" : 436,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}