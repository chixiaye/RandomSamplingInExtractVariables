{
  "id" : 28,
  "expression" : "'_'",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/CTokenMarker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'_'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 130,
      "startColumnNumber" : 56,
      "endLineNumber" : 130,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 130,
        "startColumnNumber" : 51,
        "endLineNumber" : 130,
        "endColumnNumber" : 59
      },
      "nodeContext" : "c != '_'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 129,
        "startColumnNumber" : 43,
        "endLineNumber" : 130,
        "endColumnNumber" : 59
      },
      "nodeContext" : "!Character.isLetterOrDigit(c) && c != '_'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 129,
        "startColumnNumber" : 40,
        "endLineNumber" : 131,
        "endColumnNumber" : 68
      },
      "nodeContext" : "if (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 55,
        "startColumnNumber" : 32,
        "endLineNumber" : 133,
        "endColumnNumber" : 33
      },
      "nodeContext" : "switch (c) {\ncase '#':  if (backslash)   backslash=false;\n else   if (cpp) {\n    if (doKeyword(line,i,c))     break;\n    addToken(i - lastOffset,token);\n    addToken(mlength - i,Token.KEYWORD2);\n    lastOffset=lastKeyword=mlength;\n    break loop;\n  }\nbreak;\ncase '\"':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL1;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 270,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6868,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 172,
        "endColumnNumber" : 25
      },
      "nodeContext" : "switch (token) {\ncase Token.NULL:switch (c) {\ncase '#':    if (backslash)     backslash=false;\n else     if (cpp) {\n      if (doKeyword(line,i,c))       break;\n      addToken(i - lastOffset,token);\n      addToken(mlength - i,Token.KEYWORD2);\n      lastOffset=lastKeyword=mlength;\n      break loop;\n    }\n  break;\ncase '\"':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL1;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 415,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 7185,
        "startLineNumber" : 42,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int i1=(i + 1);\n  char c=array[i];\n  if (c == '\\\\') {\n    backslash=!backslash;\n    continue;\n  }\nswitch (token) {\ncase Token.NULL:switch (c) {\ncase '#':      if (backslash)       backslash=false;\n else       if (cpp) {\n        if (doKeyword(line,i,c))         break;\n        addToken(i - lastOffset,token);\n        addToken(mlength - i,Token.KEYWORD2);\n        lastOffset=lastKeyword=mlength;\n        break loop;\n      }\n    break;\ncase '\"':  doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\n  addToken(i - lastOffset,token);\n  token=Token.LITERAL1;\n  lastOffset=lastKeyword=i;\n}\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 442,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 7239,
        "startLineNumber" : 41,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=offset; i < mlength; i++) {\n  int i1=(i + 1);\n  char c=array[i];\n  if (c == '\\\\') {\n    backslash=!backslash;\n    continue;\n  }\nswitch (token) {\ncase Token.NULL:switch (c) {\ncase '#':      if (backslash)       backslash=false;\n else       if (cpp) {\n        if (doKeyword(line,i,c))         break;\n        addToken(i - lastOffset,token);\n        addToken(mlength - i,Token.KEYWORD2);\n        lastOffset=lastKeyword=mlength;\n        break loop;\n      }\n    break;\ncase '\"':  doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\n  addToken(i - lastOffset,token);\n  token=Token.LITERAL1;\n  lastOffset=lastKeyword=i;\n}\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 453,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7255,
        "startLineNumber" : 41,
        "startColumnNumber" : 0,
        "endLineNumber" : 173,
        "endColumnNumber" : 17
      },
      "nodeContext" : "loop: for (int i=offset; i < mlength; i++) {\n  int i1=(i + 1);\n  char c=array[i];\n  if (c == '\\\\') {\n    backslash=!backslash;\n    continue;\n  }\nswitch (token) {\ncase Token.NULL:switch (c) {\ncase '#':      if (backslash)       backslash=false;\n else       if (cpp) {\n        if (doKeyword(line,i,c))         break;\n        addToken(i - lastOffset,token);\n        addToken(mlength - i,Token.KEYWORD2);\n        lastOffset=lastKeyword=mlength;\n        break loop;\n      }\n    break;\ncase '\"':  doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\n  addToken(i - lastOffset,token);\n  token=Token.LITERAL1;\n  lastOffset=lastKeyword=i;\n}\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 455,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8304,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char[] array=line.array;\n  int offset=line.offset;\n  lastOffset=offset;\n  lastKeyword=offset;\n  int mlength=line.count + offset;\n  boolean backslash=false;\n  loop:   for (int i=offset; i < mlength; i++) {\n    int i1=(i + 1);\n    char c=array[i];\n    if (c == '\\\\') {\n      backslash=!backslash;\n      continue;\n    }\nswitch (token) {\ncase Token.NULL:switch (c) {\ncase '#':        if (backslash)         backslash=false;\n else         if (cpp) {\n          if (doKeyword(line,i,c))           break;\n          addToken(i - lastOffset,token);\n          addToken(mlength - i,Token.KEYWORD2);\n          lastOffset=lastKeyword=mlength;\n          break loop;\n        }\n      break;\ncase '\"':    doKeyword(line,i,c);\n  if (backslash)   backslash=false;\n else {\n    addToken(i - lastOffset,token);\n    token=Token.LITERAL1;\n    lastOffset=lastKeyword=i;\n  }\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n}\nif (token == Token.NULL) doKeyword(line,mlength,'\\0');\nswitch (token) {\ncase Token.LITERAL1:case Token.LITERAL2:addToken(mlength - lastOffset,Token.INVALID);\ntoken=Token.NULL;\nbreak;\ncase Token.KEYWORD2:addToken(mlength - lastOffset,token);\nif (!backslash) token=Token.NULL;\naddToken(mlength - lastOffset,token);\nbreak;\ndefault:addToken(mlength - lastOffset,token);\nbreak;\n}\nreturn token;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 571,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8380,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public byte markTokensImpl(byte token,Segment line,int lineIndex){\n  char[] array=line.array;\n  int offset=line.offset;\n  lastOffset=offset;\n  lastKeyword=offset;\n  int mlength=line.count + offset;\n  boolean backslash=false;\n  loop:   for (int i=offset; i < mlength; i++) {\n    int i1=(i + 1);\n    char c=array[i];\n    if (c == '\\\\') {\n      backslash=!backslash;\n      continue;\n    }\nswitch (token) {\ncase Token.NULL:switch (c) {\ncase '#':        if (backslash)         backslash=false;\n else         if (cpp) {\n          if (doKeyword(line,i,c))           break;\n          addToken(i - lastOffset,token);\n          addToken(mlength - i,Token.KEYWORD2);\n          lastOffset=lastKeyword=mlength;\n          break loop;\n        }\n      break;\ncase '\"':    doKeyword(line,i,c);\n  if (backslash)   backslash=false;\n else {\n    addToken(i - lastOffset,token);\n    token=Token.LITERAL1;\n    lastOffset=lastKeyword=i;\n  }\nbreak;\ncase '\\'':doKeyword(line,i,c);\nif (backslash) backslash=false;\n else {\naddToken(i - lastOffset,token);\ntoken=Token.LITERAL2;\nlastOffset=lastKeyword=i;\n}\nbreak;\ncase ':':if (lastKeyword == offset) {\nif (doKeyword(line,i,c)) break;\nbackslash=false;\naddToken(i1 - lastOffset,Token.LABEL);\nlastOffset=lastKeyword=i1;\n}\n else if (doKeyword(line,i,c)) break;\nbreak;\ncase '/':backslash=false;\ndoKeyword(line,i,c);\nif (mlength - i > 1) {\nswitch (array[i1]) {\ncase '*':addToken(i - lastOffset,token);\nlastOffset=lastKeyword=i;\nif (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;\n else token=Token.COMMENT1;\nbreak;\ncase '/':addToken(i - lastOffset,token);\naddToken(mlength - i,Token.COMMENT1);\nlastOffset=lastKeyword=mlength;\nbreak loop;\n}\n}\nbreak;\ndefault:backslash=false;\nif (!Character.isLetterOrDigit(c) && c != '_') doKeyword(line,i,c);\nbreak;\n}\nbreak;\ncase Token.COMMENT1:case Token.COMMENT2:backslash=false;\nif (c == '*' && mlength - i > 1) {\nif (array[i1] == '/') {\ni++;\naddToken((i + 1) - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i + 1;\n}\n}\nbreak;\ncase Token.LITERAL1:if (backslash) backslash=false;\n else if (c == '\"') {\naddToken(i1 - lastOffset,token);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ncase Token.LITERAL2:if (backslash) backslash=false;\n else if (c == '\\'') {\naddToken(i1 - lastOffset,Token.LITERAL1);\ntoken=Token.NULL;\nlastOffset=lastKeyword=i1;\n}\nbreak;\ndefault:throw new InternalError(\"Invalid state: \" + token);\n}\n}\nif (token == Token.NULL) doKeyword(line,mlength,'\\0');\nswitch (token) {\ncase Token.LITERAL1:case Token.LITERAL2:addToken(mlength - lastOffset,Token.INVALID);\ntoken=Token.NULL;\nbreak;\ncase Token.KEYWORD2:addToken(mlength - lastOffset,token);\nif (!backslash) token=Token.NULL;\naddToken(mlength - lastOffset,token);\nbreak;\ndefault:addToken(mlength - lastOffset,token);\nbreak;\n}\nreturn token;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 585,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 130,
        "startColumnNumber" : 51,
        "endLineNumber" : 130,
        "endColumnNumber" : 59
      },
      "nodeContext" : "c != '_'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 130,
    "startColumnNumber" : 56,
    "endLineNumber" : 130,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}