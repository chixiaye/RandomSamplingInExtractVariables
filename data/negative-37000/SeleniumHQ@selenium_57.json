{
  "id" : 57,
  "expression" : "((HasCapabilities)driver).getCapabilities().is(capability)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/remote/server/handler/html5/Utils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((HasCapabilities)driver).getCapabilities().is(capability)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 59,
      "startLineNumber" : 73,
      "startColumnNumber" : 11,
      "endLineNumber" : 73,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 10,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 70
      },
      "nodeContext" : "driver instanceof ExecuteMethod && driver instanceof HasCapabilities && ((HasCapabilities)driver).getCapabilities().is(capability)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (driver instanceof ExecuteMethod && driver instanceof HasCapabilities && ((HasCapabilities)driver).getCapabilities().is(capability)) {\n  try {\n    return remoteImplementationClazz.getConstructor(ExecuteMethod.class).newInstance((ExecuteMethod)driver);\n  }\n catch (  InvocationTargetException e) {\n    Throwable cause=e.getCause();\n    throw cause instanceof RuntimeException ? (RuntimeException)cause : new RuntimeException(cause);\n  }\ncatch (  ReflectiveOperationException e) {\n    throw new WebDriverException(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 66,
        "startColumnNumber" : 52,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (interfaceClazz.isInstance(driver)) {\n    return interfaceClazz.cast(driver);\n  }\n  if (driver instanceof ExecuteMethod && driver instanceof HasCapabilities && ((HasCapabilities)driver).getCapabilities().is(capability)) {\n    try {\n      return remoteImplementationClazz.getConstructor(ExecuteMethod.class).newInstance((ExecuteMethod)driver);\n    }\n catch (    InvocationTargetException e) {\n      Throwable cause=e.getCause();\n      throw cause instanceof RuntimeException ? (RuntimeException)cause : new RuntimeException(cause);\n    }\ncatch (    ReflectiveOperationException e) {\n      throw new WebDriverException(e);\n    }\n  }\n  throw new UnsupportedCommandException(\"driver (\" + driver.getClass().getName() + \") does not support \"+ interfaceClazz.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static <T>T convert(WebDriver driver,Class<T> interfaceClazz,String capability,Class<? extends T> remoteImplementationClazz){\n  if (interfaceClazz.isInstance(driver)) {\n    return interfaceClazz.cast(driver);\n  }\n  if (driver instanceof ExecuteMethod && driver instanceof HasCapabilities && ((HasCapabilities)driver).getCapabilities().is(capability)) {\n    try {\n      return remoteImplementationClazz.getConstructor(ExecuteMethod.class).newInstance((ExecuteMethod)driver);\n    }\n catch (    InvocationTargetException e) {\n      Throwable cause=e.getCause();\n      throw cause instanceof RuntimeException ? (RuntimeException)cause : new RuntimeException(cause);\n    }\ncatch (    ReflectiveOperationException e) {\n      throw new WebDriverException(e);\n    }\n  }\n  throw new UnsupportedCommandException(\"driver (\" + driver.getClass().getName() + \") does not support \"+ interfaceClazz.getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 70
      },
      "nodeContext" : "driver instanceof ExecuteMethod && driver instanceof HasCapabilities && ((HasCapabilities)driver).getCapabilities().is(capability)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 59,
    "startLineNumber" : 73,
    "startColumnNumber" : 11,
    "endLineNumber" : 73,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}