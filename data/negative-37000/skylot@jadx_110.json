{
  "id" : 110,
  "expression" : "val instanceof Float",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val instanceof Float",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 155,
      "startColumnNumber" : 13,
      "endLineNumber" : 155,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 155,
        "startColumnNumber" : 9,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 214,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 153,
        "startColumnNumber" : 9,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof Boolean) {\n  code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n}\n else if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 233,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 151,
        "startColumnNumber" : 9,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof Character) {\n  code.add(getStringUtils().unescapeChar((Character)val));\n}\n else if (val instanceof Boolean) {\n  code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n}\n else if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 251,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 149,
        "startColumnNumber" : 9,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof Integer) {\n  code.add(TypeGen.formatInteger((Integer)val));\n}\n else if (val instanceof Character) {\n  code.add(getStringUtils().unescapeChar((Character)val));\n}\n else if (val instanceof Boolean) {\n  code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n}\n else if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1564,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof String) {\n  code.add(getStringUtils().unescapeString((String)val));\n}\n else if (val instanceof Integer) {\n  code.add(TypeGen.formatInteger((Integer)val));\n}\n else if (val instanceof Character) {\n  code.add(getStringUtils().unescapeChar((Character)val));\n}\n else if (val instanceof Boolean) {\n  code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n}\n else if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 142,
        "startColumnNumber" : 54,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (val == null) {\n    code.add(\"null\");\n    return;\n  }\n  if (val instanceof String) {\n    code.add(getStringUtils().unescapeString((String)val));\n  }\n else   if (val instanceof Integer) {\n    code.add(TypeGen.formatInteger((Integer)val));\n  }\n else   if (val instanceof Character) {\n    code.add(getStringUtils().unescapeChar((Character)val));\n  }\n else   if (val instanceof Boolean) {\n    code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n  }\n else   if (val instanceof Float) {\n    code.add(TypeGen.formatFloat((Float)val));\n  }\n else   if (val instanceof Double) {\n    code.add(TypeGen.formatDouble((Double)val));\n  }\n else   if (val instanceof Long) {\n    code.add(TypeGen.formatLong((Long)val));\n  }\n else   if (val instanceof Short) {\n    code.add(TypeGen.formatShort((Short)val));\n  }\n else   if (val instanceof Byte) {\n    code.add(TypeGen.formatByte((Byte)val));\n  }\n else   if (val instanceof ArgType) {\n    classGen.useType(code,(ArgType)val);\n    code.add(\".class\");\n  }\n else   if (val instanceof FieldInfo) {\n    FieldInfo field=(FieldInfo)val;\n    InsnGen.makeStaticFieldAccess(code,field,classGen);\n  }\n else   if (val instanceof Iterable) {\n    code.add('{');\n    Iterator<?> it=((Iterable<?>)val).iterator();\n    while (it.hasNext()) {\n      Object obj=it.next();\n      encodeValue(code,obj);\n      if (it.hasNext()) {\n        code.add(\", \");\n      }\n    }\n    code.add('}');\n  }\n else   if (val instanceof Annotation) {\n    formatAnnotation(code,(Annotation)val);\n  }\n else {\n    throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1681,
        "startLineNumber" : 142,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void encodeValue(CodeWriter code,Object val){\n  if (val == null) {\n    code.add(\"null\");\n    return;\n  }\n  if (val instanceof String) {\n    code.add(getStringUtils().unescapeString((String)val));\n  }\n else   if (val instanceof Integer) {\n    code.add(TypeGen.formatInteger((Integer)val));\n  }\n else   if (val instanceof Character) {\n    code.add(getStringUtils().unescapeChar((Character)val));\n  }\n else   if (val instanceof Boolean) {\n    code.add(Boolean.TRUE.equals(val) ? \"true\" : \"false\");\n  }\n else   if (val instanceof Float) {\n    code.add(TypeGen.formatFloat((Float)val));\n  }\n else   if (val instanceof Double) {\n    code.add(TypeGen.formatDouble((Double)val));\n  }\n else   if (val instanceof Long) {\n    code.add(TypeGen.formatLong((Long)val));\n  }\n else   if (val instanceof Short) {\n    code.add(TypeGen.formatShort((Short)val));\n  }\n else   if (val instanceof Byte) {\n    code.add(TypeGen.formatByte((Byte)val));\n  }\n else   if (val instanceof ArgType) {\n    classGen.useType(code,(ArgType)val);\n    code.add(\".class\");\n  }\n else   if (val instanceof FieldInfo) {\n    FieldInfo field=(FieldInfo)val;\n    InsnGen.makeStaticFieldAccess(code,field,classGen);\n  }\n else   if (val instanceof Iterable) {\n    code.add('{');\n    Iterator<?> it=((Iterable<?>)val).iterator();\n    while (it.hasNext()) {\n      Object obj=it.next();\n      encodeValue(code,obj);\n      if (it.hasNext()) {\n        code.add(\", \");\n      }\n    }\n    code.add('}');\n  }\n else   if (val instanceof Annotation) {\n    formatAnnotation(code,(Annotation)val);\n  }\n else {\n    throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 155,
        "startColumnNumber" : 9,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (val instanceof Float) {\n  code.add(TypeGen.formatFloat((Float)val));\n}\n else if (val instanceof Double) {\n  code.add(TypeGen.formatDouble((Double)val));\n}\n else if (val instanceof Long) {\n  code.add(TypeGen.formatLong((Long)val));\n}\n else if (val instanceof Short) {\n  code.add(TypeGen.formatShort((Short)val));\n}\n else if (val instanceof Byte) {\n  code.add(TypeGen.formatByte((Byte)val));\n}\n else if (val instanceof ArgType) {\n  classGen.useType(code,(ArgType)val);\n  code.add(\".class\");\n}\n else if (val instanceof FieldInfo) {\n  FieldInfo field=(FieldInfo)val;\n  InsnGen.makeStaticFieldAccess(code,field,classGen);\n}\n else if (val instanceof Iterable) {\n  code.add('{');\n  Iterator<?> it=((Iterable<?>)val).iterator();\n  while (it.hasNext()) {\n    Object obj=it.next();\n    encodeValue(code,obj);\n    if (it.hasNext()) {\n      code.add(\", \");\n    }\n  }\n  code.add('}');\n}\n else if (val instanceof Annotation) {\n  formatAnnotation(code,(Annotation)val);\n}\n else {\n  throw new JadxRuntimeException(\"Can't decode value: \" + val + \" (\"+ val.getClass()+ ')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 214,
      "astHeight" : 17
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 155,
    "startColumnNumber" : 13,
    "endLineNumber" : 155,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}