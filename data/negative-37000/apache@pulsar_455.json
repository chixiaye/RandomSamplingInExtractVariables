{
  "id" : 455,
  "expression" : "\"testVal\".getBytes()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ServerCnxTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"testVal\".getBytes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 1434,
      "startColumnNumber" : 26,
      "endLineNumber" : 1434,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 1432,
        "startColumnNumber" : 8,
        "endLineNumber" : 1434,
        "endColumnNumber" : 47
      },
      "nodeContext" : "messageMetadata.addEncryptionKey().setKey(\"testKey\").setValue(\"testVal\".getBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 1432,
        "startColumnNumber" : 8,
        "endLineNumber" : 1434,
        "endColumnNumber" : 48
      },
      "nodeContext" : "messageMetadata.addEncryptionKey().setKey(\"testKey\").setValue(\"testVal\".getBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2033,
        "startLineNumber" : 1406,
        "startColumnNumber" : 76,
        "endLineNumber" : 1442,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  resetChannel();\n  setChannelConnected();\n  ZooKeeperDataCache<Policies> zkDataCache=mock(ZooKeeperDataCache.class);\n  Policies policies=mock(Policies.class);\n  policies.encryption_required=true;\n  policies.topicDispatchRate=Maps.newHashMap();\n  policies.clusterDispatchRate=Maps.newHashMap();\n  doReturn(Optional.of(policies)).when(zkDataCache).get(AdminResource.path(POLICIES,TopicName.get(encryptionRequiredTopicName).getNamespace()));\n  doReturn(CompletableFuture.completedFuture(Optional.of(policies))).when(zkDataCache).getAsync(AdminResource.path(POLICIES,TopicName.get(encryptionRequiredTopicName).getNamespace()));\n  doReturn(zkDataCache).when(configCacheService).policiesCache();\n  ByteBuf clientCommand=Commands.newProducer(encryptionRequiredTopicName,1,1,\"prod-name\",true,Collections.emptyMap());\n  channel.writeInbound(clientCommand);\n  assertTrue(getResponse() instanceof CommandProducerSuccess);\n  MessageMetadata messageMetadata=new MessageMetadata().setPublishTime(System.currentTimeMillis()).setProducerName(\"prod-name\").setSequenceId(0);\n  messageMetadata.addEncryptionKey().setKey(\"testKey\").setValue(\"testVal\".getBytes());\n  ByteBuf data=Unpooled.buffer(1024);\n  clientCommand=ByteBufPair.coalesce(Commands.newSend(1,0,1,ChecksumType.None,messageMetadata,data));\n  channel.writeInbound(Unpooled.copiedBuffer(clientCommand));\n  clientCommand.release();\n  assertTrue(getResponse() instanceof CommandSendReceipt);\n  channel.finish();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 1405,
        "startColumnNumber" : 4,
        "endLineNumber" : 1442,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=30000) public void testSendSuccessOnEncryptionRequiredTopic() throws Exception {\n  resetChannel();\n  setChannelConnected();\n  ZooKeeperDataCache<Policies> zkDataCache=mock(ZooKeeperDataCache.class);\n  Policies policies=mock(Policies.class);\n  policies.encryption_required=true;\n  policies.topicDispatchRate=Maps.newHashMap();\n  policies.clusterDispatchRate=Maps.newHashMap();\n  doReturn(Optional.of(policies)).when(zkDataCache).get(AdminResource.path(POLICIES,TopicName.get(encryptionRequiredTopicName).getNamespace()));\n  doReturn(CompletableFuture.completedFuture(Optional.of(policies))).when(zkDataCache).getAsync(AdminResource.path(POLICIES,TopicName.get(encryptionRequiredTopicName).getNamespace()));\n  doReturn(zkDataCache).when(configCacheService).policiesCache();\n  ByteBuf clientCommand=Commands.newProducer(encryptionRequiredTopicName,1,1,\"prod-name\",true,Collections.emptyMap());\n  channel.writeInbound(clientCommand);\n  assertTrue(getResponse() instanceof CommandProducerSuccess);\n  MessageMetadata messageMetadata=new MessageMetadata().setPublishTime(System.currentTimeMillis()).setProducerName(\"prod-name\").setSequenceId(0);\n  messageMetadata.addEncryptionKey().setKey(\"testKey\").setValue(\"testVal\".getBytes());\n  ByteBuf data=Unpooled.buffer(1024);\n  clientCommand=ByteBufPair.coalesce(Commands.newSend(1,0,1,ChecksumType.None,messageMetadata,data));\n  channel.writeInbound(Unpooled.copiedBuffer(clientCommand));\n  clientCommand.release();\n  assertTrue(getResponse() instanceof CommandSendReceipt);\n  channel.finish();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 1432,
        "startColumnNumber" : 8,
        "endLineNumber" : 1434,
        "endColumnNumber" : 47
      },
      "nodeContext" : "messageMetadata.addEncryptionKey().setKey(\"testKey\").setValue(\"testVal\".getBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 1434,
    "startColumnNumber" : 26,
    "endLineNumber" : 1434,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}