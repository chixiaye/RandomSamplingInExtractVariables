{
  "id" : 425,
  "expression" : "contentType.toString()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "contentType.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 177,
      "startColumnNumber" : 74,
      "endLineNumber" : 177,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 177,
        "startColumnNumber" : 40,
        "endLineNumber" : 177,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ImageIO.getImageReadersByMIMEType(contentType.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 25,
        "endLineNumber" : 177,
        "endColumnNumber" : 97
      },
      "nodeContext" : "imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 177,
        "startColumnNumber" : 3,
        "endLineNumber" : 177,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 171,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  imageInputStream=createImageInputStream(inputMessage.getBody());\n  MediaType contentType=inputMessage.getHeaders().getContentType();\n  if (contentType == null) {\n    throw new HttpMessageNotReadableException(\"No Content-Type header\",inputMessage);\n  }\n  Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n  if (imageReaders.hasNext()) {\n    imageReader=imageReaders.next();\n    ImageReadParam irp=imageReader.getDefaultReadParam();\n    process(irp);\n    imageReader.setInput(imageInputStream,true);\n    return imageReader.read(0,irp);\n  }\n else {\n    throw new HttpMessageNotReadableException(\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\",inputMessage);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1000,
        "startLineNumber" : 171,
        "startColumnNumber" : 2,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  imageInputStream=createImageInputStream(inputMessage.getBody());\n  MediaType contentType=inputMessage.getHeaders().getContentType();\n  if (contentType == null) {\n    throw new HttpMessageNotReadableException(\"No Content-Type header\",inputMessage);\n  }\n  Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n  if (imageReaders.hasNext()) {\n    imageReader=imageReaders.next();\n    ImageReadParam irp=imageReader.getDefaultReadParam();\n    process(irp);\n    imageReader.setInput(imageInputStream,true);\n    return imageReader.read(0,irp);\n  }\n else {\n    throw new HttpMessageNotReadableException(\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\",inputMessage);\n  }\n}\n  finally {\n  if (imageReader != null) {\n    imageReader.dispose();\n  }\n  if (imageInputStream != null) {\n    try {\n      imageInputStream.close();\n    }\n catch (    IOException ex) {\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 117,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 167,
        "startColumnNumber" : 55,
        "endLineNumber" : 204,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ImageInputStream imageInputStream=null;\n  ImageReader imageReader=null;\n  try {\n    imageInputStream=createImageInputStream(inputMessage.getBody());\n    MediaType contentType=inputMessage.getHeaders().getContentType();\n    if (contentType == null) {\n      throw new HttpMessageNotReadableException(\"No Content-Type header\",inputMessage);\n    }\n    Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n    if (imageReaders.hasNext()) {\n      imageReader=imageReaders.next();\n      ImageReadParam irp=imageReader.getDefaultReadParam();\n      process(irp);\n      imageReader.setInput(imageInputStream,true);\n      return imageReader.read(0,irp);\n    }\n else {\n      throw new HttpMessageNotReadableException(\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\",inputMessage);\n    }\n  }\n  finally {\n    if (imageReader != null) {\n      imageReader.dispose();\n    }\n    if (imageInputStream != null) {\n      try {\n        imageInputStream.close();\n      }\n catch (      IOException ex) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1257,
        "startLineNumber" : 165,
        "startColumnNumber" : 1,
        "endLineNumber" : 204,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public BufferedImage read(@Nullable Class<? extends BufferedImage> clazz,HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\n  ImageInputStream imageInputStream=null;\n  ImageReader imageReader=null;\n  try {\n    imageInputStream=createImageInputStream(inputMessage.getBody());\n    MediaType contentType=inputMessage.getHeaders().getContentType();\n    if (contentType == null) {\n      throw new HttpMessageNotReadableException(\"No Content-Type header\",inputMessage);\n    }\n    Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n    if (imageReaders.hasNext()) {\n      imageReader=imageReaders.next();\n      ImageReadParam irp=imageReader.getDefaultReadParam();\n      process(irp);\n      imageReader.setInput(imageInputStream,true);\n      return imageReader.read(0,irp);\n    }\n else {\n      throw new HttpMessageNotReadableException(\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\",inputMessage);\n    }\n  }\n  finally {\n    if (imageReader != null) {\n      imageReader.dispose();\n    }\n    if (imageInputStream != null) {\n      try {\n        imageInputStream.close();\n      }\n catch (      IOException ex) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 155,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 177,
        "startColumnNumber" : 3,
        "endLineNumber" : 177,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Iterator<ImageReader> imageReaders=ImageIO.getImageReadersByMIMEType(contentType.toString());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 177,
    "startColumnNumber" : 74,
    "endLineNumber" : 177,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}