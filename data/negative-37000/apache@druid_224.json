{
  "id" : 224,
  "expression" : "new IndexSpec(null,null,CompressionStrategy.NONE,null)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IndexSpec(null,null,CompressionStrategy.NONE,null)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 115,
      "startColumnNumber" : 24,
      "endLineNumber" : 115,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 105
      },
      "nodeContext" : "Assert.assertEquals(new IndexSpec(null,null,CompressionStrategy.NONE,null),config.getIndexSpec())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Assert.assertEquals(new IndexSpec(null,null,CompressionStrategy.NONE,null),config.getIndexSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2105,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"kafka\\\",\\n\" + \"  \\\"basePersistDirectory\\\": \\\"/tmp/xxx\\\",\\n\"+ \"  \\\"maxRowsInMemory\\\": 100,\\n\"+ \"  \\\"maxRowsPerSegment\\\": 100,\\n\"+ \"  \\\"maxTotalRows\\\": 1000,\\n\"+ \"  \\\"intermediatePersistPeriod\\\": \\\"PT1H\\\",\\n\"+ \"  \\\"maxPendingPersists\\\": 100,\\n\"+ \"  \\\"reportParseExceptions\\\": true,\\n\"+ \"  \\\"handoffConditionTimeout\\\": 100,\\n\"+ \"  \\\"indexSpec\\\": { \\\"metricCompression\\\" : \\\"NONE\\\" },\\n\"+ \"  \\\"indexSpecForIntermediatePersists\\\": { \\\"dimensionCompression\\\" : \\\"uncompressed\\\" },\\n\"+ \"  \\\"appendableIndexSpec\\\": { \\\"type\\\" : \\\"onheap\\\" }\\n\"+ \"}\";\n  KafkaIndexTaskTuningConfig config=(KafkaIndexTaskTuningConfig)mapper.readValue(mapper.writeValueAsString(mapper.readValue(jsonStr,TuningConfig.class)),TuningConfig.class);\n  Assert.assertEquals(new File(\"/tmp/xxx\"),config.getBasePersistDirectory());\n  Assert.assertEquals(new OnheapIncrementalIndex.Spec(),config.getAppendableIndexSpec());\n  Assert.assertEquals(100,config.getMaxRowsInMemory());\n  Assert.assertEquals(100,config.getMaxRowsPerSegment().intValue());\n  Assert.assertNotEquals(null,config.getMaxTotalRows());\n  Assert.assertEquals(1000,config.getMaxTotalRows().longValue());\n  Assert.assertEquals(new Period(\"PT1H\"),config.getIntermediatePersistPeriod());\n  Assert.assertEquals(100,config.getMaxPendingPersists());\n  Assert.assertEquals(true,config.isReportParseExceptions());\n  Assert.assertEquals(100,config.getHandoffConditionTimeout());\n  Assert.assertEquals(new IndexSpec(null,null,CompressionStrategy.NONE,null),config.getIndexSpec());\n  Assert.assertEquals(new IndexSpec(null,CompressionStrategy.UNCOMPRESSED,null,null),config.getIndexSpecForIntermediatePersists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerdeWithNonDefaults() throws Exception {\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"kafka\\\",\\n\" + \"  \\\"basePersistDirectory\\\": \\\"/tmp/xxx\\\",\\n\"+ \"  \\\"maxRowsInMemory\\\": 100,\\n\"+ \"  \\\"maxRowsPerSegment\\\": 100,\\n\"+ \"  \\\"maxTotalRows\\\": 1000,\\n\"+ \"  \\\"intermediatePersistPeriod\\\": \\\"PT1H\\\",\\n\"+ \"  \\\"maxPendingPersists\\\": 100,\\n\"+ \"  \\\"reportParseExceptions\\\": true,\\n\"+ \"  \\\"handoffConditionTimeout\\\": 100,\\n\"+ \"  \\\"indexSpec\\\": { \\\"metricCompression\\\" : \\\"NONE\\\" },\\n\"+ \"  \\\"indexSpecForIntermediatePersists\\\": { \\\"dimensionCompression\\\" : \\\"uncompressed\\\" },\\n\"+ \"  \\\"appendableIndexSpec\\\": { \\\"type\\\" : \\\"onheap\\\" }\\n\"+ \"}\";\n  KafkaIndexTaskTuningConfig config=(KafkaIndexTaskTuningConfig)mapper.readValue(mapper.writeValueAsString(mapper.readValue(jsonStr,TuningConfig.class)),TuningConfig.class);\n  Assert.assertEquals(new File(\"/tmp/xxx\"),config.getBasePersistDirectory());\n  Assert.assertEquals(new OnheapIncrementalIndex.Spec(),config.getAppendableIndexSpec());\n  Assert.assertEquals(100,config.getMaxRowsInMemory());\n  Assert.assertEquals(100,config.getMaxRowsPerSegment().intValue());\n  Assert.assertNotEquals(null,config.getMaxTotalRows());\n  Assert.assertEquals(1000,config.getMaxTotalRows().longValue());\n  Assert.assertEquals(new Period(\"PT1H\"),config.getIntermediatePersistPeriod());\n  Assert.assertEquals(100,config.getMaxPendingPersists());\n  Assert.assertEquals(true,config.isReportParseExceptions());\n  Assert.assertEquals(100,config.getHandoffConditionTimeout());\n  Assert.assertEquals(new IndexSpec(null,null,CompressionStrategy.NONE,null),config.getIndexSpec());\n  Assert.assertEquals(new IndexSpec(null,CompressionStrategy.UNCOMPRESSED,null,null),config.getIndexSpecForIntermediatePersists());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Assert.assertEquals(new IndexSpec(null,null,CompressionStrategy.NONE,null),config.getIndexSpec());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "org.apache.druid.segment.IndexSpec"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 115,
    "startColumnNumber" : 24,
    "endLineNumber" : 115,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}