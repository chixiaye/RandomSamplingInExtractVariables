{
  "id" : 53,
  "expression" : "selectPST.executeQuery()",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoLogManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "selectPST.executeQuery()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 146,
      "startColumnNumber" : 21,
      "endLineNumber" : 146,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 146,
        "endColumnNumber" : 45
      },
      "nodeContext" : "rs=selectPST.executeQuery()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 146,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rs=selectPST.executeQuery();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 198,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  conn=dataSourceProxy.getPlainConnection();\n  conn.setAutoCommit(false);\n  selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n  selectPST.setLong(1,branchId);\n  selectPST.setString(2,xid);\n  rs=selectPST.executeQuery();\n  boolean exists=false;\n  while (rs.next()) {\n    exists=true;\n    int state=rs.getInt(\"log_status\");\n    if (!canUndo(state)) {\n      LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n      return;\n    }\n    Blob b=rs.getBlob(\"rollback_info\");\n    String rollbackInfo=BlobUtils.blob2string(b);\n    BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n    for (    SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n      TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n      sqlUndoLog.setTableMeta(tableMeta);\n      AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n      undoExecutor.executeOn(conn);\n    }\n  }\n  if (exists) {\n    deleteUndoLog(xid,branchId,conn);\n    conn.commit();\n    LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n  }\n else {\n    insertUndoLogWithGlobalFinished(xid,branchId,conn);\n    conn.commit();\n    LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4523,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  conn=dataSourceProxy.getPlainConnection();\n  conn.setAutoCommit(false);\n  selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n  selectPST.setLong(1,branchId);\n  selectPST.setString(2,xid);\n  rs=selectPST.executeQuery();\n  boolean exists=false;\n  while (rs.next()) {\n    exists=true;\n    int state=rs.getInt(\"log_status\");\n    if (!canUndo(state)) {\n      LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n      return;\n    }\n    Blob b=rs.getBlob(\"rollback_info\");\n    String rollbackInfo=BlobUtils.blob2string(b);\n    BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n    for (    SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n      TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n      sqlUndoLog.setTableMeta(tableMeta);\n      AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n      undoExecutor.executeOn(conn);\n    }\n  }\n  if (exists) {\n    deleteUndoLog(xid,branchId,conn);\n    conn.commit();\n    LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n  }\n else {\n    insertUndoLogWithGlobalFinished(xid,branchId,conn);\n    conn.commit();\n    LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n  }\n  return;\n}\n catch (SQLIntegrityConstraintViolationException e) {\n  LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",xid,branchId);\n}\ncatch (Throwable e) {\n  if (conn != null) {\n    try {\n      conn.rollback();\n    }\n catch (    SQLException rollbackEx) {\n      LOGGER.warn(\"Failed to close JDBC resource while undo ... \",rollbackEx);\n    }\n  }\n  throw new TransactionException(BranchRollbackFailed_Retriable,String.format(\"%s/%s\",branchId,xid),e);\n}\n finally {\n  try {\n    if (rs != null) {\n      rs.close();\n    }\n    if (selectPST != null) {\n      selectPST.close();\n    }\n    if (conn != null) {\n      conn.close();\n    }\n  }\n catch (  SQLException closeEx) {\n    LOGGER.warn(\"Failed to close JDBC resource while undo ... \",closeEx);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4547,
        "startLineNumber" : 135,
        "startColumnNumber" : 19,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    conn=dataSourceProxy.getPlainConnection();\n    conn.setAutoCommit(false);\n    selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n    selectPST.setLong(1,branchId);\n    selectPST.setString(2,xid);\n    rs=selectPST.executeQuery();\n    boolean exists=false;\n    while (rs.next()) {\n      exists=true;\n      int state=rs.getInt(\"log_status\");\n      if (!canUndo(state)) {\n        LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n        return;\n      }\n      Blob b=rs.getBlob(\"rollback_info\");\n      String rollbackInfo=BlobUtils.blob2string(b);\n      BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n      for (      SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n        TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n        sqlUndoLog.setTableMeta(tableMeta);\n        AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n        undoExecutor.executeOn(conn);\n      }\n    }\n    if (exists) {\n      deleteUndoLog(xid,branchId,conn);\n      conn.commit();\n      LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n    }\n else {\n      insertUndoLogWithGlobalFinished(xid,branchId,conn);\n      conn.commit();\n      LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n    }\n    return;\n  }\n catch (  SQLIntegrityConstraintViolationException e) {\n    LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",xid,branchId);\n  }\ncatch (  Throwable e) {\n    if (conn != null) {\n      try {\n        conn.rollback();\n      }\n catch (      SQLException rollbackEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while undo ... \",rollbackEx);\n      }\n    }\n    throw new TransactionException(BranchRollbackFailed_Retriable,String.format(\"%s/%s\",branchId,xid),e);\n  }\n finally {\n    try {\n      if (rs != null) {\n        rs.close();\n      }\n      if (selectPST != null) {\n        selectPST.close();\n      }\n      if (conn != null) {\n        conn.close();\n      }\n    }\n catch (    SQLException closeEx) {\n      LOGGER.warn(\"Failed to close JDBC resource while undo ... \",closeEx);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4558,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  try {\n    conn=dataSourceProxy.getPlainConnection();\n    conn.setAutoCommit(false);\n    selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n    selectPST.setLong(1,branchId);\n    selectPST.setString(2,xid);\n    rs=selectPST.executeQuery();\n    boolean exists=false;\n    while (rs.next()) {\n      exists=true;\n      int state=rs.getInt(\"log_status\");\n      if (!canUndo(state)) {\n        LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n        return;\n      }\n      Blob b=rs.getBlob(\"rollback_info\");\n      String rollbackInfo=BlobUtils.blob2string(b);\n      BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n      for (      SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n        TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n        sqlUndoLog.setTableMeta(tableMeta);\n        AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n        undoExecutor.executeOn(conn);\n      }\n    }\n    if (exists) {\n      deleteUndoLog(xid,branchId,conn);\n      conn.commit();\n      LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n    }\n else {\n      insertUndoLogWithGlobalFinished(xid,branchId,conn);\n      conn.commit();\n      LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n    }\n    return;\n  }\n catch (  SQLIntegrityConstraintViolationException e) {\n    LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",xid,branchId);\n  }\ncatch (  Throwable e) {\n    if (conn != null) {\n      try {\n        conn.rollback();\n      }\n catch (      SQLException rollbackEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while undo ... \",rollbackEx);\n      }\n    }\n    throw new TransactionException(BranchRollbackFailed_Retriable,String.format(\"%s/%s\",branchId,xid),e);\n  }\n finally {\n    try {\n      if (rs != null) {\n        rs.close();\n      }\n      if (selectPST != null) {\n        selectPST.close();\n      }\n      if (conn != null) {\n        conn.close();\n      }\n    }\n catch (    SQLException closeEx) {\n      LOGGER.warn(\"Failed to close JDBC resource while undo ... \",closeEx);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 294,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4735,
        "startLineNumber" : 128,
        "startColumnNumber" : 116,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertDbSupport(dataSourceProxy.getDbType());\n  Connection conn=null;\n  ResultSet rs=null;\n  PreparedStatement selectPST=null;\n  for (; ; ) {\n    try {\n      conn=dataSourceProxy.getPlainConnection();\n      conn.setAutoCommit(false);\n      selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n      selectPST.setLong(1,branchId);\n      selectPST.setString(2,xid);\n      rs=selectPST.executeQuery();\n      boolean exists=false;\n      while (rs.next()) {\n        exists=true;\n        int state=rs.getInt(\"log_status\");\n        if (!canUndo(state)) {\n          LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n          return;\n        }\n        Blob b=rs.getBlob(\"rollback_info\");\n        String rollbackInfo=BlobUtils.blob2string(b);\n        BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n        for (        SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n          TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n          sqlUndoLog.setTableMeta(tableMeta);\n          AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n          undoExecutor.executeOn(conn);\n        }\n      }\n      if (exists) {\n        deleteUndoLog(xid,branchId,conn);\n        conn.commit();\n        LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n      }\n else {\n        insertUndoLogWithGlobalFinished(xid,branchId,conn);\n        conn.commit();\n        LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n      }\n      return;\n    }\n catch (    SQLIntegrityConstraintViolationException e) {\n      LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",xid,branchId);\n    }\ncatch (    Throwable e) {\n      if (conn != null) {\n        try {\n          conn.rollback();\n        }\n catch (        SQLException rollbackEx) {\n          LOGGER.warn(\"Failed to close JDBC resource while undo ... \",rollbackEx);\n        }\n      }\n      throw new TransactionException(BranchRollbackFailed_Retriable,String.format(\"%s/%s\",branchId,xid),e);\n    }\n finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n        if (selectPST != null) {\n          selectPST.close();\n        }\n        if (conn != null) {\n          conn.close();\n        }\n      }\n catch (      SQLException closeEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while undo ... \",closeEx);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Undo.\n * @param dataSourceProxy the data source proxy\n * @param xid the xid\n * @param branchId the branch id\n * @throws TransactionException the transaction exception\n */\npublic static void undo(DataSourceProxy dataSourceProxy,String xid,long branchId) throws TransactionException {\n  assertDbSupport(dataSourceProxy.getDbType());\n  Connection conn=null;\n  ResultSet rs=null;\n  PreparedStatement selectPST=null;\n  for (; ; ) {\n    try {\n      conn=dataSourceProxy.getPlainConnection();\n      conn.setAutoCommit(false);\n      selectPST=conn.prepareStatement(SELECT_UNDO_LOG_SQL);\n      selectPST.setLong(1,branchId);\n      selectPST.setString(2,xid);\n      rs=selectPST.executeQuery();\n      boolean exists=false;\n      while (rs.next()) {\n        exists=true;\n        int state=rs.getInt(\"log_status\");\n        if (!canUndo(state)) {\n          LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",xid,branchId,state);\n          return;\n        }\n        Blob b=rs.getBlob(\"rollback_info\");\n        String rollbackInfo=BlobUtils.blob2string(b);\n        BranchUndoLog branchUndoLog=UndoLogParserFactory.getInstance().decode(rollbackInfo);\n        for (        SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n          TableMeta tableMeta=TableMetaCache.getTableMeta(dataSourceProxy,sqlUndoLog.getTableName());\n          sqlUndoLog.setTableMeta(tableMeta);\n          AbstractUndoExecutor undoExecutor=UndoExecutorFactory.getUndoExecutor(dataSourceProxy.getDbType(),sqlUndoLog);\n          undoExecutor.executeOn(conn);\n        }\n      }\n      if (exists) {\n        deleteUndoLog(xid,branchId,conn);\n        conn.commit();\n        LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",xid,branchId,State.GlobalFinished.name());\n      }\n else {\n        insertUndoLogWithGlobalFinished(xid,branchId,conn);\n        conn.commit();\n        LOGGER.info(\"xid {} branch {}, undo_log added with {}\",xid,branchId,State.GlobalFinished.name());\n      }\n      return;\n    }\n catch (    SQLIntegrityConstraintViolationException e) {\n      LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",xid,branchId);\n    }\ncatch (    Throwable e) {\n      if (conn != null) {\n        try {\n          conn.rollback();\n        }\n catch (        SQLException rollbackEx) {\n          LOGGER.warn(\"Failed to close JDBC resource while undo ... \",rollbackEx);\n        }\n      }\n      throw new TransactionException(BranchRollbackFailed_Retriable,String.format(\"%s/%s\",branchId,xid),e);\n    }\n finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n        if (selectPST != null) {\n          selectPST.close();\n        }\n        if (conn != null) {\n          conn.close();\n        }\n      }\n catch (      SQLException closeEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while undo ... \",closeEx);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 146,
        "endColumnNumber" : 46
      },
      "nodeContext" : "rs=selectPST.executeQuery();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.sql.ResultSet"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 146,
    "startColumnNumber" : 21,
    "endLineNumber" : 146,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}