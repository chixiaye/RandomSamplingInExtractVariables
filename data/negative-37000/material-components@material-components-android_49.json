{
  "id" : 49,
  "expression" : "new View.OnClickListener(){\n  @Override public void onClick(  View view){\n    if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n      cancel();\n    }\n  }\n}\n",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/bottomsheet/BottomSheetDialog.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new View.OnClickListener(){\n  @Override public void onClick(  View view){\n    if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n      cancel();\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 261,
      "startLineNumber" : 145,
      "startColumnNumber" : 12,
      "endLineNumber" : 152,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 28,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 14
      },
      "nodeContext" : "coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){\n  @Override public void onClick(  View view){\n    if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n      cancel();\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 15
      },
      "nodeContext" : "coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){\n  @Override public void onClick(  View view){\n    if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n      cancel();\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 39,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2404,
        "startLineNumber" : 125,
        "startColumnNumber" : 92,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  FrameLayout container=(FrameLayout)View.inflate(getContext(),R.layout.design_bottom_sheet_dialog,null);\n  CoordinatorLayout coordinator=(CoordinatorLayout)container.findViewById(R.id.coordinator);\n  if (layoutResId != 0 && view == null) {\n    view=getLayoutInflater().inflate(layoutResId,coordinator,false);\n  }\n  FrameLayout bottomSheet=(FrameLayout)coordinator.findViewById(R.id.design_bottom_sheet);\n  behavior=BottomSheetBehavior.from(bottomSheet);\n  behavior.setBottomSheetCallback(bottomSheetCallback);\n  behavior.setHideable(cancelable);\n  if (params == null) {\n    bottomSheet.addView(view);\n  }\n else {\n    bottomSheet.addView(view,params);\n  }\n  coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){\n    @Override public void onClick(    View view){\n      if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n        cancel();\n      }\n    }\n  }\n);\n  ViewCompat.setAccessibilityDelegate(bottomSheet,new AccessibilityDelegateCompat(){\n    @Override public void onInitializeAccessibilityNodeInfo(    View host,    AccessibilityNodeInfoCompat info){\n      super.onInitializeAccessibilityNodeInfo(host,info);\n      if (cancelable) {\n        info.addAction(AccessibilityNodeInfoCompat.ACTION_DISMISS);\n        info.setDismissable(true);\n      }\n else {\n        info.setDismissable(false);\n      }\n    }\n    @Override public boolean performAccessibilityAction(    View host,    int action,    Bundle args){\n      if (action == AccessibilityNodeInfoCompat.ACTION_DISMISS && cancelable) {\n        cancel();\n        return true;\n      }\n      return super.performAccessibilityAction(host,action,args);\n    }\n  }\n);\n  bottomSheet.setOnTouchListener(new View.OnTouchListener(){\n    @Override public boolean onTouch(    View view,    MotionEvent event){\n      return true;\n    }\n  }\n);\n  return container;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2494,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private View wrapInBottomSheet(int layoutResId,View view,ViewGroup.LayoutParams params){\n  FrameLayout container=(FrameLayout)View.inflate(getContext(),R.layout.design_bottom_sheet_dialog,null);\n  CoordinatorLayout coordinator=(CoordinatorLayout)container.findViewById(R.id.coordinator);\n  if (layoutResId != 0 && view == null) {\n    view=getLayoutInflater().inflate(layoutResId,coordinator,false);\n  }\n  FrameLayout bottomSheet=(FrameLayout)coordinator.findViewById(R.id.design_bottom_sheet);\n  behavior=BottomSheetBehavior.from(bottomSheet);\n  behavior.setBottomSheetCallback(bottomSheetCallback);\n  behavior.setHideable(cancelable);\n  if (params == null) {\n    bottomSheet.addView(view);\n  }\n else {\n    bottomSheet.addView(view,params);\n  }\n  coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){\n    @Override public void onClick(    View view){\n      if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n        cancel();\n      }\n    }\n  }\n);\n  ViewCompat.setAccessibilityDelegate(bottomSheet,new AccessibilityDelegateCompat(){\n    @Override public void onInitializeAccessibilityNodeInfo(    View host,    AccessibilityNodeInfoCompat info){\n      super.onInitializeAccessibilityNodeInfo(host,info);\n      if (cancelable) {\n        info.addAction(AccessibilityNodeInfoCompat.ACTION_DISMISS);\n        info.setDismissable(true);\n      }\n else {\n        info.setDismissable(false);\n      }\n    }\n    @Override public boolean performAccessibilityAction(    View host,    int action,    Bundle args){\n      if (action == AccessibilityNodeInfoCompat.ACTION_DISMISS && cancelable) {\n        cancel();\n        return true;\n      }\n      return super.performAccessibilityAction(host,action,args);\n    }\n  }\n);\n  bottomSheet.setOnTouchListener(new View.OnTouchListener(){\n    @Override public boolean onTouch(    View view,    MotionEvent event){\n      return true;\n    }\n  }\n);\n  return container;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 279,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 14
      },
      "nodeContext" : "coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){\n  @Override public void onClick(  View view){\n    if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {\n      cancel();\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 10
    },
    "tokenLength" : 12,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 261,
    "startLineNumber" : 145,
    "startColumnNumber" : 12,
    "endLineNumber" : 152,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}