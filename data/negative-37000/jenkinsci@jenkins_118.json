{
  "id" : 118,
  "expression" : "Functions",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/tasks/ArtifactArchiver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Functions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 275,
      "startColumnNumber" : 24,
      "endLineNumber" : 275,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 275,
        "startColumnNumber" : 24,
        "endLineNumber" : 275,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Functions.printStackTrace(e,listener.getLogger())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 275,
        "startColumnNumber" : 24,
        "endLineNumber" : 275,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Functions.printStackTrace(e,listener.getLogger());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 274,
        "startColumnNumber" : 42,
        "endLineNumber" : 276,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Functions.printStackTrace(e,listener.getLogger());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 274,
        "startColumnNumber" : 22,
        "endLineNumber" : 276,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (Exception e) {\n  Functions.printStackTrace(e,listener.getLogger());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 409,
        "startLineNumber" : 269,
        "startColumnNumber" : 20,
        "endLineNumber" : 276,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n  if (msg != null) {\n    listener.getLogger().println(msg);\n  }\n}\n catch (Exception e) {\n  Functions.printStackTrace(e,listener.getLogger());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 268,
        "startColumnNumber" : 81,
        "endLineNumber" : 282,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n    if (msg != null) {\n      listener.getLogger().println(msg);\n    }\n  }\n catch (  Exception e) {\n    Functions.printStackTrace(e,listener.getLogger());\n  }\n  if (allowEmptyArchive) {\n    listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n  }\n else {\n    throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1259,
        "startLineNumber" : 268,
        "startColumnNumber" : 16,
        "endLineNumber" : 287,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n  try {\n    String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n    if (msg != null) {\n      listener.getLogger().println(msg);\n    }\n  }\n catch (  Exception e) {\n    Functions.printStackTrace(e,listener.getLogger());\n  }\n  if (allowEmptyArchive) {\n    listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n  }\n else {\n    throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n  }\n}\n else {\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1393,
        "startLineNumber" : 265,
        "startColumnNumber" : 19,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  result=build.getResult();\n  if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n    try {\n      String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n      if (msg != null) {\n        listener.getLogger().println(msg);\n      }\n    }\n catch (    Exception e) {\n      Functions.printStackTrace(e,listener.getLogger());\n    }\n    if (allowEmptyArchive) {\n      listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n    }\n else {\n      throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n    }\n  }\n else {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1911,
        "startLineNumber" : 256,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!files.isEmpty()) {\n  build.pickArtifactManager().archive(ws,launcher,BuildListenerAdapter.wrap(listener),files);\n  if (fingerprint) {\n    Fingerprinter f=new Fingerprinter(artifacts);\n    f.setExcludes(excludes);\n    f.setDefaultExcludes(defaultExcludes);\n    f.setCaseSensitive(caseSensitive);\n    f.perform(build,ws,environment,launcher,listener);\n  }\n}\n else {\n  result=build.getResult();\n  if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n    try {\n      String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n      if (msg != null) {\n        listener.getLogger().println(msg);\n      }\n    }\n catch (    Exception e) {\n      Functions.printStackTrace(e,listener.getLogger());\n    }\n    if (allowEmptyArchive) {\n      listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n    }\n else {\n      throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n    }\n  }\n else {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2274,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String artifacts=this.artifacts;\n  if (build instanceof AbstractBuild) {\n    artifacts=environment.expand(artifacts);\n  }\n  Map<String,String> files=ws.act(new ListFiles(artifacts,excludes,defaultExcludes,caseSensitive,followSymlinks));\n  if (!files.isEmpty()) {\n    build.pickArtifactManager().archive(ws,launcher,BuildListenerAdapter.wrap(listener),files);\n    if (fingerprint) {\n      Fingerprinter f=new Fingerprinter(artifacts);\n      f.setExcludes(excludes);\n      f.setDefaultExcludes(defaultExcludes);\n      f.setCaseSensitive(caseSensitive);\n      f.perform(build,ws,environment,launcher,listener);\n    }\n  }\n else {\n    result=build.getResult();\n    if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n      try {\n        String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n        if (msg != null) {\n          listener.getLogger().println(msg);\n        }\n      }\n catch (      Exception e) {\n        Functions.printStackTrace(e,listener.getLogger());\n      }\n      if (allowEmptyArchive) {\n        listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n      }\n else {\n        throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n      }\n    }\n else {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2517,
        "startLineNumber" : 249,
        "startColumnNumber" : 8,
        "endLineNumber" : 292,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String artifacts=this.artifacts;\n  if (build instanceof AbstractBuild) {\n    artifacts=environment.expand(artifacts);\n  }\n  Map<String,String> files=ws.act(new ListFiles(artifacts,excludes,defaultExcludes,caseSensitive,followSymlinks));\n  if (!files.isEmpty()) {\n    build.pickArtifactManager().archive(ws,launcher,BuildListenerAdapter.wrap(listener),files);\n    if (fingerprint) {\n      Fingerprinter f=new Fingerprinter(artifacts);\n      f.setExcludes(excludes);\n      f.setDefaultExcludes(defaultExcludes);\n      f.setCaseSensitive(caseSensitive);\n      f.perform(build,ws,environment,launcher,listener);\n    }\n  }\n else {\n    result=build.getResult();\n    if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n      try {\n        String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n        if (msg != null) {\n          listener.getLogger().println(msg);\n        }\n      }\n catch (      Exception e) {\n        Functions.printStackTrace(e,listener.getLogger());\n      }\n      if (allowEmptyArchive) {\n        listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n      }\n else {\n        throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n      }\n    }\n else {\n    }\n  }\n}\n catch (java.nio.file.AccessDeniedException e) {\n  LOG.log(Level.FINE,\"Diagnosing anticipated Exception\",e);\n  throw new AbortException(e.toString());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 210,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3020,
        "startLineNumber" : 237,
        "startColumnNumber" : 157,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (artifacts.length() == 0) {\n    throw new AbortException(Messages.ArtifactArchiver_NoIncludes());\n  }\n  Result result=build.getResult();\n  if (onlyIfSuccessful && result != null && result.isWorseThan(Result.UNSTABLE)) {\n    listener.getLogger().println(Messages.ArtifactArchiver_SkipBecauseOnlyIfSuccessful());\n    return;\n  }\n  listener.getLogger().println(Messages.ArtifactArchiver_ARCHIVING_ARTIFACTS());\n  try {\n    String artifacts=this.artifacts;\n    if (build instanceof AbstractBuild) {\n      artifacts=environment.expand(artifacts);\n    }\n    Map<String,String> files=ws.act(new ListFiles(artifacts,excludes,defaultExcludes,caseSensitive,followSymlinks));\n    if (!files.isEmpty()) {\n      build.pickArtifactManager().archive(ws,launcher,BuildListenerAdapter.wrap(listener),files);\n      if (fingerprint) {\n        Fingerprinter f=new Fingerprinter(artifacts);\n        f.setExcludes(excludes);\n        f.setDefaultExcludes(defaultExcludes);\n        f.setCaseSensitive(caseSensitive);\n        f.perform(build,ws,environment,launcher,listener);\n      }\n    }\n else {\n      result=build.getResult();\n      if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n        try {\n          String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n          if (msg != null) {\n            listener.getLogger().println(msg);\n          }\n        }\n catch (        Exception e) {\n          Functions.printStackTrace(e,listener.getLogger());\n        }\n        if (allowEmptyArchive) {\n          listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n        }\n else {\n          throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n        }\n      }\n else {\n      }\n    }\n  }\n catch (  java.nio.file.AccessDeniedException e) {\n    LOG.log(Level.FINE,\"Diagnosing anticipated Exception\",e);\n    throw new AbortException(e.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3188,
        "startLineNumber" : 236,
        "startColumnNumber" : 4,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void perform(Run<?,?> build,FilePath ws,EnvVars environment,Launcher launcher,TaskListener listener) throws IOException, InterruptedException {\n  if (artifacts.length() == 0) {\n    throw new AbortException(Messages.ArtifactArchiver_NoIncludes());\n  }\n  Result result=build.getResult();\n  if (onlyIfSuccessful && result != null && result.isWorseThan(Result.UNSTABLE)) {\n    listener.getLogger().println(Messages.ArtifactArchiver_SkipBecauseOnlyIfSuccessful());\n    return;\n  }\n  listener.getLogger().println(Messages.ArtifactArchiver_ARCHIVING_ARTIFACTS());\n  try {\n    String artifacts=this.artifacts;\n    if (build instanceof AbstractBuild) {\n      artifacts=environment.expand(artifacts);\n    }\n    Map<String,String> files=ws.act(new ListFiles(artifacts,excludes,defaultExcludes,caseSensitive,followSymlinks));\n    if (!files.isEmpty()) {\n      build.pickArtifactManager().archive(ws,launcher,BuildListenerAdapter.wrap(listener),files);\n      if (fingerprint) {\n        Fingerprinter f=new Fingerprinter(artifacts);\n        f.setExcludes(excludes);\n        f.setDefaultExcludes(defaultExcludes);\n        f.setCaseSensitive(caseSensitive);\n        f.perform(build,ws,environment,launcher,listener);\n      }\n    }\n else {\n      result=build.getResult();\n      if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {\n        try {\n          String msg=ws.validateAntFileMask(artifacts,FilePath.VALIDATE_ANT_FILE_MASK_BOUND,caseSensitive);\n          if (msg != null) {\n            listener.getLogger().println(msg);\n          }\n        }\n catch (        Exception e) {\n          Functions.printStackTrace(e,listener.getLogger());\n        }\n        if (allowEmptyArchive) {\n          listener.getLogger().println(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n        }\n else {\n          throw new AbortException(Messages.ArtifactArchiver_NoMatchFound(artifacts));\n        }\n      }\n else {\n      }\n    }\n  }\n catch (  java.nio.file.AccessDeniedException e) {\n    LOG.log(Level.FINE,\"Diagnosing anticipated Exception\",e);\n    throw new AbortException(e.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 275,
        "startColumnNumber" : 24,
        "endLineNumber" : 275,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Functions.printStackTrace(e,listener.getLogger());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "hudson.Functions"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 275,
    "startColumnNumber" : 24,
    "endLineNumber" : 275,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}