{
  "id" : 340,
  "expression" : "hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core/src/main/java/org/springframework/asm/ClassWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 79,
      "startLineNumber" : 690,
      "startColumnNumber" : 14,
      "endLineNumber" : 690,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 690,
        "startColumnNumber" : 4,
        "endLineNumber" : 690,
        "endColumnNumber" : 93
      },
      "nodeContext" : "compute=hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 690,
        "startColumnNumber" : 4,
        "endLineNumber" : 690,
        "endColumnNumber" : 94
      },
      "nodeContext" : "compute=hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 675,
        "startColumnNumber" : 89,
        "endLineNumber" : 697,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Attribute[] attributes=getAttributePrototypes();\n  firstField=null;\n  lastField=null;\n  firstMethod=null;\n  lastMethod=null;\n  lastRuntimeVisibleAnnotation=null;\n  lastRuntimeInvisibleAnnotation=null;\n  lastRuntimeVisibleTypeAnnotation=null;\n  lastRuntimeInvisibleTypeAnnotation=null;\n  moduleWriter=null;\n  nestHostClassIndex=0;\n  numberOfNestMemberClasses=0;\n  nestMemberClasses=null;\n  firstAttribute=null;\n  compute=hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING;\n  new ClassReader(classFile,0,false).accept(this,attributes,(hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS);\n  return toByteArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 665,
        "startColumnNumber" : 2,
        "endLineNumber" : 697,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the equivalent of the given class file, with the ASM specific instructions replaced with standard ones. This is done with a ClassReader -&gt; ClassWriter round trip.\n * @param classFile a class file containing ASM specific instructions, generated by thisClassWriter.\n * @param hasFrames whether there is at least one stack map frames in 'classFile'.\n * @return an equivalent of 'classFile', with the ASM specific instructions replaced with standardones.\n */\nprivate byte[] replaceAsmInstructions(final byte[] classFile,final boolean hasFrames){\n  final Attribute[] attributes=getAttributePrototypes();\n  firstField=null;\n  lastField=null;\n  firstMethod=null;\n  lastMethod=null;\n  lastRuntimeVisibleAnnotation=null;\n  lastRuntimeInvisibleAnnotation=null;\n  lastRuntimeVisibleTypeAnnotation=null;\n  lastRuntimeInvisibleTypeAnnotation=null;\n  moduleWriter=null;\n  nestHostClassIndex=0;\n  numberOfNestMemberClasses=0;\n  nestMemberClasses=null;\n  firstAttribute=null;\n  compute=hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING;\n  new ClassReader(classFile,0,false).accept(this,attributes,(hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS);\n  return toByteArray();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 690,
        "startColumnNumber" : 4,
        "endLineNumber" : 690,
        "endColumnNumber" : 94
      },
      "nodeContext" : "compute=hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 79,
    "startLineNumber" : 690,
    "startColumnNumber" : 14,
    "endLineNumber" : 690,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}