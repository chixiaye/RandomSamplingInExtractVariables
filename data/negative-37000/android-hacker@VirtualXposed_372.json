{
  "id" : 372,
  "expression" : "(method.getModifiers() & Modifier.STATIC)",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/secondary/StubBinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(method.getModifiers() & Modifier.STATIC)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 67,
      "startColumnNumber" : 24,
      "endLineNumber" : 67,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 67,
        "startColumnNumber" : 24,
        "endLineNumber" : 67,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(method.getModifiers() & Modifier.STATIC) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 67,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((method.getModifiers() & Modifier.STATIC) != 0) {\n  method.setAccessible(true);\n  Class<?> returnType=method.getReturnType();\n  if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n    aidlType=returnType;\n    targetInterface=(IInterface)method.invoke(null,mBase);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n  if ((method.getModifiers() & Modifier.STATIC) != 0) {\n    method.setAccessible(true);\n    Class<?> returnType=method.getReturnType();\n    if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n      aidlType=returnType;\n      targetInterface=(IInterface)method.invoke(null,mBase);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 765,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n  if ((method.getModifiers() & Modifier.STATIC) != 0) {\n    method.setAccessible(true);\n    Class<?> returnType=method.getReturnType();\n    if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n      aidlType=returnType;\n      targetInterface=(IInterface)method.invoke(null,mBase);\n    }\n  }\n}\n catch (Exception e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 60,
        "startColumnNumber" : 48,
        "endLineNumber" : 78,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (element.isNativeMethod()) {\n    continue;\n  }\n  try {\n    Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n    if ((method.getModifiers() & Modifier.STATIC) != 0) {\n      method.setAccessible(true);\n      Class<?> returnType=method.getReturnType();\n      if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n        aidlType=returnType;\n        targetInterface=(IInterface)method.invoke(null,mBase);\n      }\n    }\n  }\n catch (  Exception e) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 60,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (StackTraceElement element : stackTrace) {\n  if (element.isNativeMethod()) {\n    continue;\n  }\n  try {\n    Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n    if ((method.getModifiers() & Modifier.STATIC) != 0) {\n      method.setAccessible(true);\n      Class<?> returnType=method.getReturnType();\n      if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n        aidlType=returnType;\n        targetInterface=(IInterface)method.invoke(null,mBase);\n      }\n    }\n  }\n catch (  Exception e) {\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 52,
        "startColumnNumber" : 26,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  if (stackTrace == null || stackTrace.length <= 1) {\n    return null;\n  }\n  Class<?> aidlType=null;\n  IInterface targetInterface=null;\n  for (  StackTraceElement element : stackTrace) {\n    if (element.isNativeMethod()) {\n      continue;\n    }\n    try {\n      Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n      if ((method.getModifiers() & Modifier.STATIC) != 0) {\n        method.setAccessible(true);\n        Class<?> returnType=method.getReturnType();\n        if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n          aidlType=returnType;\n          targetInterface=(IInterface)method.invoke(null,mBase);\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (aidlType == null || targetInterface == null) {\n    return null;\n  }\n  InvocationHandler handler=createHandler(aidlType,targetInterface);\n  mInterface=(IInterface)Proxy.newProxyInstance(mClassLoader,new Class[]{aidlType},handler);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1401,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (mInterface == null) {\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  if (stackTrace == null || stackTrace.length <= 1) {\n    return null;\n  }\n  Class<?> aidlType=null;\n  IInterface targetInterface=null;\n  for (  StackTraceElement element : stackTrace) {\n    if (element.isNativeMethod()) {\n      continue;\n    }\n    try {\n      Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n      if ((method.getModifiers() & Modifier.STATIC) != 0) {\n        method.setAccessible(true);\n        Class<?> returnType=method.getReturnType();\n        if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n          aidlType=returnType;\n          targetInterface=(IInterface)method.invoke(null,mBase);\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (aidlType == null || targetInterface == null) {\n    return null;\n  }\n  InvocationHandler handler=createHandler(aidlType,targetInterface);\n  mInterface=(IInterface)Proxy.newProxyInstance(mClassLoader,new Class[]{aidlType},handler);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 176,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1430,
        "startLineNumber" : 51,
        "startColumnNumber" : 58,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (mInterface == null) {\n    StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n    if (stackTrace == null || stackTrace.length <= 1) {\n      return null;\n    }\n    Class<?> aidlType=null;\n    IInterface targetInterface=null;\n    for (    StackTraceElement element : stackTrace) {\n      if (element.isNativeMethod()) {\n        continue;\n      }\n      try {\n        Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n        if ((method.getModifiers() & Modifier.STATIC) != 0) {\n          method.setAccessible(true);\n          Class<?> returnType=method.getReturnType();\n          if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n            aidlType=returnType;\n            targetInterface=(IInterface)method.invoke(null,mBase);\n          }\n        }\n      }\n catch (      Exception e) {\n      }\n    }\n    if (aidlType == null || targetInterface == null) {\n      return null;\n    }\n    InvocationHandler handler=createHandler(aidlType,targetInterface);\n    mInterface=(IInterface)Proxy.newProxyInstance(mClassLoader,new Class[]{aidlType},handler);\n  }\n  return mInterface;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1616,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Anti the Proguard. Search the AidlClass.Stub.asInterface(IBinder) method by the StackTrace.\n */\n@Override public IInterface queryLocalInterface(String descriptor){\n  if (mInterface == null) {\n    StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n    if (stackTrace == null || stackTrace.length <= 1) {\n      return null;\n    }\n    Class<?> aidlType=null;\n    IInterface targetInterface=null;\n    for (    StackTraceElement element : stackTrace) {\n      if (element.isNativeMethod()) {\n        continue;\n      }\n      try {\n        Method method=mClassLoader.loadClass(element.getClassName()).getDeclaredMethod(element.getMethodName(),IBinder.class);\n        if ((method.getModifiers() & Modifier.STATIC) != 0) {\n          method.setAccessible(true);\n          Class<?> returnType=method.getReturnType();\n          if (returnType.isInterface() && IInterface.class.isAssignableFrom(returnType)) {\n            aidlType=returnType;\n            targetInterface=(IInterface)method.invoke(null,mBase);\n          }\n        }\n      }\n catch (      Exception e) {\n      }\n    }\n    if (aidlType == null || targetInterface == null) {\n      return null;\n    }\n    InvocationHandler handler=createHandler(aidlType,targetInterface);\n    mInterface=(IInterface)Proxy.newProxyInstance(mClassLoader,new Class[]{aidlType},handler);\n  }\n  return mInterface;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 67,
        "startColumnNumber" : 24,
        "endLineNumber" : 67,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(method.getModifiers() & Modifier.STATIC) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 67,
    "startColumnNumber" : 24,
    "endLineNumber" : 67,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}