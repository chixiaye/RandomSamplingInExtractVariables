{
  "id" : 19,
  "expression" : "i < minWords * LONG_BYTES",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-runtime/src/main/java/org/apache/flink/table/runtime/operators/sort/SortUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < minWords * LONG_BYTES",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 157,
      "startColumnNumber" : 24,
      "endLineNumber" : 157,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < minWords * LONG_BYTES; i+=LONG_BYTES) {\n  long lw=UNSAFE.getLong(buffer1,offset1Adj + (long)i);\n  long rw=UNSAFE.getLong(buffer2,offset2Adj + (long)i);\n  long diff=lw ^ rw;\n  if (diff != 0) {\n    if (!LITTLE_ENDIAN) {\n      return lessThanUnsigned(lw,rw) ? -1 : 1;\n    }\n    int n=0;\n    int y;\n    int x=(int)diff;\n    if (x == 0) {\n      x=(int)(diff >>> 32);\n      n=32;\n    }\n    y=x << 16;\n    if (y == 0) {\n      n+=16;\n    }\n else {\n      x=y;\n    }\n    y=x << 8;\n    if (y == 0) {\n      n+=8;\n    }\n    return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2031,
        "startLineNumber" : 142,
        "startColumnNumber" : 96,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (buffer1 == buffer2 && offset1 == offset2 && length1 == length2) {\n    return 0;\n  }\n  int minLength=Math.min(length1,length2);\n  int minWords=minLength / LONG_BYTES;\n  int offset1Adj=offset1 + BYTE_ARRAY_BASE_OFFSET;\n  int offset2Adj=offset2 + BYTE_ARRAY_BASE_OFFSET;\n  for (int i=0; i < minWords * LONG_BYTES; i+=LONG_BYTES) {\n    long lw=UNSAFE.getLong(buffer1,offset1Adj + (long)i);\n    long rw=UNSAFE.getLong(buffer2,offset2Adj + (long)i);\n    long diff=lw ^ rw;\n    if (diff != 0) {\n      if (!LITTLE_ENDIAN) {\n        return lessThanUnsigned(lw,rw) ? -1 : 1;\n      }\n      int n=0;\n      int y;\n      int x=(int)diff;\n      if (x == 0) {\n        x=(int)(diff >>> 32);\n        n=32;\n      }\n      y=x << 16;\n      if (y == 0) {\n        n+=16;\n      }\n else {\n        x=y;\n      }\n      y=x << 8;\n      if (y == 0) {\n        n+=8;\n      }\n      return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));\n    }\n  }\n  for (int i=minWords * LONG_BYTES; i < minLength; i++) {\n    int result=unsignedByteToInt(buffer1[offset1 + i]) - unsignedByteToInt(buffer2[offset2 + i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return length1 - length2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2160,
        "startLineNumber" : 141,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static int compareBinary(byte[] buffer1,int offset1,int length1,byte[] buffer2,int offset2,int length2){\n  if (buffer1 == buffer2 && offset1 == offset2 && length1 == length2) {\n    return 0;\n  }\n  int minLength=Math.min(length1,length2);\n  int minWords=minLength / LONG_BYTES;\n  int offset1Adj=offset1 + BYTE_ARRAY_BASE_OFFSET;\n  int offset2Adj=offset2 + BYTE_ARRAY_BASE_OFFSET;\n  for (int i=0; i < minWords * LONG_BYTES; i+=LONG_BYTES) {\n    long lw=UNSAFE.getLong(buffer1,offset1Adj + (long)i);\n    long rw=UNSAFE.getLong(buffer2,offset2Adj + (long)i);\n    long diff=lw ^ rw;\n    if (diff != 0) {\n      if (!LITTLE_ENDIAN) {\n        return lessThanUnsigned(lw,rw) ? -1 : 1;\n      }\n      int n=0;\n      int y;\n      int x=(int)diff;\n      if (x == 0) {\n        x=(int)(diff >>> 32);\n        n=32;\n      }\n      y=x << 16;\n      if (y == 0) {\n        n+=16;\n      }\n else {\n        x=y;\n      }\n      y=x << 8;\n      if (y == 0) {\n        n+=8;\n      }\n      return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));\n    }\n  }\n  for (int i=minWords * LONG_BYTES; i < minLength; i++) {\n    int result=unsignedByteToInt(buffer1[offset1 + i]) - unsignedByteToInt(buffer2[offset2 + i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return length1 - length2;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 271,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < minWords * LONG_BYTES; i+=LONG_BYTES) {\n  long lw=UNSAFE.getLong(buffer1,offset1Adj + (long)i);\n  long rw=UNSAFE.getLong(buffer2,offset2Adj + (long)i);\n  long diff=lw ^ rw;\n  if (diff != 0) {\n    if (!LITTLE_ENDIAN) {\n      return lessThanUnsigned(lw,rw) ? -1 : 1;\n    }\n    int n=0;\n    int y;\n    int x=(int)diff;\n    if (x == 0) {\n      x=(int)(diff >>> 32);\n      n=32;\n    }\n    y=x << 16;\n    if (y == 0) {\n      n+=16;\n    }\n else {\n      x=y;\n    }\n    y=x << 8;\n    if (y == 0) {\n      n+=8;\n    }\n    return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 157,
    "startColumnNumber" : 24,
    "endLineNumber" : 157,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}