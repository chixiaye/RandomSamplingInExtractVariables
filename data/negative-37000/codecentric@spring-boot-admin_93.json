{
  "id" : 93,
  "expression" : "service",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/discovery/EurekaServiceInstanceConverterTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 39,
      "startColumnNumber" : 13,
      "endLineNumber" : 39,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 39,
        "startColumnNumber" : 13,
        "endLineNumber" : 39,
        "endColumnNumber" : 38
      },
      "nodeContext" : "service.getInstanceInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 39
      },
      "nodeContext" : "when(service.getInstanceInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 64
      },
      "nodeContext" : "when(service.getInstanceInfo()).thenReturn(instanceInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 65
      },
      "nodeContext" : "when(service.getInstanceInfo()).thenReturn(instanceInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 34,
        "startColumnNumber" : 33,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void convert_secure(){\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 65
      },
      "nodeContext" : "when(service.getInstanceInfo()).thenReturn(instanceInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.discovery.EurekaServiceInstance"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 40,
      "startColumnNumber" : 13,
      "endLineNumber" : 40,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 40,
        "startColumnNumber" : 13,
        "endLineNumber" : 40,
        "endColumnNumber" : 29
      },
      "nodeContext" : "service.getUri()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 30
      },
      "nodeContext" : "when(service.getUri())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 76
      },
      "nodeContext" : "when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 34,
        "startColumnNumber" : 33,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void convert_secure(){\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 77
      },
      "nodeContext" : "when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.discovery.EurekaServiceInstance"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 41,
      "startColumnNumber" : 13,
      "endLineNumber" : 41,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 41,
        "startColumnNumber" : 13,
        "endLineNumber" : 41,
        "endColumnNumber" : 35
      },
      "nodeContext" : "service.getServiceId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 36
      },
      "nodeContext" : "when(service.getServiceId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 55
      },
      "nodeContext" : "when(service.getServiceId()).thenReturn(\"test\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 56
      },
      "nodeContext" : "when(service.getServiceId()).thenReturn(\"test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 34,
        "startColumnNumber" : 33,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void convert_secure(){\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 56
      },
      "nodeContext" : "when(service.getServiceId()).thenReturn(\"test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.discovery.EurekaServiceInstance"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 42,
      "startColumnNumber" : 13,
      "endLineNumber" : 42,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 42,
        "startColumnNumber" : 13,
        "endLineNumber" : 42,
        "endColumnNumber" : 34
      },
      "nodeContext" : "service.getMetadata()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 35
      },
      "nodeContext" : "when(service.getMetadata())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 96
      },
      "nodeContext" : "when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 97
      },
      "nodeContext" : "when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 34,
        "startColumnNumber" : 33,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void convert_secure(){\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 97
      },
      "nodeContext" : "when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.discovery.EurekaServiceInstance"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 44,
      "startColumnNumber" : 81,
      "endLineNumber" : 44,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 44,
        "startColumnNumber" : 36,
        "endLineNumber" : 44,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new EurekaServiceInstanceConverter().convert(service)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 44,
        "startColumnNumber" : 21,
        "endLineNumber" : 44,
        "endColumnNumber" : 89
      },
      "nodeContext" : "registration=new EurekaServiceInstanceConverter().convert(service)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Registration registration=new EurekaServiceInstanceConverter().convert(service);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 34,
        "startColumnNumber" : 33,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void convert_secure(){\n  InstanceInfo instanceInfo=mock(InstanceInfo.class);\n  when(instanceInfo.getSecureHealthCheckUrl()).thenReturn(\"\");\n  when(instanceInfo.getHealthCheckUrl()).thenReturn(\"http://localhost:80/mgmt/ping\");\n  EurekaServiceInstance service=mock(EurekaServiceInstance.class);\n  when(service.getInstanceInfo()).thenReturn(instanceInfo);\n  when(service.getUri()).thenReturn(URI.create(\"http://localhost:80\"));\n  when(service.getServiceId()).thenReturn(\"test\");\n  when(service.getMetadata()).thenReturn(singletonMap(\"management.context-path\",\"/mgmt\"));\n  Registration registration=new EurekaServiceInstanceConverter().convert(service);\n  assertThat(registration.getName()).isEqualTo(\"test\");\n  assertThat(registration.getServiceUrl()).isEqualTo(\"http://localhost:80\");\n  assertThat(registration.getManagementUrl()).isEqualTo(\"http://localhost:80/mgmt\");\n  assertThat(registration.getHealthUrl()).isEqualTo(\"http://localhost:80/mgmt/ping\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Registration registration=new EurekaServiceInstanceConverter().convert(service);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.discovery.EurekaServiceInstance"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 39,
    "startColumnNumber" : 13,
    "endLineNumber" : 39,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 40,
    "startColumnNumber" : 13,
    "endLineNumber" : 40,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 41,
    "startColumnNumber" : 13,
    "endLineNumber" : 41,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 42,
    "startColumnNumber" : 13,
    "endLineNumber" : 42,
    "endColumnNumber" : 20
  }, {
    "charLength" : 7,
    "startLineNumber" : 44,
    "startColumnNumber" : 81,
    "endLineNumber" : 44,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}