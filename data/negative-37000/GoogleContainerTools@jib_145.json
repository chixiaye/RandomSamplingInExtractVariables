{
  "id" : 145,
  "expression" : "Assert",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 53,
      "startColumnNumber" : 4,
      "endLineNumber" : 53,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Assert.assertNotNull(classesTask)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Assert.assertNotNull(classesTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Assert.assertNotNull(classesTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 54,
      "startColumnNumber" : 4,
      "endLineNumber" : 54,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 55,
      "startColumnNumber" : 4,
      "endLineNumber" : 55,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Assert.assertNotNull(jibTask)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertNotNull(jibTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertNotNull(jibTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 56,
      "startColumnNumber" : 4,
      "endLineNumber" : 56,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 57,
      "startColumnNumber" : 4,
      "endLineNumber" : 57,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 59,
      "startColumnNumber" : 4,
      "endLineNumber" : 59,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 62,
      "startColumnNumber" : 4,
      "endLineNumber" : 62,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static String buildAndRun(TestProject testProject,String imageReference) throws IOException, InterruptedException {\n  BuildResult buildResult=testProject.build(\"clean\",JibPlugin.BUILD_IMAGE_TASK_NAME,\"-D_TARGET_IMAGE=\" + imageReference);\n  BuildTask classesTask=buildResult.task(\":classes\");\n  BuildTask jibTask=buildResult.task(\":\" + JibPlugin.BUILD_IMAGE_TASK_NAME);\n  Assert.assertNotNull(classesTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,classesTask.getOutcome());\n  Assert.assertNotNull(jibTask);\n  Assert.assertEquals(TaskOutcome.SUCCESS,jibTask.getOutcome());\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(\"Built and pushed image as \"));\n  Assert.assertThat(buildResult.getOutput(),CoreMatchers.containsString(imageReference));\n  new Command(\"docker\",\"pull\",imageReference).run();\n  Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"));\n  return new Command(\"docker\",\"run\",imageReference).run();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertThat(new Command(\"docker\",\"inspect\",imageReference).run(),CoreMatchers.containsString(\"            \\\"ExposedPorts\\\": {\\n\" + \"                \\\"1000/tcp\\\": {},\\n\" + \"                \\\"2000/udp\\\": {},\\n\"+ \"                \\\"2001/udp\\\": {},\\n\"+ \"                \\\"2002/udp\\\": {},\\n\"+ \"                \\\"2003/udp\\\": {}\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 53,
    "startColumnNumber" : 4,
    "endLineNumber" : 53,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 54,
    "startColumnNumber" : 4,
    "endLineNumber" : 54,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 55,
    "startColumnNumber" : 4,
    "endLineNumber" : 55,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 56,
    "startColumnNumber" : 4,
    "endLineNumber" : 56,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 57,
    "startColumnNumber" : 4,
    "endLineNumber" : 57,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 59,
    "startColumnNumber" : 4,
    "endLineNumber" : 59,
    "endColumnNumber" : 10
  }, {
    "charLength" : 6,
    "startLineNumber" : 62,
    "startColumnNumber" : 4,
    "endLineNumber" : 62,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  } ]
}