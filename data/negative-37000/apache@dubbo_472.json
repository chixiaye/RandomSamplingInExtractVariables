{
  "id" : 472,
  "expression" : "new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 151,
      "startLineNumber" : 110,
      "startColumnNumber" : 26,
      "endLineNumber" : 111,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 110,
        "startColumnNumber" : 20,
        "endLineNumber" : 111,
        "endColumnNumber" : 77
      },
      "nodeContext" : "throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 109,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 109,
        "startColumnNumber" : 18,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (ParseException e) {\n  throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 814,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n  if (type == java.sql.Date.class) {\n    return new java.sql.Date(date.getTime());\n  }\n  if (type == java.sql.Timestamp.class) {\n    return new java.sql.Timestamp(date.getTime());\n  }\n  if (type == java.sql.Time.class) {\n    return new java.sql.Time(date.getTime());\n  }\n  return date;\n}\n catch (ParseException e) {\n  throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 96,
        "startColumnNumber" : 52,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n    if (type == java.sql.Date.class) {\n      return new java.sql.Date(date.getTime());\n    }\n    if (type == java.sql.Timestamp.class) {\n      return new java.sql.Timestamp(date.getTime());\n    }\n    if (type == java.sql.Time.class) {\n      return new java.sql.Time(date.getTime());\n    }\n    return date;\n  }\n catch (  ParseException e) {\n    throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (type == Date.class || type == java.sql.Date.class || type == java.sql.Timestamp.class || type == java.sql.Time.class) {\n  try {\n    Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n    if (type == java.sql.Date.class) {\n      return new java.sql.Date(date.getTime());\n    }\n    if (type == java.sql.Timestamp.class) {\n      return new java.sql.Timestamp(date.getTime());\n    }\n    if (type == java.sql.Time.class) {\n      return new java.sql.Time(date.getTime());\n    }\n    return date;\n  }\n catch (  ParseException e) {\n    throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3883,
        "startLineNumber" : 56,
        "startColumnNumber" : 37,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String string=(String)value;\n  if (char.class.equals(type) || Character.class.equals(type)) {\n    if (string.length() != 1) {\n      throw new IllegalArgumentException(String.format(\"CAN NOT convert String(%s) to char!\" + \" when convert String to char, the String MUST only 1 char.\",string));\n    }\n    return string.charAt(0);\n  }\n  if (type.isEnum()) {\n    return Enum.valueOf((Class<Enum>)type,string);\n  }\n  if (type == BigInteger.class) {\n    return new BigInteger(string);\n  }\n  if (type == BigDecimal.class) {\n    return new BigDecimal(string);\n  }\n  if (type == Short.class || type == short.class) {\n    return new Short(string);\n  }\n  if (type == Integer.class || type == int.class) {\n    return new Integer(string);\n  }\n  if (type == Long.class || type == long.class) {\n    return new Long(string);\n  }\n  if (type == Double.class || type == double.class) {\n    return new Double(string);\n  }\n  if (type == Float.class || type == float.class) {\n    return new Float(string);\n  }\n  if (type == Byte.class || type == byte.class) {\n    return new Byte(string);\n  }\n  if (type == Boolean.class || type == boolean.class) {\n    return Boolean.valueOf(string);\n  }\n  if (type == Date.class || type == java.sql.Date.class || type == java.sql.Timestamp.class || type == java.sql.Time.class) {\n    try {\n      Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n      if (type == java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n      }\n      if (type == java.sql.Timestamp.class) {\n        return new java.sql.Timestamp(date.getTime());\n      }\n      if (type == java.sql.Time.class) {\n        return new java.sql.Time(date.getTime());\n      }\n      return date;\n    }\n catch (    ParseException e) {\n      throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n    }\n  }\n  if (type == java.time.LocalDateTime.class || type == java.time.LocalDate.class || type == java.time.LocalTime.class) {\n    LocalDateTime localDateTime=LocalDateTime.parse(string);\n    if (type == java.time.LocalDate.class) {\n      return localDateTime.toLocalDate();\n    }\n    if (type == java.time.LocalTime.class) {\n      return localDateTime.toLocalTime();\n    }\n    return localDateTime;\n  }\n  if (type == Class.class) {\n    try {\n      return ReflectUtils.name2class(string);\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(e.getMessage(),e);\n    }\n  }\n  if (char[].class.equals(type)) {\n    int len=string.length();\n    char[] chars=new char[len];\n    string.getChars(0,len,chars,0);\n    return chars;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3912,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value instanceof String) {\n  String string=(String)value;\n  if (char.class.equals(type) || Character.class.equals(type)) {\n    if (string.length() != 1) {\n      throw new IllegalArgumentException(String.format(\"CAN NOT convert String(%s) to char!\" + \" when convert String to char, the String MUST only 1 char.\",string));\n    }\n    return string.charAt(0);\n  }\n  if (type.isEnum()) {\n    return Enum.valueOf((Class<Enum>)type,string);\n  }\n  if (type == BigInteger.class) {\n    return new BigInteger(string);\n  }\n  if (type == BigDecimal.class) {\n    return new BigDecimal(string);\n  }\n  if (type == Short.class || type == short.class) {\n    return new Short(string);\n  }\n  if (type == Integer.class || type == int.class) {\n    return new Integer(string);\n  }\n  if (type == Long.class || type == long.class) {\n    return new Long(string);\n  }\n  if (type == Double.class || type == double.class) {\n    return new Double(string);\n  }\n  if (type == Float.class || type == float.class) {\n    return new Float(string);\n  }\n  if (type == Byte.class || type == byte.class) {\n    return new Byte(string);\n  }\n  if (type == Boolean.class || type == boolean.class) {\n    return Boolean.valueOf(string);\n  }\n  if (type == Date.class || type == java.sql.Date.class || type == java.sql.Timestamp.class || type == java.sql.Time.class) {\n    try {\n      Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n      if (type == java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n      }\n      if (type == java.sql.Timestamp.class) {\n        return new java.sql.Timestamp(date.getTime());\n      }\n      if (type == java.sql.Time.class) {\n        return new java.sql.Time(date.getTime());\n      }\n      return date;\n    }\n catch (    ParseException e) {\n      throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n    }\n  }\n  if (type == java.time.LocalDateTime.class || type == java.time.LocalDate.class || type == java.time.LocalTime.class) {\n    LocalDateTime localDateTime=LocalDateTime.parse(string);\n    if (type == java.time.LocalDate.class) {\n      return localDateTime.toLocalDate();\n    }\n    if (type == java.time.LocalTime.class) {\n      return localDateTime.toLocalTime();\n    }\n    return localDateTime;\n  }\n  if (type == Class.class) {\n    try {\n      return ReflectUtils.name2class(string);\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(e.getMessage(),e);\n    }\n  }\n  if (char[].class.equals(type)) {\n    int len=string.length();\n    char[] chars=new char[len];\n    string.getChars(0,len,chars,0);\n    return chars;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 488,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7168,
        "startLineNumber" : 51,
        "startColumnNumber" : 76,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (value == null || type == null || type.isAssignableFrom(value.getClass())) {\n    return value;\n  }\n  if (value instanceof String) {\n    String string=(String)value;\n    if (char.class.equals(type) || Character.class.equals(type)) {\n      if (string.length() != 1) {\n        throw new IllegalArgumentException(String.format(\"CAN NOT convert String(%s) to char!\" + \" when convert String to char, the String MUST only 1 char.\",string));\n      }\n      return string.charAt(0);\n    }\n    if (type.isEnum()) {\n      return Enum.valueOf((Class<Enum>)type,string);\n    }\n    if (type == BigInteger.class) {\n      return new BigInteger(string);\n    }\n    if (type == BigDecimal.class) {\n      return new BigDecimal(string);\n    }\n    if (type == Short.class || type == short.class) {\n      return new Short(string);\n    }\n    if (type == Integer.class || type == int.class) {\n      return new Integer(string);\n    }\n    if (type == Long.class || type == long.class) {\n      return new Long(string);\n    }\n    if (type == Double.class || type == double.class) {\n      return new Double(string);\n    }\n    if (type == Float.class || type == float.class) {\n      return new Float(string);\n    }\n    if (type == Byte.class || type == byte.class) {\n      return new Byte(string);\n    }\n    if (type == Boolean.class || type == boolean.class) {\n      return Boolean.valueOf(string);\n    }\n    if (type == Date.class || type == java.sql.Date.class || type == java.sql.Timestamp.class || type == java.sql.Time.class) {\n      try {\n        Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n        if (type == java.sql.Date.class) {\n          return new java.sql.Date(date.getTime());\n        }\n        if (type == java.sql.Timestamp.class) {\n          return new java.sql.Timestamp(date.getTime());\n        }\n        if (type == java.sql.Time.class) {\n          return new java.sql.Time(date.getTime());\n        }\n        return date;\n      }\n catch (      ParseException e) {\n        throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n      }\n    }\n    if (type == java.time.LocalDateTime.class || type == java.time.LocalDate.class || type == java.time.LocalTime.class) {\n      LocalDateTime localDateTime=LocalDateTime.parse(string);\n      if (type == java.time.LocalDate.class) {\n        return localDateTime.toLocalDate();\n      }\n      if (type == java.time.LocalTime.class) {\n        return localDateTime.toLocalTime();\n      }\n      return localDateTime;\n    }\n    if (type == Class.class) {\n      try {\n        return ReflectUtils.name2class(string);\n      }\n catch (      ClassNotFoundException e) {\n        throw new RuntimeException(e.getMessage(),e);\n      }\n    }\n    if (char[].class.equals(type)) {\n      int len=string.length();\n      char[] chars=new char[len];\n      string.getChars(0,len,chars,0);\n      return chars;\n    }\n  }\n  if (value instanceof Number) {\n    Number number=(Number)value;\n    if (type == byte.class || type == Byte.class) {\n      return number.byteValue();\n    }\n    if (type == short.class || type == Short.class) {\n      return number.shortValue();\n    }\n    if (type == int.class || type == Integer.class) {\n      return number.intValue();\n    }\n    if (type == long.class || type == Long.class) {\n      return number.longValue();\n    }\n    if (type == float.class || type == Float.class) {\n      return number.floatValue();\n    }\n    if (type == double.class || type == Double.class) {\n      return number.doubleValue();\n    }\n    if (type == BigInteger.class) {\n      return BigInteger.valueOf(number.longValue());\n    }\n    if (type == BigDecimal.class) {\n      return BigDecimal.valueOf(number.doubleValue());\n    }\n    if (type == Date.class) {\n      return new Date(number.longValue());\n    }\n    if (type == boolean.class || type == Boolean.class) {\n      return 0 != number.intValue();\n    }\n  }\n  if (value instanceof Collection) {\n    Collection collection=(Collection)value;\n    if (type.isArray()) {\n      int length=collection.size();\n      Object array=Array.newInstance(type.getComponentType(),length);\n      int i=0;\n      for (      Object item : collection) {\n        Array.set(array,i++,item);\n      }\n      return array;\n    }\n    if (!type.isInterface()) {\n      try {\n        Collection result=(Collection)type.newInstance();\n        result.addAll(collection);\n        return result;\n      }\n catch (      Throwable ignored) {\n      }\n    }\n    if (type == List.class) {\n      return new ArrayList<Object>(collection);\n    }\n    if (type == Set.class) {\n      return new HashSet<Object>(collection);\n    }\n  }\n  if (value.getClass().isArray() && Collection.class.isAssignableFrom(type)) {\n    Collection collection;\n    if (!type.isInterface()) {\n      try {\n        collection=(Collection)type.newInstance();\n      }\n catch (      Throwable e) {\n        collection=new ArrayList<Object>();\n      }\n    }\n else     if (type == Set.class) {\n      collection=new HashSet<Object>();\n    }\n else {\n      collection=new ArrayList<Object>();\n    }\n    int length=Array.getLength(value);\n    for (int i=0; i < length; i++) {\n      collection.add(Array.get(value,i));\n    }\n    return collection;\n  }\n  return value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 911,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7751,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Compatible type convert. Null value is allowed to pass in. If no conversion is needed, then the original value will be returned. <p> Supported compatible type conversions include (primary types and corresponding wrappers are not listed): <ul> <li> String -> char, enum, Date <li> byte, short, int, long -> byte, short, int, long <li> float, double -> float, double </ul>\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static Object compatibleTypeConvert(Object value,Class<?> type){\n  if (value == null || type == null || type.isAssignableFrom(value.getClass())) {\n    return value;\n  }\n  if (value instanceof String) {\n    String string=(String)value;\n    if (char.class.equals(type) || Character.class.equals(type)) {\n      if (string.length() != 1) {\n        throw new IllegalArgumentException(String.format(\"CAN NOT convert String(%s) to char!\" + \" when convert String to char, the String MUST only 1 char.\",string));\n      }\n      return string.charAt(0);\n    }\n    if (type.isEnum()) {\n      return Enum.valueOf((Class<Enum>)type,string);\n    }\n    if (type == BigInteger.class) {\n      return new BigInteger(string);\n    }\n    if (type == BigDecimal.class) {\n      return new BigDecimal(string);\n    }\n    if (type == Short.class || type == short.class) {\n      return new Short(string);\n    }\n    if (type == Integer.class || type == int.class) {\n      return new Integer(string);\n    }\n    if (type == Long.class || type == long.class) {\n      return new Long(string);\n    }\n    if (type == Double.class || type == double.class) {\n      return new Double(string);\n    }\n    if (type == Float.class || type == float.class) {\n      return new Float(string);\n    }\n    if (type == Byte.class || type == byte.class) {\n      return new Byte(string);\n    }\n    if (type == Boolean.class || type == boolean.class) {\n      return Boolean.valueOf(string);\n    }\n    if (type == Date.class || type == java.sql.Date.class || type == java.sql.Timestamp.class || type == java.sql.Time.class) {\n      try {\n        Date date=new SimpleDateFormat(DATE_FORMAT).parse(string);\n        if (type == java.sql.Date.class) {\n          return new java.sql.Date(date.getTime());\n        }\n        if (type == java.sql.Timestamp.class) {\n          return new java.sql.Timestamp(date.getTime());\n        }\n        if (type == java.sql.Time.class) {\n          return new java.sql.Time(date.getTime());\n        }\n        return date;\n      }\n catch (      ParseException e) {\n        throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n      }\n    }\n    if (type == java.time.LocalDateTime.class || type == java.time.LocalDate.class || type == java.time.LocalTime.class) {\n      LocalDateTime localDateTime=LocalDateTime.parse(string);\n      if (type == java.time.LocalDate.class) {\n        return localDateTime.toLocalDate();\n      }\n      if (type == java.time.LocalTime.class) {\n        return localDateTime.toLocalTime();\n      }\n      return localDateTime;\n    }\n    if (type == Class.class) {\n      try {\n        return ReflectUtils.name2class(string);\n      }\n catch (      ClassNotFoundException e) {\n        throw new RuntimeException(e.getMessage(),e);\n      }\n    }\n    if (char[].class.equals(type)) {\n      int len=string.length();\n      char[] chars=new char[len];\n      string.getChars(0,len,chars,0);\n      return chars;\n    }\n  }\n  if (value instanceof Number) {\n    Number number=(Number)value;\n    if (type == byte.class || type == Byte.class) {\n      return number.byteValue();\n    }\n    if (type == short.class || type == Short.class) {\n      return number.shortValue();\n    }\n    if (type == int.class || type == Integer.class) {\n      return number.intValue();\n    }\n    if (type == long.class || type == Long.class) {\n      return number.longValue();\n    }\n    if (type == float.class || type == Float.class) {\n      return number.floatValue();\n    }\n    if (type == double.class || type == Double.class) {\n      return number.doubleValue();\n    }\n    if (type == BigInteger.class) {\n      return BigInteger.valueOf(number.longValue());\n    }\n    if (type == BigDecimal.class) {\n      return BigDecimal.valueOf(number.doubleValue());\n    }\n    if (type == Date.class) {\n      return new Date(number.longValue());\n    }\n    if (type == boolean.class || type == Boolean.class) {\n      return 0 != number.intValue();\n    }\n  }\n  if (value instanceof Collection) {\n    Collection collection=(Collection)value;\n    if (type.isArray()) {\n      int length=collection.size();\n      Object array=Array.newInstance(type.getComponentType(),length);\n      int i=0;\n      for (      Object item : collection) {\n        Array.set(array,i++,item);\n      }\n      return array;\n    }\n    if (!type.isInterface()) {\n      try {\n        Collection result=(Collection)type.newInstance();\n        result.addAll(collection);\n        return result;\n      }\n catch (      Throwable ignored) {\n      }\n    }\n    if (type == List.class) {\n      return new ArrayList<Object>(collection);\n    }\n    if (type == Set.class) {\n      return new HashSet<Object>(collection);\n    }\n  }\n  if (value.getClass().isArray() && Collection.class.isAssignableFrom(type)) {\n    Collection collection;\n    if (!type.isInterface()) {\n      try {\n        collection=(Collection)type.newInstance();\n      }\n catch (      Throwable e) {\n        collection=new ArrayList<Object>();\n      }\n    }\n else     if (type == Set.class) {\n      collection=new HashSet<Object>();\n    }\n else {\n      collection=new ArrayList<Object>();\n    }\n    int length=Array.getLength(value);\n    for (int i=0; i < length; i++) {\n      collection.add(Array.get(value,i));\n    }\n    return collection;\n  }\n  return value;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 933,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 110,
        "startColumnNumber" : 20,
        "endLineNumber" : 111,
        "endColumnNumber" : 77
      },
      "nodeContext" : "throw new IllegalStateException(\"Failed to parse date \" + value + \" by format \"+ DATE_FORMAT+ \", cause: \"+ e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 18,
    "type" : "java.lang.IllegalStateException"
  } ],
  "positionList" : [ {
    "charLength" : 151,
    "startLineNumber" : 110,
    "startColumnNumber" : 26,
    "endLineNumber" : 111,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}