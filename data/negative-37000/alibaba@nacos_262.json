{
  "id" : 262,
  "expression" : "true",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/main/java/com/alibaba/nacos/client/naming/cache/ServiceInfoHolder.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 165,
      "startColumnNumber" : 19,
      "endLineNumber" : 165,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 165,
        "startColumnNumber" : 12,
        "endLineNumber" : 165,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 162,
        "startColumnNumber" : 32,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == oldService) {\n  NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3007,
        "startLineNumber" : 161,
        "startColumnNumber" : 89,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean isChangedServiceInfo(ServiceInfo oldService,ServiceInfo newService){\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 165,
        "startColumnNumber" : 12,
        "endLineNumber" : 165,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 215,
      "startColumnNumber" : 22,
      "endLineNumber" : 215,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 26
      },
      "nodeContext" : "changed=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 214,
        "startColumnNumber" : 33,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  changed=true;\n  NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (newHosts.size() > 0) {\n  changed=true;\n  NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3007,
        "startLineNumber" : 161,
        "startColumnNumber" : 89,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean isChangedServiceInfo(ServiceInfo oldService,ServiceInfo newService){\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 222,
      "startColumnNumber" : 22,
      "endLineNumber" : 222,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 26
      },
      "nodeContext" : "changed=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 221,
        "startColumnNumber" : 34,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  changed=true;\n  NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remvHosts.size() > 0) {\n  changed=true;\n  NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3007,
        "startLineNumber" : 161,
        "startColumnNumber" : 89,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean isChangedServiceInfo(ServiceInfo oldService,ServiceInfo newService){\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 228,
      "startColumnNumber" : 22,
      "endLineNumber" : 228,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 26
      },
      "nodeContext" : "changed=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 227,
        "startColumnNumber" : 33,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  changed=true;\n  NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modHosts.size() > 0) {\n  changed=true;\n  NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3007,
        "startLineNumber" : 161,
        "startColumnNumber" : 89,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean isChangedServiceInfo(ServiceInfo oldService,ServiceInfo newService){\n  if (null == oldService) {\n    NAMING_LOGGER.info(\"init new ips(\" + newService.ipCount() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newService.getHosts()));\n    return true;\n  }\n  if (oldService.getLastRefTime() > newService.getLastRefTime()) {\n    NAMING_LOGGER.warn(\"out of date data received, old-t: \" + oldService.getLastRefTime() + \", new-t: \"+ newService.getLastRefTime());\n  }\n  boolean changed=false;\n  Map<String,Instance> oldHostMap=new HashMap<String,Instance>(oldService.getHosts().size());\n  for (  Instance host : oldService.getHosts()) {\n    oldHostMap.put(host.toInetAddr(),host);\n  }\n  Map<String,Instance> newHostMap=new HashMap<String,Instance>(newService.getHosts().size());\n  for (  Instance host : newService.getHosts()) {\n    newHostMap.put(host.toInetAddr(),host);\n  }\n  Set<Instance> modHosts=new HashSet<Instance>();\n  Set<Instance> newHosts=new HashSet<Instance>();\n  Set<Instance> remvHosts=new HashSet<Instance>();\n  List<Map.Entry<String,Instance>> newServiceHosts=new ArrayList<Map.Entry<String,Instance>>(newHostMap.entrySet());\n  for (  Map.Entry<String,Instance> entry : newServiceHosts) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (oldHostMap.containsKey(key) && !StringUtils.equals(host.toString(),oldHostMap.get(key).toString())) {\n      modHosts.add(host);\n      continue;\n    }\n    if (!oldHostMap.containsKey(key)) {\n      newHosts.add(host);\n    }\n  }\n  for (  Map.Entry<String,Instance> entry : oldHostMap.entrySet()) {\n    Instance host=entry.getValue();\n    String key=entry.getKey();\n    if (newHostMap.containsKey(key)) {\n      continue;\n    }\n    if (!newHostMap.containsKey(key)) {\n      remvHosts.add(host);\n    }\n  }\n  if (newHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"new ips(\" + newHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(newHosts));\n  }\n  if (remvHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"removed ips(\" + remvHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(remvHosts));\n  }\n  if (modHosts.size() > 0) {\n    changed=true;\n    NAMING_LOGGER.info(\"modified ips(\" + modHosts.size() + \") service: \"+ newService.getKey()+ \" -> \"+ JacksonUtils.toJson(modHosts));\n  }\n  return changed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 27
      },
      "nodeContext" : "changed=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 165,
    "startColumnNumber" : 19,
    "endLineNumber" : 165,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 215,
    "startColumnNumber" : 22,
    "endLineNumber" : 215,
    "endColumnNumber" : 26
  }, {
    "charLength" : 4,
    "startLineNumber" : 222,
    "startColumnNumber" : 22,
    "endLineNumber" : 222,
    "endColumnNumber" : 26
  }, {
    "charLength" : 4,
    "startLineNumber" : 228,
    "startColumnNumber" : 22,
    "endLineNumber" : 228,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}