{
  "id" : 9,
  "expression" : "1.0",
  "projectName" : "ben-manes@caffeine",
  "commitID" : "30ca3d80d9dc7aa20adceacfc5fff1659bbadb8e",
  "filePath" : "/src/jmh/java/com/github/benmanes/caffeine/generator/ZipfianGenerator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1.0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 141,
      "startColumnNumber" : 8,
      "endLineNumber" : 141,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 23
      },
      "nodeContext" : "1.0 / (1.0 - theta)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 23
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 24
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 130,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  items=max - min + 1;\n  base=min;\n  zipfianconstant=_zipfianconstant;\n  theta=zipfianconstant;\n  zeta2theta=zeta(2,theta);\n  alpha=1.0 / (1.0 - theta);\n  zetan=_zetan;\n  countforzeta=items;\n  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);\n  nextInt();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Create a zipfian generator for items between min and max (inclusive) for the specified zipfian constant, using the precomputed value of zeta.\n * @param min The smallest integer to generate in the sequence.\n * @param max The largest integer to generate in the sequence.\n * @param _zipfianconstant The zipfian constant to use.\n * @param _zetan The precomputed zeta constant.\n */\npublic ZipfianGenerator(long min,long max,double _zipfianconstant,double _zetan){\n  items=max - min + 1;\n  base=min;\n  zipfianconstant=_zipfianconstant;\n  theta=zipfianconstant;\n  zeta2theta=zeta(2,theta);\n  alpha=1.0 / (1.0 - theta);\n  zetan=_zetan;\n  countforzeta=items;\n  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);\n  nextInt();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 24
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "double"
  }, {
    "nodeContext" : "1.0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 141,
      "startColumnNumber" : 13,
      "endLineNumber" : 141,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 22
      },
      "nodeContext" : "1.0 - theta",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 23
      },
      "nodeContext" : "(1.0 - theta)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 23
      },
      "nodeContext" : "1.0 / (1.0 - theta)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 23
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 24
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 130,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  items=max - min + 1;\n  base=min;\n  zipfianconstant=_zipfianconstant;\n  theta=zipfianconstant;\n  zeta2theta=zeta(2,theta);\n  alpha=1.0 / (1.0 - theta);\n  zetan=_zetan;\n  countforzeta=items;\n  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);\n  nextInt();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Create a zipfian generator for items between min and max (inclusive) for the specified zipfian constant, using the precomputed value of zeta.\n * @param min The smallest integer to generate in the sequence.\n * @param max The largest integer to generate in the sequence.\n * @param _zipfianconstant The zipfian constant to use.\n * @param _zetan The precomputed zeta constant.\n */\npublic ZipfianGenerator(long min,long max,double _zipfianconstant,double _zetan){\n  items=max - min + 1;\n  base=min;\n  zipfianconstant=_zipfianconstant;\n  theta=zipfianconstant;\n  zeta2theta=zeta(2,theta);\n  alpha=1.0 / (1.0 - theta);\n  zetan=_zetan;\n  countforzeta=items;\n  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);\n  nextInt();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 24
      },
      "nodeContext" : "alpha=1.0 / (1.0 - theta);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 141,
    "startColumnNumber" : 8,
    "endLineNumber" : 141,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 141,
    "startColumnNumber" : 13,
    "endLineNumber" : 141,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}