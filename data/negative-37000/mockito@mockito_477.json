{
  "id" : 477,
  "expression" : "wanted.getMatchers()",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wanted.getMatchers()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 43,
      "startColumnNumber" : 54,
      "endLineNumber" : 43,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 43,
        "endColumnNumber" : 99
      },
      "nodeContext" : "getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 42,
        "startColumnNumber" : 18,
        "endLineNumber" : 43,
        "endColumnNumber" : 99
      },
      "nodeContext" : "indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 43,
        "endColumnNumber" : 99
      },
      "nodeContext" : "getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.mockito.ArgumentMatcher>"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 43,
    "startColumnNumber" : 54,
    "endLineNumber" : 43,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}