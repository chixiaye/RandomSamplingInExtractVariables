{
  "id" : 413,
  "expression" : "assignments",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/PlanMatchingVisitor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "assignments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 70,
      "startColumnNumber" : 16,
      "endLineNumber" : 70,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 69,
        "startColumnNumber" : 52,
        "endLineNumber" : 71,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < inputs.size(); ++i) {\n  assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 67,
        "startColumnNumber" : 67,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assignments.Builder assignments=Assignments.builder();\n  for (int i=0; i < inputs.size(); ++i) {\n    assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n  }\n  newAliases=newAliases.updateAssignments(assignments.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (List<VariableReferenceExpression> inputs : allInputs) {\n  Assignments.Builder assignments=Assignments.builder();\n  for (int i=0; i < inputs.size(); ++i) {\n    assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n  }\n  newAliases=newAliases.updateAssignments(assignments.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<VariableReferenceExpression>> allInputs=node.getInputs();\n  List<VariableReferenceExpression> outputs=node.getOutputVariables();\n  MatchResult result=super.visitExchange(node,pattern);\n  if (!result.isMatch()) {\n    return result;\n  }\n  SymbolAliases newAliases=result.getAliases();\n  for (  List<VariableReferenceExpression> inputs : allInputs) {\n    Assignments.Builder assignments=Assignments.builder();\n    for (int i=0; i < inputs.size(); ++i) {\n      assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n    }\n    newAliases=newAliases.updateAssignments(assignments.build());\n  }\n  return match(newAliases);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public MatchResult visitExchange(ExchangeNode node,PlanMatchPattern pattern){\n  List<List<VariableReferenceExpression>> allInputs=node.getInputs();\n  List<VariableReferenceExpression> outputs=node.getOutputVariables();\n  MatchResult result=super.visitExchange(node,pattern);\n  if (!result.isMatch()) {\n    return result;\n  }\n  SymbolAliases newAliases=result.getAliases();\n  for (  List<VariableReferenceExpression> inputs : allInputs) {\n    Assignments.Builder assignments=Assignments.builder();\n    for (int i=0; i < inputs.size(); ++i) {\n      assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n    }\n    newAliases=newAliases.updateAssignments(assignments.build());\n  }\n  return match(newAliases);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.plan.Assignments.Builder"
  }, {
    "nodeContext" : "assignments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 72,
      "startColumnNumber" : 54,
      "endLineNumber" : 72,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 72,
        "startColumnNumber" : 54,
        "endLineNumber" : 72,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assignments.build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 72,
        "startColumnNumber" : 25,
        "endLineNumber" : 72,
        "endColumnNumber" : 74
      },
      "nodeContext" : "newAliases.updateAssignments(assignments.build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 74
      },
      "nodeContext" : "newAliases=newAliases.updateAssignments(assignments.build())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 75
      },
      "nodeContext" : "newAliases=newAliases.updateAssignments(assignments.build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 67,
        "startColumnNumber" : 67,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assignments.Builder assignments=Assignments.builder();\n  for (int i=0; i < inputs.size(); ++i) {\n    assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n  }\n  newAliases=newAliases.updateAssignments(assignments.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (List<VariableReferenceExpression> inputs : allInputs) {\n  Assignments.Builder assignments=Assignments.builder();\n  for (int i=0; i < inputs.size(); ++i) {\n    assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n  }\n  newAliases=newAliases.updateAssignments(assignments.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<VariableReferenceExpression>> allInputs=node.getInputs();\n  List<VariableReferenceExpression> outputs=node.getOutputVariables();\n  MatchResult result=super.visitExchange(node,pattern);\n  if (!result.isMatch()) {\n    return result;\n  }\n  SymbolAliases newAliases=result.getAliases();\n  for (  List<VariableReferenceExpression> inputs : allInputs) {\n    Assignments.Builder assignments=Assignments.builder();\n    for (int i=0; i < inputs.size(); ++i) {\n      assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n    }\n    newAliases=newAliases.updateAssignments(assignments.build());\n  }\n  return match(newAliases);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public MatchResult visitExchange(ExchangeNode node,PlanMatchPattern pattern){\n  List<List<VariableReferenceExpression>> allInputs=node.getInputs();\n  List<VariableReferenceExpression> outputs=node.getOutputVariables();\n  MatchResult result=super.visitExchange(node,pattern);\n  if (!result.isMatch()) {\n    return result;\n  }\n  SymbolAliases newAliases=result.getAliases();\n  for (  List<VariableReferenceExpression> inputs : allInputs) {\n    Assignments.Builder assignments=Assignments.builder();\n    for (int i=0; i < inputs.size(); ++i) {\n      assignments.put(outputs.get(i),castToRowExpression(asSymbolReference(inputs.get(i))));\n    }\n    newAliases=newAliases.updateAssignments(assignments.build());\n  }\n  return match(newAliases);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 75
      },
      "nodeContext" : "newAliases=newAliases.updateAssignments(assignments.build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.plan.Assignments.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 70,
    "startColumnNumber" : 16,
    "endLineNumber" : 70,
    "endColumnNumber" : 27
  }, {
    "charLength" : 11,
    "startLineNumber" : 72,
    "startColumnNumber" : 54,
    "endLineNumber" : 72,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}