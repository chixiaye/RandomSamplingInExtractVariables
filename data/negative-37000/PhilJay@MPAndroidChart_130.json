{
  "id" : 130,
  "expression" : "wasStacked",
  "projectName" : "PhilJay@MPAndroidChart",
  "commitID" : "43046425fc2ed73d0d3f177759706116e02a9053",
  "filePath" : "/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wasStacked",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 242,
      "startColumnNumber" : 29,
      "endLineNumber" : 242,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 242,
        "startColumnNumber" : 28,
        "endLineNumber" : 242,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 242,
        "startColumnNumber" : 24,
        "endLineNumber" : 255,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!wasStacked) {\n  float x=posX;\n  if (legend.getColors()[i] != -2)   x+=formTextSpaceAndForm;\n  drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n  posY+=textDrop;\n}\n else {\n  posY+=legend.mTextHeightMax * 3f;\n  drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 240,
        "startColumnNumber" : 43,
        "endLineNumber" : 260,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 240,
        "startColumnNumber" : 20,
        "endLineNumber" : 263,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (labels[i] != null) {\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n else {\n  stack+=formSize + stackSpace;\n  wasStacked=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 236,
        "startColumnNumber" : 56,
        "endLineNumber" : 264,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 236,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < labels.length; i++) {\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7942,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:  posX=mViewPortHandler.contentLeft() + xoffset;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\n  if (legend.getColors()[i] != -2)   posX+=formTextSpaceAndForm;\n  drawLabel(c,posX,posY,legend.getLabel(i));\n  posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\n  posX+=formSize + stackSpace;\n}\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 878,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9037,
        "startLineNumber" : 146,
        "startColumnNumber" : 54,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9087,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void renderLegend(Canvas c,Legend legend){\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1009,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 242,
        "startColumnNumber" : 28,
        "endLineNumber" : 242,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "wasStacked",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 276,
      "startColumnNumber" : 29,
      "endLineNumber" : 276,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 276,
        "startColumnNumber" : 28,
        "endLineNumber" : 276,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 276,
        "startColumnNumber" : 24,
        "endLineNumber" : 289,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!wasStacked) {\n  float x=posX;\n  if (legend.getColors()[i] != -2)   x+=formTextSpaceAndForm;\n  drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n  posY+=textDrop;\n}\n else {\n  posY+=legend.mTextHeightMax * 3f;\n  drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 274,
        "startColumnNumber" : 43,
        "endLineNumber" : 294,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 274,
        "startColumnNumber" : 20,
        "endLineNumber" : 297,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (labels[i] != null) {\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n else {\n  stack+=formSize + stackSpace;\n  wasStacked=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 270,
        "startColumnNumber" : 56,
        "endLineNumber" : 298,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 270,
        "startColumnNumber" : 16,
        "endLineNumber" : 298,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < labels.length; i++) {\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7942,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:  posX=mViewPortHandler.contentLeft() + xoffset;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\n  if (legend.getColors()[i] != -2)   posX+=formTextSpaceAndForm;\n  drawLabel(c,posX,posY,legend.getLabel(i));\n  posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\n  posX+=formSize + stackSpace;\n}\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 878,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9037,
        "startLineNumber" : 146,
        "startColumnNumber" : 54,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9087,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void renderLegend(Canvas c,Legend legend){\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1009,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 276,
        "startColumnNumber" : 28,
        "endLineNumber" : 276,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "wasStacked",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 337,
      "startColumnNumber" : 29,
      "endLineNumber" : 337,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 337,
        "startColumnNumber" : 28,
        "endLineNumber" : 337,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 337,
        "startColumnNumber" : 24,
        "endLineNumber" : 350,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!wasStacked) {\n  float x=posX;\n  if (legend.getColors()[i] != -2)   x+=formTextSpaceAndForm;\n  drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n  posY+=textDrop;\n}\n else {\n  posY+=legend.mTextHeightMax * 3f;\n  drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 335,
        "startColumnNumber" : 43,
        "endLineNumber" : 355,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 335,
        "startColumnNumber" : 20,
        "endLineNumber" : 358,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (labels[i] != null) {\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n else {\n  stack+=formSize + stackSpace;\n  wasStacked=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 331,
        "startColumnNumber" : 56,
        "endLineNumber" : 359,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 331,
        "startColumnNumber" : 16,
        "endLineNumber" : 359,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < labels.length; i++) {\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7942,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:  posX=mViewPortHandler.contentLeft() + xoffset;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\n  if (legend.getColors()[i] != -2)   posX+=formTextSpaceAndForm;\n  drawLabel(c,posX,posY,legend.getLabel(i));\n  posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\n  posX+=formSize + stackSpace;\n}\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 878,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9037,
        "startLineNumber" : 146,
        "startColumnNumber" : 54,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9087,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void renderLegend(Canvas c,Legend legend){\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1009,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 337,
        "startColumnNumber" : 28,
        "endLineNumber" : 337,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "wasStacked",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 373,
      "startColumnNumber" : 29,
      "endLineNumber" : 373,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 373,
        "startColumnNumber" : 28,
        "endLineNumber" : 373,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 373,
        "startColumnNumber" : 24,
        "endLineNumber" : 386,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!wasStacked) {\n  float x=posX;\n  if (legend.getColors()[i] != -2)   x+=formTextSpaceAndForm;\n  drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n  posY+=textDrop;\n}\n else {\n  posY+=legend.mTextHeightMax * 3f;\n  drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 371,
        "startColumnNumber" : 43,
        "endLineNumber" : 391,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 371,
        "startColumnNumber" : 20,
        "endLineNumber" : 394,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (labels[i] != null) {\n  if (!wasStacked) {\n    float x=posX;\n    if (legend.getColors()[i] != -2)     x+=formTextSpaceAndForm;\n    drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n    posY+=textDrop;\n  }\n else {\n    posY+=legend.mTextHeightMax * 3f;\n    drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n  }\n  posY+=legend.getYEntrySpace();\n  stack=0f;\n}\n else {\n  stack+=formSize + stackSpace;\n  wasStacked=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 367,
        "startColumnNumber" : 56,
        "endLineNumber" : 395,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 367,
        "startColumnNumber" : 16,
        "endLineNumber" : 395,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < labels.length; i++) {\n  drawForm(c,posX + stack,posY,i,legend);\n  if (labels[i] != null) {\n    if (!wasStacked) {\n      float x=posX;\n      if (legend.getColors()[i] != -2)       x+=formTextSpaceAndForm;\n      drawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\n      posY+=textDrop;\n    }\n else {\n      posY+=legend.mTextHeightMax * 3f;\n      drawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n    }\n    posY+=legend.getYEntrySpace();\n    stack=0f;\n  }\n else {\n    stack+=formSize + stackSpace;\n    wasStacked=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7942,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:  posX=mViewPortHandler.contentLeft() + xoffset;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\n  if (legend.getColors()[i] != -2)   posX+=formTextSpaceAndForm;\n  drawLabel(c,posX,posY,legend.getLabel(i));\n  posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\n  posX+=formSize + stackSpace;\n}\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 878,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9037,
        "startLineNumber" : 146,
        "startColumnNumber" : 54,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9087,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void renderLegend(Canvas c,Legend legend){\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1009,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 373,
        "startColumnNumber" : 28,
        "endLineNumber" : 373,
        "endColumnNumber" : 39
      },
      "nodeContext" : "!wasStacked",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 242,
    "startColumnNumber" : 29,
    "endLineNumber" : 242,
    "endColumnNumber" : 39
  }, {
    "charLength" : 10,
    "startLineNumber" : 276,
    "startColumnNumber" : 29,
    "endLineNumber" : 276,
    "endColumnNumber" : 39
  }, {
    "charLength" : 10,
    "startLineNumber" : 337,
    "startColumnNumber" : 29,
    "endLineNumber" : 337,
    "endColumnNumber" : 39
  }, {
    "charLength" : 10,
    "startLineNumber" : 373,
    "startColumnNumber" : 29,
    "endLineNumber" : 373,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  } ]
}