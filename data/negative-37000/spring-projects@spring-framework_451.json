{
  "id" : 451,
  "expression" : "-1",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-jdbc/src/main/java/org/springframework/jdbc/object/BatchSqlUpdate.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 173,
      "startColumnNumber" : 9,
      "endLineNumber" : 173,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 173,
        "endColumnNumber" : 12
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 162,
        "startColumnNumber" : 64,
        "endLineNumber" : 174,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  validateParameters(params);\n  this.parameterQueue.add(params.clone());\n  if (this.parameterQueue.size() == this.batchSize) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Triggering auto-flush because queue reached batch size of \" + this.batchSize);\n    }\n    flush();\n  }\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1082,
        "startLineNumber" : 147,
        "startColumnNumber" : 1,
        "endLineNumber" : 174,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Overridden version of  {@code update} that adds the given statementparameters to the queue rather than executing them immediately. All other  {@code update} methods of the SqlUpdate base class gothrough this method and will thus behave similarly. <p>You need to call  {@code flush} to actually execute the batch.If the specified batch size is reached, an implicit flush will happen; you still need to finally call  {@code flush} to flush all statements.\n * @param params array of parameter objects\n * @return the number of rows affected by the update (always -1,meaning \"not applicable\", as the statement is not actually executed by this method)\n * @see #flush\n */\n@Override public int update(Object... params) throws DataAccessException {\n  validateParameters(params);\n  this.parameterQueue.add(params.clone());\n  if (this.parameterQueue.size() == this.batchSize) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Triggering auto-flush because queue reached batch size of \" + this.batchSize);\n    }\n    flush();\n  }\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 58,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 173,
        "endColumnNumber" : 12
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 173,
    "startColumnNumber" : 9,
    "endLineNumber" : 173,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}