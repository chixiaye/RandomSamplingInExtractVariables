{
  "id" : 107,
  "expression" : "j",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTreeTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 353,
      "startColumnNumber" : 22,
      "endLineNumber" : 353,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 353,
        "startColumnNumber" : 22,
        "endLineNumber" : 353,
        "endColumnNumber" : 30
      },
      "nodeContext" : "j < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 353,
        "startColumnNumber" : 6,
        "endLineNumber" : 360,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < size; j++) {\n  Integer value=lst.get(j);\n  assertTrue(tree.remove(value));\n  assertFalse(tree.contains(value));\n  assertEquals(tree.size(),size - j - 1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 344,
        "startColumnNumber" : 36,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < LOOPS; i++) {\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 342,
        "startColumnNumber" : 34,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 341,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomRemoveTests(){\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 353,
        "startColumnNumber" : 22,
        "endLineNumber" : 353,
        "endColumnNumber" : 30
      },
      "nodeContext" : "j < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 355,
      "startColumnNumber" : 32,
      "endLineNumber" : 355,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 355,
        "startColumnNumber" : 24,
        "endLineNumber" : 355,
        "endColumnNumber" : 34
      },
      "nodeContext" : "lst.get(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 355,
        "startColumnNumber" : 16,
        "endLineNumber" : 355,
        "endColumnNumber" : 34
      },
      "nodeContext" : "value=lst.get(j)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 355,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Integer value=lst.get(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 353,
        "startColumnNumber" : 37,
        "endLineNumber" : 360,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer value=lst.get(j);\n  assertTrue(tree.remove(value));\n  assertFalse(tree.contains(value));\n  assertEquals(tree.size(),size - j - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 353,
        "startColumnNumber" : 6,
        "endLineNumber" : 360,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < size; j++) {\n  Integer value=lst.get(j);\n  assertTrue(tree.remove(value));\n  assertFalse(tree.contains(value));\n  assertEquals(tree.size(),size - j - 1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 344,
        "startColumnNumber" : 36,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < LOOPS; i++) {\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 342,
        "startColumnNumber" : 34,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 341,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomRemoveTests(){\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 355,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Integer value=lst.get(j);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 359,
      "startColumnNumber" : 41,
      "endLineNumber" : 359,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 359,
        "startColumnNumber" : 34,
        "endLineNumber" : 359,
        "endColumnNumber" : 46
      },
      "nodeContext" : "size - j - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 359,
        "startColumnNumber" : 8,
        "endLineNumber" : 359,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(tree.size(),size - j - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 359,
        "startColumnNumber" : 8,
        "endLineNumber" : 359,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(tree.size(),size - j - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 353,
        "startColumnNumber" : 37,
        "endLineNumber" : 360,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer value=lst.get(j);\n  assertTrue(tree.remove(value));\n  assertFalse(tree.contains(value));\n  assertEquals(tree.size(),size - j - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 353,
        "startColumnNumber" : 6,
        "endLineNumber" : 360,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < size; j++) {\n  Integer value=lst.get(j);\n  assertTrue(tree.remove(value));\n  assertFalse(tree.contains(value));\n  assertEquals(tree.size(),size - j - 1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 344,
        "startColumnNumber" : 36,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 344,
        "startColumnNumber" : 4,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < LOOPS; i++) {\n  int size=i;\n  BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n  List<Integer> lst=genRandList(size);\n  for (  Integer value : lst)   tree.add(value);\n  Collections.shuffle(lst);\n  for (int j=0; j < size; j++) {\n    Integer value=lst.get(j);\n    assertTrue(tree.remove(value));\n    assertFalse(tree.contains(value));\n    assertEquals(tree.size(),size - j - 1);\n  }\n  assertTrue(tree.isEmpty());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 342,
        "startColumnNumber" : 34,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 341,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomRemoveTests(){\n  for (int i=0; i < LOOPS; i++) {\n    int size=i;\n    BinarySearchTree<Integer> tree=new BinarySearchTree<>();\n    List<Integer> lst=genRandList(size);\n    for (    Integer value : lst)     tree.add(value);\n    Collections.shuffle(lst);\n    for (int j=0; j < size; j++) {\n      Integer value=lst.get(j);\n      assertTrue(tree.remove(value));\n      assertFalse(tree.contains(value));\n      assertEquals(tree.size(),size - j - 1);\n    }\n    assertTrue(tree.isEmpty());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 359,
        "startColumnNumber" : 8,
        "endLineNumber" : 359,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(tree.size(),size - j - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 353,
    "startColumnNumber" : 22,
    "endLineNumber" : 353,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 355,
    "startColumnNumber" : 32,
    "endLineNumber" : 355,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 359,
    "startColumnNumber" : 41,
    "endLineNumber" : 359,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}