{
  "id" : 21,
  "expression" : "PublishProcessor",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableSortedListTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PublishProcessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 102,
      "startColumnNumber" : 51,
      "endLineNumber" : 102,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 102,
        "startColumnNumber" : 51,
        "endLineNumber" : 102,
        "endColumnNumber" : 76
      },
      "nodeContext" : "PublishProcessor.create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 102,
        "startColumnNumber" : 42,
        "endLineNumber" : 102,
        "endColumnNumber" : 76
      },
      "nodeContext" : "source=PublishProcessor.create()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 77
      },
      "nodeContext" : "PublishProcessor<Integer> source=PublishProcessor.create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 98,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i % 50 == 0) {\n    System.out.println(\"testAsyncRequested -> \" + i);\n  }\n  PublishProcessor<Integer> source=PublishProcessor.create();\n  Flowable<List<Integer>> sorted=source.toSortedList();\n  final CyclicBarrier cb=new CyclicBarrier(2);\n  final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n  sorted.subscribe(ts);\n  w.schedule(new Runnable(){\n    @Override public void run(){\n      await(cb);\n      ts.request(1);\n    }\n  }\n);\n  source.onNext(1);\n  await(cb);\n  source.onComplete();\n  ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n  ts.assertTerminated();\n  ts.assertNoErrors();\n  ts.assertValue(Arrays.asList(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 1000; i++) {\n  if (i % 50 == 0) {\n    System.out.println(\"testAsyncRequested -> \" + i);\n  }\n  PublishProcessor<Integer> source=PublishProcessor.create();\n  Flowable<List<Integer>> sorted=source.toSortedList();\n  final CyclicBarrier cb=new CyclicBarrier(2);\n  final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n  sorted.subscribe(ts);\n  w.schedule(new Runnable(){\n    @Override public void run(){\n      await(cb);\n      ts.request(1);\n    }\n  }\n);\n  source.onNext(1);\n  await(cb);\n  source.onComplete();\n  ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n  ts.assertTerminated();\n  ts.assertNoErrors();\n  ts.assertValue(Arrays.asList(1));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < 1000; i++) {\n    if (i % 50 == 0) {\n      System.out.println(\"testAsyncRequested -> \" + i);\n    }\n    PublishProcessor<Integer> source=PublishProcessor.create();\n    Flowable<List<Integer>> sorted=source.toSortedList();\n    final CyclicBarrier cb=new CyclicBarrier(2);\n    final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n    sorted.subscribe(ts);\n    w.schedule(new Runnable(){\n      @Override public void run(){\n        await(cb);\n        ts.request(1);\n      }\n    }\n);\n    source.onNext(1);\n    await(cb);\n    source.onComplete();\n    ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n    ts.assertTerminated();\n    ts.assertNoErrors();\n    ts.assertValue(Arrays.asList(1));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < 1000; i++) {\n    if (i % 50 == 0) {\n      System.out.println(\"testAsyncRequested -> \" + i);\n    }\n    PublishProcessor<Integer> source=PublishProcessor.create();\n    Flowable<List<Integer>> sorted=source.toSortedList();\n    final CyclicBarrier cb=new CyclicBarrier(2);\n    final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n    sorted.subscribe(ts);\n    w.schedule(new Runnable(){\n      @Override public void run(){\n        await(cb);\n        ts.request(1);\n      }\n    }\n);\n    source.onNext(1);\n    await(cb);\n    source.onComplete();\n    ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n    ts.assertTerminated();\n    ts.assertNoErrors();\n    ts.assertValue(Arrays.asList(1));\n  }\n}\n  finally {\n  w.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 95,
        "startColumnNumber" : 37,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Scheduler.Worker w=Schedulers.newThread().createWorker();\n  try {\n    for (int i=0; i < 1000; i++) {\n      if (i % 50 == 0) {\n        System.out.println(\"testAsyncRequested -> \" + i);\n      }\n      PublishProcessor<Integer> source=PublishProcessor.create();\n      Flowable<List<Integer>> sorted=source.toSortedList();\n      final CyclicBarrier cb=new CyclicBarrier(2);\n      final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n      sorted.subscribe(ts);\n      w.schedule(new Runnable(){\n        @Override public void run(){\n          await(cb);\n          ts.request(1);\n        }\n      }\n);\n      source.onNext(1);\n      await(cb);\n      source.onComplete();\n      ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n      ts.assertTerminated();\n      ts.assertNoErrors();\n      ts.assertValue(Arrays.asList(1));\n    }\n  }\n  finally {\n    w.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1412,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=2000) @Ignore(\"PublishSubject no longer emits without requests so this test fails due to the race of onComplete and request\") public void testAsyncRequested(){\n  Scheduler.Worker w=Schedulers.newThread().createWorker();\n  try {\n    for (int i=0; i < 1000; i++) {\n      if (i % 50 == 0) {\n        System.out.println(\"testAsyncRequested -> \" + i);\n      }\n      PublishProcessor<Integer> source=PublishProcessor.create();\n      Flowable<List<Integer>> sorted=source.toSortedList();\n      final CyclicBarrier cb=new CyclicBarrier(2);\n      final TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>((Long)null);\n      sorted.subscribe(ts);\n      w.schedule(new Runnable(){\n        @Override public void run(){\n          await(cb);\n          ts.request(1);\n        }\n      }\n);\n      source.onNext(1);\n      await(cb);\n      source.onComplete();\n      ts.awaitTerminalEvent(1,TimeUnit.SECONDS);\n      ts.assertTerminated();\n      ts.assertNoErrors();\n      ts.assertValue(Arrays.asList(1));\n    }\n  }\n  finally {\n    w.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 77
      },
      "nodeContext" : "PublishProcessor<Integer> source=PublishProcessor.create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.processors.PublishProcessor"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 102,
    "startColumnNumber" : 51,
    "endLineNumber" : 102,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}