{
  "id" : 3,
  "expression" : "v9Smoosher",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/serde/LargeColumnSupportedComplexColumnSerializerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "v9Smoosher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 107,
      "startColumnNumber" : 46,
      "endLineNumber" : 107,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 107,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 107,
        "startColumnNumber" : 36,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 107,
        "startColumnNumber" : 10,
        "endLineNumber" : 112,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n  serializer.writeTo(channel,v9Smoosher);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 73,
        "startColumnNumber" : 66,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n  serializer.open();\n  for (int i=0; i < aCase; i++) {\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    byte[] hashBytes=fn.hashLong(i).asBytes();\n    collector.add(hashBytes);\n    baseCollector.fold(collector);\n    serializer.serialize(new ObjectColumnSelector(){\n      @Nullable @Override public Object getObject(){\n        return collector;\n      }\n      @Override public Class classOfObject(){\n        return HyperLogLogCollector.class;\n      }\n      @Override public void inspectRuntimeShape(      RuntimeShapeInspector inspector){\n      }\n    }\n);\n  }\n  try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n    serializer.writeTo(channel,v9Smoosher);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n  LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n  serializer.open();\n  for (int i=0; i < aCase; i++) {\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    byte[] hashBytes=fn.hashLong(i).asBytes();\n    collector.add(hashBytes);\n    baseCollector.fold(collector);\n    serializer.serialize(new ObjectColumnSelector(){\n      @Nullable @Override public Object getObject(){\n        return collector;\n      }\n      @Override public Class classOfObject(){\n        return HyperLogLogCollector.class;\n      }\n      @Override public void inspectRuntimeShape(      RuntimeShapeInspector inspector){\n      }\n    }\n);\n  }\n  try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n    serializer.writeTo(channel,v9Smoosher);\n  }\n }\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2423,
        "startLineNumber" : 69,
        "startColumnNumber" : 30,
        "endLineNumber" : 130,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  File tmpFile=temporaryFolder.newFolder();\n  HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n    LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n    serializer.open();\n    for (int i=0; i < aCase; i++) {\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      byte[] hashBytes=fn.hashLong(i).asBytes();\n      collector.add(hashBytes);\n      baseCollector.fold(collector);\n      serializer.serialize(new ObjectColumnSelector(){\n        @Nullable @Override public Object getObject(){\n          return collector;\n        }\n        @Override public Class classOfObject(){\n          return HyperLogLogCollector.class;\n        }\n        @Override public void inspectRuntimeShape(        RuntimeShapeInspector inspector){\n        }\n      }\n);\n    }\n    try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n      serializer.writeTo(channel,v9Smoosher);\n    }\n   }\n   SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n  final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n  serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n  ColumnHolder columnHolder=builder.build();\n  ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n  HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n  for (int i=0; i < aCase; i++) {\n    collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n  }\n  Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int aCase : cases) {\n  File tmpFile=temporaryFolder.newFolder();\n  HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n    LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n    serializer.open();\n    for (int i=0; i < aCase; i++) {\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      byte[] hashBytes=fn.hashLong(i).asBytes();\n      collector.add(hashBytes);\n      baseCollector.fold(collector);\n      serializer.serialize(new ObjectColumnSelector(){\n        @Nullable @Override public Object getObject(){\n          return collector;\n        }\n        @Override public Class classOfObject(){\n          return HyperLogLogCollector.class;\n        }\n        @Override public void inspectRuntimeShape(        RuntimeShapeInspector inspector){\n        }\n      }\n);\n    }\n    try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n      serializer.writeTo(channel,v9Smoosher);\n    }\n   }\n   SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n  final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n  serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n  ColumnHolder columnHolder=builder.build();\n  ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n  HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n  for (int i=0; i < aCase; i++) {\n    collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n  }\n  Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 68,
        "startColumnNumber" : 39,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  int aCase : cases) {\n    File tmpFile=temporaryFolder.newFolder();\n    HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n    try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n      LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n      serializer.open();\n      for (int i=0; i < aCase; i++) {\n        HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n        byte[] hashBytes=fn.hashLong(i).asBytes();\n        collector.add(hashBytes);\n        baseCollector.fold(collector);\n        serializer.serialize(new ObjectColumnSelector(){\n          @Nullable @Override public Object getObject(){\n            return collector;\n          }\n          @Override public Class classOfObject(){\n            return HyperLogLogCollector.class;\n          }\n          @Override public void inspectRuntimeShape(          RuntimeShapeInspector inspector){\n          }\n        }\n);\n      }\n      try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n        serializer.writeTo(channel,v9Smoosher);\n      }\n     }\n     SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n    final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n    serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n    ColumnHolder columnHolder=builder.build();\n    ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    for (int i=0; i < aCase; i++) {\n      collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n    }\n    Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2496,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int columnSize : columnSizes) {\n  for (  int aCase : cases) {\n    File tmpFile=temporaryFolder.newFolder();\n    HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n    try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n      LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n      serializer.open();\n      for (int i=0; i < aCase; i++) {\n        HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n        byte[] hashBytes=fn.hashLong(i).asBytes();\n        collector.add(hashBytes);\n        baseCollector.fold(collector);\n        serializer.serialize(new ObjectColumnSelector(){\n          @Nullable @Override public Object getObject(){\n            return collector;\n          }\n          @Override public Class classOfObject(){\n            return HyperLogLogCollector.class;\n          }\n          @Override public void inspectRuntimeShape(          RuntimeShapeInspector inspector){\n          }\n        }\n);\n      }\n      try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n        serializer.writeTo(channel,v9Smoosher);\n      }\n     }\n     SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n    final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n    serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n    ColumnHolder columnHolder=builder.build();\n    ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    for (int i=0; i < aCase; i++) {\n      collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n    }\n    Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 271,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2819,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HyperUniquesSerdeForTest serde=new HyperUniquesSerdeForTest(Hashing.murmur3_128());\n  int[] cases={1000,5000,10000,20000};\n  int[] columnSizes={Integer.MAX_VALUE,Integer.MAX_VALUE / 2,Integer.MAX_VALUE / 4,5000 * Long.BYTES,2500 * Long.BYTES};\n  for (  int columnSize : columnSizes) {\n    for (    int aCase : cases) {\n      File tmpFile=temporaryFolder.newFolder();\n      HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n      try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n        LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n        serializer.open();\n        for (int i=0; i < aCase; i++) {\n          HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n          byte[] hashBytes=fn.hashLong(i).asBytes();\n          collector.add(hashBytes);\n          baseCollector.fold(collector);\n          serializer.serialize(new ObjectColumnSelector(){\n            @Nullable @Override public Object getObject(){\n              return collector;\n            }\n            @Override public Class classOfObject(){\n              return HyperLogLogCollector.class;\n            }\n            @Override public void inspectRuntimeShape(            RuntimeShapeInspector inspector){\n            }\n          }\n);\n        }\n        try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n          serializer.writeTo(channel,v9Smoosher);\n        }\n       }\n       SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n      final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n      serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n      ColumnHolder columnHolder=builder.build();\n      ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      for (int i=0; i < aCase; i++) {\n        collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n      }\n      Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanity() throws IOException {\n  HyperUniquesSerdeForTest serde=new HyperUniquesSerdeForTest(Hashing.murmur3_128());\n  int[] cases={1000,5000,10000,20000};\n  int[] columnSizes={Integer.MAX_VALUE,Integer.MAX_VALUE / 2,Integer.MAX_VALUE / 4,5000 * Long.BYTES,2500 * Long.BYTES};\n  for (  int columnSize : columnSizes) {\n    for (    int aCase : cases) {\n      File tmpFile=temporaryFolder.newFolder();\n      HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n      try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n        LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n        serializer.open();\n        for (int i=0; i < aCase; i++) {\n          HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n          byte[] hashBytes=fn.hashLong(i).asBytes();\n          collector.add(hashBytes);\n          baseCollector.fold(collector);\n          serializer.serialize(new ObjectColumnSelector(){\n            @Nullable @Override public Object getObject(){\n              return collector;\n            }\n            @Override public Class classOfObject(){\n              return HyperLogLogCollector.class;\n            }\n            @Override public void inspectRuntimeShape(            RuntimeShapeInspector inspector){\n            }\n          }\n);\n        }\n        try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n          serializer.writeTo(channel,v9Smoosher);\n        }\n       }\n       SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n      final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n      serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n      ColumnHolder columnHolder=builder.build();\n      ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      for (int i=0; i < aCase; i++) {\n        collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n      }\n      Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 107,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.io.smoosh.FileSmoosher"
  }, {
    "nodeContext" : "v9Smoosher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 111,
      "startColumnNumber" : 40,
      "endLineNumber" : 111,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 51
      },
      "nodeContext" : "serializer.writeTo(channel,v9Smoosher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.writeTo(channel,v9Smoosher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 110,
        "startColumnNumber" : 13,
        "endLineNumber" : 112,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  serializer.writeTo(channel,v9Smoosher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 107,
        "startColumnNumber" : 10,
        "endLineNumber" : 112,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n  serializer.writeTo(channel,v9Smoosher);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 73,
        "startColumnNumber" : 66,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n  serializer.open();\n  for (int i=0; i < aCase; i++) {\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    byte[] hashBytes=fn.hashLong(i).asBytes();\n    collector.add(hashBytes);\n    baseCollector.fold(collector);\n    serializer.serialize(new ObjectColumnSelector(){\n      @Nullable @Override public Object getObject(){\n        return collector;\n      }\n      @Override public Class classOfObject(){\n        return HyperLogLogCollector.class;\n      }\n      @Override public void inspectRuntimeShape(      RuntimeShapeInspector inspector){\n      }\n    }\n);\n  }\n  try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n    serializer.writeTo(channel,v9Smoosher);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n  LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n  serializer.open();\n  for (int i=0; i < aCase; i++) {\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    byte[] hashBytes=fn.hashLong(i).asBytes();\n    collector.add(hashBytes);\n    baseCollector.fold(collector);\n    serializer.serialize(new ObjectColumnSelector(){\n      @Nullable @Override public Object getObject(){\n        return collector;\n      }\n      @Override public Class classOfObject(){\n        return HyperLogLogCollector.class;\n      }\n      @Override public void inspectRuntimeShape(      RuntimeShapeInspector inspector){\n      }\n    }\n);\n  }\n  try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n    serializer.writeTo(channel,v9Smoosher);\n  }\n }\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2423,
        "startLineNumber" : 69,
        "startColumnNumber" : 30,
        "endLineNumber" : 130,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  File tmpFile=temporaryFolder.newFolder();\n  HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n    LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n    serializer.open();\n    for (int i=0; i < aCase; i++) {\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      byte[] hashBytes=fn.hashLong(i).asBytes();\n      collector.add(hashBytes);\n      baseCollector.fold(collector);\n      serializer.serialize(new ObjectColumnSelector(){\n        @Nullable @Override public Object getObject(){\n          return collector;\n        }\n        @Override public Class classOfObject(){\n          return HyperLogLogCollector.class;\n        }\n        @Override public void inspectRuntimeShape(        RuntimeShapeInspector inspector){\n        }\n      }\n);\n    }\n    try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n      serializer.writeTo(channel,v9Smoosher);\n    }\n   }\n   SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n  final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n  serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n  ColumnHolder columnHolder=builder.build();\n  ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n  HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n  for (int i=0; i < aCase; i++) {\n    collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n  }\n  Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int aCase : cases) {\n  File tmpFile=temporaryFolder.newFolder();\n  HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n  try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n    LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n    serializer.open();\n    for (int i=0; i < aCase; i++) {\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      byte[] hashBytes=fn.hashLong(i).asBytes();\n      collector.add(hashBytes);\n      baseCollector.fold(collector);\n      serializer.serialize(new ObjectColumnSelector(){\n        @Nullable @Override public Object getObject(){\n          return collector;\n        }\n        @Override public Class classOfObject(){\n          return HyperLogLogCollector.class;\n        }\n        @Override public void inspectRuntimeShape(        RuntimeShapeInspector inspector){\n        }\n      }\n);\n    }\n    try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n      serializer.writeTo(channel,v9Smoosher);\n    }\n   }\n   SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n  final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n  serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n  ColumnHolder columnHolder=builder.build();\n  ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n  HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n  for (int i=0; i < aCase; i++) {\n    collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n  }\n  Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 68,
        "startColumnNumber" : 39,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  int aCase : cases) {\n    File tmpFile=temporaryFolder.newFolder();\n    HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n    try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n      LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n      serializer.open();\n      for (int i=0; i < aCase; i++) {\n        HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n        byte[] hashBytes=fn.hashLong(i).asBytes();\n        collector.add(hashBytes);\n        baseCollector.fold(collector);\n        serializer.serialize(new ObjectColumnSelector(){\n          @Nullable @Override public Object getObject(){\n            return collector;\n          }\n          @Override public Class classOfObject(){\n            return HyperLogLogCollector.class;\n          }\n          @Override public void inspectRuntimeShape(          RuntimeShapeInspector inspector){\n          }\n        }\n);\n      }\n      try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n        serializer.writeTo(channel,v9Smoosher);\n      }\n     }\n     SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n    final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n    serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n    ColumnHolder columnHolder=builder.build();\n    ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    for (int i=0; i < aCase; i++) {\n      collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n    }\n    Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2496,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int columnSize : columnSizes) {\n  for (  int aCase : cases) {\n    File tmpFile=temporaryFolder.newFolder();\n    HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n    try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n      LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n      serializer.open();\n      for (int i=0; i < aCase; i++) {\n        HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n        byte[] hashBytes=fn.hashLong(i).asBytes();\n        collector.add(hashBytes);\n        baseCollector.fold(collector);\n        serializer.serialize(new ObjectColumnSelector(){\n          @Nullable @Override public Object getObject(){\n            return collector;\n          }\n          @Override public Class classOfObject(){\n            return HyperLogLogCollector.class;\n          }\n          @Override public void inspectRuntimeShape(          RuntimeShapeInspector inspector){\n          }\n        }\n);\n      }\n      try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n        serializer.writeTo(channel,v9Smoosher);\n      }\n     }\n     SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n    final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n    serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n    ColumnHolder columnHolder=builder.build();\n    ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n    HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n    for (int i=0; i < aCase; i++) {\n      collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n    }\n    Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 271,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2819,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HyperUniquesSerdeForTest serde=new HyperUniquesSerdeForTest(Hashing.murmur3_128());\n  int[] cases={1000,5000,10000,20000};\n  int[] columnSizes={Integer.MAX_VALUE,Integer.MAX_VALUE / 2,Integer.MAX_VALUE / 4,5000 * Long.BYTES,2500 * Long.BYTES};\n  for (  int columnSize : columnSizes) {\n    for (    int aCase : cases) {\n      File tmpFile=temporaryFolder.newFolder();\n      HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n      try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n        LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n        serializer.open();\n        for (int i=0; i < aCase; i++) {\n          HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n          byte[] hashBytes=fn.hashLong(i).asBytes();\n          collector.add(hashBytes);\n          baseCollector.fold(collector);\n          serializer.serialize(new ObjectColumnSelector(){\n            @Nullable @Override public Object getObject(){\n              return collector;\n            }\n            @Override public Class classOfObject(){\n              return HyperLogLogCollector.class;\n            }\n            @Override public void inspectRuntimeShape(            RuntimeShapeInspector inspector){\n            }\n          }\n);\n        }\n        try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n          serializer.writeTo(channel,v9Smoosher);\n        }\n       }\n       SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n      final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n      serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n      ColumnHolder columnHolder=builder.build();\n      ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      for (int i=0; i < aCase; i++) {\n        collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n      }\n      Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanity() throws IOException {\n  HyperUniquesSerdeForTest serde=new HyperUniquesSerdeForTest(Hashing.murmur3_128());\n  int[] cases={1000,5000,10000,20000};\n  int[] columnSizes={Integer.MAX_VALUE,Integer.MAX_VALUE / 2,Integer.MAX_VALUE / 4,5000 * Long.BYTES,2500 * Long.BYTES};\n  for (  int columnSize : columnSizes) {\n    for (    int aCase : cases) {\n      File tmpFile=temporaryFolder.newFolder();\n      HyperLogLogCollector baseCollector=HyperLogLogCollector.makeLatestCollector();\n      try (SegmentWriteOutMedium segmentWriteOutMedium=new OffHeapMemorySegmentWriteOutMedium();FileSmoosher v9Smoosher=new FileSmoosher(tmpFile)){\n        LargeColumnSupportedComplexColumnSerializer serializer=LargeColumnSupportedComplexColumnSerializer.createWithColumnSize(segmentWriteOutMedium,\"test\",serde.getObjectStrategy(),columnSize);\n        serializer.open();\n        for (int i=0; i < aCase; i++) {\n          HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n          byte[] hashBytes=fn.hashLong(i).asBytes();\n          collector.add(hashBytes);\n          baseCollector.fold(collector);\n          serializer.serialize(new ObjectColumnSelector(){\n            @Nullable @Override public Object getObject(){\n              return collector;\n            }\n            @Override public Class classOfObject(){\n              return HyperLogLogCollector.class;\n            }\n            @Override public void inspectRuntimeShape(            RuntimeShapeInspector inspector){\n            }\n          }\n);\n        }\n        try (final SmooshedWriter channel=v9Smoosher.addWithSmooshedWriter(\"test\",serializer.getSerializedSize())){\n          serializer.writeTo(channel,v9Smoosher);\n        }\n       }\n       SmooshedFileMapper mapper=Smoosh.map(tmpFile);\n      final ColumnBuilder builder=new ColumnBuilder().setType(ValueType.COMPLEX).setHasMultipleValues(false).setFileMapper(mapper);\n      serde.deserializeColumn(mapper.mapFile(\"test\"),builder,null);\n      ColumnHolder columnHolder=builder.build();\n      ComplexColumn complexColumn=(ComplexColumn)columnHolder.getColumn();\n      HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();\n      for (int i=0; i < aCase; i++) {\n        collector.fold((HyperLogLogCollector)complexColumn.getRowValue(i));\n      }\n      Assert.assertEquals(baseCollector.estimateCardinality(),collector.estimateCardinality(),0.0);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.writeTo(channel,v9Smoosher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.io.smoosh.FileSmoosher"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 107,
    "startColumnNumber" : 46,
    "endLineNumber" : 107,
    "endColumnNumber" : 56
  }, {
    "charLength" : 10,
    "startLineNumber" : 111,
    "startColumnNumber" : 40,
    "endLineNumber" : 111,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}