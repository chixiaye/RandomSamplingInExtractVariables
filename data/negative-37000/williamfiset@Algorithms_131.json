{
  "id" : 131,
  "expression" : "DEPTH_TOKEN",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/GraphDiameter.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DEPTH_TOKEN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 41,
      "startColumnNumber" : 16,
      "endLineNumber" : 41,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 28
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 29
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 36,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1116,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int eccentricity(int nodeID,Map<Integer,List<Edge>> graph){\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 29
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "DEPTH_TOKEN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 55,
      "startColumnNumber" : 16,
      "endLineNumber" : 55,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 55,
        "startColumnNumber" : 10,
        "endLineNumber" : 55,
        "endColumnNumber" : 27
      },
      "nodeContext" : "id == DEPTH_TOKEN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 77,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (id == DEPTH_TOKEN) {\n  if (queue.isEmpty())   break;\n  queue.offer(DEPTH_TOKEN);\n  depth++;\n}\n else {\n  List<Edge> edges=graph.get(id);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (visited.get(edge.to) != VISITED_TOKEN) {\n        visited.put(edge.to,VISITED_TOKEN);\n        queue.offer(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 47,
        "startColumnNumber" : 17,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Integer id=queue.poll();\n  if (id == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.offer(DEPTH_TOKEN);\n    depth++;\n  }\n else {\n    List<Edge> edges=graph.get(id);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (visited.get(edge.to) != VISITED_TOKEN) {\n          visited.put(edge.to,VISITED_TOKEN);\n          queue.offer(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  Integer id=queue.poll();\n  if (id == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.offer(DEPTH_TOKEN);\n    depth++;\n  }\n else {\n    List<Edge> edges=graph.get(id);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (visited.get(edge.to) != VISITED_TOKEN) {\n          visited.put(edge.to,VISITED_TOKEN);\n          queue.offer(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 79,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 36,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1116,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int eccentricity(int nodeID,Map<Integer,List<Edge>> graph){\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 55,
        "startColumnNumber" : 10,
        "endLineNumber" : 55,
        "endColumnNumber" : 27
      },
      "nodeContext" : "id == DEPTH_TOKEN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "DEPTH_TOKEN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 61,
      "startColumnNumber" : 20,
      "endLineNumber" : 61,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 32
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 33
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 55,
        "startColumnNumber" : 29,
        "endLineNumber" : 66,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (queue.isEmpty())   break;\n  queue.offer(DEPTH_TOKEN);\n  depth++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 77,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (id == DEPTH_TOKEN) {\n  if (queue.isEmpty())   break;\n  queue.offer(DEPTH_TOKEN);\n  depth++;\n}\n else {\n  List<Edge> edges=graph.get(id);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (visited.get(edge.to) != VISITED_TOKEN) {\n        visited.put(edge.to,VISITED_TOKEN);\n        queue.offer(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 47,
        "startColumnNumber" : 17,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Integer id=queue.poll();\n  if (id == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.offer(DEPTH_TOKEN);\n    depth++;\n  }\n else {\n    List<Edge> edges=graph.get(id);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (visited.get(edge.to) != VISITED_TOKEN) {\n          visited.put(edge.to,VISITED_TOKEN);\n          queue.offer(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  Integer id=queue.poll();\n  if (id == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.offer(DEPTH_TOKEN);\n    depth++;\n  }\n else {\n    List<Edge> edges=graph.get(id);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (visited.get(edge.to) != VISITED_TOKEN) {\n          visited.put(edge.to,VISITED_TOKEN);\n          queue.offer(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 79,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 36,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1116,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int eccentricity(int nodeID,Map<Integer,List<Edge>> graph){\n  VISITED_TOKEN++;\n  queue.offer(nodeID);\n  queue.offer(DEPTH_TOKEN);\n  visited.put(nodeID,VISITED_TOKEN);\n  int depth=0;\n  while (true) {\n    Integer id=queue.poll();\n    if (id == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.offer(DEPTH_TOKEN);\n      depth++;\n    }\n else {\n      List<Edge> edges=graph.get(id);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (visited.get(edge.to) != VISITED_TOKEN) {\n            visited.put(edge.to,VISITED_TOKEN);\n            queue.offer(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return depth;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 33
      },
      "nodeContext" : "queue.offer(DEPTH_TOKEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 41,
    "startColumnNumber" : 16,
    "endLineNumber" : 41,
    "endColumnNumber" : 27
  }, {
    "charLength" : 11,
    "startLineNumber" : 55,
    "startColumnNumber" : 16,
    "endLineNumber" : 55,
    "endColumnNumber" : 27
  }, {
    "charLength" : 11,
    "startLineNumber" : 61,
    "startColumnNumber" : 20,
    "endLineNumber" : 61,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}