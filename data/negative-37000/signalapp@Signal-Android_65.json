{
  "id" : 65,
  "expression" : "recipientId",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/jobs/PushTextSendJob.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "recipientId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 135,
      "startColumnNumber" : 53,
      "endLineNumber" : 135,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 85
      },
      "nodeContext" : "database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 86
      },
      "nodeContext" : "database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 132,
        "startColumnNumber" : 43,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (UntrustedIdentityException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3273,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n  RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n  Recipient recipient=record.getRecipient().resolve();\n  byte[] profileKey=recipient.getProfileKey();\n  UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n  boolean unidentified=deliver(record);\n  database.markAsSent(messageId,true);\n  database.markUnidentified(messageId,unidentified);\n  if (recipient.isSelf()) {\n    SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n    DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n    DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n  }\n  if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n  }\n else   if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n  }\n else   if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n  }\n  if (record.getExpiresIn() > 0) {\n    database.markExpireStarted(messageId);\n    expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n  }\n  log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n}\n catch (InsecureFallbackApprovalException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  database.markAsPendingInsecureSmsFallback(record.getId());\n  ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n  ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n}\ncatch (UntrustedIdentityException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\ncatch (ProofRequiredException e) {\n  handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 390,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3883,
        "startLineNumber" : 77,
        "startColumnNumber" : 122,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  SignalLocalMetrics.IndividualMessageSend.onJobStarted(messageId);\n  ExpiringMessageManager expirationManager=ApplicationDependencies.getExpiringMessageManager();\n  MessageDatabase database=DatabaseFactory.getSmsDatabase(context);\n  SmsMessageRecord record=database.getSmsMessage(messageId);\n  if (!record.isPending() && !record.isFailed()) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Message \" + messageId + \" was already sent. Ignoring.\");\n    return;\n  }\n  try {\n    log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n    RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n    Recipient recipient=record.getRecipient().resolve();\n    byte[] profileKey=recipient.getProfileKey();\n    UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n    boolean unidentified=deliver(record);\n    database.markAsSent(messageId,true);\n    database.markUnidentified(messageId,unidentified);\n    if (recipient.isSelf()) {\n      SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n    }\n    if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n    }\n else     if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n    }\n else     if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n    }\n    if (record.getExpiresIn() > 0) {\n      database.markExpireStarted(messageId);\n      expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n    }\n    log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n  }\n catch (  InsecureFallbackApprovalException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    database.markAsPendingInsecureSmsFallback(record.getId());\n    ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n    ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n  }\ncatch (  UntrustedIdentityException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n    database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n    database.markAsSentFailed(record.getId());\n    database.markAsPush(record.getId());\n    RetrieveProfileJob.enqueue(recipientId);\n  }\ncatch (  ProofRequiredException e) {\n    handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n  }\n  SignalLocalMetrics.IndividualMessageSend.onJobFinished(messageId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 457,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4015,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onPushSend() throws IOException, NoSuchMessageException, UndeliverableMessageException, RetryLaterException {\n  SignalLocalMetrics.IndividualMessageSend.onJobStarted(messageId);\n  ExpiringMessageManager expirationManager=ApplicationDependencies.getExpiringMessageManager();\n  MessageDatabase database=DatabaseFactory.getSmsDatabase(context);\n  SmsMessageRecord record=database.getSmsMessage(messageId);\n  if (!record.isPending() && !record.isFailed()) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Message \" + messageId + \" was already sent. Ignoring.\");\n    return;\n  }\n  try {\n    log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n    RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n    Recipient recipient=record.getRecipient().resolve();\n    byte[] profileKey=recipient.getProfileKey();\n    UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n    boolean unidentified=deliver(record);\n    database.markAsSent(messageId,true);\n    database.markUnidentified(messageId,unidentified);\n    if (recipient.isSelf()) {\n      SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n    }\n    if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n    }\n else     if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n    }\n else     if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n    }\n    if (record.getExpiresIn() > 0) {\n      database.markExpireStarted(messageId);\n      expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n    }\n    log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n  }\n catch (  InsecureFallbackApprovalException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    database.markAsPendingInsecureSmsFallback(record.getId());\n    ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n    ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n  }\ncatch (  UntrustedIdentityException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n    database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n    database.markAsSentFailed(record.getId());\n    database.markAsPush(record.getId());\n    RetrieveProfileJob.enqueue(recipientId);\n  }\ncatch (  ProofRequiredException e) {\n    handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n  }\n  SignalLocalMetrics.IndividualMessageSend.onJobFinished(messageId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 86
      },
      "nodeContext" : "database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.RecipientId"
  }, {
    "nodeContext" : "recipientId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 138,
      "startColumnNumber" : 33,
      "endLineNumber" : 138,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 45
      },
      "nodeContext" : "RetrieveProfileJob.enqueue(recipientId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 46
      },
      "nodeContext" : "RetrieveProfileJob.enqueue(recipientId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 132,
        "startColumnNumber" : 43,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (UntrustedIdentityException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3273,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n  RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n  Recipient recipient=record.getRecipient().resolve();\n  byte[] profileKey=recipient.getProfileKey();\n  UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n  boolean unidentified=deliver(record);\n  database.markAsSent(messageId,true);\n  database.markUnidentified(messageId,unidentified);\n  if (recipient.isSelf()) {\n    SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n    DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n    DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n  }\n  if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n  }\n else   if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n  }\n else   if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n    log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n    DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n  }\n  if (record.getExpiresIn() > 0) {\n    database.markExpireStarted(messageId);\n    expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n  }\n  log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n}\n catch (InsecureFallbackApprovalException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  database.markAsPendingInsecureSmsFallback(record.getId());\n  ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n  ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n}\ncatch (UntrustedIdentityException e) {\n  warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n  RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n  database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n  database.markAsSentFailed(record.getId());\n  database.markAsPush(record.getId());\n  RetrieveProfileJob.enqueue(recipientId);\n}\ncatch (ProofRequiredException e) {\n  handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 390,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3883,
        "startLineNumber" : 77,
        "startColumnNumber" : 122,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  SignalLocalMetrics.IndividualMessageSend.onJobStarted(messageId);\n  ExpiringMessageManager expirationManager=ApplicationDependencies.getExpiringMessageManager();\n  MessageDatabase database=DatabaseFactory.getSmsDatabase(context);\n  SmsMessageRecord record=database.getSmsMessage(messageId);\n  if (!record.isPending() && !record.isFailed()) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Message \" + messageId + \" was already sent. Ignoring.\");\n    return;\n  }\n  try {\n    log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n    RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n    Recipient recipient=record.getRecipient().resolve();\n    byte[] profileKey=recipient.getProfileKey();\n    UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n    boolean unidentified=deliver(record);\n    database.markAsSent(messageId,true);\n    database.markUnidentified(messageId,unidentified);\n    if (recipient.isSelf()) {\n      SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n    }\n    if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n    }\n else     if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n    }\n else     if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n    }\n    if (record.getExpiresIn() > 0) {\n      database.markExpireStarted(messageId);\n      expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n    }\n    log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n  }\n catch (  InsecureFallbackApprovalException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    database.markAsPendingInsecureSmsFallback(record.getId());\n    ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n    ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n  }\ncatch (  UntrustedIdentityException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n    database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n    database.markAsSentFailed(record.getId());\n    database.markAsPush(record.getId());\n    RetrieveProfileJob.enqueue(recipientId);\n  }\ncatch (  ProofRequiredException e) {\n    handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n  }\n  SignalLocalMetrics.IndividualMessageSend.onJobFinished(messageId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 457,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4015,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onPushSend() throws IOException, NoSuchMessageException, UndeliverableMessageException, RetryLaterException {\n  SignalLocalMetrics.IndividualMessageSend.onJobStarted(messageId);\n  ExpiringMessageManager expirationManager=ApplicationDependencies.getExpiringMessageManager();\n  MessageDatabase database=DatabaseFactory.getSmsDatabase(context);\n  SmsMessageRecord record=database.getSmsMessage(messageId);\n  if (!record.isPending() && !record.isFailed()) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Message \" + messageId + \" was already sent. Ignoring.\");\n    return;\n  }\n  try {\n    log(TAG,String.valueOf(record.getDateSent()),\"Sending message: \" + messageId + \",  Recipient: \"+ record.getRecipient().getId()+ \", Thread: \"+ record.getThreadId());\n    RecipientUtil.shareProfileIfFirstSecureMessage(context,record.getRecipient());\n    Recipient recipient=record.getRecipient().resolve();\n    byte[] profileKey=recipient.getProfileKey();\n    UnidentifiedAccessMode accessMode=recipient.getUnidentifiedAccessMode();\n    boolean unidentified=deliver(record);\n    database.markAsSent(messageId,true);\n    database.markUnidentified(messageId,unidentified);\n    if (recipient.isSelf()) {\n      SyncMessageId id=new SyncMessageId(recipient.getId(),record.getDateSent());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementDeliveryReceiptCount(id,System.currentTimeMillis());\n      DatabaseFactory.getMmsSmsDatabase(context).incrementReadReceiptCount(id,System.currentTimeMillis());\n    }\n    if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN && profileKey == null) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-unrestricted following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.UNRESTRICTED);\n    }\n else     if (unidentified && accessMode == UnidentifiedAccessMode.UNKNOWN) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-enabled following a UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.ENABLED);\n    }\n else     if (!unidentified && accessMode != UnidentifiedAccessMode.DISABLED) {\n      log(TAG,String.valueOf(record.getDateSent()),\"Marking recipient as UD-disabled following a non-UD send.\");\n      DatabaseFactory.getRecipientDatabase(context).setUnidentifiedAccessMode(recipient.getId(),UnidentifiedAccessMode.DISABLED);\n    }\n    if (record.getExpiresIn() > 0) {\n      database.markExpireStarted(messageId);\n      expirationManager.scheduleDeletion(record.getId(),record.isMms(),record.getExpiresIn());\n    }\n    log(TAG,String.valueOf(record.getDateSent()),\"Sent message: \" + messageId);\n  }\n catch (  InsecureFallbackApprovalException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    database.markAsPendingInsecureSmsFallback(record.getId());\n    ApplicationDependencies.getMessageNotifier().notifyMessageDeliveryFailed(context,record.getRecipient(),record.getThreadId());\n    ApplicationDependencies.getJobManager().add(new DirectoryRefreshJob(false));\n  }\ncatch (  UntrustedIdentityException e) {\n    warn(TAG,String.valueOf(record.getDateSent()),\"Failure\",e);\n    RecipientId recipientId=Recipient.external(context,e.getIdentifier()).getId();\n    database.addMismatchedIdentity(record.getId(),recipientId,e.getIdentityKey());\n    database.markAsSentFailed(record.getId());\n    database.markAsPush(record.getId());\n    RetrieveProfileJob.enqueue(recipientId);\n  }\ncatch (  ProofRequiredException e) {\n    handleProofRequiredException(e,record.getRecipient(),record.getThreadId(),messageId,false);\n  }\n  SignalLocalMetrics.IndividualMessageSend.onJobFinished(messageId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 46
      },
      "nodeContext" : "RetrieveProfileJob.enqueue(recipientId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.RecipientId"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 135,
    "startColumnNumber" : 53,
    "endLineNumber" : 135,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 138,
    "startColumnNumber" : 33,
    "endLineNumber" : 138,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}