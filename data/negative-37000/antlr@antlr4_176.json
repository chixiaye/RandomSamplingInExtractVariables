{
  "id" : 176,
  "expression" : "Token.EOF",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/api/TestTokenStream.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Token.EOF",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 31,
      "startColumnNumber" : 22,
      "endLineNumber" : 31,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(1).getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 25,
        "startColumnNumber" : 53,
        "endLineNumber" : 40,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CharStream firstInput=new ANTLRInputStream(\"A\");\n  BufferedTokenStream tokenStream=new BufferedTokenStream(new VisitorBasicLexer(firstInput));\n  tokenStream.fill();\n  Assert.assertEquals(2,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n  CharStream secondInput=new ANTLRInputStream(\"AA\");\n  tokenStream.setTokenSource(new VisitorBasicLexer(secondInput));\n  tokenStream.fill();\n  Assert.assertEquals(3,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(1).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 40,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This is a targeted regression test for antlr/antlr4#1584 ( {@link BufferedTokenStream} cannot be reused after EOF).\n */\n@Test public void testBufferedTokenStreamReuseAfterFill(){\n  CharStream firstInput=new ANTLRInputStream(\"A\");\n  BufferedTokenStream tokenStream=new BufferedTokenStream(new VisitorBasicLexer(firstInput));\n  tokenStream.fill();\n  Assert.assertEquals(2,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n  CharStream secondInput=new ANTLRInputStream(\"AA\");\n  tokenStream.setTokenSource(new VisitorBasicLexer(secondInput));\n  tokenStream.fill();\n  Assert.assertEquals(3,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(1).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "Token.EOF",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 39,
      "startColumnNumber" : 22,
      "endLineNumber" : 39,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(2).getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 25,
        "startColumnNumber" : 53,
        "endLineNumber" : 40,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CharStream firstInput=new ANTLRInputStream(\"A\");\n  BufferedTokenStream tokenStream=new BufferedTokenStream(new VisitorBasicLexer(firstInput));\n  tokenStream.fill();\n  Assert.assertEquals(2,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n  CharStream secondInput=new ANTLRInputStream(\"AA\");\n  tokenStream.setTokenSource(new VisitorBasicLexer(secondInput));\n  tokenStream.fill();\n  Assert.assertEquals(3,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(1).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 40,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This is a targeted regression test for antlr/antlr4#1584 ( {@link BufferedTokenStream} cannot be reused after EOF).\n */\n@Test public void testBufferedTokenStreamReuseAfterFill(){\n  CharStream firstInput=new ANTLRInputStream(\"A\");\n  BufferedTokenStream tokenStream=new BufferedTokenStream(new VisitorBasicLexer(firstInput));\n  tokenStream.fill();\n  Assert.assertEquals(2,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(1).getType());\n  CharStream secondInput=new ANTLRInputStream(\"AA\");\n  tokenStream.setTokenSource(new VisitorBasicLexer(secondInput));\n  tokenStream.fill();\n  Assert.assertEquals(3,tokenStream.size());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(0).getType());\n  Assert.assertEquals(VisitorBasicLexer.A,tokenStream.get(1).getType());\n  Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(Token.EOF,tokenStream.get(2).getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 31,
    "startColumnNumber" : 22,
    "endLineNumber" : 31,
    "endColumnNumber" : 31
  }, {
    "charLength" : 9,
    "startLineNumber" : 39,
    "startColumnNumber" : 22,
    "endLineNumber" : 39,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}