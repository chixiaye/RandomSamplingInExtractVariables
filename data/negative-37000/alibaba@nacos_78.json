{
  "id" : 78,
  "expression" : "service",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/test/java/com/alibaba/nacos/naming/controllers/InstanceControllerTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 78,
      "startColumnNumber" : 8,
      "endLineNumber" : 78,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "service.setName(TEST_SERVICE_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "service.setName(TEST_SERVICE_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void registerInstance() throws Exception {\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "service.setName(TEST_SERVICE_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.naming.core.Service"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 76,
      "endLineNumber" : 80,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 80,
        "startColumnNumber" : 26,
        "endLineNumber" : 80,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 80,
        "endColumnNumber" : 84
      },
      "nodeContext" : "cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void registerInstance() throws Exception {\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.naming.core.Service"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 81,
      "startColumnNumber" : 8,
      "endLineNumber" : 81,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 35
      },
      "nodeContext" : "service.addCluster(cluster)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 36
      },
      "nodeContext" : "service.addCluster(cluster);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void registerInstance() throws Exception {\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 36
      },
      "nodeContext" : "service.addCluster(cluster);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.naming.core.Service"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 88,
      "startColumnNumber" : 8,
      "endLineNumber" : 88,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 40
      },
      "nodeContext" : "service.updateIPs(ipList,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 41
      },
      "nodeContext" : "service.updateIPs(ipList,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void registerInstance() throws Exception {\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 41
      },
      "nodeContext" : "service.updateIPs(ipList,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.naming.core.Service"
  }, {
    "nodeContext" : "service",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 90,
      "startColumnNumber" : 110,
      "endLineNumber" : 90,
      "endColumnNumber" : 117
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 118
      },
      "nodeContext" : "Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 119
      },
      "nodeContext" : "Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1079,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void registerInstance() throws Exception {\n  Service service=new Service();\n  service.setName(TEST_SERVICE_NAME);\n  Cluster cluster=new Cluster(UtilsAndCommons.DEFAULT_CLUSTER_NAME,service);\n  service.addCluster(cluster);\n  Instance instance=new Instance();\n  instance.setIp(\"1.1.1.1\");\n  instance.setPort(9999);\n  List<Instance> ipList=new ArrayList<>();\n  ipList.add(instance);\n  service.updateIPs(ipList,false);\n  Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.post(UtilsAndCommons.NACOS_NAMING_CONTEXT + \"/instance\").param(\"serviceName\",TEST_SERVICE_NAME).param(\"ip\",\"1.1.1.1\").param(\"port\",\"9999\");\n  String actualValue=mockmvc.perform(builder).andReturn().getResponse().getContentAsString();\n  Assert.assertEquals(\"ok\",actualValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 119
      },
      "nodeContext" : "Mockito.when(serviceManager.getService(Constants.DEFAULT_NAMESPACE_ID,TEST_SERVICE_NAME)).thenReturn(service);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.naming.core.Service"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 78,
    "startColumnNumber" : 8,
    "endLineNumber" : 78,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 76,
    "endLineNumber" : 80,
    "endColumnNumber" : 83
  }, {
    "charLength" : 7,
    "startLineNumber" : 81,
    "startColumnNumber" : 8,
    "endLineNumber" : 81,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 88,
    "startColumnNumber" : 8,
    "endLineNumber" : 88,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 90,
    "startColumnNumber" : 110,
    "endLineNumber" : 90,
    "endColumnNumber" : 117
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}