{
  "id" : 274,
  "expression" : "type",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraPageSink.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 32,
      "endLineNumber" : 132,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 132,
        "startColumnNumber" : 17,
        "endLineNumber" : 132,
        "endColumnNumber" : 37
      },
      "nodeContext" : "BOOLEAN.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 132,
        "startColumnNumber" : 17,
        "endLineNumber" : 132,
        "endColumnNumber" : 37
      },
      "nodeContext" : "BOOLEAN.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 133,
      "startColumnNumber" : 23,
      "endLineNumber" : 133,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 133,
        "startColumnNumber" : 23,
        "endLineNumber" : 133,
        "endColumnNumber" : 55
      },
      "nodeContext" : "type.getBoolean(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 56
      },
      "nodeContext" : "values.add(type.getBoolean(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 57
      },
      "nodeContext" : "values.add(type.getBoolean(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(type.getBoolean(block,position));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 57
      },
      "nodeContext" : "values.add(type.getBoolean(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 135,
      "startColumnNumber" : 31,
      "endLineNumber" : 135,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 135,
        "startColumnNumber" : 17,
        "endLineNumber" : 135,
        "endColumnNumber" : 36
      },
      "nodeContext" : "BIGINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 135,
        "startColumnNumber" : 17,
        "endLineNumber" : 135,
        "endColumnNumber" : 36
      },
      "nodeContext" : "BIGINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 136,
      "startColumnNumber" : 23,
      "endLineNumber" : 136,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 136,
        "startColumnNumber" : 23,
        "endLineNumber" : 136,
        "endColumnNumber" : 52
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 53
      },
      "nodeContext" : "values.add(type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 54
      },
      "nodeContext" : "values.add(type.getLong(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 135,
        "startColumnNumber" : 38,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(type.getLong(block,position));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 54
      },
      "nodeContext" : "values.add(type.getLong(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 138,
      "startColumnNumber" : 32,
      "endLineNumber" : 138,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 138,
        "startColumnNumber" : 17,
        "endLineNumber" : 138,
        "endColumnNumber" : 37
      },
      "nodeContext" : "INTEGER.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 138,
        "startColumnNumber" : 17,
        "endLineNumber" : 138,
        "endColumnNumber" : 37
      },
      "nodeContext" : "INTEGER.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 139,
      "startColumnNumber" : 34,
      "endLineNumber" : 139,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 139,
        "startColumnNumber" : 34,
        "endLineNumber" : 139,
        "endColumnNumber" : 63
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 139,
        "startColumnNumber" : 23,
        "endLineNumber" : 139,
        "endColumnNumber" : 64
      },
      "nodeContext" : "toIntExact(type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 65
      },
      "nodeContext" : "values.add(toIntExact(type.getLong(block,position)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 66
      },
      "nodeContext" : "values.add(toIntExact(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 138,
        "startColumnNumber" : 39,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(toIntExact(type.getLong(block,position)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 66
      },
      "nodeContext" : "values.add(toIntExact(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 141,
      "startColumnNumber" : 33,
      "endLineNumber" : 141,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 141,
        "startColumnNumber" : 17,
        "endLineNumber" : 141,
        "endColumnNumber" : 38
      },
      "nodeContext" : "SMALLINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 141,
        "startColumnNumber" : 17,
        "endLineNumber" : 141,
        "endColumnNumber" : 38
      },
      "nodeContext" : "SMALLINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 142,
      "startColumnNumber" : 35,
      "endLineNumber" : 142,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 142,
        "startColumnNumber" : 35,
        "endLineNumber" : 142,
        "endColumnNumber" : 64
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 142,
        "startColumnNumber" : 23,
        "endLineNumber" : 142,
        "endColumnNumber" : 65
      },
      "nodeContext" : "checkedCast(type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 66
      },
      "nodeContext" : "values.add(checkedCast(type.getLong(block,position)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 67
      },
      "nodeContext" : "values.add(checkedCast(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 141,
        "startColumnNumber" : 40,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(checkedCast(type.getLong(block,position)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 67
      },
      "nodeContext" : "values.add(checkedCast(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 144,
      "startColumnNumber" : 32,
      "endLineNumber" : 144,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 144,
        "startColumnNumber" : 17,
        "endLineNumber" : 144,
        "endColumnNumber" : 37
      },
      "nodeContext" : "TINYINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 144,
        "startColumnNumber" : 17,
        "endLineNumber" : 144,
        "endColumnNumber" : 37
      },
      "nodeContext" : "TINYINT.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 145,
      "startColumnNumber" : 30,
      "endLineNumber" : 145,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 145,
        "startColumnNumber" : 30,
        "endLineNumber" : 145,
        "endColumnNumber" : 59
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 145,
        "startColumnNumber" : 23,
        "endLineNumber" : 145,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(byte)type.getLong(block,position)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 145,
        "startColumnNumber" : 12,
        "endLineNumber" : 145,
        "endColumnNumber" : 60
      },
      "nodeContext" : "values.add((byte)type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 145,
        "startColumnNumber" : 12,
        "endLineNumber" : 145,
        "endColumnNumber" : 61
      },
      "nodeContext" : "values.add((byte)type.getLong(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 144,
        "startColumnNumber" : 39,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add((byte)type.getLong(block,position));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 145,
        "startColumnNumber" : 12,
        "endLineNumber" : 145,
        "endColumnNumber" : 61
      },
      "nodeContext" : "values.add((byte)type.getLong(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 147,
      "startColumnNumber" : 31,
      "endLineNumber" : 147,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 147,
        "startColumnNumber" : 17,
        "endLineNumber" : 147,
        "endColumnNumber" : 36
      },
      "nodeContext" : "DOUBLE.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 147,
        "startColumnNumber" : 17,
        "endLineNumber" : 147,
        "endColumnNumber" : 36
      },
      "nodeContext" : "DOUBLE.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 148,
      "startColumnNumber" : 23,
      "endLineNumber" : 148,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 148,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 54
      },
      "nodeContext" : "type.getDouble(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 55
      },
      "nodeContext" : "values.add(type.getDouble(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 56
      },
      "nodeContext" : "values.add(type.getDouble(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 147,
        "startColumnNumber" : 38,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(type.getDouble(block,position));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 56
      },
      "nodeContext" : "values.add(type.getDouble(block,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 150,
      "startColumnNumber" : 29,
      "endLineNumber" : 150,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 150,
        "startColumnNumber" : 17,
        "endLineNumber" : 150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "REAL.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 150,
        "startColumnNumber" : 17,
        "endLineNumber" : 150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "REAL.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 151,
      "startColumnNumber" : 49,
      "endLineNumber" : 151,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 151,
        "startColumnNumber" : 49,
        "endLineNumber" : 151,
        "endColumnNumber" : 78
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 151,
        "startColumnNumber" : 38,
        "endLineNumber" : 151,
        "endColumnNumber" : 79
      },
      "nodeContext" : "toIntExact(type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 151,
        "startColumnNumber" : 23,
        "endLineNumber" : 151,
        "endColumnNumber" : 80
      },
      "nodeContext" : "intBitsToFloat(toIntExact(type.getLong(block,position)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 81
      },
      "nodeContext" : "values.add(intBitsToFloat(toIntExact(type.getLong(block,position))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 82
      },
      "nodeContext" : "values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 150,
        "startColumnNumber" : 36,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 82
      },
      "nodeContext" : "values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 153,
      "startColumnNumber" : 29,
      "endLineNumber" : 153,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 153,
        "startColumnNumber" : 17,
        "endLineNumber" : 153,
        "endColumnNumber" : 34
      },
      "nodeContext" : "DATE.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 153,
        "startColumnNumber" : 17,
        "endLineNumber" : 153,
        "endColumnNumber" : 34
      },
      "nodeContext" : "DATE.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 154,
      "startColumnNumber" : 45,
      "endLineNumber" : 154,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 154,
        "startColumnNumber" : 45,
        "endLineNumber" : 154,
        "endColumnNumber" : 74
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 154,
        "startColumnNumber" : 23,
        "endLineNumber" : 154,
        "endColumnNumber" : 75
      },
      "nodeContext" : "toCassandraDate.apply(type.getLong(block,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 76
      },
      "nodeContext" : "values.add(toCassandraDate.apply(type.getLong(block,position)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 77
      },
      "nodeContext" : "values.add(toCassandraDate.apply(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 153,
        "startColumnNumber" : 36,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 77
      },
      "nodeContext" : "values.add(toCassandraDate.apply(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 156,
      "startColumnNumber" : 34,
      "endLineNumber" : 156,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 156,
        "startColumnNumber" : 17,
        "endLineNumber" : 156,
        "endColumnNumber" : 39
      },
      "nodeContext" : "TIMESTAMP.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 156,
        "startColumnNumber" : 17,
        "endLineNumber" : 156,
        "endColumnNumber" : 39
      },
      "nodeContext" : "TIMESTAMP.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 157,
      "startColumnNumber" : 37,
      "endLineNumber" : 157,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 157,
        "startColumnNumber" : 37,
        "endLineNumber" : 157,
        "endColumnNumber" : 66
      },
      "nodeContext" : "type.getLong(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 157,
        "startColumnNumber" : 23,
        "endLineNumber" : 157,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new Timestamp(type.getLong(block,position))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 68
      },
      "nodeContext" : "values.add(new Timestamp(type.getLong(block,position)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "values.add(new Timestamp(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 156,
        "startColumnNumber" : 41,
        "endLineNumber" : 158,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "values.add(new Timestamp(type.getLong(block,position)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 159,
      "startColumnNumber" : 31,
      "endLineNumber" : 159,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 159,
        "startColumnNumber" : 17,
        "endLineNumber" : 159,
        "endColumnNumber" : 36
      },
      "nodeContext" : "isVarcharType(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 159,
        "startColumnNumber" : 17,
        "endLineNumber" : 159,
        "endColumnNumber" : 36
      },
      "nodeContext" : "isVarcharType(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 160,
      "startColumnNumber" : 23,
      "endLineNumber" : 160,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 160,
        "startColumnNumber" : 23,
        "endLineNumber" : 160,
        "endColumnNumber" : 53
      },
      "nodeContext" : "type.getSlice(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 160,
        "startColumnNumber" : 23,
        "endLineNumber" : 160,
        "endColumnNumber" : 68
      },
      "nodeContext" : "type.getSlice(block,position).toStringUtf8()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 69
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toStringUtf8())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 70
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toStringUtf8());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 159,
        "startColumnNumber" : 38,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 70
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toStringUtf8());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 162,
      "startColumnNumber" : 34,
      "endLineNumber" : 162,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 162,
        "startColumnNumber" : 17,
        "endLineNumber" : 162,
        "endColumnNumber" : 39
      },
      "nodeContext" : "VARBINARY.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 162,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 162,
        "startColumnNumber" : 17,
        "endLineNumber" : 162,
        "endColumnNumber" : 39
      },
      "nodeContext" : "VARBINARY.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 163,
      "startColumnNumber" : 23,
      "endLineNumber" : 163,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 163,
        "startColumnNumber" : 23,
        "endLineNumber" : 163,
        "endColumnNumber" : 53
      },
      "nodeContext" : "type.getSlice(block,position)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 163,
        "startColumnNumber" : 23,
        "endLineNumber" : 163,
        "endColumnNumber" : 68
      },
      "nodeContext" : "type.getSlice(block,position).toByteBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 69
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toByteBuffer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 70
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toByteBuffer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 162,
        "startColumnNumber" : 41,
        "endLineNumber" : 164,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 162,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 70
      },
      "nodeContext" : "values.add(type.getSlice(block,position).toByteBuffer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 166,
      "startColumnNumber" : 83,
      "endLineNumber" : 166,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 166,
        "startColumnNumber" : 83,
        "endLineNumber" : 166,
        "endColumnNumber" : 104
      },
      "nodeContext" : "type.getDisplayName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 166,
        "startColumnNumber" : 53,
        "endLineNumber" : 166,
        "endColumnNumber" : 104
      },
      "nodeContext" : "\"Unsupported column type: \" + type.getDisplayName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 166,
        "startColumnNumber" : 18,
        "endLineNumber" : 166,
        "endColumnNumber" : 105
      },
      "nodeContext" : "new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 106
      },
      "nodeContext" : "throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 165,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 162,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 156,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 150,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 141,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 138,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 135,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (block.isNull(position)) {\n  values.add(null);\n}\n else if (BOOLEAN.equals(type)) {\n  values.add(type.getBoolean(block,position));\n}\n else if (BIGINT.equals(type)) {\n  values.add(type.getLong(block,position));\n}\n else if (INTEGER.equals(type)) {\n  values.add(toIntExact(type.getLong(block,position)));\n}\n else if (SMALLINT.equals(type)) {\n  values.add(checkedCast(type.getLong(block,position)));\n}\n else if (TINYINT.equals(type)) {\n  values.add((byte)type.getLong(block,position));\n}\n else if (DOUBLE.equals(type)) {\n  values.add(type.getDouble(block,position));\n}\n else if (REAL.equals(type)) {\n  values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n}\n else if (DATE.equals(type)) {\n  values.add(toCassandraDate.apply(type.getLong(block,position)));\n}\n else if (TIMESTAMP.equals(type)) {\n  values.add(new Timestamp(type.getLong(block,position)));\n}\n else if (isVarcharType(type)) {\n  values.add(type.getSlice(block,position).toStringUtf8());\n}\n else if (VARBINARY.equals(type)) {\n  values.add(type.getSlice(block,position).toByteBuffer());\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void appendColumn(List<Object> values,Page page,int position,int channel){\n  Block block=page.getBlock(channel);\n  Type type=columnTypes.get(channel);\n  if (block.isNull(position)) {\n    values.add(null);\n  }\n else   if (BOOLEAN.equals(type)) {\n    values.add(type.getBoolean(block,position));\n  }\n else   if (BIGINT.equals(type)) {\n    values.add(type.getLong(block,position));\n  }\n else   if (INTEGER.equals(type)) {\n    values.add(toIntExact(type.getLong(block,position)));\n  }\n else   if (SMALLINT.equals(type)) {\n    values.add(checkedCast(type.getLong(block,position)));\n  }\n else   if (TINYINT.equals(type)) {\n    values.add((byte)type.getLong(block,position));\n  }\n else   if (DOUBLE.equals(type)) {\n    values.add(type.getDouble(block,position));\n  }\n else   if (REAL.equals(type)) {\n    values.add(intBitsToFloat(toIntExact(type.getLong(block,position))));\n  }\n else   if (DATE.equals(type)) {\n    values.add(toCassandraDate.apply(type.getLong(block,position)));\n  }\n else   if (TIMESTAMP.equals(type)) {\n    values.add(new Timestamp(type.getLong(block,position)));\n  }\n else   if (isVarcharType(type)) {\n    values.add(type.getSlice(block,position).toStringUtf8());\n  }\n else   if (VARBINARY.equals(type)) {\n    values.add(type.getSlice(block,position).toByteBuffer());\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 106
      },
      "nodeContext" : "throw new PrestoException(NOT_SUPPORTED,\"Unsupported column type: \" + type.getDisplayName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.Type"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 32,
    "endLineNumber" : 132,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 133,
    "startColumnNumber" : 23,
    "endLineNumber" : 133,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 135,
    "startColumnNumber" : 31,
    "endLineNumber" : 135,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 136,
    "startColumnNumber" : 23,
    "endLineNumber" : 136,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 138,
    "startColumnNumber" : 32,
    "endLineNumber" : 138,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 139,
    "startColumnNumber" : 34,
    "endLineNumber" : 139,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 141,
    "startColumnNumber" : 33,
    "endLineNumber" : 141,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 142,
    "startColumnNumber" : 35,
    "endLineNumber" : 142,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 144,
    "startColumnNumber" : 32,
    "endLineNumber" : 144,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 145,
    "startColumnNumber" : 30,
    "endLineNumber" : 145,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 147,
    "startColumnNumber" : 31,
    "endLineNumber" : 147,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 148,
    "startColumnNumber" : 23,
    "endLineNumber" : 148,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 150,
    "startColumnNumber" : 29,
    "endLineNumber" : 150,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 151,
    "startColumnNumber" : 49,
    "endLineNumber" : 151,
    "endColumnNumber" : 53
  }, {
    "charLength" : 4,
    "startLineNumber" : 153,
    "startColumnNumber" : 29,
    "endLineNumber" : 153,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 154,
    "startColumnNumber" : 45,
    "endLineNumber" : 154,
    "endColumnNumber" : 49
  }, {
    "charLength" : 4,
    "startLineNumber" : 156,
    "startColumnNumber" : 34,
    "endLineNumber" : 156,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 157,
    "startColumnNumber" : 37,
    "endLineNumber" : 157,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 159,
    "startColumnNumber" : 31,
    "endLineNumber" : 159,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 160,
    "startColumnNumber" : 23,
    "endLineNumber" : 160,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 162,
    "startColumnNumber" : 34,
    "endLineNumber" : 162,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 163,
    "startColumnNumber" : 23,
    "endLineNumber" : 163,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 166,
    "startColumnNumber" : 83,
    "endLineNumber" : 166,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 5
  } ]
}