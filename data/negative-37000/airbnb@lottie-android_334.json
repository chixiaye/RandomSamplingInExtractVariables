{
  "id" : 334,
  "expression" : "i < shapeData.getCurves().size()",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < shapeData.getCurves().size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 17,
      "startColumnNumber" : 20,
      "endLineNumber" : 17,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < shapeData.getCurves().size(); i++) {\n  CubicCurveData curveData=shapeData.getCurves().get(i);\n  PointF cp1=curveData.getControlPoint1();\n  PointF cp2=curveData.getControlPoint2();\n  PointF vertex=curveData.getVertex();\n  if (cp1.equals(currentPoint) && cp2.equals(vertex)) {\n    outPath.lineTo(vertex.x,vertex.y);\n  }\n else {\n    outPath.cubicTo(cp1.x,cp1.y,cp2.x,cp2.y,vertex.x,vertex.y);\n  }\n  currentPoint.set(vertex.x,vertex.y);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 12,
        "startColumnNumber" : 65,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  outPath.reset();\n  PointF initialPoint=shapeData.getInitialPoint();\n  outPath.moveTo(initialPoint.x,initialPoint.y);\n  PointF currentPoint=new PointF(initialPoint.x,initialPoint.y);\n  for (int i=0; i < shapeData.getCurves().size(); i++) {\n    CubicCurveData curveData=shapeData.getCurves().get(i);\n    PointF cp1=curveData.getControlPoint1();\n    PointF cp2=curveData.getControlPoint2();\n    PointF vertex=curveData.getVertex();\n    if (cp1.equals(currentPoint) && cp2.equals(vertex)) {\n      outPath.lineTo(vertex.x,vertex.y);\n    }\n else {\n      outPath.cubicTo(cp1.x,cp1.y,cp2.x,cp2.y,vertex.x,vertex.y);\n    }\n    currentPoint.set(vertex.x,vertex.y);\n  }\n  if (shapeData.isClosed()) {\n    outPath.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1192,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void getPathFromData(ShapeData shapeData,Path outPath){\n  outPath.reset();\n  PointF initialPoint=shapeData.getInitialPoint();\n  outPath.moveTo(initialPoint.x,initialPoint.y);\n  PointF currentPoint=new PointF(initialPoint.x,initialPoint.y);\n  for (int i=0; i < shapeData.getCurves().size(); i++) {\n    CubicCurveData curveData=shapeData.getCurves().get(i);\n    PointF cp1=curveData.getControlPoint1();\n    PointF cp2=curveData.getControlPoint2();\n    PointF vertex=curveData.getVertex();\n    if (cp1.equals(currentPoint) && cp2.equals(vertex)) {\n      outPath.lineTo(vertex.x,vertex.y);\n    }\n else {\n      outPath.cubicTo(cp1.x,cp1.y,cp2.x,cp2.y,vertex.x,vertex.y);\n    }\n    currentPoint.set(vertex.x,vertex.y);\n  }\n  if (shapeData.isClosed()) {\n    outPath.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < shapeData.getCurves().size(); i++) {\n  CubicCurveData curveData=shapeData.getCurves().get(i);\n  PointF cp1=curveData.getControlPoint1();\n  PointF cp2=curveData.getControlPoint2();\n  PointF vertex=curveData.getVertex();\n  if (cp1.equals(currentPoint) && cp2.equals(vertex)) {\n    outPath.lineTo(vertex.x,vertex.y);\n  }\n else {\n    outPath.cubicTo(cp1.x,cp1.y,cp2.x,cp2.y,vertex.x,vertex.y);\n  }\n  currentPoint.set(vertex.x,vertex.y);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 8
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 17,
    "startColumnNumber" : 20,
    "endLineNumber" : 17,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}