{
  "id" : 247,
  "expression" : "MAX_INT_AS_BIG_DECIMAL",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/math/DoubleMathTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MAX_INT_AS_BIG_DECIMAL",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 88,
      "startColumnNumber" : 31,
      "endLineNumber" : 88,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 54
      },
      "nodeContext" : "expected.compareTo(MAX_INT_AS_BIG_DECIMAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 59
      },
      "nodeContext" : "expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 65
      },
      "nodeContext" : "expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 65
      },
      "nodeContext" : "isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 66
      },
      "nodeContext" : "boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 85,
        "startColumnNumber" : 56,
        "endLineNumber" : 97,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n  boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n  try {\n    assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n    assertTrue(isInBounds);\n  }\n catch (  ArithmeticException e) {\n    assertFalse(isInBounds);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 507,
        "startLineNumber" : 85,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n  BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n  boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n  try {\n    assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n    assertTrue(isInBounds);\n  }\n catch (  ArithmeticException e) {\n    assertFalse(isInBounds);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 84,
        "startColumnNumber" : 48,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n    BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n    boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n    try {\n      assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n      assertTrue(isInBounds);\n    }\n catch (    ArithmeticException e) {\n      assertFalse(isInBounds);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (double d : INTEGRAL_DOUBLE_CANDIDATES) {\n  for (  RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n    BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n    boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n    try {\n      assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n      assertTrue(isInBounds);\n    }\n catch (    ArithmeticException e) {\n      assertFalse(isInBounds);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 83,
        "startColumnNumber" : 45,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  double d : INTEGRAL_DOUBLE_CANDIDATES) {\n    for (    RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n      BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n      boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n      try {\n        assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n        assertTrue(isInBounds);\n      }\n catch (      ArithmeticException e) {\n        assertFalse(isInBounds);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 689,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@GwtIncompatible public void testRoundIntegralDoubleToInt(){\n  for (  double d : INTEGRAL_DOUBLE_CANDIDATES) {\n    for (    RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {\n      BigDecimal expected=new BigDecimal(d).setScale(0,mode);\n      boolean isInBounds=expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0 & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;\n      try {\n        assertEquals(expected.intValue(),DoubleMath.roundToInt(d,mode));\n        assertTrue(isInBounds);\n      }\n catch (      ArithmeticException e) {\n        assertFalse(isInBounds);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 77,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 59
      },
      "nodeContext" : "expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 5,
    "type" : "java.math.BigDecimal"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 88,
    "startColumnNumber" : 31,
    "endLineNumber" : 88,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}