{
  "id" : 367,
  "expression" : "9",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterativeTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "9",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 41,
      "startColumnNumber" : 22,
      "endLineNumber" : 41,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,7,9)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,9);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 27,
        "startColumnNumber" : 29,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyList solver=new BridgesAdjacencyList(graph,n);\n  List<Pair<Integer,Integer>> sortedBridges=getSortedBridges(solver.findBridges());\n  List<Pair<Integer,Integer>> expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9));\n  assertThat(sortedBridges).containsExactlyElementsIn(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyList solver=new BridgesAdjacencyList(graph,n);\n  List<Pair<Integer,Integer>> sortedBridges=getSortedBridges(solver.findBridges());\n  List<Pair<Integer,Integer>> expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9));\n  assertThat(sortedBridges).containsExactlyElementsIn(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,9);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "9",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 58,
      "startColumnNumber" : 23,
      "endLineNumber" : 58,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Pair.of(7,9)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 46,
        "startColumnNumber" : 33,
        "endLineNumber" : 58,
        "endColumnNumber" : 26
      },
      "nodeContext" : "expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 60,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 27
      },
      "nodeContext" : "List<Pair<Integer,Integer>> expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 71,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 27,
        "startColumnNumber" : 29,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyList solver=new BridgesAdjacencyList(graph,n);\n  List<Pair<Integer,Integer>> sortedBridges=getSortedBridges(solver.findBridges());\n  List<Pair<Integer,Integer>> expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9));\n  assertThat(sortedBridges).containsExactlyElementsIn(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyList solver=new BridgesAdjacencyList(graph,n);\n  List<Pair<Integer,Integer>> sortedBridges=getSortedBridges(solver.findBridges());\n  List<Pair<Integer,Integer>> expected=ImmutableList.of(Pair.of(0,1),Pair.of(0,2),Pair.of(2,5),Pair.of(5,6),Pair.of(5,11),Pair.of(4,5),Pair.of(4,10),Pair.of(3,4),Pair.of(3,7),Pair.of(7,8),Pair.of(7,9));\n  assertThat(sortedBridges).containsExactlyElementsIn(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Pair.of(7,9)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 41,
    "startColumnNumber" : 22,
    "endLineNumber" : 41,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 58,
    "startColumnNumber" : 23,
    "endLineNumber" : 58,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}