{
  "id" : 332,
  "expression" : "fatal != null",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fatal != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 396,
      "startColumnNumber" : 16,
      "endLineNumber" : 396,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 396,
        "startColumnNumber" : 12,
        "endLineNumber" : 398,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fatal != null) {\n  throw fatal;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1794,
        "startLineNumber" : 362,
        "startColumnNumber" : 35,
        "endLineNumber" : 399,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final AtomicReference<Exception> error=new AtomicReference<>();\n  startStreams(new StateRestoreListener(){\n    @Override public void onRestoreStart(    final TopicPartition topicPartition,    final String storeName,    final long startingOffset,    final long endingOffset){\n      try {\n        produceAbortedMessages();\n      }\n catch (      final Exception fatal) {\n        error.set(fatal);\n      }\n    }\n    @Override public void onBatchRestored(    final TopicPartition topicPartition,    final String storeName,    final long batchEndOffset,    final long numRestored){\n    }\n    @Override public void onRestoreEnd(    final TopicPartition topicPartition,    final String storeName,    final long totalRestored){\n    }\n  }\n);\n  final Exception fatal=error.get();\n  if (fatal != null) {\n    throw fatal;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 362,
        "startColumnNumber" : 8,
        "endLineNumber" : 401,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (appendAbortedMessages) {\n  final AtomicReference<Exception> error=new AtomicReference<>();\n  startStreams(new StateRestoreListener(){\n    @Override public void onRestoreStart(    final TopicPartition topicPartition,    final String storeName,    final long startingOffset,    final long endingOffset){\n      try {\n        produceAbortedMessages();\n      }\n catch (      final Exception fatal) {\n        error.set(fatal);\n      }\n    }\n    @Override public void onBatchRestored(    final TopicPartition topicPartition,    final String storeName,    final long batchEndOffset,    final long numRestored){\n    }\n    @Override public void onRestoreEnd(    final TopicPartition topicPartition,    final String storeName,    final long totalRestored){\n    }\n  }\n);\n  final Exception fatal=error.get();\n  if (fatal != null) {\n    throw fatal;\n  }\n}\n else {\n  startStreams();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3922,
        "startLineNumber" : 343,
        "startColumnNumber" : 122,
        "endLineNumber" : 429,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  produceInitialGlobalTableValues();\n  final String stateDir=streamsConfiguration.getProperty(StreamsConfig.STATE_DIR_CONFIG);\n  final File globalStateDir=new File(stateDir + File.separator + streamsConfiguration.getProperty(StreamsConfig.APPLICATION_ID_CONFIG)+ File.separator+ \"global\");\n  assertTrue(globalStateDir.mkdirs());\n  final OffsetCheckpoint checkpoint=new OffsetCheckpoint(new File(globalStateDir,\".checkpoint\"));\n  checkpoint.write(Collections.singletonMap(new TopicPartition(globalTableTopic,1),1L));\n  if (appendAbortedMessages) {\n    final AtomicReference<Exception> error=new AtomicReference<>();\n    startStreams(new StateRestoreListener(){\n      @Override public void onRestoreStart(      final TopicPartition topicPartition,      final String storeName,      final long startingOffset,      final long endingOffset){\n        try {\n          produceAbortedMessages();\n        }\n catch (        final Exception fatal) {\n          error.set(fatal);\n        }\n      }\n      @Override public void onBatchRestored(      final TopicPartition topicPartition,      final String storeName,      final long batchEndOffset,      final long numRestored){\n      }\n      @Override public void onRestoreEnd(      final TopicPartition topicPartition,      final String storeName,      final long totalRestored){\n      }\n    }\n);\n    final Exception fatal=error.get();\n    if (fatal != null) {\n      throw fatal;\n    }\n  }\n else {\n    startStreams();\n  }\n  final Map<Long,String> expected=new HashMap<>();\n  expected.put(1L,\"A\");\n  expected.put(2L,\"B\");\n  expected.put(4L,\"D\");\n  final ReadOnlyKeyValueStore<Long,String> store=IntegrationTestUtils.getStore(globalStore,kafkaStreams,QueryableStoreTypes.keyValueStore());\n  assertNotNull(store);\n  final Map<Long,String> storeContent=new HashMap<>();\n  TestUtils.waitForCondition(() -> {\n    storeContent.clear();\n    final Iterator<KeyValue<Long,String>> it=store.all();\n    while (it.hasNext()) {\n      final KeyValue<Long,String> kv=it.next();\n      storeContent.put(kv.key,kv.value);\n    }\n    return storeContent.equals(expected);\n  }\n,30_000L,() -> \"waiting for initial values\" + \"\\n  expected: \" + expected + \"\\n  received: \"+ storeContent);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4040,
        "startLineNumber" : 343,
        "startColumnNumber" : 4,
        "endLineNumber" : 429,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void shouldSkipOverTxMarkersAndAbortedMessagesOnRestore(final boolean appendAbortedMessages) throws Exception {\n  produceInitialGlobalTableValues();\n  final String stateDir=streamsConfiguration.getProperty(StreamsConfig.STATE_DIR_CONFIG);\n  final File globalStateDir=new File(stateDir + File.separator + streamsConfiguration.getProperty(StreamsConfig.APPLICATION_ID_CONFIG)+ File.separator+ \"global\");\n  assertTrue(globalStateDir.mkdirs());\n  final OffsetCheckpoint checkpoint=new OffsetCheckpoint(new File(globalStateDir,\".checkpoint\"));\n  checkpoint.write(Collections.singletonMap(new TopicPartition(globalTableTopic,1),1L));\n  if (appendAbortedMessages) {\n    final AtomicReference<Exception> error=new AtomicReference<>();\n    startStreams(new StateRestoreListener(){\n      @Override public void onRestoreStart(      final TopicPartition topicPartition,      final String storeName,      final long startingOffset,      final long endingOffset){\n        try {\n          produceAbortedMessages();\n        }\n catch (        final Exception fatal) {\n          error.set(fatal);\n        }\n      }\n      @Override public void onBatchRestored(      final TopicPartition topicPartition,      final String storeName,      final long batchEndOffset,      final long numRestored){\n      }\n      @Override public void onRestoreEnd(      final TopicPartition topicPartition,      final String storeName,      final long totalRestored){\n      }\n    }\n);\n    final Exception fatal=error.get();\n    if (fatal != null) {\n      throw fatal;\n    }\n  }\n else {\n    startStreams();\n  }\n  final Map<Long,String> expected=new HashMap<>();\n  expected.put(1L,\"A\");\n  expected.put(2L,\"B\");\n  expected.put(4L,\"D\");\n  final ReadOnlyKeyValueStore<Long,String> store=IntegrationTestUtils.getStore(globalStore,kafkaStreams,QueryableStoreTypes.keyValueStore());\n  assertNotNull(store);\n  final Map<Long,String> storeContent=new HashMap<>();\n  TestUtils.waitForCondition(() -> {\n    storeContent.clear();\n    final Iterator<KeyValue<Long,String>> it=store.all();\n    while (it.hasNext()) {\n      final KeyValue<Long,String> kv=it.next();\n      storeContent.put(kv.key,kv.value);\n    }\n    return storeContent.equals(expected);\n  }\n,30_000L,() -> \"waiting for initial values\" + \"\\n  expected: \" + expected + \"\\n  received: \"+ storeContent);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 396,
        "startColumnNumber" : 12,
        "endLineNumber" : 398,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fatal != null) {\n  throw fatal;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 396,
    "startColumnNumber" : 16,
    "endLineNumber" : 396,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}