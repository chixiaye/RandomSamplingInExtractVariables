{
  "id" : 491,
  "expression" : "adapterConfig.getAuthServerUrl() == null",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/KeycloakDeploymentBuilder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "adapterConfig.getAuthServerUrl() == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 132,
      "startColumnNumber" : 67,
      "endLineNumber" : 132,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 107
      },
      "nodeContext" : "realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null) {\n  throw new IllegalArgumentException(\"For bearer auth, you must set the realm-public-key or auth-server-url\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5401,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (adapterConfig.getRealm() == null)   throw new RuntimeException(\"Must set 'realm' in config\");\n  deployment.setRealm(adapterConfig.getRealm());\n  String resource=adapterConfig.getResource();\n  if (resource == null)   throw new RuntimeException(\"Must set 'resource' in config\");\n  deployment.setResourceName(resource);\n  String realmKeyPem=adapterConfig.getRealmKey();\n  if (realmKeyPem != null) {\n    PublicKey realmKey;\n    try {\n      realmKey=PemUtils.decodePublicKey(realmKeyPem);\n      HardcodedPublicKeyLocator pkLocator=new HardcodedPublicKeyLocator(realmKey);\n      deployment.setPublicKeyLocator(pkLocator);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    JWKPublicKeyLocator pkLocator=new JWKPublicKeyLocator();\n    deployment.setPublicKeyLocator(pkLocator);\n  }\n  if (adapterConfig.getSslRequired() != null) {\n    deployment.setSslRequired(SslRequired.valueOf(adapterConfig.getSslRequired().toUpperCase()));\n  }\n else {\n    deployment.setSslRequired(SslRequired.EXTERNAL);\n  }\n  if (adapterConfig.getConfidentialPort() != -1) {\n    deployment.setConfidentialPort(adapterConfig.getConfidentialPort());\n  }\n  if (adapterConfig.getTokenStore() != null) {\n    deployment.setTokenStore(TokenStore.valueOf(adapterConfig.getTokenStore().toUpperCase()));\n  }\n else {\n    deployment.setTokenStore(TokenStore.SESSION);\n  }\n  if (adapterConfig.getTokenCookiePath() != null) {\n    deployment.setAdapterStateCookiePath(adapterConfig.getTokenCookiePath());\n  }\n  if (adapterConfig.getPrincipalAttribute() != null)   deployment.setPrincipalAttribute(adapterConfig.getPrincipalAttribute());\n  deployment.setResourceCredentials(adapterConfig.getCredentials());\n  deployment.setClientAuthenticator(ClientCredentialsProviderUtils.bootstrapClientAuthenticator(deployment));\n  deployment.setPublicClient(adapterConfig.isPublicClient());\n  deployment.setUseResourceRoleMappings(adapterConfig.isUseResourceRoleMappings());\n  deployment.setExposeToken(adapterConfig.isExposeToken());\n  if (adapterConfig.isCors()) {\n    deployment.setCors(true);\n    deployment.setCorsMaxAge(adapterConfig.getCorsMaxAge());\n    deployment.setCorsAllowedHeaders(adapterConfig.getCorsAllowedHeaders());\n    deployment.setCorsAllowedMethods(adapterConfig.getCorsAllowedMethods());\n    deployment.setCorsExposedHeaders(adapterConfig.getCorsExposedHeaders());\n  }\n  if (adapterConfig.isPkce()) {\n    deployment.setPkce(true);\n  }\n  deployment.setBearerOnly(adapterConfig.isBearerOnly());\n  deployment.setAutodetectBearerOnly(adapterConfig.isAutodetectBearerOnly());\n  deployment.setEnableBasicAuth(adapterConfig.isEnableBasicAuth());\n  deployment.setAlwaysRefreshToken(adapterConfig.isAlwaysRefreshToken());\n  deployment.setRegisterNodeAtStartup(adapterConfig.isRegisterNodeAtStartup());\n  deployment.setRegisterNodePeriod(adapterConfig.getRegisterNodePeriod());\n  deployment.setTokenMinimumTimeToLive(adapterConfig.getTokenMinimumTimeToLive());\n  deployment.setMinTimeBetweenJwksRequests(adapterConfig.getMinTimeBetweenJwksRequests());\n  deployment.setPublicKeyCacheTtl(adapterConfig.getPublicKeyCacheTtl());\n  deployment.setIgnoreOAuthQueryParameter(adapterConfig.isIgnoreOAuthQueryParameter());\n  deployment.setRewriteRedirectRules(adapterConfig.getRedirectRewriteRules());\n  deployment.setVerifyTokenAudience(adapterConfig.isVerifyTokenAudience());\n  if (realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null) {\n    throw new IllegalArgumentException(\"For bearer auth, you must set the realm-public-key or auth-server-url\");\n  }\n  if (adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)) {\n    throw new RuntimeException(\"You must specify auth-server-url\");\n  }\n  deployment.setClient(createHttpClientProducer(adapterConfig));\n  deployment.setAuthServerBaseUrl(adapterConfig);\n  if (adapterConfig.getTurnOffChangeSessionIdOnLogin() != null) {\n    deployment.setTurnOffChangeSessionIdOnLogin(adapterConfig.getTurnOffChangeSessionIdOnLogin());\n  }\n  final PolicyEnforcerConfig policyEnforcerConfig=adapterConfig.getPolicyEnforcerConfig();\n  if (policyEnforcerConfig != null) {\n    deployment.setPolicyEnforcer(new Callable<PolicyEnforcer>(){\n      PolicyEnforcer policyEnforcer;\n      @Override public PolicyEnforcer call(){\n        if (policyEnforcer == null) {\nsynchronized (deployment) {\n            if (policyEnforcer == null) {\n              policyEnforcer=new PolicyEnforcer(deployment,adapterConfig);\n            }\n          }\n        }\n        return policyEnforcer;\n      }\n    }\n);\n  }\n  return deployment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5479,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected KeycloakDeployment internalBuild(final AdapterConfig adapterConfig){\n  if (adapterConfig.getRealm() == null)   throw new RuntimeException(\"Must set 'realm' in config\");\n  deployment.setRealm(adapterConfig.getRealm());\n  String resource=adapterConfig.getResource();\n  if (resource == null)   throw new RuntimeException(\"Must set 'resource' in config\");\n  deployment.setResourceName(resource);\n  String realmKeyPem=adapterConfig.getRealmKey();\n  if (realmKeyPem != null) {\n    PublicKey realmKey;\n    try {\n      realmKey=PemUtils.decodePublicKey(realmKeyPem);\n      HardcodedPublicKeyLocator pkLocator=new HardcodedPublicKeyLocator(realmKey);\n      deployment.setPublicKeyLocator(pkLocator);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    JWKPublicKeyLocator pkLocator=new JWKPublicKeyLocator();\n    deployment.setPublicKeyLocator(pkLocator);\n  }\n  if (adapterConfig.getSslRequired() != null) {\n    deployment.setSslRequired(SslRequired.valueOf(adapterConfig.getSslRequired().toUpperCase()));\n  }\n else {\n    deployment.setSslRequired(SslRequired.EXTERNAL);\n  }\n  if (adapterConfig.getConfidentialPort() != -1) {\n    deployment.setConfidentialPort(adapterConfig.getConfidentialPort());\n  }\n  if (adapterConfig.getTokenStore() != null) {\n    deployment.setTokenStore(TokenStore.valueOf(adapterConfig.getTokenStore().toUpperCase()));\n  }\n else {\n    deployment.setTokenStore(TokenStore.SESSION);\n  }\n  if (adapterConfig.getTokenCookiePath() != null) {\n    deployment.setAdapterStateCookiePath(adapterConfig.getTokenCookiePath());\n  }\n  if (adapterConfig.getPrincipalAttribute() != null)   deployment.setPrincipalAttribute(adapterConfig.getPrincipalAttribute());\n  deployment.setResourceCredentials(adapterConfig.getCredentials());\n  deployment.setClientAuthenticator(ClientCredentialsProviderUtils.bootstrapClientAuthenticator(deployment));\n  deployment.setPublicClient(adapterConfig.isPublicClient());\n  deployment.setUseResourceRoleMappings(adapterConfig.isUseResourceRoleMappings());\n  deployment.setExposeToken(adapterConfig.isExposeToken());\n  if (adapterConfig.isCors()) {\n    deployment.setCors(true);\n    deployment.setCorsMaxAge(adapterConfig.getCorsMaxAge());\n    deployment.setCorsAllowedHeaders(adapterConfig.getCorsAllowedHeaders());\n    deployment.setCorsAllowedMethods(adapterConfig.getCorsAllowedMethods());\n    deployment.setCorsExposedHeaders(adapterConfig.getCorsExposedHeaders());\n  }\n  if (adapterConfig.isPkce()) {\n    deployment.setPkce(true);\n  }\n  deployment.setBearerOnly(adapterConfig.isBearerOnly());\n  deployment.setAutodetectBearerOnly(adapterConfig.isAutodetectBearerOnly());\n  deployment.setEnableBasicAuth(adapterConfig.isEnableBasicAuth());\n  deployment.setAlwaysRefreshToken(adapterConfig.isAlwaysRefreshToken());\n  deployment.setRegisterNodeAtStartup(adapterConfig.isRegisterNodeAtStartup());\n  deployment.setRegisterNodePeriod(adapterConfig.getRegisterNodePeriod());\n  deployment.setTokenMinimumTimeToLive(adapterConfig.getTokenMinimumTimeToLive());\n  deployment.setMinTimeBetweenJwksRequests(adapterConfig.getMinTimeBetweenJwksRequests());\n  deployment.setPublicKeyCacheTtl(adapterConfig.getPublicKeyCacheTtl());\n  deployment.setIgnoreOAuthQueryParameter(adapterConfig.isIgnoreOAuthQueryParameter());\n  deployment.setRewriteRedirectRules(adapterConfig.getRedirectRewriteRules());\n  deployment.setVerifyTokenAudience(adapterConfig.isVerifyTokenAudience());\n  if (realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null) {\n    throw new IllegalArgumentException(\"For bearer auth, you must set the realm-public-key or auth-server-url\");\n  }\n  if (adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)) {\n    throw new RuntimeException(\"You must specify auth-server-url\");\n  }\n  deployment.setClient(createHttpClientProducer(adapterConfig));\n  deployment.setAuthServerBaseUrl(adapterConfig);\n  if (adapterConfig.getTurnOffChangeSessionIdOnLogin() != null) {\n    deployment.setTurnOffChangeSessionIdOnLogin(adapterConfig.getTurnOffChangeSessionIdOnLogin());\n  }\n  final PolicyEnforcerConfig policyEnforcerConfig=adapterConfig.getPolicyEnforcerConfig();\n  if (policyEnforcerConfig != null) {\n    deployment.setPolicyEnforcer(new Callable<PolicyEnforcer>(){\n      PolicyEnforcer policyEnforcer;\n      @Override public PolicyEnforcer call(){\n        if (policyEnforcer == null) {\nsynchronized (deployment) {\n            if (policyEnforcer == null) {\n              policyEnforcer=new PolicyEnforcer(deployment,adapterConfig);\n            }\n          }\n        }\n        return policyEnforcer;\n      }\n    }\n);\n  }\n  return deployment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 107
      },
      "nodeContext" : "realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "adapterConfig.getAuthServerUrl() == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 135,
      "startColumnNumber" : 12,
      "endLineNumber" : 135,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 107
      },
      "nodeContext" : "adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)) {\n  throw new RuntimeException(\"You must specify auth-server-url\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5401,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (adapterConfig.getRealm() == null)   throw new RuntimeException(\"Must set 'realm' in config\");\n  deployment.setRealm(adapterConfig.getRealm());\n  String resource=adapterConfig.getResource();\n  if (resource == null)   throw new RuntimeException(\"Must set 'resource' in config\");\n  deployment.setResourceName(resource);\n  String realmKeyPem=adapterConfig.getRealmKey();\n  if (realmKeyPem != null) {\n    PublicKey realmKey;\n    try {\n      realmKey=PemUtils.decodePublicKey(realmKeyPem);\n      HardcodedPublicKeyLocator pkLocator=new HardcodedPublicKeyLocator(realmKey);\n      deployment.setPublicKeyLocator(pkLocator);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    JWKPublicKeyLocator pkLocator=new JWKPublicKeyLocator();\n    deployment.setPublicKeyLocator(pkLocator);\n  }\n  if (adapterConfig.getSslRequired() != null) {\n    deployment.setSslRequired(SslRequired.valueOf(adapterConfig.getSslRequired().toUpperCase()));\n  }\n else {\n    deployment.setSslRequired(SslRequired.EXTERNAL);\n  }\n  if (adapterConfig.getConfidentialPort() != -1) {\n    deployment.setConfidentialPort(adapterConfig.getConfidentialPort());\n  }\n  if (adapterConfig.getTokenStore() != null) {\n    deployment.setTokenStore(TokenStore.valueOf(adapterConfig.getTokenStore().toUpperCase()));\n  }\n else {\n    deployment.setTokenStore(TokenStore.SESSION);\n  }\n  if (adapterConfig.getTokenCookiePath() != null) {\n    deployment.setAdapterStateCookiePath(adapterConfig.getTokenCookiePath());\n  }\n  if (adapterConfig.getPrincipalAttribute() != null)   deployment.setPrincipalAttribute(adapterConfig.getPrincipalAttribute());\n  deployment.setResourceCredentials(adapterConfig.getCredentials());\n  deployment.setClientAuthenticator(ClientCredentialsProviderUtils.bootstrapClientAuthenticator(deployment));\n  deployment.setPublicClient(adapterConfig.isPublicClient());\n  deployment.setUseResourceRoleMappings(adapterConfig.isUseResourceRoleMappings());\n  deployment.setExposeToken(adapterConfig.isExposeToken());\n  if (adapterConfig.isCors()) {\n    deployment.setCors(true);\n    deployment.setCorsMaxAge(adapterConfig.getCorsMaxAge());\n    deployment.setCorsAllowedHeaders(adapterConfig.getCorsAllowedHeaders());\n    deployment.setCorsAllowedMethods(adapterConfig.getCorsAllowedMethods());\n    deployment.setCorsExposedHeaders(adapterConfig.getCorsExposedHeaders());\n  }\n  if (adapterConfig.isPkce()) {\n    deployment.setPkce(true);\n  }\n  deployment.setBearerOnly(adapterConfig.isBearerOnly());\n  deployment.setAutodetectBearerOnly(adapterConfig.isAutodetectBearerOnly());\n  deployment.setEnableBasicAuth(adapterConfig.isEnableBasicAuth());\n  deployment.setAlwaysRefreshToken(adapterConfig.isAlwaysRefreshToken());\n  deployment.setRegisterNodeAtStartup(adapterConfig.isRegisterNodeAtStartup());\n  deployment.setRegisterNodePeriod(adapterConfig.getRegisterNodePeriod());\n  deployment.setTokenMinimumTimeToLive(adapterConfig.getTokenMinimumTimeToLive());\n  deployment.setMinTimeBetweenJwksRequests(adapterConfig.getMinTimeBetweenJwksRequests());\n  deployment.setPublicKeyCacheTtl(adapterConfig.getPublicKeyCacheTtl());\n  deployment.setIgnoreOAuthQueryParameter(adapterConfig.isIgnoreOAuthQueryParameter());\n  deployment.setRewriteRedirectRules(adapterConfig.getRedirectRewriteRules());\n  deployment.setVerifyTokenAudience(adapterConfig.isVerifyTokenAudience());\n  if (realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null) {\n    throw new IllegalArgumentException(\"For bearer auth, you must set the realm-public-key or auth-server-url\");\n  }\n  if (adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)) {\n    throw new RuntimeException(\"You must specify auth-server-url\");\n  }\n  deployment.setClient(createHttpClientProducer(adapterConfig));\n  deployment.setAuthServerBaseUrl(adapterConfig);\n  if (adapterConfig.getTurnOffChangeSessionIdOnLogin() != null) {\n    deployment.setTurnOffChangeSessionIdOnLogin(adapterConfig.getTurnOffChangeSessionIdOnLogin());\n  }\n  final PolicyEnforcerConfig policyEnforcerConfig=adapterConfig.getPolicyEnforcerConfig();\n  if (policyEnforcerConfig != null) {\n    deployment.setPolicyEnforcer(new Callable<PolicyEnforcer>(){\n      PolicyEnforcer policyEnforcer;\n      @Override public PolicyEnforcer call(){\n        if (policyEnforcer == null) {\nsynchronized (deployment) {\n            if (policyEnforcer == null) {\n              policyEnforcer=new PolicyEnforcer(deployment,adapterConfig);\n            }\n          }\n        }\n        return policyEnforcer;\n      }\n    }\n);\n  }\n  return deployment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5479,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected KeycloakDeployment internalBuild(final AdapterConfig adapterConfig){\n  if (adapterConfig.getRealm() == null)   throw new RuntimeException(\"Must set 'realm' in config\");\n  deployment.setRealm(adapterConfig.getRealm());\n  String resource=adapterConfig.getResource();\n  if (resource == null)   throw new RuntimeException(\"Must set 'resource' in config\");\n  deployment.setResourceName(resource);\n  String realmKeyPem=adapterConfig.getRealmKey();\n  if (realmKeyPem != null) {\n    PublicKey realmKey;\n    try {\n      realmKey=PemUtils.decodePublicKey(realmKeyPem);\n      HardcodedPublicKeyLocator pkLocator=new HardcodedPublicKeyLocator(realmKey);\n      deployment.setPublicKeyLocator(pkLocator);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    JWKPublicKeyLocator pkLocator=new JWKPublicKeyLocator();\n    deployment.setPublicKeyLocator(pkLocator);\n  }\n  if (adapterConfig.getSslRequired() != null) {\n    deployment.setSslRequired(SslRequired.valueOf(adapterConfig.getSslRequired().toUpperCase()));\n  }\n else {\n    deployment.setSslRequired(SslRequired.EXTERNAL);\n  }\n  if (adapterConfig.getConfidentialPort() != -1) {\n    deployment.setConfidentialPort(adapterConfig.getConfidentialPort());\n  }\n  if (adapterConfig.getTokenStore() != null) {\n    deployment.setTokenStore(TokenStore.valueOf(adapterConfig.getTokenStore().toUpperCase()));\n  }\n else {\n    deployment.setTokenStore(TokenStore.SESSION);\n  }\n  if (adapterConfig.getTokenCookiePath() != null) {\n    deployment.setAdapterStateCookiePath(adapterConfig.getTokenCookiePath());\n  }\n  if (adapterConfig.getPrincipalAttribute() != null)   deployment.setPrincipalAttribute(adapterConfig.getPrincipalAttribute());\n  deployment.setResourceCredentials(adapterConfig.getCredentials());\n  deployment.setClientAuthenticator(ClientCredentialsProviderUtils.bootstrapClientAuthenticator(deployment));\n  deployment.setPublicClient(adapterConfig.isPublicClient());\n  deployment.setUseResourceRoleMappings(adapterConfig.isUseResourceRoleMappings());\n  deployment.setExposeToken(adapterConfig.isExposeToken());\n  if (adapterConfig.isCors()) {\n    deployment.setCors(true);\n    deployment.setCorsMaxAge(adapterConfig.getCorsMaxAge());\n    deployment.setCorsAllowedHeaders(adapterConfig.getCorsAllowedHeaders());\n    deployment.setCorsAllowedMethods(adapterConfig.getCorsAllowedMethods());\n    deployment.setCorsExposedHeaders(adapterConfig.getCorsExposedHeaders());\n  }\n  if (adapterConfig.isPkce()) {\n    deployment.setPkce(true);\n  }\n  deployment.setBearerOnly(adapterConfig.isBearerOnly());\n  deployment.setAutodetectBearerOnly(adapterConfig.isAutodetectBearerOnly());\n  deployment.setEnableBasicAuth(adapterConfig.isEnableBasicAuth());\n  deployment.setAlwaysRefreshToken(adapterConfig.isAlwaysRefreshToken());\n  deployment.setRegisterNodeAtStartup(adapterConfig.isRegisterNodeAtStartup());\n  deployment.setRegisterNodePeriod(adapterConfig.getRegisterNodePeriod());\n  deployment.setTokenMinimumTimeToLive(adapterConfig.getTokenMinimumTimeToLive());\n  deployment.setMinTimeBetweenJwksRequests(adapterConfig.getMinTimeBetweenJwksRequests());\n  deployment.setPublicKeyCacheTtl(adapterConfig.getPublicKeyCacheTtl());\n  deployment.setIgnoreOAuthQueryParameter(adapterConfig.isIgnoreOAuthQueryParameter());\n  deployment.setRewriteRedirectRules(adapterConfig.getRedirectRewriteRules());\n  deployment.setVerifyTokenAudience(adapterConfig.isVerifyTokenAudience());\n  if (realmKeyPem == null && adapterConfig.isBearerOnly() && adapterConfig.getAuthServerUrl() == null) {\n    throw new IllegalArgumentException(\"For bearer auth, you must set the realm-public-key or auth-server-url\");\n  }\n  if (adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)) {\n    throw new RuntimeException(\"You must specify auth-server-url\");\n  }\n  deployment.setClient(createHttpClientProducer(adapterConfig));\n  deployment.setAuthServerBaseUrl(adapterConfig);\n  if (adapterConfig.getTurnOffChangeSessionIdOnLogin() != null) {\n    deployment.setTurnOffChangeSessionIdOnLogin(adapterConfig.getTurnOffChangeSessionIdOnLogin());\n  }\n  final PolicyEnforcerConfig policyEnforcerConfig=adapterConfig.getPolicyEnforcerConfig();\n  if (policyEnforcerConfig != null) {\n    deployment.setPolicyEnforcer(new Callable<PolicyEnforcer>(){\n      PolicyEnforcer policyEnforcer;\n      @Override public PolicyEnforcer call(){\n        if (policyEnforcer == null) {\nsynchronized (deployment) {\n            if (policyEnforcer == null) {\n              policyEnforcer=new PolicyEnforcer(deployment,adapterConfig);\n            }\n          }\n        }\n        return policyEnforcer;\n      }\n    }\n);\n  }\n  return deployment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 107
      },
      "nodeContext" : "adapterConfig.getAuthServerUrl() == null && (!deployment.isBearerOnly() || realmKeyPem == null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 132,
    "startColumnNumber" : 67,
    "endLineNumber" : 132,
    "endColumnNumber" : 107
  }, {
    "charLength" : 40,
    "startLineNumber" : 135,
    "startColumnNumber" : 12,
    "endLineNumber" : 135,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}