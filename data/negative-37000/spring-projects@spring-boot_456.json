{
  "id" : 456,
  "expression" : "\"spring.kafka.consumer.group-id=testGroup\"",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"spring.kafka.consumer.group-id=testGroup\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 69,
      "startColumnNumber" : 4,
      "endLineNumber" : 69,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 55
      },
      "nodeContext" : "load(KafkaConfig.class,\"spring.kafka.bootstrap-servers:\" + kafkaEmbedded.getBrokersAsString(),\"spring.kafka.consumer.group-id=testGroup\",\"spring.kafka.consumer.auto-offset-reset=earliest\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 56
      },
      "nodeContext" : "load(KafkaConfig.class,\"spring.kafka.bootstrap-servers:\" + kafkaEmbedded.getBrokersAsString(),\"spring.kafka.consumer.group-id=testGroup\",\"spring.kafka.consumer.auto-offset-reset=earliest\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 834,
        "startLineNumber" : 66,
        "startColumnNumber" : 45,
        "endLineNumber" : 84,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  load(KafkaConfig.class,\"spring.kafka.bootstrap-servers:\" + kafkaEmbedded.getBrokersAsString(),\"spring.kafka.consumer.group-id=testGroup\",\"spring.kafka.consumer.auto-offset-reset=earliest\");\n  KafkaTemplate<String,String> template=this.context.getBean(KafkaTemplate.class);\n  template.send(TEST_TOPIC,\"foo\",\"bar\");\n  Listener listener=this.context.getBean(Listener.class);\n  assertThat(listener.latch.await(30,TimeUnit.SECONDS)).isTrue();\n  assertThat(listener.key).isEqualTo(\"foo\");\n  assertThat(listener.received).isEqualTo(\"bar\");\n  DefaultKafkaProducerFactory producerFactory=this.context.getBean(DefaultKafkaProducerFactory.class);\n  Producer producer=producerFactory.createProducer();\n  assertThat(producer.partitionsFor(ADMIN_CREATED_TOPIC).size()).isEqualTo(10);\n  producer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 64,
        "startColumnNumber" : 1,
        "endLineNumber" : 84,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Test public void testEndToEnd() throws Exception {\n  load(KafkaConfig.class,\"spring.kafka.bootstrap-servers:\" + kafkaEmbedded.getBrokersAsString(),\"spring.kafka.consumer.group-id=testGroup\",\"spring.kafka.consumer.auto-offset-reset=earliest\");\n  KafkaTemplate<String,String> template=this.context.getBean(KafkaTemplate.class);\n  template.send(TEST_TOPIC,\"foo\",\"bar\");\n  Listener listener=this.context.getBean(Listener.class);\n  assertThat(listener.latch.await(30,TimeUnit.SECONDS)).isTrue();\n  assertThat(listener.key).isEqualTo(\"foo\");\n  assertThat(listener.received).isEqualTo(\"bar\");\n  DefaultKafkaProducerFactory producerFactory=this.context.getBean(DefaultKafkaProducerFactory.class);\n  Producer producer=producerFactory.createProducer();\n  assertThat(producer.partitionsFor(ADMIN_CREATED_TOPIC).size()).isEqualTo(10);\n  producer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 55
      },
      "nodeContext" : "load(KafkaConfig.class,\"spring.kafka.bootstrap-servers:\" + kafkaEmbedded.getBrokersAsString(),\"spring.kafka.consumer.group-id=testGroup\",\"spring.kafka.consumer.auto-offset-reset=earliest\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 69,
    "startColumnNumber" : 4,
    "endLineNumber" : 69,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}