{
  "id" : 259,
  "expression" : "range1.getEnd() > DEFAULT_HASH_RANGE_SIZE",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ReaderBuilderImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "range1.getEnd() > DEFAULT_HASH_RANGE_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 212,
      "startColumnNumber" : 41,
      "endLineNumber" : 212,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 82
      },
      "nodeContext" : "range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE) {\n  throw new IllegalArgumentException(\"Ranges must be [0, 65535] but provided range is \" + range1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 609,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Range range1=ranges[i];\n  if (range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE) {\n    throw new IllegalArgumentException(\"Ranges must be [0, 65535] but provided range is \" + range1);\n  }\n  for (int j=0; j < ranges.length; j++) {\n    Range range2=ranges[j];\n    if (i != j && range1.intersect(range2) != null) {\n      throw new IllegalArgumentException(\"Key hash ranges with overlap between \" + range1 + \" and \"+ range2);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 210,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < ranges.length; i++) {\n  Range range1=ranges[i];\n  if (range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE) {\n    throw new IllegalArgumentException(\"Ranges must be [0, 65535] but provided range is \" + range1);\n  }\n  for (int j=0; j < ranges.length; j++) {\n    Range range2=ranges[j];\n    if (i != j && range1.intersect(range2) != null) {\n      throw new IllegalArgumentException(\"Key hash ranges with overlap between \" + range1 + \" and \"+ range2);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 207,
        "startColumnNumber" : 58,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(ranges != null && ranges.length > 0,\"Cannot specify a null ofr an empty key hash ranges for a reader\");\n  for (int i=0; i < ranges.length; i++) {\n    Range range1=ranges[i];\n    if (range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE) {\n      throw new IllegalArgumentException(\"Ranges must be [0, 65535] but provided range is \" + range1);\n    }\n    for (int j=0; j < ranges.length; j++) {\n      Range range2=ranges[j];\n      if (i != j && range1.intersect(range2) != null) {\n        throw new IllegalArgumentException(\"Key hash ranges with overlap between \" + range1 + \" and \"+ range2);\n      }\n    }\n  }\n  conf.setKeyHashRanges(Arrays.asList(ranges));\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 965,
        "startLineNumber" : 206,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ReaderBuilder<T> keyHashRange(Range... ranges){\n  Preconditions.checkArgument(ranges != null && ranges.length > 0,\"Cannot specify a null ofr an empty key hash ranges for a reader\");\n  for (int i=0; i < ranges.length; i++) {\n    Range range1=ranges[i];\n    if (range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE) {\n      throw new IllegalArgumentException(\"Ranges must be [0, 65535] but provided range is \" + range1);\n    }\n    for (int j=0; j < ranges.length; j++) {\n      Range range2=ranges[j];\n      if (i != j && range1.intersect(range2) != null) {\n        throw new IllegalArgumentException(\"Key hash ranges with overlap between \" + range1 + \" and \"+ range2);\n      }\n    }\n  }\n  conf.setKeyHashRanges(Arrays.asList(ranges));\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 82
      },
      "nodeContext" : "range1.getStart() < 0 || range1.getEnd() > DEFAULT_HASH_RANGE_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 212,
    "startColumnNumber" : 41,
    "endLineNumber" : 212,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}