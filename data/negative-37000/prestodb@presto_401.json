{
  "id" : 401,
  "expression" : "hashChannels",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/operator/TestGroupByHash.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hashChannels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 226,
      "startColumnNumber" : 101,
      "endLineNumber" : 226,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 226,
        "startColumnNumber" : 34,
        "endLineNumber" : 226,
        "endColumnNumber" : 150
      },
      "nodeContext" : "createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 226,
        "endColumnNumber" : 150
      },
      "nodeContext" : "groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 226,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 151
      },
      "nodeContext" : "GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block valuesBlock=BlockAssertions.createDoubleSequenceBlock(0,10);\n  Block stringValuesBlock=BlockAssertions.createStringSequenceBlock(0,10);\n  Block hashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),valuesBlock,stringValuesBlock);\n  int[] hashChannels={0,1};\n  GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n  groupByHash.getGroupIds(new Page(valuesBlock,stringValuesBlock,hashBlock)).process();\n  Block testValuesBlock=BlockAssertions.createDoublesBlock((double)3);\n  Block testStringValuesBlock=BlockAssertions.createStringsBlock(\"3\");\n  Block testHashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),testValuesBlock,testStringValuesBlock);\n  assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testContainsMultipleColumns(){\n  Block valuesBlock=BlockAssertions.createDoubleSequenceBlock(0,10);\n  Block stringValuesBlock=BlockAssertions.createStringSequenceBlock(0,10);\n  Block hashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),valuesBlock,stringValuesBlock);\n  int[] hashChannels={0,1};\n  GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n  groupByHash.getGroupIds(new Page(valuesBlock,stringValuesBlock,hashBlock)).process();\n  Block testValuesBlock=BlockAssertions.createDoublesBlock((double)3);\n  Block testStringValuesBlock=BlockAssertions.createStringsBlock(\"3\");\n  Block testHashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),testValuesBlock,testStringValuesBlock);\n  assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 226,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 151
      },
      "nodeContext" : "GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "hashChannels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 232,
      "startColumnNumber" : 108,
      "endLineNumber" : 232,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 232,
        "startColumnNumber" : 19,
        "endLineNumber" : 232,
        "endColumnNumber" : 121
      },
      "nodeContext" : "groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 122
      },
      "nodeContext" : "assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 123
      },
      "nodeContext" : "assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Block valuesBlock=BlockAssertions.createDoubleSequenceBlock(0,10);\n  Block stringValuesBlock=BlockAssertions.createStringSequenceBlock(0,10);\n  Block hashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),valuesBlock,stringValuesBlock);\n  int[] hashChannels={0,1};\n  GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n  groupByHash.getGroupIds(new Page(valuesBlock,stringValuesBlock,hashBlock)).process();\n  Block testValuesBlock=BlockAssertions.createDoublesBlock((double)3);\n  Block testStringValuesBlock=BlockAssertions.createStringsBlock(\"3\");\n  Block testHashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),testValuesBlock,testStringValuesBlock);\n  assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testContainsMultipleColumns(){\n  Block valuesBlock=BlockAssertions.createDoubleSequenceBlock(0,10);\n  Block stringValuesBlock=BlockAssertions.createStringSequenceBlock(0,10);\n  Block hashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),valuesBlock,stringValuesBlock);\n  int[] hashChannels={0,1};\n  GroupByHash groupByHash=createGroupByHash(TEST_SESSION,ImmutableList.of(DOUBLE,VARCHAR),hashChannels,Optional.of(2),100,JOIN_COMPILER);\n  groupByHash.getGroupIds(new Page(valuesBlock,stringValuesBlock,hashBlock)).process();\n  Block testValuesBlock=BlockAssertions.createDoublesBlock((double)3);\n  Block testStringValuesBlock=BlockAssertions.createStringsBlock(\"3\");\n  Block testHashBlock=TypeUtils.getHashBlock(ImmutableList.of(DOUBLE,VARCHAR),testValuesBlock,testStringValuesBlock);\n  assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 123
      },
      "nodeContext" : "assertTrue(groupByHash.contains(0,new Page(testValuesBlock,testStringValuesBlock,testHashBlock),hashChannels));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 226,
    "startColumnNumber" : 101,
    "endLineNumber" : 226,
    "endColumnNumber" : 113
  }, {
    "charLength" : 12,
    "startLineNumber" : 232,
    "startColumnNumber" : 108,
    "endLineNumber" : 232,
    "endColumnNumber" : 120
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}