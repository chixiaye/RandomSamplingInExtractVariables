{
  "id" : 88,
  "expression" : "1",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/common/queue/src/main/java/org/thingsboard/server/queue/kafka/TbKafkaConsumerStatsService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 97,
      "startColumnNumber" : 61,
      "endLineNumber" : 97,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 37,
        "endLineNumber" : 97,
        "endColumnNumber" : 62
      },
      "nodeContext" : "lagTopicsStats.size() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 97,
        "startColumnNumber" : 32,
        "endLineNumber" : 97,
        "endColumnNumber" : 62
      },
      "nodeContext" : "i != lagTopicsStats.size() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 97,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (i != lagTopicsStats.size() - 1) {\n  builder.append(\", \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 95,
        "startColumnNumber" : 72,
        "endLineNumber" : 100,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  builder.append(lagTopicsStats.get(i).toString());\n  if (i != lagTopicsStats.size() - 1) {\n    builder.append(\", \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int i=0; i < lagTopicsStats.size(); i++) {\n  builder.append(lagTopicsStats.get(i).toString());\n  if (i != lagTopicsStats.size() - 1) {\n    builder.append(\", \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 93,
        "startColumnNumber" : 51,
        "endLineNumber" : 102,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < lagTopicsStats.size(); i++) {\n    builder.append(lagTopicsStats.get(i).toString());\n    if (i != lagTopicsStats.size() - 1) {\n      builder.append(\", \");\n    }\n  }\n  log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 555,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 102,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!lagTopicsStats.isEmpty()) {\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < lagTopicsStats.size(); i++) {\n    builder.append(lagTopicsStats.get(i).toString());\n    if (i != lagTopicsStats.size() - 1) {\n      builder.append(\", \");\n    }\n  }\n  log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1074,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n  Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n  List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n  if (!lagTopicsStats.isEmpty()) {\n    StringBuilder builder=new StringBuilder();\n    for (int i=0; i < lagTopicsStats.size(); i++) {\n      builder.append(lagTopicsStats.get(i).toString());\n      if (i != lagTopicsStats.size() - 1) {\n        builder.append(\", \");\n      }\n    }\n    log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1284,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n  Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n  List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n  if (!lagTopicsStats.isEmpty()) {\n    StringBuilder builder=new StringBuilder();\n    for (int i=0; i < lagTopicsStats.size(); i++) {\n      builder.append(lagTopicsStats.get(i).toString());\n      if (i != lagTopicsStats.size() - 1) {\n        builder.append(\", \");\n      }\n    }\n    log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n  }\n}\n catch (Exception e) {\n  log.warn(\"[{}] Failed to get consumer group stats. Reason - {}.\",groupId,e.getMessage());\n  log.trace(\"Detailed error: \",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 137,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1316,
        "startLineNumber" : 86,
        "startColumnNumber" : 51,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n    Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n    List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n    if (!lagTopicsStats.isEmpty()) {\n      StringBuilder builder=new StringBuilder();\n      for (int i=0; i < lagTopicsStats.size(); i++) {\n        builder.append(lagTopicsStats.get(i).toString());\n        if (i != lagTopicsStats.size() - 1) {\n          builder.append(\", \");\n        }\n      }\n      log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n    }\n  }\n catch (  Exception e) {\n    log.warn(\"[{}] Failed to get consumer group stats. Reason - {}.\",groupId,e.getMessage());\n    log.trace(\"Detailed error: \",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String groupId : monitoredGroups) {\n  try {\n    Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n    Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n    List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n    if (!lagTopicsStats.isEmpty()) {\n      StringBuilder builder=new StringBuilder();\n      for (int i=0; i < lagTopicsStats.size(); i++) {\n        builder.append(lagTopicsStats.get(i).toString());\n        if (i != lagTopicsStats.size() - 1) {\n          builder.append(\", \");\n        }\n      }\n      log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n    }\n  }\n catch (  Exception e) {\n    log.warn(\"[{}] Failed to get consumer group stats. Reason - {}.\",groupId,e.getMessage());\n    log.trace(\"Detailed error: \",e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1461,
        "startLineNumber" : 82,
        "startColumnNumber" : 57,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!isStatsPrintRequired()) {\n    return;\n  }\n  for (  String groupId : monitoredGroups) {\n    try {\n      Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n      Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n      List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n      if (!lagTopicsStats.isEmpty()) {\n        StringBuilder builder=new StringBuilder();\n        for (int i=0; i < lagTopicsStats.size(); i++) {\n          builder.append(lagTopicsStats.get(i).toString());\n          if (i != lagTopicsStats.size() - 1) {\n            builder.append(\", \");\n          }\n        }\n        log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n      }\n    }\n catch (    Exception e) {\n      log.warn(\"[{}] Failed to get consumer group stats. Reason - {}.\",groupId,e.getMessage());\n      log.trace(\"Detailed error: \",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 82,
        "startColumnNumber" : 51,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  if (!isStatsPrintRequired()) {\n    return;\n  }\n  for (  String groupId : monitoredGroups) {\n    try {\n      Map<TopicPartition,OffsetAndMetadata> groupOffsets=adminClient.listConsumerGroupOffsets(groupId).partitionsToOffsetAndMetadata().get(statsConfig.getKafkaResponseTimeoutMs(),TimeUnit.MILLISECONDS);\n      Map<TopicPartition,Long> endOffsets=consumer.endOffsets(groupOffsets.keySet(),timeoutDuration);\n      List<GroupTopicStats> lagTopicsStats=getTopicsStatsWithLag(groupOffsets,endOffsets);\n      if (!lagTopicsStats.isEmpty()) {\n        StringBuilder builder=new StringBuilder();\n        for (int i=0; i < lagTopicsStats.size(); i++) {\n          builder.append(lagTopicsStats.get(i).toString());\n          if (i != lagTopicsStats.size() - 1) {\n            builder.append(\", \");\n          }\n        }\n        log.info(\"[{}] Topic partitions with lag: [{}].\",groupId,builder.toString());\n      }\n    }\n catch (    Exception e) {\n      log.warn(\"[{}] Failed to get consumer group stats. Reason - {}.\",groupId,e.getMessage());\n      log.trace(\"Detailed error: \",e);\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 152,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 97,
        "startColumnNumber" : 32,
        "endLineNumber" : 97,
        "endColumnNumber" : 62
      },
      "nodeContext" : "i != lagTopicsStats.size() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 97,
    "startColumnNumber" : 61,
    "endLineNumber" : 97,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}