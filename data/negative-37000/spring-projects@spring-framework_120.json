{
  "id" : 120,
  "expression" : "-1",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlCall.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 139,
      "startColumnNumber" : 21,
      "endLineNumber" : 139,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 23
      },
      "nodeContext" : "parameterCount=-1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 24
      },
      "nodeContext" : "parameterCount=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 137,
        "startColumnNumber" : 21,
        "endLineNumber" : 140,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  callString.append(\"{? = call \").append(resolveSql()).append('(');\n  parameterCount=-1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 137,
        "startColumnNumber" : 3,
        "endLineNumber" : 143,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (isFunction()) {\n  callString.append(\"{? = call \").append(resolveSql()).append('(');\n  parameterCount=-1;\n}\n else {\n  callString.append(\"{call \").append(resolveSql()).append('(');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 133,
        "startColumnNumber" : 7,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder callString=new StringBuilder(32);\n  List<SqlParameter> parameters=getDeclaredParameters();\n  int parameterCount=0;\n  if (isFunction()) {\n    callString.append(\"{? = call \").append(resolveSql()).append('(');\n    parameterCount=-1;\n  }\n else {\n    callString.append(\"{call \").append(resolveSql()).append('(');\n  }\n  for (  SqlParameter parameter : parameters) {\n    if (!parameter.isResultsParameter()) {\n      if (parameterCount > 0) {\n        callString.append(\", \");\n      }\n      if (parameterCount >= 0) {\n        callString.append('?');\n      }\n      parameterCount++;\n    }\n  }\n  callString.append(\")}\");\n  this.callString=callString.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 755,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (isSqlReadyForUse()) {\n  this.callString=resolveSql();\n}\n else {\n  StringBuilder callString=new StringBuilder(32);\n  List<SqlParameter> parameters=getDeclaredParameters();\n  int parameterCount=0;\n  if (isFunction()) {\n    callString.append(\"{? = call \").append(resolveSql()).append('(');\n    parameterCount=-1;\n  }\n else {\n    callString.append(\"{call \").append(resolveSql()).append('(');\n  }\n  for (  SqlParameter parameter : parameters) {\n    if (!parameter.isResultsParameter()) {\n      if (parameterCount > 0) {\n        callString.append(\", \");\n      }\n      if (parameterCount >= 0) {\n        callString.append('?');\n      }\n      parameterCount++;\n    }\n  }\n  callString.append(\")}\");\n  this.callString=callString.toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 119,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 129,
        "startColumnNumber" : 40,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (isSqlReadyForUse()) {\n    this.callString=resolveSql();\n  }\n else {\n    StringBuilder callString=new StringBuilder(32);\n    List<SqlParameter> parameters=getDeclaredParameters();\n    int parameterCount=0;\n    if (isFunction()) {\n      callString.append(\"{? = call \").append(resolveSql()).append('(');\n      parameterCount=-1;\n    }\n else {\n      callString.append(\"{call \").append(resolveSql()).append('(');\n    }\n    for (    SqlParameter parameter : parameters) {\n      if (!parameter.isResultsParameter()) {\n        if (parameterCount > 0) {\n          callString.append(\", \");\n        }\n        if (parameterCount >= 0) {\n          callString.append('?');\n        }\n        parameterCount++;\n      }\n    }\n    callString.append(\")}\");\n    this.callString=callString.toString();\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Compiled stored procedure. Call string is [\" + this.callString + \"]\");\n  }\n  this.callableStatementFactory=new CallableStatementCreatorFactory(this.callString,getDeclaredParameters());\n  this.callableStatementFactory.setResultSetType(getResultSetType());\n  this.callableStatementFactory.setUpdatableResults(isUpdatableResults());\n  onCompileInternal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1381,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Overridden method to configure the CallableStatementCreatorFactory based on our declared parameters.\n * @see RdbmsOperation#compileInternal()\n */\n@Override protected final void compileInternal(){\n  if (isSqlReadyForUse()) {\n    this.callString=resolveSql();\n  }\n else {\n    StringBuilder callString=new StringBuilder(32);\n    List<SqlParameter> parameters=getDeclaredParameters();\n    int parameterCount=0;\n    if (isFunction()) {\n      callString.append(\"{? = call \").append(resolveSql()).append('(');\n      parameterCount=-1;\n    }\n else {\n      callString.append(\"{call \").append(resolveSql()).append('(');\n    }\n    for (    SqlParameter parameter : parameters) {\n      if (!parameter.isResultsParameter()) {\n        if (parameterCount > 0) {\n          callString.append(\", \");\n        }\n        if (parameterCount >= 0) {\n          callString.append('?');\n        }\n        parameterCount++;\n      }\n    }\n    callString.append(\")}\");\n    this.callString=callString.toString();\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Compiled stored procedure. Call string is [\" + this.callString + \"]\");\n  }\n  this.callableStatementFactory=new CallableStatementCreatorFactory(this.callString,getDeclaredParameters());\n  this.callableStatementFactory.setResultSetType(getResultSetType());\n  this.callableStatementFactory.setUpdatableResults(isUpdatableResults());\n  onCompileInternal();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 24
      },
      "nodeContext" : "parameterCount=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 139,
    "startColumnNumber" : 21,
    "endLineNumber" : 139,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}