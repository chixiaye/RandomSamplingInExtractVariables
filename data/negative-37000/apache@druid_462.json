{
  "id" : 462,
  "expression" : "update4.getTaskAnnouncement().getTaskStatus()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/worker/WorkerTaskManagerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "update4.getTaskAnnouncement().getTaskStatus()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 260,
      "startColumnNumber" : 39,
      "endLineNumber" : 260,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 260,
        "startColumnNumber" : 39,
        "endLineNumber" : 260,
        "endColumnNumber" : 92
      },
      "nodeContext" : "update4.getTaskAnnouncement().getTaskStatus().getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4647,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Task task1=createNoopTask(\"task1-assigned-via-assign-dir\");\n  Task task2=createNoopTask(\"task2-completed-already\");\n  Task task3=createNoopTask(\"task3-assigned-explicitly\");\n  workerTaskManager.getAssignedTaskDir().mkdirs();\n  workerTaskManager.getCompletedTaskDir().mkdirs();\n  jsonMapper.writeValue(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()),task1);\n  jsonMapper.writeValue(new File(workerTaskManager.getCompletedTaskDir(),task2.getId()),TaskAnnouncement.create(task2,TaskStatus.success(task2.getId()),location));\n  workerTaskManager.start();\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task2.getId()).getTaskStatus().isSuccess());\n  while (!workerTaskManager.getCompletedTasks().containsKey(task1.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task1.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task1.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> baseHistory=workerTaskManager.getChangesSince(new ChangeRequestHistory.Counter(-1,0)).get();\n  Assert.assertFalse(baseHistory.isResetCounter());\n  Assert.assertEquals(3,baseHistory.getRequests().size());\n  Assert.assertFalse(((WorkerHistoryItem.Metadata)baseHistory.getRequests().get(0)).isDisabled());\n  WorkerHistoryItem.TaskUpdate baseUpdate1=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(1);\n  WorkerHistoryItem.TaskUpdate baseUpdate2=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(2);\n  Assert.assertTrue(baseUpdate1.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertTrue(baseUpdate2.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertEquals(ImmutableSet.of(task1.getId(),task2.getId()),ImmutableSet.of(baseUpdate1.getTaskAnnouncement().getTaskStatus().getId(),baseUpdate2.getTaskAnnouncement().getTaskStatus().getId()));\n  workerTaskManager.assignTask(task3);\n  while (!workerTaskManager.getCompletedTasks().containsKey(task3.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task3.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task3.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task3.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> changes=workerTaskManager.getChangesSince(baseHistory.getCounter()).get();\n  Assert.assertFalse(changes.isResetCounter());\n  Assert.assertEquals(4,changes.getRequests().size());\n  WorkerHistoryItem.TaskUpdate update1=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(0);\n  Assert.assertEquals(task3.getId(),update1.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update1.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update1.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update2=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(1);\n  Assert.assertEquals(task3.getId(),update2.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update2.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update2.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update3=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(2);\n  Assert.assertEquals(task3.getId(),update3.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update3.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNotNull(update3.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update4=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(3);\n  Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertNotNull(update4.getTaskAnnouncement().getTaskLocation().getHost());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 617,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4719,
        "startLineNumber" : 172,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test(timeout=60_000L) public void testTaskRun() throws Exception {\n  Task task1=createNoopTask(\"task1-assigned-via-assign-dir\");\n  Task task2=createNoopTask(\"task2-completed-already\");\n  Task task3=createNoopTask(\"task3-assigned-explicitly\");\n  workerTaskManager.getAssignedTaskDir().mkdirs();\n  workerTaskManager.getCompletedTaskDir().mkdirs();\n  jsonMapper.writeValue(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()),task1);\n  jsonMapper.writeValue(new File(workerTaskManager.getCompletedTaskDir(),task2.getId()),TaskAnnouncement.create(task2,TaskStatus.success(task2.getId()),location));\n  workerTaskManager.start();\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task2.getId()).getTaskStatus().isSuccess());\n  while (!workerTaskManager.getCompletedTasks().containsKey(task1.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task1.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task1.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> baseHistory=workerTaskManager.getChangesSince(new ChangeRequestHistory.Counter(-1,0)).get();\n  Assert.assertFalse(baseHistory.isResetCounter());\n  Assert.assertEquals(3,baseHistory.getRequests().size());\n  Assert.assertFalse(((WorkerHistoryItem.Metadata)baseHistory.getRequests().get(0)).isDisabled());\n  WorkerHistoryItem.TaskUpdate baseUpdate1=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(1);\n  WorkerHistoryItem.TaskUpdate baseUpdate2=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(2);\n  Assert.assertTrue(baseUpdate1.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertTrue(baseUpdate2.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertEquals(ImmutableSet.of(task1.getId(),task2.getId()),ImmutableSet.of(baseUpdate1.getTaskAnnouncement().getTaskStatus().getId(),baseUpdate2.getTaskAnnouncement().getTaskStatus().getId()));\n  workerTaskManager.assignTask(task3);\n  while (!workerTaskManager.getCompletedTasks().containsKey(task3.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task3.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task3.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task3.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> changes=workerTaskManager.getChangesSince(baseHistory.getCounter()).get();\n  Assert.assertFalse(changes.isResetCounter());\n  Assert.assertEquals(4,changes.getRequests().size());\n  WorkerHistoryItem.TaskUpdate update1=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(0);\n  Assert.assertEquals(task3.getId(),update1.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update1.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update1.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update2=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(1);\n  Assert.assertEquals(task3.getId(),update2.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update2.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update2.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update3=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(2);\n  Assert.assertEquals(task3.getId(),update3.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update3.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNotNull(update3.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update4=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(3);\n  Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertNotNull(update4.getTaskAnnouncement().getTaskLocation().getHost());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 628,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "org.apache.druid.indexer.TaskStatus"
  }, {
    "nodeContext" : "update4.getTaskAnnouncement().getTaskStatus()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 261,
      "startColumnNumber" : 22,
      "endLineNumber" : 261,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 261,
        "startColumnNumber" : 22,
        "endLineNumber" : 261,
        "endColumnNumber" : 79
      },
      "nodeContext" : "update4.getTaskAnnouncement().getTaskStatus().isSuccess()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4647,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Task task1=createNoopTask(\"task1-assigned-via-assign-dir\");\n  Task task2=createNoopTask(\"task2-completed-already\");\n  Task task3=createNoopTask(\"task3-assigned-explicitly\");\n  workerTaskManager.getAssignedTaskDir().mkdirs();\n  workerTaskManager.getCompletedTaskDir().mkdirs();\n  jsonMapper.writeValue(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()),task1);\n  jsonMapper.writeValue(new File(workerTaskManager.getCompletedTaskDir(),task2.getId()),TaskAnnouncement.create(task2,TaskStatus.success(task2.getId()),location));\n  workerTaskManager.start();\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task2.getId()).getTaskStatus().isSuccess());\n  while (!workerTaskManager.getCompletedTasks().containsKey(task1.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task1.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task1.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> baseHistory=workerTaskManager.getChangesSince(new ChangeRequestHistory.Counter(-1,0)).get();\n  Assert.assertFalse(baseHistory.isResetCounter());\n  Assert.assertEquals(3,baseHistory.getRequests().size());\n  Assert.assertFalse(((WorkerHistoryItem.Metadata)baseHistory.getRequests().get(0)).isDisabled());\n  WorkerHistoryItem.TaskUpdate baseUpdate1=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(1);\n  WorkerHistoryItem.TaskUpdate baseUpdate2=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(2);\n  Assert.assertTrue(baseUpdate1.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertTrue(baseUpdate2.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertEquals(ImmutableSet.of(task1.getId(),task2.getId()),ImmutableSet.of(baseUpdate1.getTaskAnnouncement().getTaskStatus().getId(),baseUpdate2.getTaskAnnouncement().getTaskStatus().getId()));\n  workerTaskManager.assignTask(task3);\n  while (!workerTaskManager.getCompletedTasks().containsKey(task3.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task3.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task3.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task3.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> changes=workerTaskManager.getChangesSince(baseHistory.getCounter()).get();\n  Assert.assertFalse(changes.isResetCounter());\n  Assert.assertEquals(4,changes.getRequests().size());\n  WorkerHistoryItem.TaskUpdate update1=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(0);\n  Assert.assertEquals(task3.getId(),update1.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update1.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update1.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update2=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(1);\n  Assert.assertEquals(task3.getId(),update2.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update2.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update2.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update3=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(2);\n  Assert.assertEquals(task3.getId(),update3.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update3.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNotNull(update3.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update4=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(3);\n  Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertNotNull(update4.getTaskAnnouncement().getTaskLocation().getHost());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 617,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4719,
        "startLineNumber" : 172,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test(timeout=60_000L) public void testTaskRun() throws Exception {\n  Task task1=createNoopTask(\"task1-assigned-via-assign-dir\");\n  Task task2=createNoopTask(\"task2-completed-already\");\n  Task task3=createNoopTask(\"task3-assigned-explicitly\");\n  workerTaskManager.getAssignedTaskDir().mkdirs();\n  workerTaskManager.getCompletedTaskDir().mkdirs();\n  jsonMapper.writeValue(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()),task1);\n  jsonMapper.writeValue(new File(workerTaskManager.getCompletedTaskDir(),task2.getId()),TaskAnnouncement.create(task2,TaskStatus.success(task2.getId()),location));\n  workerTaskManager.start();\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task2.getId()).getTaskStatus().isSuccess());\n  while (!workerTaskManager.getCompletedTasks().containsKey(task1.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task1.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task1.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task1.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> baseHistory=workerTaskManager.getChangesSince(new ChangeRequestHistory.Counter(-1,0)).get();\n  Assert.assertFalse(baseHistory.isResetCounter());\n  Assert.assertEquals(3,baseHistory.getRequests().size());\n  Assert.assertFalse(((WorkerHistoryItem.Metadata)baseHistory.getRequests().get(0)).isDisabled());\n  WorkerHistoryItem.TaskUpdate baseUpdate1=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(1);\n  WorkerHistoryItem.TaskUpdate baseUpdate2=(WorkerHistoryItem.TaskUpdate)baseHistory.getRequests().get(2);\n  Assert.assertTrue(baseUpdate1.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertTrue(baseUpdate2.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertEquals(ImmutableSet.of(task1.getId(),task2.getId()),ImmutableSet.of(baseUpdate1.getTaskAnnouncement().getTaskStatus().getId(),baseUpdate2.getTaskAnnouncement().getTaskStatus().getId()));\n  workerTaskManager.assignTask(task3);\n  while (!workerTaskManager.getCompletedTasks().containsKey(task3.getId())) {\n    Thread.sleep(100);\n  }\n  Assert.assertTrue(workerTaskManager.getCompletedTasks().get(task3.getId()).getTaskStatus().isSuccess());\n  Assert.assertTrue(new File(workerTaskManager.getCompletedTaskDir(),task3.getId()).exists());\n  Assert.assertFalse(new File(workerTaskManager.getAssignedTaskDir(),task3.getId()).exists());\n  ChangeRequestsSnapshot<WorkerHistoryItem> changes=workerTaskManager.getChangesSince(baseHistory.getCounter()).get();\n  Assert.assertFalse(changes.isResetCounter());\n  Assert.assertEquals(4,changes.getRequests().size());\n  WorkerHistoryItem.TaskUpdate update1=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(0);\n  Assert.assertEquals(task3.getId(),update1.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update1.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update1.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update2=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(1);\n  Assert.assertEquals(task3.getId(),update2.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update2.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNull(update2.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update3=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(2);\n  Assert.assertEquals(task3.getId(),update3.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update3.getTaskAnnouncement().getTaskStatus().isRunnable());\n  Assert.assertNotNull(update3.getTaskAnnouncement().getTaskLocation().getHost());\n  WorkerHistoryItem.TaskUpdate update4=(WorkerHistoryItem.TaskUpdate)changes.getRequests().get(3);\n  Assert.assertEquals(task3.getId(),update4.getTaskAnnouncement().getTaskStatus().getId());\n  Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n  Assert.assertNotNull(update4.getTaskAnnouncement().getTaskLocation().getHost());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 628,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertTrue(update4.getTaskAnnouncement().getTaskStatus().isSuccess());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "org.apache.druid.indexer.TaskStatus"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 260,
    "startColumnNumber" : 39,
    "endLineNumber" : 260,
    "endColumnNumber" : 84
  }, {
    "charLength" : 45,
    "startLineNumber" : 261,
    "startColumnNumber" : 22,
    "endLineNumber" : 261,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}