{
  "id" : 509,
  "expression" : "\"Cache-Control\"",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-metrics-event-stream/src/main/java/com/netflix/hystrix/contrib/sample/stream/HystrixSampleSseServlet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Cache-Control\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 125,
      "startColumnNumber" : 35,
      "endLineNumber" : 125,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 101
      },
      "nodeContext" : "response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 102
      },
      "nodeContext" : "response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 122,
        "startColumnNumber" : 19,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n  response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n  response.setHeader(\"Pragma\",\"no-cache\");\n  final PrintWriter writer=response.getWriter();\n  sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n      moreDataWillBeSent.set(false);\n    }\n    @Override public void onError(    Throwable e){\n      moreDataWillBeSent.set(false);\n    }\n    @Override public void onNext(    String sampleDataAsString){\n      if (sampleDataAsString != null) {\n        try {\n          writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n          if (writer.checkError()) {\n            moreDataWillBeSent.set(false);\n          }\n          writer.flush();\n        }\n catch (        Exception ex) {\n          moreDataWillBeSent.set(false);\n        }\n      }\n    }\n  }\n);\n  while (moreDataWillBeSent.get() && !isDestroyed) {\n    try {\n      Thread.sleep(pausePollerThreadDelayInMs);\n      writer.print(\"ping: \\n\\n\");\n      if (writer.checkError()) {\n        moreDataWillBeSent.set(false);\n      }\n      writer.flush();\n    }\n catch (    Exception ex) {\n      moreDataWillBeSent.set(false);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3225,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (numberConnections > maxNumberConnectionsAllowed) {\n  response.sendError(503,\"MaxConcurrentConnections reached: \" + maxNumberConnectionsAllowed);\n}\n else {\n  response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n  response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n  response.setHeader(\"Pragma\",\"no-cache\");\n  final PrintWriter writer=response.getWriter();\n  sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n      moreDataWillBeSent.set(false);\n    }\n    @Override public void onError(    Throwable e){\n      moreDataWillBeSent.set(false);\n    }\n    @Override public void onNext(    String sampleDataAsString){\n      if (sampleDataAsString != null) {\n        try {\n          writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n          if (writer.checkError()) {\n            moreDataWillBeSent.set(false);\n          }\n          writer.flush();\n        }\n catch (        Exception ex) {\n          moreDataWillBeSent.set(false);\n        }\n      }\n    }\n  }\n);\n  while (moreDataWillBeSent.get() && !isDestroyed) {\n    try {\n      Thread.sleep(pausePollerThreadDelayInMs);\n      writer.print(\"ping: \\n\\n\");\n      if (writer.checkError()) {\n        moreDataWillBeSent.set(false);\n      }\n      writer.flush();\n    }\n catch (    Exception ex) {\n      moreDataWillBeSent.set(false);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 192,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3397,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int maxNumberConnectionsAllowed=getMaxNumberConcurrentConnectionsAllowed();\n  if (numberConnections > maxNumberConnectionsAllowed) {\n    response.sendError(503,\"MaxConcurrentConnections reached: \" + maxNumberConnectionsAllowed);\n  }\n else {\n    response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n    response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n    response.setHeader(\"Pragma\",\"no-cache\");\n    final PrintWriter writer=response.getWriter();\n    sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n      @Override public void onCompleted(){\n        logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n        moreDataWillBeSent.set(false);\n      }\n      @Override public void onError(      Throwable e){\n        moreDataWillBeSent.set(false);\n      }\n      @Override public void onNext(      String sampleDataAsString){\n        if (sampleDataAsString != null) {\n          try {\n            writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n            if (writer.checkError()) {\n              moreDataWillBeSent.set(false);\n            }\n            writer.flush();\n          }\n catch (          Exception ex) {\n            moreDataWillBeSent.set(false);\n          }\n        }\n      }\n    }\n);\n    while (moreDataWillBeSent.get() && !isDestroyed) {\n      try {\n        Thread.sleep(pausePollerThreadDelayInMs);\n        writer.print(\"ping: \\n\\n\");\n        if (writer.checkError()) {\n          moreDataWillBeSent.set(false);\n        }\n        writer.flush();\n      }\n catch (      Exception ex) {\n        moreDataWillBeSent.set(false);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3624,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int maxNumberConnectionsAllowed=getMaxNumberConcurrentConnectionsAllowed();\n  if (numberConnections > maxNumberConnectionsAllowed) {\n    response.sendError(503,\"MaxConcurrentConnections reached: \" + maxNumberConnectionsAllowed);\n  }\n else {\n    response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n    response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n    response.setHeader(\"Pragma\",\"no-cache\");\n    final PrintWriter writer=response.getWriter();\n    sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n      @Override public void onCompleted(){\n        logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n        moreDataWillBeSent.set(false);\n      }\n      @Override public void onError(      Throwable e){\n        moreDataWillBeSent.set(false);\n      }\n      @Override public void onNext(      String sampleDataAsString){\n        if (sampleDataAsString != null) {\n          try {\n            writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n            if (writer.checkError()) {\n              moreDataWillBeSent.set(false);\n            }\n            writer.flush();\n          }\n catch (          Exception ex) {\n            moreDataWillBeSent.set(false);\n          }\n        }\n      }\n    }\n);\n    while (moreDataWillBeSent.get() && !isDestroyed) {\n      try {\n        Thread.sleep(pausePollerThreadDelayInMs);\n        writer.print(\"ping: \\n\\n\");\n        if (writer.checkError()) {\n          moreDataWillBeSent.set(false);\n        }\n        writer.flush();\n      }\n catch (      Exception ex) {\n        moreDataWillBeSent.set(false);\n      }\n    }\n  }\n}\n  finally {\n  decrementCurrentConcurrentConnections();\n  if (sampleSubscription != null && !sampleSubscription.isUnsubscribed()) {\n    sampleSubscription.unsubscribe();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 218,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3912,
        "startLineNumber" : 112,
        "startColumnNumber" : 132,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicBoolean moreDataWillBeSent=new AtomicBoolean(true);\n  Subscription sampleSubscription=null;\n  int numberConnections=incrementAndGetCurrentConcurrentConnections();\n  try {\n    int maxNumberConnectionsAllowed=getMaxNumberConcurrentConnectionsAllowed();\n    if (numberConnections > maxNumberConnectionsAllowed) {\n      response.sendError(503,\"MaxConcurrentConnections reached: \" + maxNumberConnectionsAllowed);\n    }\n else {\n      response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n      response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n      response.setHeader(\"Pragma\",\"no-cache\");\n      final PrintWriter writer=response.getWriter();\n      sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n        @Override public void onCompleted(){\n          logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n          moreDataWillBeSent.set(false);\n        }\n        @Override public void onError(        Throwable e){\n          moreDataWillBeSent.set(false);\n        }\n        @Override public void onNext(        String sampleDataAsString){\n          if (sampleDataAsString != null) {\n            try {\n              writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n              if (writer.checkError()) {\n                moreDataWillBeSent.set(false);\n              }\n              writer.flush();\n            }\n catch (            Exception ex) {\n              moreDataWillBeSent.set(false);\n            }\n          }\n        }\n      }\n);\n      while (moreDataWillBeSent.get() && !isDestroyed) {\n        try {\n          Thread.sleep(pausePollerThreadDelayInMs);\n          writer.print(\"ping: \\n\\n\");\n          if (writer.checkError()) {\n            moreDataWillBeSent.set(false);\n          }\n          writer.flush();\n        }\n catch (        Exception ex) {\n          moreDataWillBeSent.set(false);\n        }\n      }\n    }\n  }\n  finally {\n    decrementCurrentConcurrentConnections();\n    if (sampleSubscription != null && !sampleSubscription.isUnsubscribed()) {\n      sampleSubscription.unsubscribe();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4460,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * - maintain an open connection with the client - on initial connection send latest data of each requested event type - subsequently send all changes for each requested event type\n * @param request  incoming HTTP Request\n * @param response outgoing HTTP Response (as a streaming response)\n * @throws javax.servlet.ServletException\n * @throws java.io.IOException\n */\nprivate void handleRequest(HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {\n  final AtomicBoolean moreDataWillBeSent=new AtomicBoolean(true);\n  Subscription sampleSubscription=null;\n  int numberConnections=incrementAndGetCurrentConcurrentConnections();\n  try {\n    int maxNumberConnectionsAllowed=getMaxNumberConcurrentConnectionsAllowed();\n    if (numberConnections > maxNumberConnectionsAllowed) {\n      response.sendError(503,\"MaxConcurrentConnections reached: \" + maxNumberConnectionsAllowed);\n    }\n else {\n      response.setHeader(\"Content-Type\",\"text/event-stream;charset=UTF-8\");\n      response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n      response.setHeader(\"Pragma\",\"no-cache\");\n      final PrintWriter writer=response.getWriter();\n      sampleSubscription=sampleStream.observeOn(Schedulers.io()).subscribe(new Subscriber<String>(){\n        @Override public void onCompleted(){\n          logger.error(\"HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream\",getClass().getSimpleName());\n          moreDataWillBeSent.set(false);\n        }\n        @Override public void onError(        Throwable e){\n          moreDataWillBeSent.set(false);\n        }\n        @Override public void onNext(        String sampleDataAsString){\n          if (sampleDataAsString != null) {\n            try {\n              writer.print(\"data: \" + sampleDataAsString + \"\\n\\n\");\n              if (writer.checkError()) {\n                moreDataWillBeSent.set(false);\n              }\n              writer.flush();\n            }\n catch (            Exception ex) {\n              moreDataWillBeSent.set(false);\n            }\n          }\n        }\n      }\n);\n      while (moreDataWillBeSent.get() && !isDestroyed) {\n        try {\n          Thread.sleep(pausePollerThreadDelayInMs);\n          writer.print(\"ping: \\n\\n\");\n          if (writer.checkError()) {\n            moreDataWillBeSent.set(false);\n          }\n          writer.flush();\n        }\n catch (        Exception ex) {\n          moreDataWillBeSent.set(false);\n        }\n      }\n    }\n  }\n  finally {\n    decrementCurrentConcurrentConnections();\n    if (sampleSubscription != null && !sampleSubscription.isUnsubscribed()) {\n      sampleSubscription.unsubscribe();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 102
      },
      "nodeContext" : "response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 125,
    "startColumnNumber" : 35,
    "endLineNumber" : 125,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}