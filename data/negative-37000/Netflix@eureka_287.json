{
  "id" : 287,
  "expression" : "goodResolver",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-client/src/test/java/com/netflix/eureka2/client/resolver/ServerResolverFailoverChainTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "goodResolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 33,
      "startColumnNumber" : 68,
      "endLineNumber" : 33,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 33,
        "startColumnNumber" : 34,
        "endLineNumber" : 33,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ServerResolvers.failoverChainFrom(goodResolver,brokenResolver)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 33,
        "startColumnNumber" : 23,
        "endLineNumber" : 33,
        "endColumnNumber" : 97
      },
      "nodeContext" : "resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 17,
        "startColumnNumber" : 64,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Server serverA=new Server(\"hostA\",123);\n  ServerResolver goodResolver=ServerResolvers.from(serverA);\n  ServerResolver brokenResolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.error(new Exception(\"resolver error\"));\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n  resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFailoverToSecondResolver() throws Exception {\n  Server serverA=new Server(\"hostA\",123);\n  ServerResolver goodResolver=ServerResolvers.from(serverA);\n  ServerResolver brokenResolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.error(new Exception(\"resolver error\"));\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n  resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolver"
  }, {
    "nodeContext" : "goodResolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 37,
      "startColumnNumber" : 69,
      "endLineNumber" : 37,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 37,
        "startColumnNumber" : 19,
        "endLineNumber" : 37,
        "endColumnNumber" : 82
      },
      "nodeContext" : "ServerResolvers.failoverChainFrom(brokenResolver,goodResolver)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 82
      },
      "nodeContext" : "resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 83
      },
      "nodeContext" : "resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 17,
        "startColumnNumber" : 64,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Server serverA=new Server(\"hostA\",123);\n  ServerResolver goodResolver=ServerResolvers.from(serverA);\n  ServerResolver brokenResolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.error(new Exception(\"resolver error\"));\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n  resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFailoverToSecondResolver() throws Exception {\n  Server serverA=new Server(\"hostA\",123);\n  ServerResolver goodResolver=ServerResolvers.from(serverA);\n  ServerResolver brokenResolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.error(new Exception(\"resolver error\"));\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ServerResolver resolver=ServerResolvers.failoverChainFrom(goodResolver,brokenResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n  resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n  assertThat(takeNext(resolver),is(equalTo(serverA)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 83
      },
      "nodeContext" : "resolver=ServerResolvers.failoverChainFrom(brokenResolver,goodResolver);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolver"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 33,
    "startColumnNumber" : 68,
    "endLineNumber" : 33,
    "endColumnNumber" : 80
  }, {
    "charLength" : 12,
    "startLineNumber" : 37,
    "startColumnNumber" : 69,
    "endLineNumber" : 37,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}