{
  "id" : 324,
  "expression" : "ConfigurableApplicationContext",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ConfigurableApplicationContext",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 445,
      "startColumnNumber" : 20,
      "endLineNumber" : 445,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 445,
        "startColumnNumber" : 20,
        "endLineNumber" : 445,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 444,
        "startColumnNumber" : 40,
        "endLineNumber" : 445,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 444,
        "startColumnNumber" : 16,
        "endLineNumber" : 445,
        "endColumnNumber" : 78
      },
      "nodeContext" : "typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 444,
        "startColumnNumber" : 16,
        "endLineNumber" : 445,
        "endColumnNumber" : 79
      },
      "nodeContext" : "typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 443,
        "startColumnNumber" : 19,
        "endLineNumber" : 446,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 440,
        "startColumnNumber" : 12,
        "endLineNumber" : 446,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n  typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n}\n else {\n  typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 437,
        "startColumnNumber" : 48,
        "endLineNumber" : 457,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] typeAliasPackageArray;\n  if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n    typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n  }\n else {\n    typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  }\n  if (typeAliasPackageArray == null) {\n    throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n  }\n  for (  String packageToScan : typeAliasPackageArray) {\n    configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 437,
        "startColumnNumber" : 8,
        "endLineNumber" : 457,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hasLength(this.typeAliasesPackage)) {\n  String[] typeAliasPackageArray;\n  if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n    typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n  }\n else {\n    typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  }\n  if (typeAliasPackageArray == null) {\n    throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n  }\n  for (  String packageToScan : typeAliasPackageArray) {\n    configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8921,
        "startLineNumber" : 398,
        "startColumnNumber" : 74,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 847,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9436,
        "startLineNumber" : 388,
        "startColumnNumber" : 4,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Build a  {@code SqlSessionFactory} instance.<p> The default implementation uses the standard MyBatis  {@code XMLConfigBuilder} API to build a{@code SqlSessionFactory} instance based on an Reader.Since 1.3.0, it can be specified a  {@link Configuration} instance directly(without config file).\n * @return SqlSessionFactory\n * @throws IOException if loading the config file failed\n */\nprotected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 855,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 445,
        "startColumnNumber" : 20,
        "endLineNumber" : 445,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "ConfigurableApplicationContext",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 467,
      "startColumnNumber" : 20,
      "endLineNumber" : 467,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 467,
        "startColumnNumber" : 20,
        "endLineNumber" : 467,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 466,
        "startColumnNumber" : 49,
        "endLineNumber" : 467,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 466,
        "startColumnNumber" : 25,
        "endLineNumber" : 467,
        "endColumnNumber" : 78
      },
      "nodeContext" : "typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 466,
        "startColumnNumber" : 16,
        "endLineNumber" : 467,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 465,
        "startColumnNumber" : 19,
        "endLineNumber" : 475,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  if (typeEnumsPackageArray == null) {\n    throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n  }\n  classes=new HashSet<Class>();\n  for (  String typePackage : typeEnumsPackageArray) {\n    classes.addAll(PackageHelper.scanTypePackage(typePackage));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 792,
        "startLineNumber" : 462,
        "startColumnNumber" : 12,
        "endLineNumber" : 475,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n  classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n}\n else {\n  String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  if (typeEnumsPackageArray == null) {\n    throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n  }\n  classes=new HashSet<Class>();\n  for (  String typePackage : typeEnumsPackageArray) {\n    classes.addAll(PackageHelper.scanTypePackage(typePackage));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1535,
        "startLineNumber" : 460,
        "startColumnNumber" : 46,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Set<Class> classes=null;\n  if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n    classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n  }\n else {\n    String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    if (typeEnumsPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n    }\n    classes=new HashSet<Class>();\n    for (    String typePackage : typeEnumsPackageArray) {\n      classes.addAll(PackageHelper.scanTypePackage(typePackage));\n    }\n  }\n  TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n  for (  Class cls : classes) {\n    if (cls.isEnum()) {\n      if (IEnum.class.isAssignableFrom(cls)) {\n        typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n      }\n else {\n        typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 460,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hasLength(this.typeEnumsPackage)) {\n  Set<Class> classes=null;\n  if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n    classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n  }\n else {\n    String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    if (typeEnumsPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n    }\n    classes=new HashSet<Class>();\n    for (    String typePackage : typeEnumsPackageArray) {\n      classes.addAll(PackageHelper.scanTypePackage(typePackage));\n    }\n  }\n  TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n  for (  Class cls : classes) {\n    if (cls.isEnum()) {\n      if (IEnum.class.isAssignableFrom(cls)) {\n        typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n      }\n else {\n        typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8921,
        "startLineNumber" : 398,
        "startColumnNumber" : 74,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 847,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9436,
        "startLineNumber" : 388,
        "startColumnNumber" : 4,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Build a  {@code SqlSessionFactory} instance.<p> The default implementation uses the standard MyBatis  {@code XMLConfigBuilder} API to build a{@code SqlSessionFactory} instance based on an Reader.Since 1.3.0, it can be specified a  {@link Configuration} instance directly(without config file).\n * @return SqlSessionFactory\n * @throws IOException if loading the config file failed\n */\nprotected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 855,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 467,
        "startColumnNumber" : 20,
        "endLineNumber" : 467,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "ConfigurableApplicationContext",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 510,
      "startColumnNumber" : 16,
      "endLineNumber" : 510,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 510,
        "startColumnNumber" : 16,
        "endLineNumber" : 510,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 509,
        "startColumnNumber" : 48,
        "endLineNumber" : 510,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 509,
        "startColumnNumber" : 21,
        "endLineNumber" : 510,
        "endColumnNumber" : 74
      },
      "nodeContext" : "typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 509,
        "startColumnNumber" : 12,
        "endLineNumber" : 510,
        "endColumnNumber" : 75
      },
      "nodeContext" : "String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 508,
        "startColumnNumber" : 49,
        "endLineNumber" : 517,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  for (  String packageToScan : typeHandlersPackageArray) {\n    configuration.getTypeHandlerRegistry().register(packageToScan);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 508,
        "startColumnNumber" : 8,
        "endLineNumber" : 517,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hasLength(this.typeHandlersPackage)) {\n  String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n  for (  String packageToScan : typeHandlersPackageArray) {\n    configuration.getTypeHandlerRegistry().register(packageToScan);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8921,
        "startLineNumber" : 398,
        "startColumnNumber" : 74,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 847,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9436,
        "startLineNumber" : 388,
        "startColumnNumber" : 4,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Build a  {@code SqlSessionFactory} instance.<p> The default implementation uses the standard MyBatis  {@code XMLConfigBuilder} API to build a{@code SqlSessionFactory} instance based on an Reader.Since 1.3.0, it can be specified a  {@link Configuration} instance directly(without config file).\n * @return SqlSessionFactory\n * @throws IOException if loading the config file failed\n */\nprotected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 855,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 510,
        "startColumnNumber" : 16,
        "endLineNumber" : 510,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 445,
    "startColumnNumber" : 20,
    "endLineNumber" : 445,
    "endColumnNumber" : 50
  }, {
    "charLength" : 30,
    "startLineNumber" : 467,
    "startColumnNumber" : 20,
    "endLineNumber" : 467,
    "endColumnNumber" : 50
  }, {
    "charLength" : 30,
    "startLineNumber" : 510,
    "startColumnNumber" : 16,
    "endLineNumber" : 510,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}