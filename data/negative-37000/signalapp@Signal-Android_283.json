{
  "id" : 283,
  "expression" : "backupPassword == null",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/jobs/LocalBackupJobApi29.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "backupPassword == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 103,
      "startColumnNumber" : 10,
      "endLineNumber" : 103,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (backupPassword == null) {\n  throw new IOException(\"Backup password is null\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2567,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  notification.setIndeterminateProgress();\n  String backupPassword=BackupPassphrase.get(context);\n  DocumentFile backupDirectory=DocumentFile.fromTreeUri(context,backupDirectoryUri);\n  String timestamp=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US).format(new Date());\n  String fileName=String.format(\"signal-%s.backup\",timestamp);\n  if (backupDirectory == null || !backupDirectory.canWrite()) {\n    BackupFileIOError.ACCESS_ERROR.postNotification(context);\n    throw new IOException(\"Cannot write to backup directory location.\");\n  }\n  deleteOldTemporaryBackups(backupDirectory);\n  if (backupDirectory.findFile(fileName) != null) {\n    throw new IOException(\"Backup file already exists!\");\n  }\n  String temporaryName=String.format(Locale.US,\"%s%s%s\",TEMP_BACKUP_FILE_PREFIX,UUID.randomUUID(),TEMP_BACKUP_FILE_SUFFIX);\n  DocumentFile temporaryFile=backupDirectory.createFile(\"application/octet-stream\",temporaryName);\n  if (temporaryFile == null) {\n    throw new IOException(\"Failed to create temporary backup file.\");\n  }\n  if (backupPassword == null) {\n    throw new IOException(\"Backup password is null\");\n  }\n  try {\n    FullBackupExporter.export(context,AttachmentSecretProvider.getInstance(context).getOrCreateAttachmentSecret(),DatabaseFactory.getBackupDatabase(context),temporaryFile,backupPassword,this::isCanceled);\n    if (!temporaryFile.renameTo(fileName)) {\n      Log.w(TAG,\"Failed to rename temp file\");\n      throw new IOException(\"Renaming temporary backup file failed!\");\n    }\n  }\n catch (  FullBackupExporter.BackupCanceledException e) {\n    Log.w(TAG,\"Backup cancelled\");\n    throw e;\n  }\ncatch (  IOException e) {\n    Log.w(TAG,\"Error during backup!\",e);\n    BackupFileIOError.postNotificationForException(context,e,getRunAttempt());\n    throw e;\n  }\n finally {\n    DocumentFile fileToCleanUp=backupDirectory.findFile(temporaryName);\n    if (fileToCleanUp != null) {\n      if (fileToCleanUp.delete()) {\n        Log.w(TAG,\"Backup failed. Deleted temp file\");\n      }\n else {\n        Log.w(TAG,\"Backup failed. Failed to delete temp file \" + temporaryName);\n      }\n    }\n  }\n  BackupUtil.deleteOldBackups();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3064,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (NotificationController notification=GenericForegroundService.startForegroundTask(context,context.getString(R.string.LocalBackupJob_creating_backup),NotificationChannels.BACKUPS,R.drawable.ic_signal_backup)){\n  notification.setIndeterminateProgress();\n  String backupPassword=BackupPassphrase.get(context);\n  DocumentFile backupDirectory=DocumentFile.fromTreeUri(context,backupDirectoryUri);\n  String timestamp=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US).format(new Date());\n  String fileName=String.format(\"signal-%s.backup\",timestamp);\n  if (backupDirectory == null || !backupDirectory.canWrite()) {\n    BackupFileIOError.ACCESS_ERROR.postNotification(context);\n    throw new IOException(\"Cannot write to backup directory location.\");\n  }\n  deleteOldTemporaryBackups(backupDirectory);\n  if (backupDirectory.findFile(fileName) != null) {\n    throw new IOException(\"Backup file already exists!\");\n  }\n  String temporaryName=String.format(Locale.US,\"%s%s%s\",TEMP_BACKUP_FILE_PREFIX,UUID.randomUUID(),TEMP_BACKUP_FILE_SUFFIX);\n  DocumentFile temporaryFile=backupDirectory.createFile(\"application/octet-stream\",temporaryName);\n  if (temporaryFile == null) {\n    throw new IOException(\"Failed to create temporary backup file.\");\n  }\n  if (backupPassword == null) {\n    throw new IOException(\"Backup password is null\");\n  }\n  try {\n    FullBackupExporter.export(context,AttachmentSecretProvider.getInstance(context).getOrCreateAttachmentSecret(),DatabaseFactory.getBackupDatabase(context),temporaryFile,backupPassword,this::isCanceled);\n    if (!temporaryFile.renameTo(fileName)) {\n      Log.w(TAG,\"Failed to rename temp file\");\n      throw new IOException(\"Renaming temporary backup file failed!\");\n    }\n  }\n catch (  FullBackupExporter.BackupCanceledException e) {\n    Log.w(TAG,\"Backup cancelled\");\n    throw e;\n  }\ncatch (  IOException e) {\n    Log.w(TAG,\"Error during backup!\",e);\n    BackupFileIOError.postNotificationForException(context,e,getRunAttempt());\n    throw e;\n  }\n finally {\n    DocumentFile fileToCleanUp=backupDirectory.findFile(temporaryName);\n    if (fileToCleanUp != null) {\n      if (fileToCleanUp.delete()) {\n        Log.w(TAG,\"Backup failed. Deleted temp file\");\n      }\n else {\n        Log.w(TAG,\"Backup failed. Failed to delete temp file \" + temporaryName);\n      }\n    }\n  }\n  BackupUtil.deleteOldBackups();\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 281,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3519,
        "startLineNumber" : 59,
        "startColumnNumber" : 41,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Log.i(TAG,\"Executing backup job...\");\n  BackupFileIOError.clearNotification(context);\n  if (!BackupUtil.isUserSelectionRequired(context)) {\n    throw new IOException(\"Wrong backup job!\");\n  }\n  Uri backupDirectoryUri=SignalStore.settings().getSignalBackupDirectory();\n  if (backupDirectoryUri == null || backupDirectoryUri.getPath() == null) {\n    throw new IOException(\"Backup Directory has not been selected!\");\n  }\n  try (NotificationController notification=GenericForegroundService.startForegroundTask(context,context.getString(R.string.LocalBackupJob_creating_backup),NotificationChannels.BACKUPS,R.drawable.ic_signal_backup)){\n    notification.setIndeterminateProgress();\n    String backupPassword=BackupPassphrase.get(context);\n    DocumentFile backupDirectory=DocumentFile.fromTreeUri(context,backupDirectoryUri);\n    String timestamp=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US).format(new Date());\n    String fileName=String.format(\"signal-%s.backup\",timestamp);\n    if (backupDirectory == null || !backupDirectory.canWrite()) {\n      BackupFileIOError.ACCESS_ERROR.postNotification(context);\n      throw new IOException(\"Cannot write to backup directory location.\");\n    }\n    deleteOldTemporaryBackups(backupDirectory);\n    if (backupDirectory.findFile(fileName) != null) {\n      throw new IOException(\"Backup file already exists!\");\n    }\n    String temporaryName=String.format(Locale.US,\"%s%s%s\",TEMP_BACKUP_FILE_PREFIX,UUID.randomUUID(),TEMP_BACKUP_FILE_SUFFIX);\n    DocumentFile temporaryFile=backupDirectory.createFile(\"application/octet-stream\",temporaryName);\n    if (temporaryFile == null) {\n      throw new IOException(\"Failed to create temporary backup file.\");\n    }\n    if (backupPassword == null) {\n      throw new IOException(\"Backup password is null\");\n    }\n    try {\n      FullBackupExporter.export(context,AttachmentSecretProvider.getInstance(context).getOrCreateAttachmentSecret(),DatabaseFactory.getBackupDatabase(context),temporaryFile,backupPassword,this::isCanceled);\n      if (!temporaryFile.renameTo(fileName)) {\n        Log.w(TAG,\"Failed to rename temp file\");\n        throw new IOException(\"Renaming temporary backup file failed!\");\n      }\n    }\n catch (    FullBackupExporter.BackupCanceledException e) {\n      Log.w(TAG,\"Backup cancelled\");\n      throw e;\n    }\ncatch (    IOException e) {\n      Log.w(TAG,\"Error during backup!\",e);\n      BackupFileIOError.postNotificationForException(context,e,getRunAttempt());\n      throw e;\n    }\n finally {\n      DocumentFile fileToCleanUp=backupDirectory.findFile(temporaryName);\n      if (fileToCleanUp != null) {\n        if (fileToCleanUp.delete()) {\n          Log.w(TAG,\"Backup failed. Deleted temp file\");\n        }\n else {\n          Log.w(TAG,\"Backup failed. Failed to delete temp file \" + temporaryName);\n        }\n      }\n    }\n    BackupUtil.deleteOldBackups();\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 331,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3570,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onRun() throws IOException {\n  Log.i(TAG,\"Executing backup job...\");\n  BackupFileIOError.clearNotification(context);\n  if (!BackupUtil.isUserSelectionRequired(context)) {\n    throw new IOException(\"Wrong backup job!\");\n  }\n  Uri backupDirectoryUri=SignalStore.settings().getSignalBackupDirectory();\n  if (backupDirectoryUri == null || backupDirectoryUri.getPath() == null) {\n    throw new IOException(\"Backup Directory has not been selected!\");\n  }\n  try (NotificationController notification=GenericForegroundService.startForegroundTask(context,context.getString(R.string.LocalBackupJob_creating_backup),NotificationChannels.BACKUPS,R.drawable.ic_signal_backup)){\n    notification.setIndeterminateProgress();\n    String backupPassword=BackupPassphrase.get(context);\n    DocumentFile backupDirectory=DocumentFile.fromTreeUri(context,backupDirectoryUri);\n    String timestamp=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US).format(new Date());\n    String fileName=String.format(\"signal-%s.backup\",timestamp);\n    if (backupDirectory == null || !backupDirectory.canWrite()) {\n      BackupFileIOError.ACCESS_ERROR.postNotification(context);\n      throw new IOException(\"Cannot write to backup directory location.\");\n    }\n    deleteOldTemporaryBackups(backupDirectory);\n    if (backupDirectory.findFile(fileName) != null) {\n      throw new IOException(\"Backup file already exists!\");\n    }\n    String temporaryName=String.format(Locale.US,\"%s%s%s\",TEMP_BACKUP_FILE_PREFIX,UUID.randomUUID(),TEMP_BACKUP_FILE_SUFFIX);\n    DocumentFile temporaryFile=backupDirectory.createFile(\"application/octet-stream\",temporaryName);\n    if (temporaryFile == null) {\n      throw new IOException(\"Failed to create temporary backup file.\");\n    }\n    if (backupPassword == null) {\n      throw new IOException(\"Backup password is null\");\n    }\n    try {\n      FullBackupExporter.export(context,AttachmentSecretProvider.getInstance(context).getOrCreateAttachmentSecret(),DatabaseFactory.getBackupDatabase(context),temporaryFile,backupPassword,this::isCanceled);\n      if (!temporaryFile.renameTo(fileName)) {\n        Log.w(TAG,\"Failed to rename temp file\");\n        throw new IOException(\"Renaming temporary backup file failed!\");\n      }\n    }\n catch (    FullBackupExporter.BackupCanceledException e) {\n      Log.w(TAG,\"Backup cancelled\");\n      throw e;\n    }\ncatch (    IOException e) {\n      Log.w(TAG,\"Error during backup!\",e);\n      BackupFileIOError.postNotificationForException(context,e,getRunAttempt());\n      throw e;\n    }\n finally {\n      DocumentFile fileToCleanUp=backupDirectory.findFile(temporaryName);\n      if (fileToCleanUp != null) {\n        if (fileToCleanUp.delete()) {\n          Log.w(TAG,\"Backup failed. Deleted temp file\");\n        }\n else {\n          Log.w(TAG,\"Backup failed. Failed to delete temp file \" + temporaryName);\n        }\n      }\n    }\n    BackupUtil.deleteOldBackups();\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 339,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (backupPassword == null) {\n  throw new IOException(\"Backup password is null\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 103,
    "startColumnNumber" : 10,
    "endLineNumber" : 103,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}