{
  "id" : 473,
  "expression" : "arguments.length",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arguments.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 80,
      "startColumnNumber" : 28,
      "endLineNumber" : 80,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 24,
        "endLineNumber" : 80,
        "endColumnNumber" : 44
      },
      "nodeContext" : "i < arguments.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < arguments.length; i++) {\n  ArgumentMatcher<?> matcher=matchers.get(i);\n  Object argument=arguments[i];\n  if (!action.apply(matcher,argument)) {\n    return false;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 76,
        "startColumnNumber" : 75,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (matchingType == ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS)   return false;\n  Object[] arguments=invocation.getArguments();\n  for (int i=0; i < arguments.length; i++) {\n    ArgumentMatcher<?> matcher=matchers.get(i);\n    Object argument=arguments[i];\n    if (!action.apply(matcher,argument)) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Applies the given  {@link ArgumentMatcherAction} to all arguments andcorresponding matchers\n * @param action must not be <code>null</code>\n * @return <ul> <li><code>true</code> if the given <b>action</b> returned <code>true</code> for all arguments and matchers passed to it. <li><code>false</code> if the given <b>action</b> returned <code>false</code> for one of the passed arguments and matchers <li><code>false</code> if the given matchers don't fit to the given invocation because too many or to few matchers are available. </ul>\n */\npublic boolean forEachMatcherAndArgument(ArgumentMatcherAction action){\n  if (matchingType == ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS)   return false;\n  Object[] arguments=invocation.getArguments();\n  for (int i=0; i < arguments.length; i++) {\n    ArgumentMatcher<?> matcher=matchers.get(i);\n    Object argument=arguments[i];\n    if (!action.apply(matcher,argument)) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 24,
        "endLineNumber" : 80,
        "endColumnNumber" : 44
      },
      "nodeContext" : "i < arguments.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 80,
    "startColumnNumber" : 28,
    "endLineNumber" : 80,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}