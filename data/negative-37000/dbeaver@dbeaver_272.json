{
  "id" : 272,
  "expression" : "prop instanceof ObjectPropertyDescriptor",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/controls/CustomFormEditor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "prop instanceof ObjectPropertyDescriptor",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 135,
      "startColumnNumber" : 45,
      "endLineNumber" : 135,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 135,
        "startColumnNumber" : 20,
        "endLineNumber" : 135,
        "endColumnNumber" : 85
      },
      "nodeContext" : "propertyValue == null && prop instanceof ObjectPropertyDescriptor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 135,
        "startColumnNumber" : 20,
        "endLineNumber" : 135,
        "endColumnNumber" : 135
      },
      "nodeContext" : "propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 130,
        "startColumnNumber" : 19,
        "endLineNumber" : 196,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n  Class<?> propType=prop.getDataType();\n  Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n  if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n    return;\n  }\n  Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n  String propDescription=prop.getDescription();\n  if (!CommonUtils.isEmpty(propDescription)) {\n    editControl.setToolTipText(propDescription);\n  }\n  if (editControl instanceof Button) {\n  }\n else {\n    GridData gd=(GridData)editControl.getLayoutData();\n    if (gd == null) {\n      gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n      editControl.setLayoutData(gd);\n    }\n    if (editControl instanceof Text || editControl instanceof Combo) {\n      gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n    }\n  }\n  editorMap.put(prop,editControl);\n  Control finalEditControl=editControl;\n  if (finalEditControl instanceof Combo) {\n    if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n      ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n        @Override public void widgetSelected(        SelectionEvent e){\n          updatePropertyValue(prop,((Combo)finalEditControl).getText());\n        }\n      }\n);\n    }\n else {\n      ((Combo)finalEditControl).addModifyListener(e -> {\n        try {\n          updatePropertyValue(prop,((Combo)finalEditControl).getText());\n        }\n catch (        Exception ex) {\n          log.debug(\"Error setting value from combo: \" + ex.getMessage());\n        }\n      }\n);\n    }\n  }\n else   if (finalEditControl instanceof Text) {\n    ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n  }\n else   if (finalEditControl instanceof Button) {\n    ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 355,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3702,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 196,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (prop == null) {\n  UIUtils.createEmptyLabel(group,2,1);\n}\n else {\n  boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n  Class<?> propType=prop.getDataType();\n  Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n  if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n    return;\n  }\n  Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n  String propDescription=prop.getDescription();\n  if (!CommonUtils.isEmpty(propDescription)) {\n    editControl.setToolTipText(propDescription);\n  }\n  if (editControl instanceof Button) {\n  }\n else {\n    GridData gd=(GridData)editControl.getLayoutData();\n    if (gd == null) {\n      gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n      editControl.setLayoutData(gd);\n    }\n    if (editControl instanceof Text || editControl instanceof Combo) {\n      gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n    }\n  }\n  editorMap.put(prop,editControl);\n  Control finalEditControl=editControl;\n  if (finalEditControl instanceof Combo) {\n    if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n      ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n        @Override public void widgetSelected(        SelectionEvent e){\n          updatePropertyValue(prop,((Combo)finalEditControl).getText());\n        }\n      }\n);\n    }\n else {\n      ((Combo)finalEditControl).addModifyListener(e -> {\n        try {\n          updatePropertyValue(prop,((Combo)finalEditControl).getText());\n        }\n catch (        Exception ex) {\n          log.debug(\"Error setting value from combo: \" + ex.getMessage());\n        }\n      }\n);\n    }\n  }\n else   if (finalEditControl instanceof Text) {\n    ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n  }\n else   if (finalEditControl instanceof Button) {\n    ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n      @Override public void widgetSelected(      SelectionEvent e){\n        updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 367,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3824,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean isReadOnlyCon=databaseObject == null || DBUtils.isReadOnly(databaseObject);\n  if (prop == null) {\n    UIUtils.createEmptyLabel(group,2,1);\n  }\n else {\n    boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n    Class<?> propType=prop.getDataType();\n    Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n    if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n      return;\n    }\n    Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n    String propDescription=prop.getDescription();\n    if (!CommonUtils.isEmpty(propDescription)) {\n      editControl.setToolTipText(propDescription);\n    }\n    if (editControl instanceof Button) {\n    }\n else {\n      GridData gd=(GridData)editControl.getLayoutData();\n      if (gd == null) {\n        gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n        editControl.setLayoutData(gd);\n      }\n      if (editControl instanceof Text || editControl instanceof Combo) {\n        gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n      }\n    }\n    editorMap.put(prop,editControl);\n    Control finalEditControl=editControl;\n    if (finalEditControl instanceof Combo) {\n      if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n        ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n          @Override public void widgetSelected(          SelectionEvent e){\n            updatePropertyValue(prop,((Combo)finalEditControl).getText());\n          }\n        }\n);\n      }\n else {\n        ((Combo)finalEditControl).addModifyListener(e -> {\n          try {\n            updatePropertyValue(prop,((Combo)finalEditControl).getText());\n          }\n catch (          Exception ex) {\n            log.debug(\"Error setting value from combo: \" + ex.getMessage());\n          }\n        }\n);\n      }\n    }\n else     if (finalEditControl instanceof Text) {\n      ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n    }\n else     if (finalEditControl instanceof Button) {\n      ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n        @Override public void widgetSelected(        SelectionEvent e){\n          updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n        }\n      }\n);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3879,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean isReadOnlyCon=databaseObject == null || DBUtils.isReadOnly(databaseObject);\n  if (prop == null) {\n    UIUtils.createEmptyLabel(group,2,1);\n  }\n else {\n    boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n    Class<?> propType=prop.getDataType();\n    Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n    if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n      return;\n    }\n    Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n    String propDescription=prop.getDescription();\n    if (!CommonUtils.isEmpty(propDescription)) {\n      editControl.setToolTipText(propDescription);\n    }\n    if (editControl instanceof Button) {\n    }\n else {\n      GridData gd=(GridData)editControl.getLayoutData();\n      if (gd == null) {\n        gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n        editControl.setLayoutData(gd);\n      }\n      if (editControl instanceof Text || editControl instanceof Combo) {\n        gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n      }\n    }\n    editorMap.put(prop,editControl);\n    Control finalEditControl=editControl;\n    if (finalEditControl instanceof Combo) {\n      if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n        ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n          @Override public void widgetSelected(          SelectionEvent e){\n            updatePropertyValue(prop,((Combo)finalEditControl).getText());\n          }\n        }\n);\n      }\n else {\n        ((Combo)finalEditControl).addModifyListener(e -> {\n          try {\n            updatePropertyValue(prop,((Combo)finalEditControl).getText());\n          }\n catch (          Exception ex) {\n            log.debug(\"Error setting value from combo: \" + ex.getMessage());\n          }\n        }\n);\n      }\n    }\n else     if (finalEditControl instanceof Text) {\n      ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n    }\n else     if (finalEditControl instanceof Button) {\n      ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n        @Override public void widgetSelected(        SelectionEvent e){\n          updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n        }\n      }\n);\n    }\n  }\n}\n  finally {\n  isLoading=false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 122,
        "startColumnNumber" : 82,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  isLoading=true;\n  try {\n    boolean isReadOnlyCon=databaseObject == null || DBUtils.isReadOnly(databaseObject);\n    if (prop == null) {\n      UIUtils.createEmptyLabel(group,2,1);\n    }\n else {\n      boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n      Class<?> propType=prop.getDataType();\n      Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n      if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n        return;\n      }\n      Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n      String propDescription=prop.getDescription();\n      if (!CommonUtils.isEmpty(propDescription)) {\n        editControl.setToolTipText(propDescription);\n      }\n      if (editControl instanceof Button) {\n      }\n else {\n        GridData gd=(GridData)editControl.getLayoutData();\n        if (gd == null) {\n          gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n          editControl.setLayoutData(gd);\n        }\n        if (editControl instanceof Text || editControl instanceof Combo) {\n          gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n        }\n      }\n      editorMap.put(prop,editControl);\n      Control finalEditControl=editControl;\n      if (finalEditControl instanceof Combo) {\n        if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n          ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n            @Override public void widgetSelected(            SelectionEvent e){\n              updatePropertyValue(prop,((Combo)finalEditControl).getText());\n            }\n          }\n);\n        }\n else {\n          ((Combo)finalEditControl).addModifyListener(e -> {\n            try {\n              updatePropertyValue(prop,((Combo)finalEditControl).getText());\n            }\n catch (            Exception ex) {\n              log.debug(\"Error setting value from combo: \" + ex.getMessage());\n            }\n          }\n);\n        }\n      }\n else       if (finalEditControl instanceof Text) {\n        ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n      }\n else       if (finalEditControl instanceof Button) {\n        ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n          @Override public void widgetSelected(          SelectionEvent e){\n            updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    isLoading=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4001,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void createPropertyEditor(Composite group,DBPPropertyDescriptor prop){\n  isLoading=true;\n  try {\n    boolean isReadOnlyCon=databaseObject == null || DBUtils.isReadOnly(databaseObject);\n    if (prop == null) {\n      UIUtils.createEmptyLabel(group,2,1);\n    }\n else {\n      boolean editable=!isReadOnlyCon && (prop.isEditable(propertySource.getEditableValue()) || (prop.getId().equals(DBConstants.PROP_ID_NAME) && supportsObjectRename()));\n      Class<?> propType=prop.getDataType();\n      Object propertyValue=propertySource.getPropertyValue(null,prop.getId());\n      if (propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()) {\n        return;\n      }\n      Control editControl=createEditorControl(group,propertySource.getEditableValue(),prop,propertyValue,!editable);\n      String propDescription=prop.getDescription();\n      if (!CommonUtils.isEmpty(propDescription)) {\n        editControl.setToolTipText(propDescription);\n      }\n      if (editControl instanceof Button) {\n      }\n else {\n        GridData gd=(GridData)editControl.getLayoutData();\n        if (gd == null) {\n          gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING);\n          editControl.setLayoutData(gd);\n        }\n        if (editControl instanceof Text || editControl instanceof Combo) {\n          gd.widthHint=Math.max(UIUtils.getFontHeight(group) * 15,editControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x);\n        }\n      }\n      editorMap.put(prop,editControl);\n      Control finalEditControl=editControl;\n      if (finalEditControl instanceof Combo) {\n        if ((finalEditControl.getStyle() & SWT.READ_ONLY) == SWT.READ_ONLY) {\n          ((Combo)finalEditControl).addSelectionListener(new SelectionAdapter(){\n            @Override public void widgetSelected(            SelectionEvent e){\n              updatePropertyValue(prop,((Combo)finalEditControl).getText());\n            }\n          }\n);\n        }\n else {\n          ((Combo)finalEditControl).addModifyListener(e -> {\n            try {\n              updatePropertyValue(prop,((Combo)finalEditControl).getText());\n            }\n catch (            Exception ex) {\n              log.debug(\"Error setting value from combo: \" + ex.getMessage());\n            }\n          }\n);\n        }\n      }\n else       if (finalEditControl instanceof Text) {\n        ((Text)finalEditControl).addModifyListener(e -> updatePropertyValue(prop,((Text)finalEditControl).getText()));\n      }\n else       if (finalEditControl instanceof Button) {\n        ((Button)finalEditControl).addSelectionListener(new SelectionAdapter(){\n          @Override public void widgetSelected(          SelectionEvent e){\n            updatePropertyValue(prop,((Button)finalEditControl).getSelection());\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    isLoading=false;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 135,
        "startColumnNumber" : 20,
        "endLineNumber" : 135,
        "endColumnNumber" : 135
      },
      "nodeContext" : "propertyValue == null && prop instanceof ObjectPropertyDescriptor && ((ObjectPropertyDescriptor)prop).isOptional()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 135,
    "startColumnNumber" : 45,
    "endLineNumber" : 135,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}