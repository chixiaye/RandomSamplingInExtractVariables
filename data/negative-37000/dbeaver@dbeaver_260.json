{
  "id" : 260,
  "expression" : "CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"))",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2Table.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 90,
      "startLineNumber" : 129,
      "startColumnNumber" : 24,
      "endLineNumber" : 129,
      "endColumnNumber" : 114
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 114
      },
      "nodeContext" : "this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 115
      },
      "nodeContext" : "this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2761,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super(monitor,schema,dbResult);\n  this.status=CommonUtils.valueOf(DB2TableStatus.class,JDBCUtils.safeGetString(dbResult,\"STATUS\"));\n  this.type=CommonUtils.valueOf(DB2TableType.class,JDBCUtils.safeGetString(dbResult,\"TYPE\"));\n  this.statsTime=JDBCUtils.safeGetTimestamp(dbResult,\"STATS_TIME\");\n  this.dataCapture=JDBCUtils.safeGetString(dbResult,\"DATACAPTURE\");\n  this.constChecked=JDBCUtils.safeGetString(dbResult,\"CONST_CHECKED\");\n  this.partitionMode=CommonUtils.valueOf(DB2TablePartitionMode.class,JDBCUtils.safeGetString(dbResult,\"PARTITION_MODE\"));\n  this.append=JDBCUtils.safeGetBoolean(dbResult,\"APPEND_MODE\",DB2YesNo.Y.name());\n  this.volatileMode=JDBCUtils.safeGetString(dbResult,\"VOLATILE\");\n  this.compression=CommonUtils.valueOf(DB2TableCompressionMode.class,JDBCUtils.safeGetString(dbResult,\"COMPRESSION\"));\n  this.accessMode=CommonUtils.valueOf(DB2TableAccessMode.class,JDBCUtils.safeGetString(dbResult,\"ACCESS_MODE\"));\n  this.mdcClustered=JDBCUtils.safeGetBoolean(dbResult,\"CLUSTERED\",DB2YesNo.Y.name());\n  this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"));\n  this.card=JDBCUtils.safeGetLongNullable(dbResult,\"CARD\");\n  this.nPages=JDBCUtils.safeGetLongNullable(dbResult,\"NPAGES\");\n  this.fPages=JDBCUtils.safeGetLongNullable(dbResult,\"FPAGES\");\n  this.overFLow=JDBCUtils.safeGetLongNullable(dbResult,\"OVERFLOW\");\n  this.invalidateTime=JDBCUtils.safeGetTimestamp(dbResult,\"INVALIDATE_TIME\");\n  this.lastRegenTime=JDBCUtils.safeGetTimestamp(dbResult,\"LAST_REGEN_TIME\");\n  if (getDataSource().isAtLeastV9_5()) {\n    this.alterTime=JDBCUtils.safeGetTimestamp(dbResult,\"ALTER_TIME\");\n  }\n  if (getDataSource().isAtLeastV10_1()) {\n    this.temporalType=CommonUtils.valueOf(DB2TableTemporalType.class,JDBCUtils.safeGetString(dbResult,\"TEMPORALTYPE\"));\n  }\n  String lockSizeString=JDBCUtils.safeGetString(dbResult,\"LOCKSIZE\");\n  if (CommonUtils.isNotEmpty(lockSizeString)) {\n    this.lockSize=CommonUtils.valueOf(DB2TableLockSize.class,lockSizeString);\n  }\n  this.tablespace=JDBCUtils.safeGetString(dbResult,\"TBSPACE\");\n  this.indexTablespace=JDBCUtils.safeGetString(dbResult,\"INDEX_TBSPACE\");\n  this.longTablespace=JDBCUtils.safeGetString(dbResult,\"LONG_TBSPACE\");\n  this.partitionCache=new JDBCObjectSimpleCache<>(DB2TablePartition.class,C_PT,schema.getName(),getName());\n  this.periodCache=new JDBCObjectSimpleCache<>(DB2TablePeriod.class,C_PE,schema.getName(),getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2866,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public DB2Table(DBRProgressMonitor monitor,DB2Schema schema,ResultSet dbResult) throws DBException {\n  super(monitor,schema,dbResult);\n  this.status=CommonUtils.valueOf(DB2TableStatus.class,JDBCUtils.safeGetString(dbResult,\"STATUS\"));\n  this.type=CommonUtils.valueOf(DB2TableType.class,JDBCUtils.safeGetString(dbResult,\"TYPE\"));\n  this.statsTime=JDBCUtils.safeGetTimestamp(dbResult,\"STATS_TIME\");\n  this.dataCapture=JDBCUtils.safeGetString(dbResult,\"DATACAPTURE\");\n  this.constChecked=JDBCUtils.safeGetString(dbResult,\"CONST_CHECKED\");\n  this.partitionMode=CommonUtils.valueOf(DB2TablePartitionMode.class,JDBCUtils.safeGetString(dbResult,\"PARTITION_MODE\"));\n  this.append=JDBCUtils.safeGetBoolean(dbResult,\"APPEND_MODE\",DB2YesNo.Y.name());\n  this.volatileMode=JDBCUtils.safeGetString(dbResult,\"VOLATILE\");\n  this.compression=CommonUtils.valueOf(DB2TableCompressionMode.class,JDBCUtils.safeGetString(dbResult,\"COMPRESSION\"));\n  this.accessMode=CommonUtils.valueOf(DB2TableAccessMode.class,JDBCUtils.safeGetString(dbResult,\"ACCESS_MODE\"));\n  this.mdcClustered=JDBCUtils.safeGetBoolean(dbResult,\"CLUSTERED\",DB2YesNo.Y.name());\n  this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"));\n  this.card=JDBCUtils.safeGetLongNullable(dbResult,\"CARD\");\n  this.nPages=JDBCUtils.safeGetLongNullable(dbResult,\"NPAGES\");\n  this.fPages=JDBCUtils.safeGetLongNullable(dbResult,\"FPAGES\");\n  this.overFLow=JDBCUtils.safeGetLongNullable(dbResult,\"OVERFLOW\");\n  this.invalidateTime=JDBCUtils.safeGetTimestamp(dbResult,\"INVALIDATE_TIME\");\n  this.lastRegenTime=JDBCUtils.safeGetTimestamp(dbResult,\"LAST_REGEN_TIME\");\n  if (getDataSource().isAtLeastV9_5()) {\n    this.alterTime=JDBCUtils.safeGetTimestamp(dbResult,\"ALTER_TIME\");\n  }\n  if (getDataSource().isAtLeastV10_1()) {\n    this.temporalType=CommonUtils.valueOf(DB2TableTemporalType.class,JDBCUtils.safeGetString(dbResult,\"TEMPORALTYPE\"));\n  }\n  String lockSizeString=JDBCUtils.safeGetString(dbResult,\"LOCKSIZE\");\n  if (CommonUtils.isNotEmpty(lockSizeString)) {\n    this.lockSize=CommonUtils.valueOf(DB2TableLockSize.class,lockSizeString);\n  }\n  this.tablespace=JDBCUtils.safeGetString(dbResult,\"TBSPACE\");\n  this.indexTablespace=JDBCUtils.safeGetString(dbResult,\"INDEX_TBSPACE\");\n  this.longTablespace=JDBCUtils.safeGetString(dbResult,\"LONG_TBSPACE\");\n  this.partitionCache=new JDBCObjectSimpleCache<>(DB2TablePartition.class,C_PT,schema.getName(),getName());\n  this.periodCache=new JDBCObjectSimpleCache<>(DB2TablePeriod.class,C_PE,schema.getName(),getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 380,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 115
      },
      "nodeContext" : "this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,\"DROPRULE\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "org.jkiss.dbeaver.ext.db2.model.dict.DB2TableDropRule"
  } ],
  "positionList" : [ {
    "charLength" : 90,
    "startLineNumber" : 129,
    "startColumnNumber" : 24,
    "endLineNumber" : 129,
    "endColumnNumber" : 114
  } ],
  "layoutRelationDataList" : [ ]
}