{
  "id" : 301,
  "expression" : "message.getMessageId()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/api/DeadLetterTopicTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "message.getMessageId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 104,
      "startColumnNumber" : 58,
      "endLineNumber" : 104,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 112
      },
      "nodeContext" : "log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 113
      },
      "nodeContext" : "log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 102,
        "startColumnNumber" : 11,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Message<byte[]> message=consumer.receive();\n  log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n  totalReceived++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 74
      },
      "nodeContext" : "do {\n  Message<byte[]> message=consumer.receive();\n  log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n  totalReceived++;\n}\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 66,
        "startColumnNumber" : 55,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/dead-letter-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/dead-letter-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2983,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(groups=\"quarantine\") public void testDeadLetterTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/dead-letter-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/dead-letter-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 341,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 113
      },
      "nodeContext" : "log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.client.api.MessageId"
  }, {
    "nodeContext" : "message.getMessageId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 111,
      "startColumnNumber" : 70,
      "endLineNumber" : 111,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 124
      },
      "nodeContext" : "log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 125
      },
      "nodeContext" : "log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 109,
        "startColumnNumber" : 11,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Message message=deadLetterConsumer.receive();\n  log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n  deadLetterConsumer.acknowledge(message);\n  totalInDeadLetter++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 51
      },
      "nodeContext" : "do {\n  Message message=deadLetterConsumer.receive();\n  log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n  deadLetterConsumer.acknowledge(message);\n  totalInDeadLetter++;\n}\n while (totalInDeadLetter < sendMessages);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 66,
        "startColumnNumber" : 55,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/dead-letter-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/dead-letter-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2983,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(groups=\"quarantine\") public void testDeadLetterTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/dead-letter-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/dead-letter-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 341,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 125
      },
      "nodeContext" : "log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.client.api.MessageId"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 104,
    "startColumnNumber" : 58,
    "endLineNumber" : 104,
    "endColumnNumber" : 80
  }, {
    "charLength" : 22,
    "startLineNumber" : 111,
    "startColumnNumber" : 70,
    "endLineNumber" : 111,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}