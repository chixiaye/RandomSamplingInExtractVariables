{
  "id" : 483,
  "expression" : "1",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/ghidra_scripts/CondenseFillerBytes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 85,
      "startColumnNumber" : 20,
      "endLineNumber" : 85,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 21
      },
      "nodeContext" : "fillerLen=1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int fillerLen=1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 82,
        "startColumnNumber" : 58,
        "endLineNumber" : 113,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int fillerLen=1;\n  String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n  AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n  AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n  while (addrIter.hasNext()) {\n    Address nextAddr=addrIter.next();\n    if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n      break;\n    }\n    ++fillerLen;\n  }\n  if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n    possibleAddrSet.add(fillerAddr);\n    println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n    continue;\n  }\n  listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n  println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 113,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (Arrays.equals(prgmFillerBytes,targetFillerBytes)) {\n  int fillerLen=1;\n  String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n  AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n  AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n  while (addrIter.hasNext()) {\n    Address nextAddr=addrIter.next();\n    if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n      break;\n    }\n    ++fillerLen;\n  }\n  if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n    possibleAddrSet.add(fillerAddr);\n    println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n    continue;\n  }\n  listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n  println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1691,
        "startLineNumber" : 70,
        "startColumnNumber" : 55,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Address fillerAddr=funcIter.next().getBody().getMaxAddress().next();\n  Data undefinedData=listing.getUndefinedDataAt(fillerAddr);\n  if (undefinedData == null) {\n    continue;\n  }\n  memory.getBytes(fillerAddr,prgmFillerBytes);\n  if (Arrays.equals(prgmFillerBytes,targetFillerBytes)) {\n    int fillerLen=1;\n    String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n    AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n    AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n    while (addrIter.hasNext()) {\n      Address nextAddr=addrIter.next();\n      if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n        break;\n      }\n      ++fillerLen;\n    }\n    if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n      possibleAddrSet.add(fillerAddr);\n      println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n      continue;\n    }\n    listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n    println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1744,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (funcIter.hasNext() && !monitor.isCancelled()) {\n  Address fillerAddr=funcIter.next().getBody().getMaxAddress().next();\n  Data undefinedData=listing.getUndefinedDataAt(fillerAddr);\n  if (undefinedData == null) {\n    continue;\n  }\n  memory.getBytes(fillerAddr,prgmFillerBytes);\n  if (Arrays.equals(prgmFillerBytes,targetFillerBytes)) {\n    int fillerLen=1;\n    String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n    AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n    AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n    while (addrIter.hasNext()) {\n      Address nextAddr=addrIter.next();\n      if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n        break;\n      }\n      ++fillerLen;\n    }\n    if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n      possibleAddrSet.add(fillerAddr);\n      println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n      continue;\n    }\n    listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n    println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3408,
        "startLineNumber" : 34,
        "startColumnNumber" : 36,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  listing=currentProgram.getListing();\n  memory=currentProgram.getMemory();\n  String filler=null;\n  AddressSet possibleAddrSet=new AddressSet();\n  int minBytes=askInt(\"CondenseFillerBytes\",\"Enter minimum number of sequential bytes to collapse\");\n  byte[] prgmFillerBytes=new byte[minBytes];\n  String fillValue=askString(\"CondenseFillerBytes - Enter Fill Value\",\"Enter fill byte to search for and collapse (Examples:  0, 00, 90, cc).  \" + \"\\\"Auto\\\" will make the program determine the value (by greatest count).  0x\",\"Auto\");\n  if (fillValue.equalsIgnoreCase(\"auto\")) {\n    filler=\"0x\" + determineFillerValue();\n  }\n else {\n    filler=\"0x\" + new String(fillValue);\n  }\n  println(\"filler byte chosen: \" + filler);\n  byte[] targetFillerBytes=new byte[minBytes];\n  byte fillerByte=Integer.decode(filler).byteValue();\n  Arrays.fill(targetFillerBytes,fillerByte);\n  FunctionIterator funcIter=listing.getFunctions(true);\n  while (funcIter.hasNext() && !monitor.isCancelled()) {\n    Address fillerAddr=funcIter.next().getBody().getMaxAddress().next();\n    Data undefinedData=listing.getUndefinedDataAt(fillerAddr);\n    if (undefinedData == null) {\n      continue;\n    }\n    memory.getBytes(fillerAddr,prgmFillerBytes);\n    if (Arrays.equals(prgmFillerBytes,targetFillerBytes)) {\n      int fillerLen=1;\n      String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n      AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n      AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n      while (addrIter.hasNext()) {\n        Address nextAddr=addrIter.next();\n        if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n          break;\n        }\n        ++fillerLen;\n      }\n      if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n        possibleAddrSet.add(fillerAddr);\n        println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n        continue;\n      }\n      listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n      println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n    }\n  }\n  if (!possibleAddrSet.isEmpty()) {\n    popup(\"Script complete.\\n\\n\" + \"Some additional possible filler bytes where the Alignment datatype could be applied were found.\\n\" + \"Press OK to see a table of these addresses.\");\n    show(\"Possible Addresses\",possibleAddrSet);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3455,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void run() throws Exception {\n  listing=currentProgram.getListing();\n  memory=currentProgram.getMemory();\n  String filler=null;\n  AddressSet possibleAddrSet=new AddressSet();\n  int minBytes=askInt(\"CondenseFillerBytes\",\"Enter minimum number of sequential bytes to collapse\");\n  byte[] prgmFillerBytes=new byte[minBytes];\n  String fillValue=askString(\"CondenseFillerBytes - Enter Fill Value\",\"Enter fill byte to search for and collapse (Examples:  0, 00, 90, cc).  \" + \"\\\"Auto\\\" will make the program determine the value (by greatest count).  0x\",\"Auto\");\n  if (fillValue.equalsIgnoreCase(\"auto\")) {\n    filler=\"0x\" + determineFillerValue();\n  }\n else {\n    filler=\"0x\" + new String(fillValue);\n  }\n  println(\"filler byte chosen: \" + filler);\n  byte[] targetFillerBytes=new byte[minBytes];\n  byte fillerByte=Integer.decode(filler).byteValue();\n  Arrays.fill(targetFillerBytes,fillerByte);\n  FunctionIterator funcIter=listing.getFunctions(true);\n  while (funcIter.hasNext() && !monitor.isCancelled()) {\n    Address fillerAddr=funcIter.next().getBody().getMaxAddress().next();\n    Data undefinedData=listing.getUndefinedDataAt(fillerAddr);\n    if (undefinedData == null) {\n      continue;\n    }\n    memory.getBytes(fillerAddr,prgmFillerBytes);\n    if (Arrays.equals(prgmFillerBytes,targetFillerBytes)) {\n      int fillerLen=1;\n      String undefDataStringRep=undefinedData.getDefaultValueRepresentation();\n      AddressSet set=new AddressSet(currentProgram,fillerAddr,currentProgram.getMaxAddress());\n      AddressIterator addrIter=set.getAddresses(fillerAddr.next(),true);\n      while (addrIter.hasNext()) {\n        Address nextAddr=addrIter.next();\n        if (listing.getUndefinedDataAt(nextAddr) == null || !listing.getUndefinedDataAt(nextAddr).getDefaultValueRepresentation().equalsIgnoreCase(undefDataStringRep)) {\n          break;\n        }\n        ++fillerLen;\n      }\n      if (listing.isUndefined(fillerAddr.add(fillerLen),fillerAddr.add(fillerLen))) {\n        possibleAddrSet.add(fillerAddr);\n        println(\"*** Possible Alignment datatype at \" + fillerAddr.toString());\n        continue;\n      }\n      listing.createData(fillerAddr,new AlignmentDataType(),fillerLen);\n      println(\"Applied Alignment datatype at \" + fillerAddr.toString());\n    }\n  }\n  if (!possibleAddrSet.isEmpty()) {\n    popup(\"Script complete.\\n\\n\" + \"Some additional possible filler bytes where the Alignment datatype could be applied were found.\\n\" + \"Press OK to see a table of these addresses.\");\n    show(\"Possible Addresses\",possibleAddrSet);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 319,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int fillerLen=1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 85,
    "startColumnNumber" : 20,
    "endLineNumber" : 85,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}