{
  "id" : 491,
  "expression" : "2 * (1 + size / 8)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/test/src/com/google/zxing/common/reedsolomon/ReedSolomonEncoderQRCodeTestCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2 * (1 + size / 8)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 50,
      "startColumnNumber" : 39,
      "endLineNumber" : 50,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 50,
        "startColumnNumber" : 24,
        "endLineNumber" : 50,
        "endColumnNumber" : 58
      },
      "nodeContext" : "random.nextInt(2 * (1 + size / 8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 50,
        "startColumnNumber" : 20,
        "endLineNumber" : 50,
        "endColumnNumber" : 58
      },
      "nodeContext" : "1 + random.nextInt(2 * (1 + size / 8))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 50,
        "startColumnNumber" : 10,
        "endLineNumber" : 50,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ecBytes=1 + random.nextInt(2 * (1 + size / 8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 59
      },
      "nodeContext" : "int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 47,
        "startColumnNumber" : 34,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int size=1 + random.nextInt(1000);\n  int[] toEncode=new int[size];\n  int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n  ecBytes=Math.min(ecBytes,size - 1);\n  int dataBytes=size - ecBytes;\n  for (int j=0; j < dataBytes; j++) {\n    toEncode[j]=random.nextInt(256);\n  }\n  int[] original=new int[dataBytes];\n  System.arraycopy(toEncode,0,original,0,dataBytes);\n  encoder.encode(toEncode,ecBytes);\n  decoder.decode(toEncode,ecBytes);\n  assertArraysEqual(original,0,toEncode,0,dataBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  int size=1 + random.nextInt(1000);\n  int[] toEncode=new int[size];\n  int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n  ecBytes=Math.min(ecBytes,size - 1);\n  int dataBytes=size - ecBytes;\n  for (int j=0; j < dataBytes; j++) {\n    toEncode[j]=random.nextInt(256);\n  }\n  int[] original=new int[dataBytes];\n  System.arraycopy(toEncode,0,original,0,dataBytes);\n  encoder.encode(toEncode,ecBytes);\n  decoder.decode(toEncode,ecBytes);\n  assertArraysEqual(original,0,toEncode,0,dataBytes);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 43,
        "startColumnNumber" : 57,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Random random=getRandom();\n  ReedSolomonEncoder encoder=new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256);\n  ReedSolomonDecoder decoder=new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n  for (int i=0; i < 100; i++) {\n    int size=1 + random.nextInt(1000);\n    int[] toEncode=new int[size];\n    int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n    ecBytes=Math.min(ecBytes,size - 1);\n    int dataBytes=size - ecBytes;\n    for (int j=0; j < dataBytes; j++) {\n      toEncode[j]=random.nextInt(256);\n    }\n    int[] original=new int[dataBytes];\n    System.arraycopy(toEncode,0,original,0,dataBytes);\n    encoder.encode(toEncode,ecBytes);\n    decoder.decode(toEncode,ecBytes);\n    assertArraysEqual(original,0,toEncode,0,dataBytes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testQRCodeVersusDecoder() throws Exception {\n  Random random=getRandom();\n  ReedSolomonEncoder encoder=new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256);\n  ReedSolomonDecoder decoder=new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n  for (int i=0; i < 100; i++) {\n    int size=1 + random.nextInt(1000);\n    int[] toEncode=new int[size];\n    int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n    ecBytes=Math.min(ecBytes,size - 1);\n    int dataBytes=size - ecBytes;\n    for (int j=0; j < dataBytes; j++) {\n      toEncode[j]=random.nextInt(256);\n    }\n    int[] original=new int[dataBytes];\n    System.arraycopy(toEncode,0,original,0,dataBytes);\n    encoder.encode(toEncode,ecBytes);\n    decoder.decode(toEncode,ecBytes);\n    assertArraysEqual(original,0,toEncode,0,dataBytes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 59
      },
      "nodeContext" : "int ecBytes=1 + random.nextInt(2 * (1 + size / 8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 9
    },
    "tokenLength" : 7,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 50,
    "startColumnNumber" : 39,
    "endLineNumber" : 50,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}