{
  "id" : 10,
  "expression" : "\"myid\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"myid\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 159,
      "startColumnNumber" : 46,
      "endLineNumber" : 159,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 159,
        "startColumnNumber" : 28,
        "endLineNumber" : 159,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new File(dataDir,\"myid\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 159,
        "startColumnNumber" : 17,
        "endLineNumber" : 159,
        "endColumnNumber" : 53
      },
      "nodeContext" : "myIdFile=new File(dataDir,\"myid\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 54
      },
      "nodeContext" : "File myIdFile=new File(dataDir,\"myid\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 146,
        "startColumnNumber" : 32,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (electionAlg != 0) {\n    for (    QuorumServer s : servers.values()) {\n      if (s.electionAddr == null)       throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n    }\n  }\n  File myIdFile=new File(dataDir,\"myid\");\n  if (!myIdFile.exists()) {\n    throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n  }\n  BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n  String myIdString;\n  try {\n    myIdString=br.readLine();\n  }\n  finally {\n    br.close();\n  }\n  try {\n    conf.serverId=Long.parseLong(myIdString);\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (servers.size() > 1) {\n  if (electionAlg != 0) {\n    for (    QuorumServer s : servers.values()) {\n      if (s.electionAddr == null)       throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n    }\n  }\n  File myIdFile=new File(dataDir,\"myid\");\n  if (!myIdFile.exists()) {\n    throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n  }\n  BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n  String myIdString;\n  try {\n    myIdString=br.readLine();\n  }\n  finally {\n    br.close();\n  }\n  try {\n    conf.serverId=Long.parseLong(myIdString);\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5273,
        "startLineNumber" : 50,
        "startColumnNumber" : 61,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 644,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5330,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void parse(String[] args) throws Exception {\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 657,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 54
      },
      "nodeContext" : "File myIdFile=new File(dataDir,\"myid\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 159,
    "startColumnNumber" : 46,
    "endLineNumber" : 159,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}