{
  "id" : 130,
  "expression" : "text",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/BoyerMooreStringSearch.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 27,
      "startColumnNumber" : 15,
      "endLineNumber" : 27,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 20
      },
      "nodeContext" : "isNull(text)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 43
      },
      "nodeContext" : "isNull(text) || isNull(pattern) || pattern.length() > text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 32
      },
      "nodeContext" : "isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n  return new ArrayList<>();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 20
      },
      "nodeContext" : "isNull(text)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 29,
      "startColumnNumber" : 30,
      "endLineNumber" : 29,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 29,
        "startColumnNumber" : 30,
        "endLineNumber" : 29,
        "endColumnNumber" : 43
      },
      "nodeContext" : "text.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 29,
        "startColumnNumber" : 11,
        "endLineNumber" : 29,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pattern.length() > text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 43
      },
      "nodeContext" : "isNull(text) || isNull(pattern) || pattern.length() > text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 32
      },
      "nodeContext" : "isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n  return new ArrayList<>();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 29,
        "startColumnNumber" : 11,
        "endLineNumber" : 29,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pattern.length() > text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 37,
      "startColumnNumber" : 66,
      "endLineNumber" : 37,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 37,
        "startColumnNumber" : 66,
        "endLineNumber" : 37,
        "endColumnNumber" : 79
      },
      "nodeContext" : "text.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 37,
        "startColumnNumber" : 54,
        "endLineNumber" : 37,
        "endColumnNumber" : 79
      },
      "nodeContext" : "textIndex < text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 37,
        "startColumnNumber" : 54,
        "endLineNumber" : 37,
        "endColumnNumber" : 79
      },
      "nodeContext" : "textIndex < text.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 38,
      "startColumnNumber" : 63,
      "endLineNumber" : 38,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 38,
        "startColumnNumber" : 63,
        "endLineNumber" : 38,
        "endColumnNumber" : 85
      },
      "nodeContext" : "text.charAt(textIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 38,
        "startColumnNumber" : 31,
        "endLineNumber" : 38,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pattern.charAt(patternIndex) == text.charAt(textIndex)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 38,
        "startColumnNumber" : 10,
        "endLineNumber" : 38,
        "endColumnNumber" : 85
      },
      "nodeContext" : "patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n  if (patternIndex == 0) {\n    occurrences.add(textIndex);\n  }\n else {\n    textIndex--;\n  }\n  patternIndex--;\n}\n else {\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 38,
        "startColumnNumber" : 10,
        "endLineNumber" : 38,
        "endColumnNumber" : 85
      },
      "nodeContext" : "patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 46,
      "startColumnNumber" : 65,
      "endLineNumber" : 46,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 46,
        "startColumnNumber" : 65,
        "endLineNumber" : 46,
        "endColumnNumber" : 87
      },
      "nodeContext" : "text.charAt(textIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 46,
        "startColumnNumber" : 55,
        "endLineNumber" : 46,
        "endColumnNumber" : 88
      },
      "nodeContext" : "skipTable[text.charAt(textIndex)]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 46,
        "startColumnNumber" : 51,
        "endLineNumber" : 46,
        "endColumnNumber" : 88
      },
      "nodeContext" : "1 + skipTable[text.charAt(textIndex)]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 46,
        "startColumnNumber" : 25,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 46,
        "startColumnNumber" : 21,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n  if (patternIndex == 0) {\n    occurrences.add(textIndex);\n  }\n else {\n    textIndex--;\n  }\n  patternIndex--;\n}\n else {\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 27,
    "startColumnNumber" : 15,
    "endLineNumber" : 27,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 29,
    "startColumnNumber" : 30,
    "endLineNumber" : 29,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 37,
    "startColumnNumber" : 66,
    "endLineNumber" : 37,
    "endColumnNumber" : 70
  }, {
    "charLength" : 4,
    "startLineNumber" : 38,
    "startColumnNumber" : 63,
    "endLineNumber" : 38,
    "endColumnNumber" : 67
  }, {
    "charLength" : 4,
    "startLineNumber" : 46,
    "startColumnNumber" : 65,
    "endLineNumber" : 46,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 8
  } ]
}