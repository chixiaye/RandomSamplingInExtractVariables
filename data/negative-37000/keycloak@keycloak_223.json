{
  "id" : 223,
  "expression" : "pubKey.getParams().getQ().toByteArray()",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLSignatureUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pubKey.getParams().getQ().toByteArray()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 695,
      "startColumnNumber" : 23,
      "endLineNumber" : 695,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 695,
        "startColumnNumber" : 19,
        "endLineNumber" : 695,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Q=pubKey.getParams().getQ().toByteArray()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 695,
        "startColumnNumber" : 12,
        "endLineNumber" : 695,
        "endColumnNumber" : 63
      },
      "nodeContext" : "byte[] Q=pubKey.getParams().getQ().toByteArray();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 779,
        "startLineNumber" : 692,
        "startColumnNumber" : 48,
        "endLineNumber" : 705,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DSAPublicKey pubKey=(DSAPublicKey)key;\n  byte[] P=pubKey.getParams().getP().toByteArray();\n  byte[] Q=pubKey.getParams().getQ().toByteArray();\n  byte[] G=pubKey.getParams().getG().toByteArray();\n  byte[] Y=pubKey.getY().toByteArray();\n  DSAKeyValueType dsaKeyValue=new DSAKeyValueType();\n  dsaKeyValue.setP(Base64.encodeBytes(P).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setQ(Base64.encodeBytes(Q).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setG(Base64.encodeBytes(G).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setY(Base64.encodeBytes(Y).getBytes(GeneralConstants.SAML_CHARSET));\n  return dsaKeyValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 692,
        "startColumnNumber" : 15,
        "endLineNumber" : 705,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (key instanceof DSAPublicKey) {\n  DSAPublicKey pubKey=(DSAPublicKey)key;\n  byte[] P=pubKey.getParams().getP().toByteArray();\n  byte[] Q=pubKey.getParams().getQ().toByteArray();\n  byte[] G=pubKey.getParams().getG().toByteArray();\n  byte[] Y=pubKey.getY().toByteArray();\n  DSAKeyValueType dsaKeyValue=new DSAKeyValueType();\n  dsaKeyValue.setP(Base64.encodeBytes(P).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setQ(Base64.encodeBytes(Q).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setG(Base64.encodeBytes(G).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setY(Base64.encodeBytes(Y).getBytes(GeneralConstants.SAML_CHARSET));\n  return dsaKeyValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 127,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 683,
        "startColumnNumber" : 8,
        "endLineNumber" : 705,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (key instanceof RSAPublicKey) {\n  RSAPublicKey pubKey=(RSAPublicKey)key;\n  byte[] modulus=pubKey.getModulus().toByteArray();\n  byte[] exponent=pubKey.getPublicExponent().toByteArray();\n  RSAKeyValueType rsaKeyValue=new RSAKeyValueType();\n  rsaKeyValue.setModulus(Base64.encodeBytes(modulus).getBytes(GeneralConstants.SAML_CHARSET));\n  rsaKeyValue.setExponent(Base64.encodeBytes(exponent).getBytes(GeneralConstants.SAML_CHARSET));\n  return rsaKeyValue;\n}\n else if (key instanceof DSAPublicKey) {\n  DSAPublicKey pubKey=(DSAPublicKey)key;\n  byte[] P=pubKey.getParams().getP().toByteArray();\n  byte[] Q=pubKey.getParams().getQ().toByteArray();\n  byte[] G=pubKey.getParams().getG().toByteArray();\n  byte[] Y=pubKey.getY().toByteArray();\n  DSAKeyValueType dsaKeyValue=new DSAKeyValueType();\n  dsaKeyValue.setP(Base64.encodeBytes(P).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setQ(Base64.encodeBytes(Q).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setG(Base64.encodeBytes(G).getBytes(GeneralConstants.SAML_CHARSET));\n  dsaKeyValue.setY(Base64.encodeBytes(Y).getBytes(GeneralConstants.SAML_CHARSET));\n  return dsaKeyValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 200,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1432,
        "startLineNumber" : 682,
        "startColumnNumber" : 61,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (key instanceof RSAPublicKey) {\n    RSAPublicKey pubKey=(RSAPublicKey)key;\n    byte[] modulus=pubKey.getModulus().toByteArray();\n    byte[] exponent=pubKey.getPublicExponent().toByteArray();\n    RSAKeyValueType rsaKeyValue=new RSAKeyValueType();\n    rsaKeyValue.setModulus(Base64.encodeBytes(modulus).getBytes(GeneralConstants.SAML_CHARSET));\n    rsaKeyValue.setExponent(Base64.encodeBytes(exponent).getBytes(GeneralConstants.SAML_CHARSET));\n    return rsaKeyValue;\n  }\n else   if (key instanceof DSAPublicKey) {\n    DSAPublicKey pubKey=(DSAPublicKey)key;\n    byte[] P=pubKey.getParams().getP().toByteArray();\n    byte[] Q=pubKey.getParams().getQ().toByteArray();\n    byte[] G=pubKey.getParams().getG().toByteArray();\n    byte[] Y=pubKey.getY().toByteArray();\n    DSAKeyValueType dsaKeyValue=new DSAKeyValueType();\n    dsaKeyValue.setP(Base64.encodeBytes(P).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setQ(Base64.encodeBytes(Q).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setG(Base64.encodeBytes(G).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setY(Base64.encodeBytes(Y).getBytes(GeneralConstants.SAML_CHARSET));\n    return dsaKeyValue;\n  }\n  throw logger.unsupportedType(key.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1884,
        "startLineNumber" : 672,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Creates a  {@code KeyValueType} that wraps the specified public key. This method supports DSA and RSA keys.</p>\n * @param key the {@code PublicKey} that will be represented as a {@code KeyValueType}.\n * @return the constructed {@code KeyValueType} or {@code null} if the specified key is neither a DSA nor a RSAkey.\n */\npublic static KeyValueType createKeyValue(PublicKey key){\n  if (key instanceof RSAPublicKey) {\n    RSAPublicKey pubKey=(RSAPublicKey)key;\n    byte[] modulus=pubKey.getModulus().toByteArray();\n    byte[] exponent=pubKey.getPublicExponent().toByteArray();\n    RSAKeyValueType rsaKeyValue=new RSAKeyValueType();\n    rsaKeyValue.setModulus(Base64.encodeBytes(modulus).getBytes(GeneralConstants.SAML_CHARSET));\n    rsaKeyValue.setExponent(Base64.encodeBytes(exponent).getBytes(GeneralConstants.SAML_CHARSET));\n    return rsaKeyValue;\n  }\n else   if (key instanceof DSAPublicKey) {\n    DSAPublicKey pubKey=(DSAPublicKey)key;\n    byte[] P=pubKey.getParams().getP().toByteArray();\n    byte[] Q=pubKey.getParams().getQ().toByteArray();\n    byte[] G=pubKey.getParams().getG().toByteArray();\n    byte[] Y=pubKey.getY().toByteArray();\n    DSAKeyValueType dsaKeyValue=new DSAKeyValueType();\n    dsaKeyValue.setP(Base64.encodeBytes(P).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setQ(Base64.encodeBytes(Q).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setG(Base64.encodeBytes(G).getBytes(GeneralConstants.SAML_CHARSET));\n    dsaKeyValue.setY(Base64.encodeBytes(Y).getBytes(GeneralConstants.SAML_CHARSET));\n    return dsaKeyValue;\n  }\n  throw logger.unsupportedType(key.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 695,
        "startColumnNumber" : 12,
        "endLineNumber" : 695,
        "endColumnNumber" : 63
      },
      "nodeContext" : "byte[] Q=pubKey.getParams().getQ().toByteArray();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 695,
    "startColumnNumber" : 23,
    "endLineNumber" : 695,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}