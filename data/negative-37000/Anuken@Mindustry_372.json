{
  "id" : 372,
  "expression" : "type.maxStretch * legLength / 2f",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/entities/comp/LegsComp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type.maxStretch * legLength / 2f",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 93,
      "startColumnNumber" : 42,
      "endLineNumber" : 93,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 73
      },
      "nodeContext" : "l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 89
      },
      "nodeContext" : "l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2788,
        "startLineNumber" : 88,
        "startColumnNumber" : 44,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float dstRot=legAngle(rot,i);\n  Vec2 baseOffset=Tmp.v5.trns(dstRot,type.legBaseOffset).add(x,y);\n  Leg l=legs[i];\n  l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n  l.base.sub(baseOffset).limit(type.maxStretch * legLength).add(baseOffset);\n  float stageF=(totalLength + i * type.legPairOffset) / moveSpace;\n  int stage=(int)stageF;\n  int group=stage % div;\n  boolean move=i % div == group;\n  boolean side=i < legs.length / 2;\n  boolean backLeg=Math.abs((i + 0.5f) - legs.length / 2f) <= 0.501f;\n  if (backLeg && type.flipBackLegs)   side=!side;\n  l.moving=move;\n  l.stage=moving ? stageF % 1f : Mathf.lerpDelta(l.stage,0f,0.1f);\n  if (l.group != group) {\n    if (!move && i % div == l.group) {\n      Floor floor=Vars.world.floorWorld(l.base.x,l.base.y);\n      if (floor.isLiquid) {\n        floor.walkEffect.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n        floor.walkSound.at(x,y,1f,floor.walkSoundVolume);\n      }\n else {\n        Fx.unitLandSmall.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n      }\n      if (type.landShake > 0) {\n        Effect.shake(type.landShake,type.landShake,l.base);\n      }\n      if (type.legSplashDamage > 0) {\n        Damage.damage(team(),l.base.x,l.base.y,type.legSplashRange,type.legSplashDamage,false,true);\n      }\n    }\n    l.group=group;\n  }\n  Vec2 legDest=Tmp.v1.trns(dstRot,legLength * type.legLengthScl).add(baseOffset).add(moveOffset);\n  Vec2 jointDest=Tmp.v2;\n  InverseKinematics.solve(legLength / 2f,legLength / 2f,Tmp.v6.set(l.base).sub(baseOffset),side,jointDest);\n  jointDest.add(baseOffset);\n  jointDest.lerp(Tmp.v6.set(baseOffset).lerp(l.base,0.5f),1f - type.kinematicScl);\n  if (move) {\n    float moveFract=stageF % 1f;\n    l.base.lerpDelta(legDest,moveFract);\n    l.joint.lerpDelta(jointDest,moveFract / 2f);\n  }\n  l.joint.lerpDelta(jointDest,moveSpeed / 4f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 448,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2824,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < legs.length; i++) {\n  float dstRot=legAngle(rot,i);\n  Vec2 baseOffset=Tmp.v5.trns(dstRot,type.legBaseOffset).add(x,y);\n  Leg l=legs[i];\n  l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n  l.base.sub(baseOffset).limit(type.maxStretch * legLength).add(baseOffset);\n  float stageF=(totalLength + i * type.legPairOffset) / moveSpace;\n  int stage=(int)stageF;\n  int group=stage % div;\n  boolean move=i % div == group;\n  boolean side=i < legs.length / 2;\n  boolean backLeg=Math.abs((i + 0.5f) - legs.length / 2f) <= 0.501f;\n  if (backLeg && type.flipBackLegs)   side=!side;\n  l.moving=move;\n  l.stage=moving ? stageF % 1f : Mathf.lerpDelta(l.stage,0f,0.1f);\n  if (l.group != group) {\n    if (!move && i % div == l.group) {\n      Floor floor=Vars.world.floorWorld(l.base.x,l.base.y);\n      if (floor.isLiquid) {\n        floor.walkEffect.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n        floor.walkSound.at(x,y,1f,floor.walkSoundVolume);\n      }\n else {\n        Fx.unitLandSmall.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n      }\n      if (type.landShake > 0) {\n        Effect.shake(type.landShake,type.landShake,l.base);\n      }\n      if (type.legSplashDamage > 0) {\n        Damage.damage(team(),l.base.x,l.base.y,type.legSplashRange,type.legSplashDamage,false,true);\n      }\n    }\n    l.group=group;\n  }\n  Vec2 legDest=Tmp.v1.trns(dstRot,legLength * type.legLengthScl).add(baseOffset).add(moveOffset);\n  Vec2 jointDest=Tmp.v2;\n  InverseKinematics.solve(legLength / 2f,legLength / 2f,Tmp.v6.set(l.base).sub(baseOffset),side,jointDest);\n  jointDest.add(baseOffset);\n  jointDest.lerp(Tmp.v6.set(baseOffset).lerp(l.base,0.5f),1f - type.kinematicScl);\n  if (move) {\n    float moveFract=stageF % 1f;\n    l.base.lerpDelta(legDest,moveFract);\n    l.joint.lerpDelta(jointDest,moveFract / 2f);\n  }\n  l.joint.lerpDelta(jointDest,moveSpeed / 4f);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 461,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3616,
        "startLineNumber" : 64,
        "startColumnNumber" : 24,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Mathf.dst(deltaX(),deltaY()) > 0.001f) {\n    baseRotation=Angles.moveToward(baseRotation,Mathf.angle(deltaX(),deltaY()),type.rotateSpeed);\n  }\n  float rot=baseRotation;\n  float legLength=type.legLength;\n  if (legs.length != type.legCount) {\n    resetLegs();\n  }\n  float moveSpeed=type.legSpeed;\n  int div=Math.max(legs.length / type.legGroupSize,2);\n  moveSpace=legLength / 1.6f / (div / 2f) * type.legMoveSpace;\n  totalLength+=Mathf.dst(deltaX(),deltaY());\n  float trns=moveSpace * 0.85f * type.legTrns;\n  Vec2 moveOffset=Tmp.v4.trns(rot,trns);\n  boolean moving=moving();\n  for (int i=0; i < legs.length; i++) {\n    float dstRot=legAngle(rot,i);\n    Vec2 baseOffset=Tmp.v5.trns(dstRot,type.legBaseOffset).add(x,y);\n    Leg l=legs[i];\n    l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n    l.base.sub(baseOffset).limit(type.maxStretch * legLength).add(baseOffset);\n    float stageF=(totalLength + i * type.legPairOffset) / moveSpace;\n    int stage=(int)stageF;\n    int group=stage % div;\n    boolean move=i % div == group;\n    boolean side=i < legs.length / 2;\n    boolean backLeg=Math.abs((i + 0.5f) - legs.length / 2f) <= 0.501f;\n    if (backLeg && type.flipBackLegs)     side=!side;\n    l.moving=move;\n    l.stage=moving ? stageF % 1f : Mathf.lerpDelta(l.stage,0f,0.1f);\n    if (l.group != group) {\n      if (!move && i % div == l.group) {\n        Floor floor=Vars.world.floorWorld(l.base.x,l.base.y);\n        if (floor.isLiquid) {\n          floor.walkEffect.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n          floor.walkSound.at(x,y,1f,floor.walkSoundVolume);\n        }\n else {\n          Fx.unitLandSmall.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n        }\n        if (type.landShake > 0) {\n          Effect.shake(type.landShake,type.landShake,l.base);\n        }\n        if (type.legSplashDamage > 0) {\n          Damage.damage(team(),l.base.x,l.base.y,type.legSplashRange,type.legSplashDamage,false,true);\n        }\n      }\n      l.group=group;\n    }\n    Vec2 legDest=Tmp.v1.trns(dstRot,legLength * type.legLengthScl).add(baseOffset).add(moveOffset);\n    Vec2 jointDest=Tmp.v2;\n    InverseKinematics.solve(legLength / 2f,legLength / 2f,Tmp.v6.set(l.base).sub(baseOffset),side,jointDest);\n    jointDest.add(baseOffset);\n    jointDest.lerp(Tmp.v6.set(baseOffset).lerp(l.base,0.5f),1f - type.kinematicScl);\n    if (move) {\n      float moveFract=stageF % 1f;\n      l.base.lerpDelta(legDest,moveFract);\n      l.joint.lerpDelta(jointDest,moveFract / 2f);\n    }\n    l.joint.lerpDelta(jointDest,moveSpeed / 4f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 588,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3650,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void update(){\n  if (Mathf.dst(deltaX(),deltaY()) > 0.001f) {\n    baseRotation=Angles.moveToward(baseRotation,Mathf.angle(deltaX(),deltaY()),type.rotateSpeed);\n  }\n  float rot=baseRotation;\n  float legLength=type.legLength;\n  if (legs.length != type.legCount) {\n    resetLegs();\n  }\n  float moveSpeed=type.legSpeed;\n  int div=Math.max(legs.length / type.legGroupSize,2);\n  moveSpace=legLength / 1.6f / (div / 2f) * type.legMoveSpace;\n  totalLength+=Mathf.dst(deltaX(),deltaY());\n  float trns=moveSpace * 0.85f * type.legTrns;\n  Vec2 moveOffset=Tmp.v4.trns(rot,trns);\n  boolean moving=moving();\n  for (int i=0; i < legs.length; i++) {\n    float dstRot=legAngle(rot,i);\n    Vec2 baseOffset=Tmp.v5.trns(dstRot,type.legBaseOffset).add(x,y);\n    Leg l=legs[i];\n    l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n    l.base.sub(baseOffset).limit(type.maxStretch * legLength).add(baseOffset);\n    float stageF=(totalLength + i * type.legPairOffset) / moveSpace;\n    int stage=(int)stageF;\n    int group=stage % div;\n    boolean move=i % div == group;\n    boolean side=i < legs.length / 2;\n    boolean backLeg=Math.abs((i + 0.5f) - legs.length / 2f) <= 0.501f;\n    if (backLeg && type.flipBackLegs)     side=!side;\n    l.moving=move;\n    l.stage=moving ? stageF % 1f : Mathf.lerpDelta(l.stage,0f,0.1f);\n    if (l.group != group) {\n      if (!move && i % div == l.group) {\n        Floor floor=Vars.world.floorWorld(l.base.x,l.base.y);\n        if (floor.isLiquid) {\n          floor.walkEffect.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n          floor.walkSound.at(x,y,1f,floor.walkSoundVolume);\n        }\n else {\n          Fx.unitLandSmall.at(l.base.x,l.base.y,type.rippleScale,floor.mapColor);\n        }\n        if (type.landShake > 0) {\n          Effect.shake(type.landShake,type.landShake,l.base);\n        }\n        if (type.legSplashDamage > 0) {\n          Damage.damage(team(),l.base.x,l.base.y,type.legSplashRange,type.legSplashDamage,false,true);\n        }\n      }\n      l.group=group;\n    }\n    Vec2 legDest=Tmp.v1.trns(dstRot,legLength * type.legLengthScl).add(baseOffset).add(moveOffset);\n    Vec2 jointDest=Tmp.v2;\n    InverseKinematics.solve(legLength / 2f,legLength / 2f,Tmp.v6.set(l.base).sub(baseOffset),side,jointDest);\n    jointDest.add(baseOffset);\n    jointDest.lerp(Tmp.v6.set(baseOffset).lerp(l.base,0.5f),1f - type.kinematicScl);\n    if (move) {\n      float moveFract=stageF % 1f;\n      l.base.lerpDelta(legDest,moveFract);\n      l.joint.lerpDelta(jointDest,moveFract / 2f);\n    }\n    l.joint.lerpDelta(jointDest,moveSpeed / 4f);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 594,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 90
      },
      "nodeContext" : "l.joint.sub(baseOffset).limit(type.maxStretch * legLength / 2f).add(baseOffset);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 93,
    "startColumnNumber" : 42,
    "endLineNumber" : 93,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}