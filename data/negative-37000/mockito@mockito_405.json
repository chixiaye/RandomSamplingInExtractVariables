{
  "id" : 405,
  "expression" : "\"notACaptorField\"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"notACaptorField\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 38,
      "startColumnNumber" : 42,
      "endLineNumber" : 38,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 38,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"notACaptorField\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 35,
        "startColumnNumber" : 37,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 35,
        "startColumnNumber" : 10,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (MockitoException e) {\n  assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MockitoAnnotations.openMocks(this);\n  fail();\n}\n catch (MockitoException e) {\n  assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 30,
        "startColumnNumber" : 66,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    MockitoAnnotations.openMocks(this);\n    fail();\n  }\n catch (  MockitoException e) {\n    assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldFailIfCaptorHasWrongType() throws Exception {\n  try {\n    MockitoAnnotations.openMocks(this);\n    fail();\n  }\n catch (  MockitoException e) {\n    assertThat(e).hasMessageContaining(\"notACaptorField\").hasMessageContaining(\"wrong type\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 38,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"notACaptorField\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 38,
    "startColumnNumber" : 42,
    "endLineNumber" : 38,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}