{
  "id" : 315,
  "expression" : "eIndent",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-loader-no-op/src/main/java/com/tencent/tinker/loader/shareutil/ShareElfFile.java",
  "occurrences" : 17,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 211,
      "startColumnNumber" : 41,
      "endLineNumber" : 211,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 211,
        "startColumnNumber" : 25,
        "endLineNumber" : 211,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ByteBuffer.wrap(eIndent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 50
      },
      "nodeContext" : "channel.read(ByteBuffer.wrap(eIndent))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 51
      },
      "nodeContext" : "channel.read(ByteBuffer.wrap(eIndent));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 51
      },
      "nodeContext" : "channel.read(ByteBuffer.wrap(eIndent));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 212,
      "startColumnNumber" : 16,
      "endLineNumber" : 212,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 26
      },
      "nodeContext" : "eIndent[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 34
      },
      "nodeContext" : "eIndent[0] != 0x7F",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 55
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 76
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 212,
      "startColumnNumber" : 38,
      "endLineNumber" : 212,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 212,
        "startColumnNumber" : 38,
        "endLineNumber" : 212,
        "endColumnNumber" : 48
      },
      "nodeContext" : "eIndent[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 212,
        "startColumnNumber" : 38,
        "endLineNumber" : 212,
        "endColumnNumber" : 55
      },
      "nodeContext" : "eIndent[1] != 'E'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 55
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 76
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 212,
      "startColumnNumber" : 59,
      "endLineNumber" : 212,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 212,
        "startColumnNumber" : 59,
        "endLineNumber" : 212,
        "endColumnNumber" : 69
      },
      "nodeContext" : "eIndent[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 212,
        "startColumnNumber" : 59,
        "endLineNumber" : 212,
        "endColumnNumber" : 76
      },
      "nodeContext" : "eIndent[2] != 'L'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 76
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 212,
      "startColumnNumber" : 80,
      "endLineNumber" : 212,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 212,
        "startColumnNumber" : 80,
        "endLineNumber" : 212,
        "endColumnNumber" : 90
      },
      "nodeContext" : "eIndent[3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 212,
        "startColumnNumber" : 80,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 212,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 97
      },
      "nodeContext" : "eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 213,
      "startColumnNumber" : 83,
      "endLineNumber" : 213,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 213,
        "startColumnNumber" : 83,
        "endLineNumber" : 213,
        "endColumnNumber" : 93
      },
      "nodeContext" : "eIndent[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 213,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 130
      },
      "nodeContext" : "String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 213,
        "startColumnNumber" : 22,
        "endLineNumber" : 213,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 212,
        "startColumnNumber" : 99,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 213,
      "startColumnNumber" : 95,
      "endLineNumber" : 213,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 213,
        "startColumnNumber" : 95,
        "endLineNumber" : 213,
        "endColumnNumber" : 105
      },
      "nodeContext" : "eIndent[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 213,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 130
      },
      "nodeContext" : "String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 213,
        "startColumnNumber" : 22,
        "endLineNumber" : 213,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 212,
        "startColumnNumber" : 99,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 213,
      "startColumnNumber" : 107,
      "endLineNumber" : 213,
      "endColumnNumber" : 114
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 213,
        "startColumnNumber" : 107,
        "endLineNumber" : 213,
        "endColumnNumber" : 117
      },
      "nodeContext" : "eIndent[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 213,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 130
      },
      "nodeContext" : "String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 213,
        "startColumnNumber" : 22,
        "endLineNumber" : 213,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 212,
        "startColumnNumber" : 99,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 213,
      "startColumnNumber" : 119,
      "endLineNumber" : 213,
      "endColumnNumber" : 126
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 213,
        "startColumnNumber" : 119,
        "endLineNumber" : 213,
        "endColumnNumber" : 129
      },
      "nodeContext" : "eIndent[3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 213,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 130
      },
      "nodeContext" : "String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 213,
        "startColumnNumber" : 22,
        "endLineNumber" : 213,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 212,
        "startColumnNumber" : 99,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n  throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 216,
      "startColumnNumber" : 26,
      "endLineNumber" : 216,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 216,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 43
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 107
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 216,
      "startColumnNumber" : 89,
      "endLineNumber" : 216,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 216,
        "startColumnNumber" : 89,
        "endLineNumber" : 216,
        "endColumnNumber" : 106
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 216,
        "startColumnNumber" : 69,
        "endLineNumber" : 216,
        "endColumnNumber" : 106
      },
      "nodeContext" : "\"bad elf class: \" + eIndent[EI_CLASS]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 107
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 217,
      "startColumnNumber" : 26,
      "endLineNumber" : 217,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 217,
        "startColumnNumber" : 26,
        "endLineNumber" : 217,
        "endColumnNumber" : 42
      },
      "nodeContext" : "eIndent[EI_DATA]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 115
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 217,
      "startColumnNumber" : 98,
      "endLineNumber" : 217,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 217,
        "startColumnNumber" : 98,
        "endLineNumber" : 217,
        "endColumnNumber" : 114
      },
      "nodeContext" : "eIndent[EI_DATA]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 217,
        "startColumnNumber" : 70,
        "endLineNumber" : 217,
        "endColumnNumber" : 114
      },
      "nodeContext" : "\"bad elf data encoding: \" + eIndent[EI_DATA]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 115
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 219,
      "startColumnNumber" : 62,
      "endLineNumber" : 219,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 219,
        "startColumnNumber" : 62,
        "endLineNumber" : 219,
        "endColumnNumber" : 79
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 219,
        "startColumnNumber" : 62,
        "endLineNumber" : 219,
        "endColumnNumber" : 93
      },
      "nodeContext" : "eIndent[EI_CLASS] == ELFCLASS32",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 219,
        "startColumnNumber" : 62,
        "endLineNumber" : 219,
        "endColumnNumber" : 103
      },
      "nodeContext" : "eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 219,
        "startColumnNumber" : 42,
        "endLineNumber" : 219,
        "endColumnNumber" : 104
      },
      "nodeContext" : "ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 219,
        "startColumnNumber" : 29,
        "endLineNumber" : 219,
        "endColumnNumber" : 104
      },
      "nodeContext" : "restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 220,
      "startColumnNumber" : 29,
      "endLineNumber" : 220,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 220,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 45
      },
      "nodeContext" : "eIndent[EI_DATA]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 220,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 60
      },
      "nodeContext" : "eIndent[EI_DATA] == ELFDATA2LSB",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 220,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 109
      },
      "nodeContext" : "eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 110
      },
      "nodeContext" : "restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 111
      },
      "nodeContext" : "restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 111
      },
      "nodeContext" : "restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 229,
      "startColumnNumber" : 20,
      "endLineNumber" : 229,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 229,
        "startColumnNumber" : 20,
        "endLineNumber" : 229,
        "endColumnNumber" : 37
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:  eEntry=restBuffer.getInt();\nePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 56,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 229,
        "startColumnNumber" : 20,
        "endLineNumber" : 229,
        "endColumnNumber" : 37
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "eIndent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 241,
      "startColumnNumber" : 69,
      "endLineNumber" : 241,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 241,
        "startColumnNumber" : 69,
        "endLineNumber" : 241,
        "endColumnNumber" : 86
      },
      "nodeContext" : "eIndent[EI_CLASS]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 241,
        "startColumnNumber" : 42,
        "endLineNumber" : 241,
        "endColumnNumber" : 86
      },
      "nodeContext" : "\"Unexpected elf class: \" + eIndent[EI_CLASS]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 241,
        "startColumnNumber" : 26,
        "endLineNumber" : 241,
        "endColumnNumber" : 87
      },
      "nodeContext" : "new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS])",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 241,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 88
      },
      "nodeContext" : "throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:  eEntry=restBuffer.getInt();\nePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 56,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 209,
        "startColumnNumber" : 66,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private ElfHeader(FileChannel channel) throws IOException {\n  channel.position(0);\n  channel.read(ByteBuffer.wrap(eIndent));\n  if (eIndent[0] != 0x7F || eIndent[1] != 'E' || eIndent[2] != 'L' || eIndent[3] != 'F') {\n    throw new IOException(String.format(\"bad elf magic: %x %x %x %x.\",eIndent[0],eIndent[1],eIndent[2],eIndent[3]));\n  }\n  assertInRange(eIndent[EI_CLASS],ELFCLASS32,ELFCLASS64,\"bad elf class: \" + eIndent[EI_CLASS]);\n  assertInRange(eIndent[EI_DATA],ELFDATA2LSB,ELFDATA2MSB,\"bad elf data encoding: \" + eIndent[EI_DATA]);\n  final ByteBuffer restBuffer=ByteBuffer.allocate(eIndent[EI_CLASS] == ELFCLASS32 ? 36 : 48);\n  restBuffer.order(eIndent[EI_DATA] == ELFDATA2LSB ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n  readUntilLimit(channel,restBuffer,\"failed to read rest part of ehdr.\");\n  eType=restBuffer.getShort();\n  eMachine=restBuffer.getShort();\n  eVersion=restBuffer.getInt();\n  assertInRange(eVersion,EV_CURRENT,EV_CURRENT,\"bad elf version: \" + eVersion);\nswitch (eIndent[EI_CLASS]) {\ncase ELFCLASS32:    eEntry=restBuffer.getInt();\n  ePhOff=restBuffer.getInt();\neShOff=restBuffer.getInt();\nbreak;\ncase ELFCLASS64:eEntry=restBuffer.getLong();\nePhOff=restBuffer.getLong();\neShOff=restBuffer.getLong();\nbreak;\ndefault:throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n}\neFlags=restBuffer.getInt();\neEhSize=restBuffer.getShort();\nePhEntSize=restBuffer.getShort();\nePhNum=restBuffer.getShort();\neShEntSize=restBuffer.getShort();\neShNum=restBuffer.getShort();\neShStrNdx=restBuffer.getShort();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 241,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 88
      },
      "nodeContext" : "throw new IOException(\"Unexpected elf class: \" + eIndent[EI_CLASS]);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 211,
    "startColumnNumber" : 41,
    "endLineNumber" : 211,
    "endColumnNumber" : 48
  }, {
    "charLength" : 7,
    "startLineNumber" : 212,
    "startColumnNumber" : 16,
    "endLineNumber" : 212,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 212,
    "startColumnNumber" : 38,
    "endLineNumber" : 212,
    "endColumnNumber" : 45
  }, {
    "charLength" : 7,
    "startLineNumber" : 212,
    "startColumnNumber" : 59,
    "endLineNumber" : 212,
    "endColumnNumber" : 66
  }, {
    "charLength" : 7,
    "startLineNumber" : 212,
    "startColumnNumber" : 80,
    "endLineNumber" : 212,
    "endColumnNumber" : 87
  }, {
    "charLength" : 7,
    "startLineNumber" : 213,
    "startColumnNumber" : 83,
    "endLineNumber" : 213,
    "endColumnNumber" : 90
  }, {
    "charLength" : 7,
    "startLineNumber" : 213,
    "startColumnNumber" : 95,
    "endLineNumber" : 213,
    "endColumnNumber" : 102
  }, {
    "charLength" : 7,
    "startLineNumber" : 213,
    "startColumnNumber" : 107,
    "endLineNumber" : 213,
    "endColumnNumber" : 114
  }, {
    "charLength" : 7,
    "startLineNumber" : 213,
    "startColumnNumber" : 119,
    "endLineNumber" : 213,
    "endColumnNumber" : 126
  }, {
    "charLength" : 7,
    "startLineNumber" : 216,
    "startColumnNumber" : 26,
    "endLineNumber" : 216,
    "endColumnNumber" : 33
  }, {
    "charLength" : 7,
    "startLineNumber" : 216,
    "startColumnNumber" : 89,
    "endLineNumber" : 216,
    "endColumnNumber" : 96
  }, {
    "charLength" : 7,
    "startLineNumber" : 217,
    "startColumnNumber" : 26,
    "endLineNumber" : 217,
    "endColumnNumber" : 33
  }, {
    "charLength" : 7,
    "startLineNumber" : 217,
    "startColumnNumber" : 98,
    "endLineNumber" : 217,
    "endColumnNumber" : 105
  }, {
    "charLength" : 7,
    "startLineNumber" : 219,
    "startColumnNumber" : 62,
    "endLineNumber" : 219,
    "endColumnNumber" : 69
  }, {
    "charLength" : 7,
    "startLineNumber" : 220,
    "startColumnNumber" : 29,
    "endLineNumber" : 220,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 229,
    "startColumnNumber" : 20,
    "endLineNumber" : 229,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 241,
    "startColumnNumber" : 69,
    "endLineNumber" : 241,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  } ]
}