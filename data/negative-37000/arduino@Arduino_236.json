{
  "id" : 236,
  "expression" : "lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/debug/MessageSiphon.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 78,
      "startColumnNumber" : 15,
      "endLineNumber" : 78,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 13,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n  int c=streamReader.read();\n  if (c == -1)   return;\n  if (!canRun)   return;\n  if (currentLine.length() == 0)   lineStartTime=System.nanoTime();\n  currentLine.append((char)c);\n  if (c == '\\n') {\n    consumer.message(currentLine.toString());\n    currentLine.setLength(0);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1363,
        "startLineNumber" : 73,
        "startColumnNumber" : 21,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n    int c=streamReader.read();\n    if (c == -1)     return;\n    if (!canRun)     return;\n    if (currentLine.length() == 0)     lineStartTime=System.nanoTime();\n    currentLine.append((char)c);\n    if (c == '\\n') {\n      consumer.message(currentLine.toString());\n      currentLine.setLength(0);\n    }\n  }\n  long passed=(System.nanoTime() - lineStartTime) / 1000;\n  if (passed < this.lineTimeout) {\n    Thread.sleep(this.lineTimeout - passed);\n    continue;\n  }\n  consumer.message(currentLine.toString());\n  currentLine.setLength(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (canRun) {\n  while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n    int c=streamReader.read();\n    if (c == -1)     return;\n    if (!canRun)     return;\n    if (currentLine.length() == 0)     lineStartTime=System.nanoTime();\n    currentLine.append((char)c);\n    if (c == '\\n') {\n      consumer.message(currentLine.toString());\n      currentLine.setLength(0);\n    }\n  }\n  long passed=(System.nanoTime() - lineStartTime) / 1000;\n  if (passed < this.lineTimeout) {\n    Thread.sleep(this.lineTimeout - passed);\n    continue;\n  }\n  consumer.message(currentLine.toString());\n  currentLine.setLength(0);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 112,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder currentLine=new StringBuilder();\n  long lineStartTime=0;\n  while (canRun) {\n    while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n      int c=streamReader.read();\n      if (c == -1)       return;\n      if (!canRun)       return;\n      if (currentLine.length() == 0)       lineStartTime=System.nanoTime();\n      currentLine.append((char)c);\n      if (c == '\\n') {\n        consumer.message(currentLine.toString());\n        currentLine.setLength(0);\n      }\n    }\n    long passed=(System.nanoTime() - lineStartTime) / 1000;\n    if (passed < this.lineTimeout) {\n      Thread.sleep(this.lineTimeout - passed);\n      continue;\n    }\n    consumer.message(currentLine.toString());\n    currentLine.setLength(0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2563,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  StringBuilder currentLine=new StringBuilder();\n  long lineStartTime=0;\n  while (canRun) {\n    while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n      int c=streamReader.read();\n      if (c == -1)       return;\n      if (!canRun)       return;\n      if (currentLine.length() == 0)       lineStartTime=System.nanoTime();\n      currentLine.append((char)c);\n      if (c == '\\n') {\n        consumer.message(currentLine.toString());\n        currentLine.setLength(0);\n      }\n    }\n    long passed=(System.nanoTime() - lineStartTime) / 1000;\n    if (passed < this.lineTimeout) {\n      Thread.sleep(this.lineTimeout - passed);\n      continue;\n    }\n    consumer.message(currentLine.toString());\n    currentLine.setLength(0);\n  }\n}\n catch (NullPointerException npe) {\n}\ncatch (SocketException e) {\n}\ncatch (Exception e) {\n  String mess=e.getMessage();\n  if ((mess != null) && (mess.indexOf(\"Bad file descriptor\") != -1)) {\n  }\n else {\n    e.printStackTrace();\n  }\n}\n finally {\n  thread=null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2573,
        "startLineNumber" : 65,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    StringBuilder currentLine=new StringBuilder();\n    long lineStartTime=0;\n    while (canRun) {\n      while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n        int c=streamReader.read();\n        if (c == -1)         return;\n        if (!canRun)         return;\n        if (currentLine.length() == 0)         lineStartTime=System.nanoTime();\n        currentLine.append((char)c);\n        if (c == '\\n') {\n          consumer.message(currentLine.toString());\n          currentLine.setLength(0);\n        }\n      }\n      long passed=(System.nanoTime() - lineStartTime) / 1000;\n      if (passed < this.lineTimeout) {\n        Thread.sleep(this.lineTimeout - passed);\n        continue;\n      }\n      consumer.message(currentLine.toString());\n      currentLine.setLength(0);\n    }\n  }\n catch (  NullPointerException npe) {\n  }\ncatch (  SocketException e) {\n  }\ncatch (  Exception e) {\n    String mess=e.getMessage();\n    if ((mess != null) && (mess.indexOf(\"Bad file descriptor\") != -1)) {\n    }\n else {\n      e.printStackTrace();\n    }\n  }\n finally {\n    thread=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2591,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void run(){\n  try {\n    StringBuilder currentLine=new StringBuilder();\n    long lineStartTime=0;\n    while (canRun) {\n      while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n        int c=streamReader.read();\n        if (c == -1)         return;\n        if (!canRun)         return;\n        if (currentLine.length() == 0)         lineStartTime=System.nanoTime();\n        currentLine.append((char)c);\n        if (c == '\\n') {\n          consumer.message(currentLine.toString());\n          currentLine.setLength(0);\n        }\n      }\n      long passed=(System.nanoTime() - lineStartTime) / 1000;\n      if (passed < this.lineTimeout) {\n        Thread.sleep(this.lineTimeout - passed);\n        continue;\n      }\n      consumer.message(currentLine.toString());\n      currentLine.setLength(0);\n    }\n  }\n catch (  NullPointerException npe) {\n  }\ncatch (  SocketException e) {\n  }\ncatch (  Exception e) {\n    String mess=e.getMessage();\n    if ((mess != null) && (mess.indexOf(\"Bad file descriptor\") != -1)) {\n    }\n else {\n      e.printStackTrace();\n    }\n  }\n finally {\n    thread=null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (lineTimeout == 0 || currentLine.length() == 0 || streamReader.ready()) {\n  int c=streamReader.read();\n  if (c == -1)   return;\n  if (!canRun)   return;\n  if (currentLine.length() == 0)   lineStartTime=System.nanoTime();\n  currentLine.append((char)c);\n  if (c == '\\n') {\n    consumer.message(currentLine.toString());\n    currentLine.setLength(0);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    },
    "tokenLength" : 11,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 69,
    "startLineNumber" : 78,
    "startColumnNumber" : 15,
    "endLineNumber" : 78,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ ]
}