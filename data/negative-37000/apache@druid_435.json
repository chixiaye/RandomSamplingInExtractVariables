{
  "id" : 435,
  "expression" : "GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3))",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/segment/generator/GeneratorBasicSchemas.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 286,
      "startLineNumber" : 53,
      "startColumnNumber" : 8,
      "endLineNumber" : 61,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 26,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1844,
        "startLineNumber" : 47,
        "startColumnNumber" : 53,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 190,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1865,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "basicSchemaColumns=ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 192,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1894,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<GeneratorColumnSchema> basicSchemaColumns=ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 198,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 4123,
        "startLineNumber" : 45,
        "startColumnNumber" : 9,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<GeneratorColumnSchema> basicSchemaColumns=ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0));\n  List<AggregatorFactory> basicSchemaIngestAggs=new ArrayList<>();\n  basicSchemaIngestAggs.add(new CountAggregatorFactory(\"rows\"));\n  basicSchemaIngestAggs.add(new LongSumAggregatorFactory(\"sumLongSequential\",\"metLongSequential\"));\n  basicSchemaIngestAggs.add(new LongMaxAggregatorFactory(\"maxLongUniform\",\"metLongUniform\"));\n  basicSchemaIngestAggs.add(new DoubleSumAggregatorFactory(\"sumFloatNormal\",\"metFloatNormal\"));\n  basicSchemaIngestAggs.add(new DoubleMinAggregatorFactory(\"minFloatZipf\",\"metFloatZipf\"));\n  basicSchemaIngestAggs.add(new HyperUniquesAggregatorFactory(\"hyper\",\"dimHyperUnique\"));\n  List<AggregatorFactory> basicSchemaIngestAggsExpression=new ArrayList<>();\n  basicSchemaIngestAggsExpression.add(new CountAggregatorFactory(\"rows\"));\n  basicSchemaIngestAggsExpression.add(new LongSumAggregatorFactory(\"sumLongSequential\",null,\"if(sumLongSequential>0 && dimSequential>100 || dimSequential<10 || metLongSequential>3000,sumLongSequential,0)\",ExprMacroTable.nil()));\n  basicSchemaIngestAggsExpression.add(new LongMaxAggregatorFactory(\"maxLongUniform\",\"metLongUniform\"));\n  basicSchemaIngestAggsExpression.add(new DoubleSumAggregatorFactory(\"sumFloatNormal\",null,\"if(sumFloatNormal>0 && dimSequential>100 || dimSequential<10 || metLongSequential>3000,sumFloatNormal,0)\",ExprMacroTable.nil()));\n  basicSchemaIngestAggsExpression.add(new DoubleMinAggregatorFactory(\"minFloatZipf\",\"metFloatZipf\"));\n  basicSchemaIngestAggsExpression.add(new HyperUniquesAggregatorFactory(\"hyper\",\"dimHyperUnique\"));\n  Interval basicSchemaDataInterval=Intervals.of(\"2000-01-01/P1D\");\n  GeneratorSchemaInfo basicSchema=new GeneratorSchemaInfo(basicSchemaColumns,basicSchemaIngestAggs,basicSchemaDataInterval,true);\n  GeneratorSchemaInfo basicSchemaExpression=new GeneratorSchemaInfo(basicSchemaColumns,basicSchemaIngestAggsExpression,basicSchemaDataInterval,true);\n  SCHEMA_INFO_BUILDER.put(\"basic\",basicSchema);\n  SCHEMA_INFO_BUILDER.put(\"expression\",basicSchemaExpression);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 382,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4130,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static {\n  List<GeneratorColumnSchema> basicSchemaColumns=ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0));\n  List<AggregatorFactory> basicSchemaIngestAggs=new ArrayList<>();\n  basicSchemaIngestAggs.add(new CountAggregatorFactory(\"rows\"));\n  basicSchemaIngestAggs.add(new LongSumAggregatorFactory(\"sumLongSequential\",\"metLongSequential\"));\n  basicSchemaIngestAggs.add(new LongMaxAggregatorFactory(\"maxLongUniform\",\"metLongUniform\"));\n  basicSchemaIngestAggs.add(new DoubleSumAggregatorFactory(\"sumFloatNormal\",\"metFloatNormal\"));\n  basicSchemaIngestAggs.add(new DoubleMinAggregatorFactory(\"minFloatZipf\",\"metFloatZipf\"));\n  basicSchemaIngestAggs.add(new HyperUniquesAggregatorFactory(\"hyper\",\"dimHyperUnique\"));\n  List<AggregatorFactory> basicSchemaIngestAggsExpression=new ArrayList<>();\n  basicSchemaIngestAggsExpression.add(new CountAggregatorFactory(\"rows\"));\n  basicSchemaIngestAggsExpression.add(new LongSumAggregatorFactory(\"sumLongSequential\",null,\"if(sumLongSequential>0 && dimSequential>100 || dimSequential<10 || metLongSequential>3000,sumLongSequential,0)\",ExprMacroTable.nil()));\n  basicSchemaIngestAggsExpression.add(new LongMaxAggregatorFactory(\"maxLongUniform\",\"metLongUniform\"));\n  basicSchemaIngestAggsExpression.add(new DoubleSumAggregatorFactory(\"sumFloatNormal\",null,\"if(sumFloatNormal>0 && dimSequential>100 || dimSequential<10 || metLongSequential>3000,sumFloatNormal,0)\",ExprMacroTable.nil()));\n  basicSchemaIngestAggsExpression.add(new DoubleMinAggregatorFactory(\"minFloatZipf\",\"metFloatZipf\"));\n  basicSchemaIngestAggsExpression.add(new HyperUniquesAggregatorFactory(\"hyper\",\"dimHyperUnique\"));\n  Interval basicSchemaDataInterval=Intervals.of(\"2000-01-01/P1D\");\n  GeneratorSchemaInfo basicSchema=new GeneratorSchemaInfo(basicSchemaColumns,basicSchemaIngestAggs,basicSchemaDataInterval,true);\n  GeneratorSchemaInfo basicSchemaExpression=new GeneratorSchemaInfo(basicSchemaColumns,basicSchemaIngestAggsExpression,basicSchemaDataInterval,true);\n  SCHEMA_INFO_BUILDER.put(\"basic\",basicSchema);\n  SCHEMA_INFO_BUILDER.put(\"expression\",basicSchemaExpression);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 384,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1844,
        "startLineNumber" : 47,
        "startColumnNumber" : 53,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "ImmutableList.of(GeneratorColumnSchema.makeSequential(\"dimSequential\",ValueType.STRING,false,1,null,0,1000),GeneratorColumnSchema.makeZipf(\"dimZipf\",ValueType.STRING,false,1,null,1,101,1.0),GeneratorColumnSchema.makeDiscreteUniform(\"dimUniform\",ValueType.STRING,false,1,null,1,100000),GeneratorColumnSchema.makeSequential(\"dimSequentialHalfNull\",ValueType.STRING,false,1,0.5,0,1000),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated\",ValueType.STRING,false,4,null,Arrays.asList(\"Hello\",\"World\",\"Foo\",\"Bar\",\"Baz\"),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeEnumerated(\"dimMultivalEnumerated2\",ValueType.STRING,false,3,null,Arrays.asList(\"Apple\",\"Orange\",\"Xylophone\",\"Corundum\",null),Arrays.asList(0.2,0.25,0.15,0.10,0.3)),GeneratorColumnSchema.makeSequential(\"dimMultivalSequentialWithNulls\",ValueType.STRING,false,8,0.15,1,11),GeneratorColumnSchema.makeSequential(\"dimHyperUnique\",ValueType.STRING,false,1,null,0,100000),GeneratorColumnSchema.makeSequential(\"dimNull\",ValueType.STRING,false,1,1.0,0,1),GeneratorColumnSchema.makeSequential(\"metLongSequential\",ValueType.LONG,true,1,null,0,10000),GeneratorColumnSchema.makeDiscreteUniform(\"metLongUniform\",ValueType.LONG,true,1,null,0,500),GeneratorColumnSchema.makeNormal(\"metFloatNormal\",ValueType.FLOAT,true,1,null,5000.0,1.0,true),GeneratorColumnSchema.makeZipf(\"metFloatZipf\",ValueType.FLOAT,true,1,null,0,1000,1.0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 190,
      "astHeight" : 4
    },
    "tokenLength" : 27,
    "type" : "org.apache.druid.segment.generator.GeneratorColumnSchema"
  } ],
  "positionList" : [ {
    "charLength" : 286,
    "startLineNumber" : 53,
    "startColumnNumber" : 8,
    "endLineNumber" : 61,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}