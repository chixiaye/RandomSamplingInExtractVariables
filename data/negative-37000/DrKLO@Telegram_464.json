{
  "id" : 464,
  "expression" : "previousChunk.loadCompleted",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "previousChunk.loadCompleted",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 140,
      "startColumnNumber" : 61,
      "endLineNumber" : 140,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 140,
        "startColumnNumber" : 60,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!previousChunk.loadCompleted",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 140,
        "startColumnNumber" : 10,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 139,
        "startColumnNumber" : 6,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 139,
        "startColumnNumber" : 6,
        "endLineNumber" : 140,
        "endColumnNumber" : 89
      },
      "nodeContext" : "shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 136,
        "startColumnNumber" : 31,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  id3Decoder=previousChunk.id3Decoder;\n  scratchId3Data=previousChunk.scratchId3Data;\n  shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted;\n  previousExtractor=previousChunk.isExtractorReusable && previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber && !shouldSpliceIn ? previousChunk.extractor : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (previousChunk != null) {\n  id3Decoder=previousChunk.id3Decoder;\n  scratchId3Data=previousChunk.scratchId3Data;\n  shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted;\n  previousExtractor=previousChunk.isExtractorReusable && previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber && !shouldSpliceIn ? previousChunk.extractor : null;\n}\n else {\n  id3Decoder=new Id3Decoder();\n  scratchId3Data=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);\n  shouldSpliceIn=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3463,
        "startLineNumber" : 90,
        "startColumnNumber" : 39,
        "endLineNumber" : 178,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HlsMediaPlaylist.Segment mediaSegment=mediaPlaylist.segments.get(segmentIndexInPlaylist);\n  DataSpec dataSpec=new DataSpec(UriUtil.resolveToUri(mediaPlaylist.baseUri,mediaSegment.url),mediaSegment.byterangeOffset,mediaSegment.byterangeLength,null);\n  boolean mediaSegmentEncrypted=mediaSegmentKey != null;\n  byte[] mediaSegmentIv=mediaSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(mediaSegment.encryptionIV)) : null;\n  DataSource mediaDataSource=buildDataSource(dataSource,mediaSegmentKey,mediaSegmentIv);\n  HlsMediaPlaylist.Segment initSegment=mediaSegment.initializationSegment;\n  DataSpec initDataSpec=null;\n  boolean initSegmentEncrypted=false;\n  DataSource initDataSource=null;\n  if (initSegment != null) {\n    initSegmentEncrypted=initSegmentKey != null;\n    byte[] initSegmentIv=initSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(initSegment.encryptionIV)) : null;\n    Uri initSegmentUri=UriUtil.resolveToUri(mediaPlaylist.baseUri,initSegment.url);\n    initDataSpec=new DataSpec(initSegmentUri,initSegment.byterangeOffset,initSegment.byterangeLength,null);\n    initDataSource=buildDataSource(dataSource,initSegmentKey,initSegmentIv);\n  }\n  long segmentStartTimeInPeriodUs=startOfPlaylistInPeriodUs + mediaSegment.relativeStartTimeUs;\n  long segmentEndTimeInPeriodUs=segmentStartTimeInPeriodUs + mediaSegment.durationUs;\n  int discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence;\n  Extractor previousExtractor=null;\n  Id3Decoder id3Decoder;\n  ParsableByteArray scratchId3Data;\n  boolean shouldSpliceIn;\n  if (previousChunk != null) {\n    id3Decoder=previousChunk.id3Decoder;\n    scratchId3Data=previousChunk.scratchId3Data;\n    shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted;\n    previousExtractor=previousChunk.isExtractorReusable && previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber && !shouldSpliceIn ? previousChunk.extractor : null;\n  }\n else {\n    id3Decoder=new Id3Decoder();\n    scratchId3Data=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);\n    shouldSpliceIn=false;\n  }\n  return new HlsMediaChunk(extractorFactory,mediaDataSource,dataSpec,format,mediaSegmentEncrypted,initDataSource,initDataSpec,initSegmentEncrypted,playlistUrl,muxedCaptionFormats,trackSelectionReason,trackSelectionData,segmentStartTimeInPeriodUs,segmentEndTimeInPeriodUs,mediaPlaylist.mediaSequence + segmentIndexInPlaylist,discontinuitySequenceNumber,mediaSegment.hasGapTag,isMasterTimestampSource,timestampAdjusterProvider.getAdjuster(discontinuitySequenceNumber),mediaSegment.drmInitData,previousExtractor,id3Decoder,scratchId3Data,shouldSpliceIn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5415,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 178,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a new instance.\n * @param extractorFactory A {@link HlsExtractorFactory} from which the HLS media chunk extractoris obtained.\n * @param dataSource The source from which the data should be loaded.\n * @param format The chunk format.\n * @param startOfPlaylistInPeriodUs The position of the playlist in the period in microseconds.\n * @param mediaPlaylist The media playlist from which this chunk was obtained.\n * @param playlistUrl The url of the playlist from which this chunk was obtained.\n * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption information is available in the master playlist.\n * @param trackSelectionReason See {@link #trackSelectionReason}.\n * @param trackSelectionData See {@link #trackSelectionData}.\n * @param isMasterTimestampSource True if the chunk can initialize the timestamp adjuster.\n * @param timestampAdjusterProvider The provider from which to obtain the {@link TimestampAdjuster}.\n * @param previousChunk The {@link HlsMediaChunk} that preceded this one. May be null.\n * @param mediaSegmentKey The media segment decryption key, if fully encrypted. Null otherwise.\n * @param initSegmentKey The initialization segment decryption key, if fully encrypted. Nullotherwise.\n */\npublic static HlsMediaChunk createInstance(HlsExtractorFactory extractorFactory,DataSource dataSource,Format format,long startOfPlaylistInPeriodUs,HlsMediaPlaylist mediaPlaylist,int segmentIndexInPlaylist,Uri playlistUrl,@Nullable List<Format> muxedCaptionFormats,int trackSelectionReason,@Nullable Object trackSelectionData,boolean isMasterTimestampSource,TimestampAdjusterProvider timestampAdjusterProvider,@Nullable HlsMediaChunk previousChunk,@Nullable byte[] mediaSegmentKey,@Nullable byte[] initSegmentKey){\n  HlsMediaPlaylist.Segment mediaSegment=mediaPlaylist.segments.get(segmentIndexInPlaylist);\n  DataSpec dataSpec=new DataSpec(UriUtil.resolveToUri(mediaPlaylist.baseUri,mediaSegment.url),mediaSegment.byterangeOffset,mediaSegment.byterangeLength,null);\n  boolean mediaSegmentEncrypted=mediaSegmentKey != null;\n  byte[] mediaSegmentIv=mediaSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(mediaSegment.encryptionIV)) : null;\n  DataSource mediaDataSource=buildDataSource(dataSource,mediaSegmentKey,mediaSegmentIv);\n  HlsMediaPlaylist.Segment initSegment=mediaSegment.initializationSegment;\n  DataSpec initDataSpec=null;\n  boolean initSegmentEncrypted=false;\n  DataSource initDataSource=null;\n  if (initSegment != null) {\n    initSegmentEncrypted=initSegmentKey != null;\n    byte[] initSegmentIv=initSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(initSegment.encryptionIV)) : null;\n    Uri initSegmentUri=UriUtil.resolveToUri(mediaPlaylist.baseUri,initSegment.url);\n    initDataSpec=new DataSpec(initSegmentUri,initSegment.byterangeOffset,initSegment.byterangeLength,null);\n    initDataSource=buildDataSource(dataSource,initSegmentKey,initSegmentIv);\n  }\n  long segmentStartTimeInPeriodUs=startOfPlaylistInPeriodUs + mediaSegment.relativeStartTimeUs;\n  long segmentEndTimeInPeriodUs=segmentStartTimeInPeriodUs + mediaSegment.durationUs;\n  int discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence;\n  Extractor previousExtractor=null;\n  Id3Decoder id3Decoder;\n  ParsableByteArray scratchId3Data;\n  boolean shouldSpliceIn;\n  if (previousChunk != null) {\n    id3Decoder=previousChunk.id3Decoder;\n    scratchId3Data=previousChunk.scratchId3Data;\n    shouldSpliceIn=!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted;\n    previousExtractor=previousChunk.isExtractorReusable && previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber && !shouldSpliceIn ? previousChunk.extractor : null;\n  }\n else {\n    id3Decoder=new Id3Decoder();\n    scratchId3Data=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);\n    shouldSpliceIn=false;\n  }\n  return new HlsMediaChunk(extractorFactory,mediaDataSource,dataSpec,format,mediaSegmentEncrypted,initDataSource,initDataSpec,initSegmentEncrypted,playlistUrl,muxedCaptionFormats,trackSelectionReason,trackSelectionData,segmentStartTimeInPeriodUs,segmentEndTimeInPeriodUs,mediaPlaylist.mediaSequence + segmentIndexInPlaylist,discontinuitySequenceNumber,mediaSegment.hasGapTag,isMasterTimestampSource,timestampAdjusterProvider.getAdjuster(discontinuitySequenceNumber),mediaSegment.drmInitData,previousExtractor,id3Decoder,scratchId3Data,shouldSpliceIn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 140,
        "startColumnNumber" : 10,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!playlistUrl.equals(previousChunk.playlistUrl) || !previousChunk.loadCompleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 140,
    "startColumnNumber" : 61,
    "endLineNumber" : 140,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}