{
  "id" : 28,
  "expression" : "Liquid.class",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/io/JsonIO.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Liquid.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 100,
      "startColumnNumber" : 27,
      "endLineNumber" : 100,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 10
      },
      "nodeContext" : "json.setSerializer(Liquid.class,new Serializer<>(){\n  @Override public void write(  Json json,  Liquid object,  Class knownType){\n    json.writeValue(object.name);\n  }\n  @Override public Liquid read(  Json json,  JsonValue jsonData,  Class type){\n    if (jsonData.asString() == null)     return Liquids.water;\n    Liquid i=Vars.content.getByName(ContentType.liquid,jsonData.asString());\n    return i == null ? Liquids.water : i;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 11
      },
      "nodeContext" : "json.setSerializer(Liquid.class,new Serializer<>(){\n  @Override public void write(  Json json,  Liquid object,  Class knownType){\n    json.writeValue(object.name);\n  }\n  @Override public Liquid read(  Json json,  JsonValue jsonData,  Class type){\n    if (jsonData.asString() == null)     return Liquids.water;\n    Liquid i=Vars.content.getByName(ContentType.liquid,jsonData.asString());\n    return i == null ? Liquids.water : i;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 93,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5371,
        "startLineNumber" : 68,
        "startColumnNumber" : 32,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  json.setElementType(Rules.class,\"spawns\",SpawnGroup.class);\n  json.setElementType(Rules.class,\"loadout\",ItemStack.class);\n  json.setSerializer(Sector.class,new Serializer<>(){\n    @Override public void write(    Json json,    Sector object,    Class knownType){\n      json.writeValue(object.planet.name + \"-\" + object.id);\n    }\n    @Override public Sector read(    Json json,    JsonValue jsonData,    Class type){\n      String name=jsonData.asString();\n      int idx=name.lastIndexOf('-');\n      return Vars.content.<Planet>getByName(ContentType.planet,name.substring(0,idx)).sectors.get(Integer.parseInt(name.substring(idx + 1)));\n    }\n  }\n);\n  json.setSerializer(SectorPreset.class,new Serializer<>(){\n    @Override public void write(    Json json,    SectorPreset object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public SectorPreset read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.sector,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(Liquid.class,new Serializer<>(){\n    @Override public void write(    Json json,    Liquid object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Liquid read(    Json json,    JsonValue jsonData,    Class type){\n      if (jsonData.asString() == null)       return Liquids.water;\n      Liquid i=Vars.content.getByName(ContentType.liquid,jsonData.asString());\n      return i == null ? Liquids.water : i;\n    }\n  }\n);\n  json.setSerializer(Item.class,new Serializer<>(){\n    @Override public void write(    Json json,    Item object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Item read(    Json json,    JsonValue jsonData,    Class type){\n      if (jsonData.asString() == null)       return Items.copper;\n      Item i=Vars.content.getByName(ContentType.item,jsonData.asString());\n      return i == null ? Items.copper : i;\n    }\n  }\n);\n  json.setSerializer(Team.class,new Serializer<>(){\n    @Override public void write(    Json json,    Team object,    Class knownType){\n      json.writeValue(object.id);\n    }\n    @Override public Team read(    Json json,    JsonValue jsonData,    Class type){\n      return Team.get(jsonData.asInt());\n    }\n  }\n);\n  json.setSerializer(Block.class,new Serializer<>(){\n    @Override public void write(    Json json,    Block object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Block read(    Json json,    JsonValue jsonData,    Class type){\n      Block block=Vars.content.getByName(ContentType.block,jsonData.asString());\n      return block == null ? Blocks.air : block;\n    }\n  }\n);\n  json.setSerializer(Weather.class,new Serializer<>(){\n    @Override public void write(    Json json,    Weather object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Weather read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.weather,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(UnitType.class,new Serializer<>(){\n    @Override public void write(    Json json,    UnitType object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public UnitType read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.unit,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(ItemStack.class,new Serializer<>(){\n    @Override public void write(    Json json,    ItemStack object,    Class knownType){\n      json.writeObjectStart();\n      json.writeValue(\"item\",object.item);\n      json.writeValue(\"amount\",object.amount);\n      json.writeObjectEnd();\n    }\n    @Override public ItemStack read(    Json json,    JsonValue jsonData,    Class type){\n      return new ItemStack(json.getSerializer(Item.class).read(json,jsonData.get(\"item\"),Item.class),jsonData.getInt(\"amount\"));\n    }\n  }\n);\n  json.setSerializer(UnlockableContent.class,new Serializer<>(){\n    @Override public void write(    Json json,    UnlockableContent object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public UnlockableContent read(    Json json,    JsonValue jsonData,    Class type){\n      String str=jsonData.asString();\n      Item item=Vars.content.getByName(ContentType.item,str);\n      Liquid liquid=Vars.content.getByName(ContentType.liquid,str);\n      return item != null ? item : liquid;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 877,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5399,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static void apply(Json json){\n  json.setElementType(Rules.class,\"spawns\",SpawnGroup.class);\n  json.setElementType(Rules.class,\"loadout\",ItemStack.class);\n  json.setSerializer(Sector.class,new Serializer<>(){\n    @Override public void write(    Json json,    Sector object,    Class knownType){\n      json.writeValue(object.planet.name + \"-\" + object.id);\n    }\n    @Override public Sector read(    Json json,    JsonValue jsonData,    Class type){\n      String name=jsonData.asString();\n      int idx=name.lastIndexOf('-');\n      return Vars.content.<Planet>getByName(ContentType.planet,name.substring(0,idx)).sectors.get(Integer.parseInt(name.substring(idx + 1)));\n    }\n  }\n);\n  json.setSerializer(SectorPreset.class,new Serializer<>(){\n    @Override public void write(    Json json,    SectorPreset object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public SectorPreset read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.sector,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(Liquid.class,new Serializer<>(){\n    @Override public void write(    Json json,    Liquid object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Liquid read(    Json json,    JsonValue jsonData,    Class type){\n      if (jsonData.asString() == null)       return Liquids.water;\n      Liquid i=Vars.content.getByName(ContentType.liquid,jsonData.asString());\n      return i == null ? Liquids.water : i;\n    }\n  }\n);\n  json.setSerializer(Item.class,new Serializer<>(){\n    @Override public void write(    Json json,    Item object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Item read(    Json json,    JsonValue jsonData,    Class type){\n      if (jsonData.asString() == null)       return Items.copper;\n      Item i=Vars.content.getByName(ContentType.item,jsonData.asString());\n      return i == null ? Items.copper : i;\n    }\n  }\n);\n  json.setSerializer(Team.class,new Serializer<>(){\n    @Override public void write(    Json json,    Team object,    Class knownType){\n      json.writeValue(object.id);\n    }\n    @Override public Team read(    Json json,    JsonValue jsonData,    Class type){\n      return Team.get(jsonData.asInt());\n    }\n  }\n);\n  json.setSerializer(Block.class,new Serializer<>(){\n    @Override public void write(    Json json,    Block object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Block read(    Json json,    JsonValue jsonData,    Class type){\n      Block block=Vars.content.getByName(ContentType.block,jsonData.asString());\n      return block == null ? Blocks.air : block;\n    }\n  }\n);\n  json.setSerializer(Weather.class,new Serializer<>(){\n    @Override public void write(    Json json,    Weather object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public Weather read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.weather,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(UnitType.class,new Serializer<>(){\n    @Override public void write(    Json json,    UnitType object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public UnitType read(    Json json,    JsonValue jsonData,    Class type){\n      return Vars.content.getByName(ContentType.unit,jsonData.asString());\n    }\n  }\n);\n  json.setSerializer(ItemStack.class,new Serializer<>(){\n    @Override public void write(    Json json,    ItemStack object,    Class knownType){\n      json.writeObjectStart();\n      json.writeValue(\"item\",object.item);\n      json.writeValue(\"amount\",object.amount);\n      json.writeObjectEnd();\n    }\n    @Override public ItemStack read(    Json json,    JsonValue jsonData,    Class type){\n      return new ItemStack(json.getSerializer(Item.class).read(json,jsonData.get(\"item\"),Item.class),jsonData.getInt(\"amount\"));\n    }\n  }\n);\n  json.setSerializer(UnlockableContent.class,new Serializer<>(){\n    @Override public void write(    Json json,    UnlockableContent object,    Class knownType){\n      json.writeValue(object.name);\n    }\n    @Override public UnlockableContent read(    Json json,    JsonValue jsonData,    Class type){\n      String str=jsonData.asString();\n      Item item=Vars.content.getByName(ContentType.item,str);\n      Liquid liquid=Vars.content.getByName(ContentType.liquid,str);\n      return item != null ? item : liquid;\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 885,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 10
      },
      "nodeContext" : "json.setSerializer(Liquid.class,new Serializer<>(){\n  @Override public void write(  Json json,  Liquid object,  Class knownType){\n    json.writeValue(object.name);\n  }\n  @Override public Liquid read(  Json json,  JsonValue jsonData,  Class type){\n    if (jsonData.asString() == null)     return Liquids.water;\n    Liquid i=Vars.content.getByName(ContentType.liquid,jsonData.asString());\n    return i == null ? Liquids.water : i;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 92,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<mindustry.type.Liquid>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 100,
    "startColumnNumber" : 27,
    "endLineNumber" : 100,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}