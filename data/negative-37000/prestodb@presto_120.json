{
  "id" : 120,
  "expression" : "\"SELECT 2.0\"",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestDataVerification.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"SELECT 2.0\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 156,
      "startColumnNumber" : 78,
      "endLineNumber" : 156,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 156,
        "startColumnNumber" : 45,
        "endLineNumber" : 156,
        "endColumnNumber" : 91
      },
      "nodeContext" : "runVerification(\"SELECT rand()\",\"SELECT 2.0\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 156,
        "startColumnNumber" : 37,
        "endLineNumber" : 156,
        "endColumnNumber" : 91
      },
      "nodeContext" : "event=runVerification(\"SELECT rand()\",\"SELECT 2.0\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Optional<VerifierQueryEvent> event=runVerification(\"SELECT rand()\",\"SELECT 2.0\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Optional<VerifierQueryEvent> event=runVerification(\"SELECT rand()\",\"SELECT 2.0\");\n  assertTrue(event.isPresent());\n  assertEquals(event.get().getSkippedReason(),NON_DETERMINISTIC.name());\n  assertEvent(event.get(),SKIPPED,Optional.of(NON_DETERMINISTIC_COLUMNS),Optional.of(\"COLUMN_MISMATCH\"),Optional.of(\"Test state SUCCEEDED, Control state SUCCEEDED.\\n\\n\" + \"COLUMN MISMATCH\\n\" + \"Control 1 rows, Test 1 rows\\n\"+ \"Mismatched Columns:\\n\"+ \"  _col0 \\\\(double\\\\) relative error: .*\\n\"+ \"    control\\t\\\\(sum: .*, NaN: 0, \\\\+infinity: 0, -infinity: 0, mean: .*\\\\)\\n\"+ \"    test\\t\\\\(sum: 2\\\\.0, NaN: 0, \\\\+infinity: 0, -infinity: 0, mean: 2.0\\\\)\\n\"));\n  List<DeterminismAnalysisRun> runs=event.get().getDeterminismAnalysisDetails().getRuns();\n  assertEquals(runs.size(),1);\n  assertDeterminismAnalysisRun(runs.get(0),false);\n  getQueryRunner().execute(\"CREATE TABLE non_deterministic_test (x double)\");\n  event=runVerification(\"INSERT INTO non_deterministic_test SELECT rand()\",\"INSERT INTO non_deterministic_test SELECT 2.0\");\n  assertTrue(event.isPresent());\n  assertEquals(event.get().getSkippedReason(),NON_DETERMINISTIC.name());\n  runs=event.get().getDeterminismAnalysisDetails().getRuns();\n  assertEquals(runs.size(),1);\n  assertDeterminismAnalysisRun(runs.get(0),true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1702,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNonDeterministic(){\n  Optional<VerifierQueryEvent> event=runVerification(\"SELECT rand()\",\"SELECT 2.0\");\n  assertTrue(event.isPresent());\n  assertEquals(event.get().getSkippedReason(),NON_DETERMINISTIC.name());\n  assertEvent(event.get(),SKIPPED,Optional.of(NON_DETERMINISTIC_COLUMNS),Optional.of(\"COLUMN_MISMATCH\"),Optional.of(\"Test state SUCCEEDED, Control state SUCCEEDED.\\n\\n\" + \"COLUMN MISMATCH\\n\" + \"Control 1 rows, Test 1 rows\\n\"+ \"Mismatched Columns:\\n\"+ \"  _col0 \\\\(double\\\\) relative error: .*\\n\"+ \"    control\\t\\\\(sum: .*, NaN: 0, \\\\+infinity: 0, -infinity: 0, mean: .*\\\\)\\n\"+ \"    test\\t\\\\(sum: 2\\\\.0, NaN: 0, \\\\+infinity: 0, -infinity: 0, mean: 2.0\\\\)\\n\"));\n  List<DeterminismAnalysisRun> runs=event.get().getDeterminismAnalysisDetails().getRuns();\n  assertEquals(runs.size(),1);\n  assertDeterminismAnalysisRun(runs.get(0),false);\n  getQueryRunner().execute(\"CREATE TABLE non_deterministic_test (x double)\");\n  event=runVerification(\"INSERT INTO non_deterministic_test SELECT rand()\",\"INSERT INTO non_deterministic_test SELECT 2.0\");\n  assertTrue(event.isPresent());\n  assertEquals(event.get().getSkippedReason(),NON_DETERMINISTIC.name());\n  runs=event.get().getDeterminismAnalysisDetails().getRuns();\n  assertEquals(runs.size(),1);\n  assertDeterminismAnalysisRun(runs.get(0),true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Optional<VerifierQueryEvent> event=runVerification(\"SELECT rand()\",\"SELECT 2.0\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 156,
    "startColumnNumber" : 78,
    "endLineNumber" : 156,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}