{
  "id" : 59,
  "expression" : "sendResult.getMessageQueue()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sendResult.getMessageQueue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 124,
      "startColumnNumber" : 19,
      "endLineNumber" : 124,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 124,
        "startColumnNumber" : 19,
        "endLineNumber" : 124,
        "endColumnNumber" : 60
      },
      "nodeContext" : "sendResult.getMessageQueue().getQueueId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(sendResult.getMessageQueue().getQueueId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(sendResult.getMessageQueue().getQueueId()).isEqualTo(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertThat(sendResult.getMessageQueue().getQueueId()).isEqualTo(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 107,
        "startColumnNumber" : 112,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  doAnswer(new Answer(){\n    @Override public Object answer(    InvocationOnMock mock) throws Throwable {\n      RemotingCommand request=mock.getArgument(1);\n      return createSuccessResponse(request);\n    }\n  }\n).when(remotingClient).invokeSync(anyString(),any(RemotingCommand.class),anyLong());\n  SendMessageRequestHeader requestHeader=createSendMessageRequestHeader();\n  SendResult sendResult=mqClientAPI.sendMessage(brokerAddr,brokerName,msg,requestHeader,3 * 1000,CommunicationMode.SYNC,new SendMessageContext(),defaultMQProducerImpl);\n  assertThat(sendResult.getSendStatus()).isEqualTo(SendStatus.SEND_OK);\n  assertThat(sendResult.getOffsetMsgId()).isEqualTo(\"123\");\n  assertThat(sendResult.getQueueOffset()).isEqualTo(123L);\n  assertThat(sendResult.getMessageQueue().getQueueId()).isEqualTo(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSendMessageSync_Success() throws InterruptedException, RemotingException, MQBrokerException {\n  doAnswer(new Answer(){\n    @Override public Object answer(    InvocationOnMock mock) throws Throwable {\n      RemotingCommand request=mock.getArgument(1);\n      return createSuccessResponse(request);\n    }\n  }\n).when(remotingClient).invokeSync(anyString(),any(RemotingCommand.class),anyLong());\n  SendMessageRequestHeader requestHeader=createSendMessageRequestHeader();\n  SendResult sendResult=mqClientAPI.sendMessage(brokerAddr,brokerName,msg,requestHeader,3 * 1000,CommunicationMode.SYNC,new SendMessageContext(),defaultMQProducerImpl);\n  assertThat(sendResult.getSendStatus()).isEqualTo(SendStatus.SEND_OK);\n  assertThat(sendResult.getOffsetMsgId()).isEqualTo(\"123\");\n  assertThat(sendResult.getQueueOffset()).isEqualTo(123L);\n  assertThat(sendResult.getMessageQueue().getQueueId()).isEqualTo(1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertThat(sendResult.getMessageQueue().getQueueId()).isEqualTo(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.rocketmq.common.message.MessageQueue"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 124,
    "startColumnNumber" : 19,
    "endLineNumber" : 124,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}