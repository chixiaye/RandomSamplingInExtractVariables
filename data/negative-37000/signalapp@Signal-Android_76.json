{
  "id" : 76,
  "expression" : "fallbackPhotoProvider != null",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/components/AvatarImageView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fallbackPhotoProvider != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 250,
      "startColumnNumber" : 10,
      "endLineNumber" : 250,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (fallbackPhotoProvider != null) {\n  setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n}\n else {\n  setImageDrawable(unknownRecipientDrawable);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 247,
        "startColumnNumber" : 11,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  recipientContactPhoto=null;\n  requestManager.clear(this);\n  if (fallbackPhotoProvider != null) {\n    setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n  }\n else {\n    setImageDrawable(unknownRecipientDrawable);\n  }\n  disableQuickContact();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (recipient != null) {\n  RecipientContactPhoto photo=(recipient.isSelf() && avatarOptions.useSelfProfileAvatar) ? new RecipientContactPhoto(recipient,new ProfileContactPhoto(Recipient.self(),Recipient.self().getProfileAvatar())) : new RecipientContactPhoto(recipient);\n  boolean shouldBlur=recipient.shouldBlurAvatar();\n  ChatColors chatColors=recipient.getChatColors();\n  if (!photo.equals(recipientContactPhoto) || shouldBlur != blurred || !Objects.equals(chatColors,this.chatColors)) {\n    requestManager.clear(this);\n    this.chatColors=chatColors;\n    recipientContactPhoto=photo;\n    Drawable fallbackContactPhotoDrawable=size == SIZE_SMALL ? photo.recipient.getSmallFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this)) : photo.recipient.getFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this));\n    if (fixedSizeTarget != null) {\n      requestManager.clear(fixedSizeTarget);\n    }\n    if (photo.contactPhoto != null) {\n      List<Transformation<Bitmap>> transforms=new ArrayList<>();\n      if (shouldBlur) {\n        transforms.add(new BlurTransformation(ApplicationDependencies.getApplication(),0.25f,BlurTransformation.MAX_RADIUS));\n      }\n      transforms.add(new CircleCrop());\n      blurred=shouldBlur;\n      GlideRequest<Drawable> request=requestManager.load(photo.contactPhoto).fallback(fallbackContactPhotoDrawable).error(fallbackContactPhotoDrawable).diskCacheStrategy(DiskCacheStrategy.ALL).downsample(DownsampleStrategy.CENTER_INSIDE).transform(new MultiTransformation<>(transforms));\n      if (avatarOptions.fixedSize > 0) {\n        fixedSizeTarget=new FixedSizeTarget(avatarOptions.fixedSize);\n        request.into(fixedSizeTarget);\n      }\n else {\n        request.into(this);\n      }\n    }\n else {\n      setImageDrawable(fallbackContactPhotoDrawable);\n    }\n  }\n  setAvatarClickHandler(recipient,avatarOptions.quickContactEnabled);\n}\n else {\n  recipientContactPhoto=null;\n  requestManager.clear(this);\n  if (fallbackPhotoProvider != null) {\n    setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n  }\n else {\n    setImageDrawable(unknownRecipientDrawable);\n  }\n  disableQuickContact();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 196,
        "startColumnNumber" : 133,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (recipient != null) {\n    RecipientContactPhoto photo=(recipient.isSelf() && avatarOptions.useSelfProfileAvatar) ? new RecipientContactPhoto(recipient,new ProfileContactPhoto(Recipient.self(),Recipient.self().getProfileAvatar())) : new RecipientContactPhoto(recipient);\n    boolean shouldBlur=recipient.shouldBlurAvatar();\n    ChatColors chatColors=recipient.getChatColors();\n    if (!photo.equals(recipientContactPhoto) || shouldBlur != blurred || !Objects.equals(chatColors,this.chatColors)) {\n      requestManager.clear(this);\n      this.chatColors=chatColors;\n      recipientContactPhoto=photo;\n      Drawable fallbackContactPhotoDrawable=size == SIZE_SMALL ? photo.recipient.getSmallFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this)) : photo.recipient.getFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this));\n      if (fixedSizeTarget != null) {\n        requestManager.clear(fixedSizeTarget);\n      }\n      if (photo.contactPhoto != null) {\n        List<Transformation<Bitmap>> transforms=new ArrayList<>();\n        if (shouldBlur) {\n          transforms.add(new BlurTransformation(ApplicationDependencies.getApplication(),0.25f,BlurTransformation.MAX_RADIUS));\n        }\n        transforms.add(new CircleCrop());\n        blurred=shouldBlur;\n        GlideRequest<Drawable> request=requestManager.load(photo.contactPhoto).fallback(fallbackContactPhotoDrawable).error(fallbackContactPhotoDrawable).diskCacheStrategy(DiskCacheStrategy.ALL).downsample(DownsampleStrategy.CENTER_INSIDE).transform(new MultiTransformation<>(transforms));\n        if (avatarOptions.fixedSize > 0) {\n          fixedSizeTarget=new FixedSizeTarget(avatarOptions.fixedSize);\n          request.into(fixedSizeTarget);\n        }\n else {\n          request.into(this);\n        }\n      }\n else {\n        setImageDrawable(fallbackContactPhotoDrawable);\n      }\n    }\n    setAvatarClickHandler(recipient,avatarOptions.quickContactEnabled);\n  }\n else {\n    recipientContactPhoto=null;\n    requestManager.clear(this);\n    if (fallbackPhotoProvider != null) {\n      setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n    }\n else {\n      setImageDrawable(unknownRecipientDrawable);\n    }\n    disableQuickContact();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3398,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void setAvatar(@NonNull GlideRequests requestManager,@Nullable Recipient recipient,@NonNull AvatarOptions avatarOptions){\n  if (recipient != null) {\n    RecipientContactPhoto photo=(recipient.isSelf() && avatarOptions.useSelfProfileAvatar) ? new RecipientContactPhoto(recipient,new ProfileContactPhoto(Recipient.self(),Recipient.self().getProfileAvatar())) : new RecipientContactPhoto(recipient);\n    boolean shouldBlur=recipient.shouldBlurAvatar();\n    ChatColors chatColors=recipient.getChatColors();\n    if (!photo.equals(recipientContactPhoto) || shouldBlur != blurred || !Objects.equals(chatColors,this.chatColors)) {\n      requestManager.clear(this);\n      this.chatColors=chatColors;\n      recipientContactPhoto=photo;\n      Drawable fallbackContactPhotoDrawable=size == SIZE_SMALL ? photo.recipient.getSmallFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this)) : photo.recipient.getFallbackContactPhotoDrawable(getContext(),inverted,fallbackPhotoProvider,ViewUtil.getWidth(this));\n      if (fixedSizeTarget != null) {\n        requestManager.clear(fixedSizeTarget);\n      }\n      if (photo.contactPhoto != null) {\n        List<Transformation<Bitmap>> transforms=new ArrayList<>();\n        if (shouldBlur) {\n          transforms.add(new BlurTransformation(ApplicationDependencies.getApplication(),0.25f,BlurTransformation.MAX_RADIUS));\n        }\n        transforms.add(new CircleCrop());\n        blurred=shouldBlur;\n        GlideRequest<Drawable> request=requestManager.load(photo.contactPhoto).fallback(fallbackContactPhotoDrawable).error(fallbackContactPhotoDrawable).diskCacheStrategy(DiskCacheStrategy.ALL).downsample(DownsampleStrategy.CENTER_INSIDE).transform(new MultiTransformation<>(transforms));\n        if (avatarOptions.fixedSize > 0) {\n          fixedSizeTarget=new FixedSizeTarget(avatarOptions.fixedSize);\n          request.into(fixedSizeTarget);\n        }\n else {\n          request.into(this);\n        }\n      }\n else {\n        setImageDrawable(fallbackContactPhotoDrawable);\n      }\n    }\n    setAvatarClickHandler(recipient,avatarOptions.quickContactEnabled);\n  }\n else {\n    recipientContactPhoto=null;\n    requestManager.clear(this);\n    if (fallbackPhotoProvider != null) {\n      setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n    }\n else {\n      setImageDrawable(unknownRecipientDrawable);\n    }\n    disableQuickContact();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 319,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (fallbackPhotoProvider != null) {\n  setImageDrawable(fallbackPhotoProvider.getPhotoForRecipientWithoutName().asDrawable(getContext(),AvatarColor.UNKNOWN,inverted));\n}\n else {\n  setImageDrawable(unknownRecipientDrawable);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 250,
    "startColumnNumber" : 10,
    "endLineNumber" : 250,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}