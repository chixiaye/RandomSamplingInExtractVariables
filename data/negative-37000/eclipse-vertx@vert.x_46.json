{
  "id" : 46,
  "expression" : "GlobalEventExecutor",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "GlobalEventExecutor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 161,
      "startColumnNumber" : 80,
      "endLineNumber" : 161,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 161,
        "startColumnNumber" : 80,
        "endLineNumber" : 161,
        "endColumnNumber" : 108
      },
      "nodeContext" : "GlobalEventExecutor.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 161,
        "startColumnNumber" : 29,
        "endLineNumber" : 161,
        "endColumnNumber" : 109
      },
      "nodeContext" : "new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 109
      },
      "nodeContext" : "serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 110
      },
      "nodeContext" : "serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3093,
        "startLineNumber" : 160,
        "startColumnNumber" : 39,
        "endLineNumber" : 228,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n  ServerBootstrap bootstrap=new ServerBootstrap();\n  bootstrap.group(availableWorkers);\n  bootstrap.channel(NioServerSocketChannel.class);\n  sslHelper.validate(vertx);\n  bootstrap.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      if (connectStream.isPaused()) {\n        ch.close();\n        return;\n      }\n      ChannelPipeline pipeline=ch.pipeline();\n      if (sslHelper.isSSL()) {\n        SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n        pipeline.addLast(\"ssl\",sslHandler);\n      }\n      if (sslHelper.isSSL()) {\n        pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n      }\n      if (options.getIdleTimeout() > 0) {\n        pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n      }\n      pipeline.addLast(\"handler\",new ServerHandler());\n    }\n  }\n);\n  applyConnectionOptions(bootstrap);\n  if (connectStream.handler() != null) {\n    handlerManager.addHandler(connectStream.handler(),listenContext);\n  }\n  try {\n    InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n    bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n    this.addListener(() -> {\n      if (bindFuture.isSuccess()) {\n        log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n        NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n        NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n        vertx.sharedNetServers().put(id,NetServerImpl.this);\n        metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n      }\n else {\n        vertx.sharedNetServers().remove(id);\n      }\n    }\n);\n    serverChannelGroup.add(bindFuture.channel());\n  }\n catch (  Throwable t) {\n    if (listenHandler != null) {\n      vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n    }\n else {\n      log.error(t);\n    }\n    listening=false;\n    return this;\n  }\n  if (port != 0) {\n    vertx.sharedNetServers().put(id,this);\n  }\n  actualServer=this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 341,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3546,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 236,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (shared == null || port == 0) {\n  serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n  ServerBootstrap bootstrap=new ServerBootstrap();\n  bootstrap.group(availableWorkers);\n  bootstrap.channel(NioServerSocketChannel.class);\n  sslHelper.validate(vertx);\n  bootstrap.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      if (connectStream.isPaused()) {\n        ch.close();\n        return;\n      }\n      ChannelPipeline pipeline=ch.pipeline();\n      if (sslHelper.isSSL()) {\n        SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n        pipeline.addLast(\"ssl\",sslHandler);\n      }\n      if (sslHelper.isSSL()) {\n        pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n      }\n      if (options.getIdleTimeout() > 0) {\n        pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n      }\n      pipeline.addLast(\"handler\",new ServerHandler());\n    }\n  }\n);\n  applyConnectionOptions(bootstrap);\n  if (connectStream.handler() != null) {\n    handlerManager.addHandler(connectStream.handler(),listenContext);\n  }\n  try {\n    InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n    bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n    this.addListener(() -> {\n      if (bindFuture.isSuccess()) {\n        log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n        NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n        NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n        vertx.sharedNetServers().put(id,NetServerImpl.this);\n        metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n      }\n else {\n        vertx.sharedNetServers().remove(id);\n      }\n    }\n);\n    serverChannelGroup.add(bindFuture.channel());\n  }\n catch (  Throwable t) {\n    if (listenHandler != null) {\n      vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n    }\n else {\n      log.error(t);\n    }\n    listening=false;\n    return this;\n  }\n  if (port != 0) {\n    vertx.sharedNetServers().put(id,this);\n  }\n  actualServer=this;\n}\n else {\n  actualServer=shared;\n  this.actualPort=shared.actualPort();\n  metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n  if (connectStream.handler() != null) {\n    actualServer.handlerManager.addHandler(connectStream.handler(),listenContext);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 398,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 4718,
        "startLineNumber" : 156,
        "startColumnNumber" : 44,
        "endLineNumber" : 259,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.actualPort=port;\n  id=new ServerID(port,host);\n  NetServerImpl shared=vertx.sharedNetServers().get(id);\n  if (shared == null || port == 0) {\n    serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n    ServerBootstrap bootstrap=new ServerBootstrap();\n    bootstrap.group(availableWorkers);\n    bootstrap.channel(NioServerSocketChannel.class);\n    sslHelper.validate(vertx);\n    bootstrap.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        if (connectStream.isPaused()) {\n          ch.close();\n          return;\n        }\n        ChannelPipeline pipeline=ch.pipeline();\n        if (sslHelper.isSSL()) {\n          SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n          pipeline.addLast(\"ssl\",sslHandler);\n        }\n        if (sslHelper.isSSL()) {\n          pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n        }\n        if (options.getIdleTimeout() > 0) {\n          pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n        }\n        pipeline.addLast(\"handler\",new ServerHandler());\n      }\n    }\n);\n    applyConnectionOptions(bootstrap);\n    if (connectStream.handler() != null) {\n      handlerManager.addHandler(connectStream.handler(),listenContext);\n    }\n    try {\n      InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n      bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n      this.addListener(() -> {\n        if (bindFuture.isSuccess()) {\n          log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n          NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n          NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n          vertx.sharedNetServers().put(id,NetServerImpl.this);\n          metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n        }\n else {\n          vertx.sharedNetServers().remove(id);\n        }\n      }\n);\n      serverChannelGroup.add(bindFuture.channel());\n    }\n catch (    Throwable t) {\n      if (listenHandler != null) {\n        vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n      }\n else {\n        log.error(t);\n      }\n      listening=false;\n      return this;\n    }\n    if (port != 0) {\n      vertx.sharedNetServers().put(id,this);\n    }\n    actualServer=this;\n  }\n else {\n    actualServer=shared;\n    this.actualPort=shared.actualPort();\n    metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n    if (connectStream.handler() != null) {\n      actualServer.handlerManager.addHandler(connectStream.handler(),listenContext);\n    }\n  }\n  actualServer.addListener(() -> {\n    if (listenHandler != null) {\n      AsyncResult<NetServer> res;\n      if (actualServer.bindFuture.isSuccess()) {\n        res=Future.succeededFuture(NetServerImpl.this);\n      }\n else {\n        listening=false;\n        res=Future.failedFuture(actualServer.bindFuture.cause());\n      }\n      listenContext.runOnContext(v -> listenHandler.handle(res));\n    }\n else     if (!actualServer.bindFuture.isSuccess()) {\n      log.error(\"Failed to listen\",actualServer.bindFuture.cause());\n      listening=false;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 507,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4758,
        "startLineNumber" : 156,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (vertx.sharedNetServers()) {\n  this.actualPort=port;\n  id=new ServerID(port,host);\n  NetServerImpl shared=vertx.sharedNetServers().get(id);\n  if (shared == null || port == 0) {\n    serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n    ServerBootstrap bootstrap=new ServerBootstrap();\n    bootstrap.group(availableWorkers);\n    bootstrap.channel(NioServerSocketChannel.class);\n    sslHelper.validate(vertx);\n    bootstrap.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        if (connectStream.isPaused()) {\n          ch.close();\n          return;\n        }\n        ChannelPipeline pipeline=ch.pipeline();\n        if (sslHelper.isSSL()) {\n          SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n          pipeline.addLast(\"ssl\",sslHandler);\n        }\n        if (sslHelper.isSSL()) {\n          pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n        }\n        if (options.getIdleTimeout() > 0) {\n          pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n        }\n        pipeline.addLast(\"handler\",new ServerHandler());\n      }\n    }\n);\n    applyConnectionOptions(bootstrap);\n    if (connectStream.handler() != null) {\n      handlerManager.addHandler(connectStream.handler(),listenContext);\n    }\n    try {\n      InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n      bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n      this.addListener(() -> {\n        if (bindFuture.isSuccess()) {\n          log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n          NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n          NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n          vertx.sharedNetServers().put(id,NetServerImpl.this);\n          metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n        }\n else {\n          vertx.sharedNetServers().remove(id);\n        }\n      }\n);\n      serverChannelGroup.add(bindFuture.channel());\n    }\n catch (    Throwable t) {\n      if (listenHandler != null) {\n        vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n      }\n else {\n        log.error(t);\n      }\n      listening=false;\n      return this;\n    }\n    if (port != 0) {\n      vertx.sharedNetServers().put(id,this);\n    }\n    actualServer=this;\n  }\n else {\n    actualServer=shared;\n    this.actualPort=shared.actualPort();\n    metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n    if (connectStream.handler() != null) {\n      actualServer.handlerManager.addHandler(connectStream.handler(),listenContext);\n    }\n  }\n  actualServer.addListener(() -> {\n    if (listenHandler != null) {\n      AsyncResult<NetServer> res;\n      if (actualServer.bindFuture.isSuccess()) {\n        res=Future.succeededFuture(NetServerImpl.this);\n      }\n else {\n        listening=false;\n        res=Future.failedFuture(actualServer.bindFuture.cause());\n      }\n      listenContext.runOnContext(v -> listenHandler.handle(res));\n    }\n else     if (!actualServer.bindFuture.isSuccess()) {\n      log.error(\"Failed to listen\",actualServer.bindFuture.cause());\n      listening=false;\n    }\n  }\n);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 511,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5065,
        "startLineNumber" : 145,
        "startColumnNumber" : 109,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (connectStream.handler() == null) {\n    throw new IllegalStateException(\"Set connect handler first\");\n  }\n  if (listening) {\n    throw new IllegalStateException(\"Listen already called\");\n  }\n  listening=true;\n  listenContext=vertx.getOrCreateContext();\nsynchronized (vertx.sharedNetServers()) {\n    this.actualPort=port;\n    id=new ServerID(port,host);\n    NetServerImpl shared=vertx.sharedNetServers().get(id);\n    if (shared == null || port == 0) {\n      serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n      ServerBootstrap bootstrap=new ServerBootstrap();\n      bootstrap.group(availableWorkers);\n      bootstrap.channel(NioServerSocketChannel.class);\n      sslHelper.validate(vertx);\n      bootstrap.childHandler(new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          if (connectStream.isPaused()) {\n            ch.close();\n            return;\n          }\n          ChannelPipeline pipeline=ch.pipeline();\n          if (sslHelper.isSSL()) {\n            SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n            pipeline.addLast(\"ssl\",sslHandler);\n          }\n          if (sslHelper.isSSL()) {\n            pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n          }\n          if (options.getIdleTimeout() > 0) {\n            pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n          }\n          pipeline.addLast(\"handler\",new ServerHandler());\n        }\n      }\n);\n      applyConnectionOptions(bootstrap);\n      if (connectStream.handler() != null) {\n        handlerManager.addHandler(connectStream.handler(),listenContext);\n      }\n      try {\n        InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n        bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n        this.addListener(() -> {\n          if (bindFuture.isSuccess()) {\n            log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n            NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n            NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n            vertx.sharedNetServers().put(id,NetServerImpl.this);\n            metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n          }\n else {\n            vertx.sharedNetServers().remove(id);\n          }\n        }\n);\n        serverChannelGroup.add(bindFuture.channel());\n      }\n catch (      Throwable t) {\n        if (listenHandler != null) {\n          vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n        }\n else {\n          log.error(t);\n        }\n        listening=false;\n        return this;\n      }\n      if (port != 0) {\n        vertx.sharedNetServers().put(id,this);\n      }\n      actualServer=this;\n    }\n else {\n      actualServer=shared;\n      this.actualPort=shared.actualPort();\n      metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n      if (connectStream.handler() != null) {\n        actualServer.handlerManager.addHandler(connectStream.handler(),listenContext);\n      }\n    }\n    actualServer.addListener(() -> {\n      if (listenHandler != null) {\n        AsyncResult<NetServer> res;\n        if (actualServer.bindFuture.isSuccess()) {\n          res=Future.succeededFuture(NetServerImpl.this);\n        }\n else {\n          listening=false;\n          res=Future.failedFuture(actualServer.bindFuture.cause());\n        }\n        listenContext.runOnContext(v -> listenHandler.handle(res));\n      }\n else       if (!actualServer.bindFuture.isSuccess()) {\n        log.error(\"Failed to listen\",actualServer.bindFuture.cause());\n        listening=false;\n      }\n    }\n);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 544,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5184,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public synchronized NetServer listen(int port,String host,Handler<AsyncResult<NetServer>> listenHandler){\n  if (connectStream.handler() == null) {\n    throw new IllegalStateException(\"Set connect handler first\");\n  }\n  if (listening) {\n    throw new IllegalStateException(\"Listen already called\");\n  }\n  listening=true;\n  listenContext=vertx.getOrCreateContext();\nsynchronized (vertx.sharedNetServers()) {\n    this.actualPort=port;\n    id=new ServerID(port,host);\n    NetServerImpl shared=vertx.sharedNetServers().get(id);\n    if (shared == null || port == 0) {\n      serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n      ServerBootstrap bootstrap=new ServerBootstrap();\n      bootstrap.group(availableWorkers);\n      bootstrap.channel(NioServerSocketChannel.class);\n      sslHelper.validate(vertx);\n      bootstrap.childHandler(new ChannelInitializer<Channel>(){\n        @Override protected void initChannel(        Channel ch) throws Exception {\n          if (connectStream.isPaused()) {\n            ch.close();\n            return;\n          }\n          ChannelPipeline pipeline=ch.pipeline();\n          if (sslHelper.isSSL()) {\n            SslHandler sslHandler=sslHelper.createSslHandler(vertx);\n            pipeline.addLast(\"ssl\",sslHandler);\n          }\n          if (sslHelper.isSSL()) {\n            pipeline.addLast(\"chunkedWriter\",new ChunkedWriteHandler());\n          }\n          if (options.getIdleTimeout() > 0) {\n            pipeline.addLast(\"idle\",new IdleStateHandler(0,0,options.getIdleTimeout()));\n          }\n          pipeline.addLast(\"handler\",new ServerHandler());\n        }\n      }\n);\n      applyConnectionOptions(bootstrap);\n      if (connectStream.handler() != null) {\n        handlerManager.addHandler(connectStream.handler(),listenContext);\n      }\n      try {\n        InetSocketAddress addr=new InetSocketAddress(InetAddress.getByName(host),port);\n        bindFuture=bootstrap.bind(addr).addListener(future -> runListeners());\n        this.addListener(() -> {\n          if (bindFuture.isSuccess()) {\n            log.trace(\"Net server listening on \" + host + \":\"+ bindFuture.channel().localAddress());\n            NetServerImpl.this.actualPort=((InetSocketAddress)bindFuture.channel().localAddress()).getPort();\n            NetServerImpl.this.id=new ServerID(NetServerImpl.this.actualPort,id.host);\n            vertx.sharedNetServers().put(id,NetServerImpl.this);\n            metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n          }\n else {\n            vertx.sharedNetServers().remove(id);\n          }\n        }\n);\n        serverChannelGroup.add(bindFuture.channel());\n      }\n catch (      Throwable t) {\n        if (listenHandler != null) {\n          vertx.runOnContext(v -> listenHandler.handle(Future.failedFuture(t)));\n        }\n else {\n          log.error(t);\n        }\n        listening=false;\n        return this;\n      }\n      if (port != 0) {\n        vertx.sharedNetServers().put(id,this);\n      }\n      actualServer=this;\n    }\n else {\n      actualServer=shared;\n      this.actualPort=shared.actualPort();\n      metrics=vertx.metricsSPI().createMetrics(this,new SocketAddressImpl(id.port,id.host),options);\n      if (connectStream.handler() != null) {\n        actualServer.handlerManager.addHandler(connectStream.handler(),listenContext);\n      }\n    }\n    actualServer.addListener(() -> {\n      if (listenHandler != null) {\n        AsyncResult<NetServer> res;\n        if (actualServer.bindFuture.isSuccess()) {\n          res=Future.succeededFuture(NetServerImpl.this);\n        }\n else {\n          listening=false;\n          res=Future.failedFuture(actualServer.bindFuture.cause());\n        }\n        listenContext.runOnContext(v -> listenHandler.handle(res));\n      }\n else       if (!actualServer.bindFuture.isSuccess()) {\n        log.error(\"Failed to listen\",actualServer.bindFuture.cause());\n        listening=false;\n      }\n    }\n);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 569,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 110
      },
      "nodeContext" : "serverChannelGroup=new DefaultChannelGroup(\"vertx-acceptor-channels\",GlobalEventExecutor.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 161,
    "startColumnNumber" : 80,
    "endLineNumber" : 161,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}