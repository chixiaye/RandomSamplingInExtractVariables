{
  "id" : 243,
  "expression" : "(Argument)parent.get()",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/EclipseNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(Argument)parent.get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 106,
      "startColumnNumber" : 6,
      "endLineNumber" : 106,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 30
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 31
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 94,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((TypeDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((FieldDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((AbstractMethodDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase ARGUMENT:visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((LocalDeclaration)parent.get(),this,(Annotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotation not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 122,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2566,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(CompilationUnitDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(CompilationUnitDeclaration)get());\nbreak;\ncase TYPE:visitor.visitType(this,(TypeDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(TypeDeclaration)get());\nbreak;\ncase FIELD:visitor.visitField(this,(FieldDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(FieldDeclaration)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(Initializer)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(Initializer)get());\nbreak;\ncase METHOD:if (get() instanceof Clinit) return;\nvisitor.visitMethod(this,(AbstractMethodDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(AbstractMethodDeclaration)get());\nbreak;\ncase ARGUMENT:AbstractMethodDeclaration method=(AbstractMethodDeclaration)up().get();\nvisitor.visitMethodArgument(this,(Argument)get(),method);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(Argument)get(),method);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(LocalDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(LocalDeclaration)get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((TypeDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((FieldDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((AbstractMethodDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase ARGUMENT:visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((LocalDeclaration)parent.get(),this,(Annotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotation not expected as child of a \" + up().getKind());\n}\nbreak;\ncase STATEMENT:visitor.visitStatement(this,(Statement)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,(Statement)get());\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 390,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2683,
        "startLineNumber" : 52,
        "startColumnNumber" : 49,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!this.isCompleteParse() && visitor.getClass().isAnnotationPresent(DeferUntilPostDiet.class))   return;\nswitch (getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(CompilationUnitDeclaration)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(CompilationUnitDeclaration)get());\nbreak;\ncase TYPE:visitor.visitType(this,(TypeDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(TypeDeclaration)get());\nbreak;\ncase FIELD:visitor.visitField(this,(FieldDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(FieldDeclaration)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(Initializer)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(Initializer)get());\nbreak;\ncase METHOD:if (get() instanceof Clinit) return;\nvisitor.visitMethod(this,(AbstractMethodDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(AbstractMethodDeclaration)get());\nbreak;\ncase ARGUMENT:AbstractMethodDeclaration method=(AbstractMethodDeclaration)up().get();\nvisitor.visitMethodArgument(this,(Argument)get(),method);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(Argument)get(),method);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(LocalDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(LocalDeclaration)get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((TypeDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((FieldDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((AbstractMethodDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase ARGUMENT:visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((LocalDeclaration)parent.get(),this,(Annotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotation not expected as child of a \" + up().getKind());\n}\nbreak;\ncase STATEMENT:visitor.visitStatement(this,(Statement)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,(Statement)get());\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 406,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2841,
        "startLineNumber" : 49,
        "startColumnNumber" : 1,
        "endLineNumber" : 125,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(EclipseASTVisitor visitor){\n  if (!this.isCompleteParse() && visitor.getClass().isAnnotationPresent(DeferUntilPostDiet.class))   return;\nswitch (getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(CompilationUnitDeclaration)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(CompilationUnitDeclaration)get());\nbreak;\ncase TYPE:visitor.visitType(this,(TypeDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(TypeDeclaration)get());\nbreak;\ncase FIELD:visitor.visitField(this,(FieldDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(FieldDeclaration)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(Initializer)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(Initializer)get());\nbreak;\ncase METHOD:if (get() instanceof Clinit) return;\nvisitor.visitMethod(this,(AbstractMethodDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(AbstractMethodDeclaration)get());\nbreak;\ncase ARGUMENT:AbstractMethodDeclaration method=(AbstractMethodDeclaration)up().get();\nvisitor.visitMethodArgument(this,(Argument)get(),method);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(Argument)get(),method);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(LocalDeclaration)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(LocalDeclaration)get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((TypeDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((FieldDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((AbstractMethodDeclaration)up().get(),this,(Annotation)get());\nbreak;\ncase ARGUMENT:visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((LocalDeclaration)parent.get(),this,(Annotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotation not expected as child of a \" + up().getKind());\n}\nbreak;\ncase STATEMENT:visitor.visitStatement(this,(Statement)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,(Statement)get());\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 415,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 30
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "lombok.eclipse.Argument"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 106,
    "startColumnNumber" : 6,
    "endLineNumber" : 106,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}