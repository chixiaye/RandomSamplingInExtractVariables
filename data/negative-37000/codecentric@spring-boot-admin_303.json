{
  "id" : 303,
  "expression" : "mvc",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/RegistryControllerTest.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 27,
      "endLineNumber" : 78,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 79,
        "endColumnNumber" : 113
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 80,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 81,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 71
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 83,
        "endColumnNumber" : 42
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 78,
        "startColumnNumber" : 18,
        "endLineNumber" : 83,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 43
      },
      "nodeContext" : "MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 79,
        "endColumnNumber" : 113
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 118
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 50
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 118
      },
      "nodeContext" : "mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 91,
      "startColumnNumber" : 8,
      "endLineNumber" : 91,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 45
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications\")).andExpect(status().isOk())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 113
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 114
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 114
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 93,
      "startColumnNumber" : 8,
      "endLineNumber" : 93,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications?name=twice\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 38
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications?name=twice\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 97,
      "startColumnNumber" : 8,
      "endLineNumber" : 97,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 119
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 120
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 120
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 99,
      "startColumnNumber" : 8,
      "endLineNumber" : 99,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mvc.perform(delete(\"/api/applications/{id}\",id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 101,
      "startColumnNumber" : 8,
      "endLineNumber" : 101,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 103,
      "startColumnNumber" : 32,
      "endLineNumber" : 103,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 103,
        "startColumnNumber" : 32,
        "endLineNumber" : 103,
        "endColumnNumber" : 76
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/events\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 103,
        "startColumnNumber" : 32,
        "endLineNumber" : 104,
        "endColumnNumber" : 71
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 103,
        "startColumnNumber" : 32,
        "endLineNumber" : 105,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 103,
        "startColumnNumber" : 18,
        "endLineNumber" : 105,
        "endColumnNumber" : 47
      },
      "nodeContext" : "eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 48
      },
      "nodeContext" : "MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 103,
        "startColumnNumber" : 32,
        "endLineNumber" : 103,
        "endColumnNumber" : 76
      },
      "nodeContext" : "mvc.perform(get(\"/api/applications/events\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  }, {
    "nodeContext" : "mvc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 107,
      "startColumnNumber" : 8,
      "endLineNumber" : 107,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 38
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 86
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 74
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 69,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 665,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 93,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 67
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 94,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"MockMvc seems not to correctly handle Flux/Mono responses\") public void test_register_twice_get_and_remove() throws Exception {\n  MvcResult result=mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TEST_JSON)).andExpect(status().isCreated()).andExpect(header().string(\"location\",startsWith(\"http://localhost\"))).andExpect(jsonPath(\"$.id\").isNotEmpty()).andReturn();\n  String id=extractId(result);\n  mvc.perform(post(\"/api/applications\").contentType(MediaType.APPLICATION_JSON).content(APPLICATION_TWICE_JSON)).andExpect(status().isCreated()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(get(\"/api/applications\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications?name=twice\")).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(id));\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isOk()).andExpect(jsonPath(\"$.id\").value(id));\n  mvc.perform(delete(\"/api/applications/{id}\",id)).andExpect(status().isNoContent());\n  mvc.perform(get(\"/api/applications/{id}\",id)).andExpect(status().isNotFound());\n  MvcResult eventResult=mvc.perform(get(\"/api/applications/events\")).andExpect(request().asyncStarted()).andReturn();\n  mvc.perform(asyncDispatch(eventResult)).andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$[0].application\").value(id)).andExpect(jsonPath(\"$[0].version\").value(0L)).andExpect(jsonPath(\"$[0].type\").value(\"REGISTERED\")).andExpect(jsonPath(\"$[1].application\").value(id)).andExpect(jsonPath(\"$[1].version\").value(1L)).andExpect(jsonPath(\"$[1].type\").value(\"REGISTRATION_UPDATED\")).andExpect(jsonPath(\"$[2].application\").value(id)).andExpect(jsonPath(\"$[2].version\").value(2L)).andExpect(jsonPath(\"$[2].type\").value(\"DEREGISTERED\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mvc.perform(asyncDispatch(eventResult))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.web.MockMvc"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 27,
    "endLineNumber" : 78,
    "endColumnNumber" : 30
  }, {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 91,
    "startColumnNumber" : 8,
    "endLineNumber" : 91,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 93,
    "startColumnNumber" : 8,
    "endLineNumber" : 93,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 97,
    "startColumnNumber" : 8,
    "endLineNumber" : 97,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 99,
    "startColumnNumber" : 8,
    "endLineNumber" : 99,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 101,
    "startColumnNumber" : 8,
    "endLineNumber" : 101,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 103,
    "startColumnNumber" : 32,
    "endLineNumber" : 103,
    "endColumnNumber" : 35
  }, {
    "charLength" : 3,
    "startLineNumber" : 107,
    "startColumnNumber" : 8,
    "endLineNumber" : 107,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 13
  } ]
}