{
  "id" : 291,
  "expression" : "fragment.subFragment((int)fragmentStart,fragment.length())",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/bazel/rules/ninja/parser/NinjaParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fragment.subFragment((int)fragmentStart,fragment.length())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 121,
      "startColumnNumber" : 27,
      "endLineNumber" : 121,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 87
      },
      "nodeContext" : "targetFragment=fragment.subFragment((int)fragmentStart,fragment.length())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 88
      },
      "nodeContext" : "targetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long fragmentStart=declarationStart - fragment.getFileOffset() - fragment.getStartIncl();\n  if (fragmentStart > Integer.MAX_VALUE) {\n    throw new GenericParsingException(String.format(\"The fragmentStart value %s is not expected to be larger than max-int, \" + \"since each fragment is at most max-int long.\",fragmentStart));\n  }\n  targetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (declarationStart == offset) {\n  targetFragment=fragment;\n}\n else {\n  long fragmentStart=declarationStart - fragment.getFileOffset() - fragment.getStartIncl();\n  if (fragmentStart > Integer.MAX_VALUE) {\n    throw new GenericParsingException(String.format(\"The fragmentStart value %s is not expected to be larger than max-int, \" + \"since each fragment is at most max-int long.\",fragmentStart));\n  }\n  targetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (token) {\ncase IDENTIFIER:  Pair<String,NinjaVariableValue> variable=parser.parseVariable();\nparseResult.addVariable(variable.getFirst(),declarationStart,variable.getSecond());\nbreak;\ncase RULE:NinjaRule rule=parser.parseNinjaRule();\nparseResult.addRule(declarationStart,rule);\nbreak;\ncase POOL:parseResult.addPool(declarationStart,parser.parseNinjaPool());\nbreak;\ncase INCLUDE:NinjaVariableValue includeStatement=parser.parseIncludeStatement();\nNinjaPromise<NinjaFileParseResult> includeFuture=pipeline.createChildFileParsingPromise(includeStatement,declarationStart,ninjaFileName);\nparseResult.addIncludeScope(declarationStart,includeFuture);\nbreak;\ncase SUBNINJA:NinjaVariableValue subNinjaStatement=parser.parseSubNinjaStatement();\nNinjaPromise<NinjaFileParseResult> subNinjaFuture=pipeline.createChildFileParsingPromise(subNinjaStatement,declarationStart,ninjaFileName);\nparseResult.addSubNinjaScope(declarationStart,subNinjaFuture);\nbreak;\ncase BUILD:FileFragment targetFragment;\nif (declarationStart == offset) {\ntargetFragment=fragment;\n}\n else {\nlong fragmentStart=declarationStart - fragment.getFileOffset() - fragment.getStartIncl();\nif (fragmentStart > Integer.MAX_VALUE) {\nthrow new GenericParsingException(String.format(\"The fragmentStart value %s is not expected to be larger than max-int, \" + \"since each fragment is at most max-int long.\",fragmentStart));\n}\ntargetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n}\nparseResult.addTarget(targetFragment);\nbreak;\ncase DEFAULT:break;\ncase ZERO:case EOF:return;\ncase COLON:case EQUALS:case ESCAPED_TEXT:case INDENT:case NEWLINE:case PIPE:case PIPE2:case PIPE_AT:case TEXT:case VARIABLE:throw new UnsupportedOperationException(token.name() + UNSUPPORTED_TOKEN_MESSAGE);\ncase ERROR:throw new GenericParsingException(lexer.getError());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 230,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3831,
        "startLineNumber" : 52,
        "startColumnNumber" : 93,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long offset=fragment.getFragmentOffset();\n  NinjaLexer lexer=new NinjaLexer(fragment);\n  if (!lexer.hasNextToken()) {\n    throw new IllegalStateException(\"Empty fragment passed as declaration.\");\n  }\n  NinjaToken token=lexer.nextToken();\n  while (lexer.hasNextToken() && NinjaToken.NEWLINE.equals(token)) {\n    token=lexer.nextToken();\n  }\n  if (!lexer.hasNextToken()) {\n    return;\n  }\n  long declarationStart=offset + lexer.getLastStart();\n  lexer.undo();\n  NinjaParserStep parser=new NinjaParserStep(lexer,pipeline.getPathFragmentInterner(),pipeline.getNameInterner());\nswitch (token) {\ncase IDENTIFIER:    Pair<String,NinjaVariableValue> variable=parser.parseVariable();\n  parseResult.addVariable(variable.getFirst(),declarationStart,variable.getSecond());\nbreak;\ncase RULE:NinjaRule rule=parser.parseNinjaRule();\nparseResult.addRule(declarationStart,rule);\nbreak;\ncase POOL:parseResult.addPool(declarationStart,parser.parseNinjaPool());\nbreak;\ncase INCLUDE:NinjaVariableValue includeStatement=parser.parseIncludeStatement();\nNinjaPromise<NinjaFileParseResult> includeFuture=pipeline.createChildFileParsingPromise(includeStatement,declarationStart,ninjaFileName);\nparseResult.addIncludeScope(declarationStart,includeFuture);\nbreak;\ncase SUBNINJA:NinjaVariableValue subNinjaStatement=parser.parseSubNinjaStatement();\nNinjaPromise<NinjaFileParseResult> subNinjaFuture=pipeline.createChildFileParsingPromise(subNinjaStatement,declarationStart,ninjaFileName);\nparseResult.addSubNinjaScope(declarationStart,subNinjaFuture);\nbreak;\ncase BUILD:FileFragment targetFragment;\nif (declarationStart == offset) {\ntargetFragment=fragment;\n}\n else {\nlong fragmentStart=declarationStart - fragment.getFileOffset() - fragment.getStartIncl();\nif (fragmentStart > Integer.MAX_VALUE) {\nthrow new GenericParsingException(String.format(\"The fragmentStart value %s is not expected to be larger than max-int, \" + \"since each fragment is at most max-int long.\",fragmentStart));\n}\ntargetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n}\nparseResult.addTarget(targetFragment);\nbreak;\ncase DEFAULT:break;\ncase ZERO:case EOF:return;\ncase COLON:case EQUALS:case ESCAPED_TEXT:case INDENT:case NEWLINE:case PIPE:case PIPE2:case PIPE_AT:case TEXT:case VARIABLE:throw new UnsupportedOperationException(token.name() + UNSUPPORTED_TOKEN_MESSAGE);\ncase ERROR:throw new GenericParsingException(lexer.getError());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3934,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void declaration(FileFragment fragment) throws GenericParsingException, IOException {\n  long offset=fragment.getFragmentOffset();\n  NinjaLexer lexer=new NinjaLexer(fragment);\n  if (!lexer.hasNextToken()) {\n    throw new IllegalStateException(\"Empty fragment passed as declaration.\");\n  }\n  NinjaToken token=lexer.nextToken();\n  while (lexer.hasNextToken() && NinjaToken.NEWLINE.equals(token)) {\n    token=lexer.nextToken();\n  }\n  if (!lexer.hasNextToken()) {\n    return;\n  }\n  long declarationStart=offset + lexer.getLastStart();\n  lexer.undo();\n  NinjaParserStep parser=new NinjaParserStep(lexer,pipeline.getPathFragmentInterner(),pipeline.getNameInterner());\nswitch (token) {\ncase IDENTIFIER:    Pair<String,NinjaVariableValue> variable=parser.parseVariable();\n  parseResult.addVariable(variable.getFirst(),declarationStart,variable.getSecond());\nbreak;\ncase RULE:NinjaRule rule=parser.parseNinjaRule();\nparseResult.addRule(declarationStart,rule);\nbreak;\ncase POOL:parseResult.addPool(declarationStart,parser.parseNinjaPool());\nbreak;\ncase INCLUDE:NinjaVariableValue includeStatement=parser.parseIncludeStatement();\nNinjaPromise<NinjaFileParseResult> includeFuture=pipeline.createChildFileParsingPromise(includeStatement,declarationStart,ninjaFileName);\nparseResult.addIncludeScope(declarationStart,includeFuture);\nbreak;\ncase SUBNINJA:NinjaVariableValue subNinjaStatement=parser.parseSubNinjaStatement();\nNinjaPromise<NinjaFileParseResult> subNinjaFuture=pipeline.createChildFileParsingPromise(subNinjaStatement,declarationStart,ninjaFileName);\nparseResult.addSubNinjaScope(declarationStart,subNinjaFuture);\nbreak;\ncase BUILD:FileFragment targetFragment;\nif (declarationStart == offset) {\ntargetFragment=fragment;\n}\n else {\nlong fragmentStart=declarationStart - fragment.getFileOffset() - fragment.getStartIncl();\nif (fragmentStart > Integer.MAX_VALUE) {\nthrow new GenericParsingException(String.format(\"The fragmentStart value %s is not expected to be larger than max-int, \" + \"since each fragment is at most max-int long.\",fragmentStart));\n}\ntargetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n}\nparseResult.addTarget(targetFragment);\nbreak;\ncase DEFAULT:break;\ncase ZERO:case EOF:return;\ncase COLON:case EQUALS:case ESCAPED_TEXT:case INDENT:case NEWLINE:case PIPE:case PIPE2:case PIPE_AT:case TEXT:case VARIABLE:throw new UnsupportedOperationException(token.name() + UNSUPPORTED_TOKEN_MESSAGE);\ncase ERROR:throw new GenericParsingException(lexer.getError());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 333,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 88
      },
      "nodeContext" : "targetFragment=fragment.subFragment((int)fragmentStart,fragment.length());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "com.google.devtools.build.lib.bazel.rules.ninja.file.FileFragment"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 121,
    "startColumnNumber" : 27,
    "endLineNumber" : 121,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}