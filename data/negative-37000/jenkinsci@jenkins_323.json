{
  "id" : 323,
  "expression" : "new State(computer)",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new State(computer)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 145,
      "startColumnNumber" : 23,
      "endLineNumber" : 145,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 43
      },
      "nodeContext" : "event.setStash(new State(computer))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 44
      },
      "nodeContext" : "event.setStash(new State(computer));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 86,
        "startColumnNumber" : 68,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String clientName=event.getProperty(JnlpConnectionState.CLIENT_NAME_KEY);\n  SlaveComputer computer=(SlaveComputer)Jenkins.get().getComputer(clientName);\n  if (computer == null) {\n    event.reject(new ConnectionRefusalException(String.format(\"%s is not an inbound agent\",clientName)));\n    return;\n  }\n  ComputerLauncher launcher=computer.getLauncher();\n  while (!(launcher instanceof JNLPLauncher)) {\n    ComputerLauncher l;\n    if (launcher instanceof DelegatingComputerLauncher) {\n      launcher=((DelegatingComputerLauncher)launcher).getLauncher();\n    }\n else     if (launcher instanceof ComputerLauncherFilter) {\n      launcher=((ComputerLauncherFilter)launcher).getCore();\n    }\n else     if (null != (l=getDelegate(launcher))) {\n      LOGGER.log(Level.INFO,\"Connecting {0} as an inbound agent where the launcher {1} does not mark \" + \"itself correctly as being an inbound agent\",new Object[]{clientName,computer.getLauncher().getClass()});\n      launcher=l;\n    }\n else {\n      if (disableStrictVerification) {\n        LOGGER.log(Level.WARNING,\"Connecting {0} as an inbound agent where the launcher {1} does not mark \" + \"itself correctly as being an inbound agent\",new Object[]{clientName,computer.getLauncher().getClass()});\n        break;\n      }\n else {\n        LOGGER.log(Level.WARNING,\"Rejecting connection to {0} from {1} as an inbound agent as the launcher \" + \"{2} does not extend JNLPLauncher or does not implement \" + \"DelegatingComputerLauncher with a delegation chain leading to a JNLPLauncher. \"+ \"Set system property \"+ \"jenkins.slaves.DefaultJnlpSlaveReceiver.disableStrictVerification=true to allow\"+ \"connections until the plugin has been fixed.\",new Object[]{clientName,event.getRemoteEndpointDescription(),computer.getLauncher().getClass()});\n        event.reject(new ConnectionRefusalException(String.format(\"%s is not an inbound agent\",clientName)));\n        return;\n      }\n    }\n  }\n  Channel ch=computer.getChannel();\n  if (ch != null) {\n    String cookie=event.getProperty(JnlpConnectionState.COOKIE_KEY);\n    String channelCookie=(String)ch.getProperty(JnlpConnectionState.COOKIE_KEY);\n    if (cookie != null && channelCookie != null && MessageDigest.isEqual(cookie.getBytes(StandardCharsets.UTF_8),channelCookie.getBytes(StandardCharsets.UTF_8))) {\n      LOGGER.log(Level.INFO,\"Disconnecting {0} as we are reconnected from the current peer\",clientName);\n      try {\n        computer.disconnect(new ConnectionFromCurrentPeer()).get(15,TimeUnit.SECONDS);\n      }\n catch (      ExecutionException|TimeoutException|InterruptedException e) {\n        event.reject(new ConnectionRefusalException(\"Failed to disconnect the current client\",e));\n        return;\n      }\n    }\n else {\n      event.reject(new ConnectionRefusalException(String.format(\"%s is already connected to this master. Rejecting this connection.\",clientName)));\n      return;\n    }\n  }\n  event.approve();\n  event.setStash(new State(computer));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4109,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void afterProperties(@NonNull JnlpConnectionState event){\n  String clientName=event.getProperty(JnlpConnectionState.CLIENT_NAME_KEY);\n  SlaveComputer computer=(SlaveComputer)Jenkins.get().getComputer(clientName);\n  if (computer == null) {\n    event.reject(new ConnectionRefusalException(String.format(\"%s is not an inbound agent\",clientName)));\n    return;\n  }\n  ComputerLauncher launcher=computer.getLauncher();\n  while (!(launcher instanceof JNLPLauncher)) {\n    ComputerLauncher l;\n    if (launcher instanceof DelegatingComputerLauncher) {\n      launcher=((DelegatingComputerLauncher)launcher).getLauncher();\n    }\n else     if (launcher instanceof ComputerLauncherFilter) {\n      launcher=((ComputerLauncherFilter)launcher).getCore();\n    }\n else     if (null != (l=getDelegate(launcher))) {\n      LOGGER.log(Level.INFO,\"Connecting {0} as an inbound agent where the launcher {1} does not mark \" + \"itself correctly as being an inbound agent\",new Object[]{clientName,computer.getLauncher().getClass()});\n      launcher=l;\n    }\n else {\n      if (disableStrictVerification) {\n        LOGGER.log(Level.WARNING,\"Connecting {0} as an inbound agent where the launcher {1} does not mark \" + \"itself correctly as being an inbound agent\",new Object[]{clientName,computer.getLauncher().getClass()});\n        break;\n      }\n else {\n        LOGGER.log(Level.WARNING,\"Rejecting connection to {0} from {1} as an inbound agent as the launcher \" + \"{2} does not extend JNLPLauncher or does not implement \" + \"DelegatingComputerLauncher with a delegation chain leading to a JNLPLauncher. \"+ \"Set system property \"+ \"jenkins.slaves.DefaultJnlpSlaveReceiver.disableStrictVerification=true to allow\"+ \"connections until the plugin has been fixed.\",new Object[]{clientName,event.getRemoteEndpointDescription(),computer.getLauncher().getClass()});\n        event.reject(new ConnectionRefusalException(String.format(\"%s is not an inbound agent\",clientName)));\n        return;\n      }\n    }\n  }\n  Channel ch=computer.getChannel();\n  if (ch != null) {\n    String cookie=event.getProperty(JnlpConnectionState.COOKIE_KEY);\n    String channelCookie=(String)ch.getProperty(JnlpConnectionState.COOKIE_KEY);\n    if (cookie != null && channelCookie != null && MessageDigest.isEqual(cookie.getBytes(StandardCharsets.UTF_8),channelCookie.getBytes(StandardCharsets.UTF_8))) {\n      LOGGER.log(Level.INFO,\"Disconnecting {0} as we are reconnected from the current peer\",clientName);\n      try {\n        computer.disconnect(new ConnectionFromCurrentPeer()).get(15,TimeUnit.SECONDS);\n      }\n catch (      ExecutionException|TimeoutException|InterruptedException e) {\n        event.reject(new ConnectionRefusalException(\"Failed to disconnect the current client\",e));\n        return;\n      }\n    }\n else {\n      event.reject(new ConnectionRefusalException(String.format(\"%s is already connected to this master. Rejecting this connection.\",clientName)));\n      return;\n    }\n  }\n  event.approve();\n  event.setStash(new State(computer));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 349,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 44
      },
      "nodeContext" : "event.setStash(new State(computer));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "jenkins.slaves.DefaultJnlpSlaveReceiver.State"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 145,
    "startColumnNumber" : 23,
    "endLineNumber" : 145,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}