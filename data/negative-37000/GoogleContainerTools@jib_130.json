{
  "id" : 130,
  "expression" : "StandardCharsets",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/frontend/JavaDockerContextGeneratorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StandardCharsets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 152,
      "startColumnNumber" : 71,
      "endLineNumber" : 152,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 152,
        "startColumnNumber" : 71,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "StandardCharsets.UTF_8",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 151,
        "startColumnNumber" : 17,
        "endLineNumber" : 152,
        "endColumnNumber" : 94
      },
      "nodeContext" : "sampleDockerfile=Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 95
      },
      "nodeContext" : "List<String> sampleDockerfile=Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1864,
        "startLineNumber" : 121,
        "startColumnNumber" : 54,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String expectedBaseImage=\"somebaseimage\";\n  List<String> expectedJvmFlags=Arrays.asList(\"-flag\",\"another\\\"Flag\");\n  String expectedMainClass=\"SomeMainClass\";\n  List<String> expectedJavaArguments=Arrays.asList(\"arg1\",\"arg2\");\n  List<String> exposedPorts=Arrays.asList(\"1000/tcp\",\"2000-2010/udp\");\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),\"/\"));\n  String dockerfile=new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(expectedBaseImage).setJvmFlags(expectedJvmFlags).setMainClass(expectedMainClass).setJavaArguments(expectedJavaArguments).setExposedPorts(exposedPorts).makeDockerfile();\n  List<String> sampleDockerfile=Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8);\n  Assert.assertEquals(String.join(\"\\n\",sampleDockerfile),dockerfile);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMakeDockerfile() throws IOException {\n  String expectedBaseImage=\"somebaseimage\";\n  List<String> expectedJvmFlags=Arrays.asList(\"-flag\",\"another\\\"Flag\");\n  String expectedMainClass=\"SomeMainClass\";\n  List<String> expectedJavaArguments=Arrays.asList(\"arg1\",\"arg2\");\n  List<String> exposedPorts=Arrays.asList(\"1000/tcp\",\"2000-2010/udp\");\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(ImmutableList.of(Paths.get(\"ignored\")),\"/\"));\n  String dockerfile=new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(expectedBaseImage).setJvmFlags(expectedJvmFlags).setMainClass(expectedMainClass).setJavaArguments(expectedJavaArguments).setExposedPorts(exposedPorts).makeDockerfile();\n  List<String> sampleDockerfile=Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8);\n  Assert.assertEquals(String.join(\"\\n\",sampleDockerfile),dockerfile);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Resources.readLines(Resources.getResource(\"sampleDockerfile\"),StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.charset.StandardCharsets"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 152,
    "startColumnNumber" : 71,
    "endLineNumber" : 152,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}