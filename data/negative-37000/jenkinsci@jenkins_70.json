{
  "id" : 70,
  "expression" : "!inetAddressValidator.isValidInet6Address(ipv6)",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/org/apache/commons/validator/routines/UrlValidator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!inetAddressValidator.isValidInet6Address(ipv6)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 408,
      "startColumnNumber" : 16,
      "endLineNumber" : 408,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 408,
        "startColumnNumber" : 12,
        "endLineNumber" : 410,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 406,
        "startColumnNumber" : 26,
        "endLineNumber" : 411,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n  if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 406,
        "startColumnNumber" : 8,
        "endLineNumber" : 435,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ipv6 != null) {\n  InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n  if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n    return false;\n  }\n}\n else {\n  String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n  DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));\n  if (!domainValidator.isValid(hostLocation)) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n      return false;\n    }\n  }\n  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);\n  if (port != null && port.length() > 0) {\n    try {\n      int iPort=Integer.parseInt(port);\n      if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {\n        return false;\n      }\n    }\n catch (    NumberFormatException nfe) {\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 387,
        "startColumnNumber" : 57,
        "endLineNumber" : 443,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (authority == null) {\n    return false;\n  }\n  if (authorityValidator != null && authorityValidator.isValid(authority)) {\n    return true;\n  }\n  final String authorityASCII=DomainValidator.unicodeToASCII(authority);\n  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);\n  if (!authorityMatcher.matches()) {\n    return false;\n  }\n  String ipv6=authorityMatcher.group(PARSE_AUTHORITY_IPV6);\n  if (ipv6 != null) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n      return false;\n    }\n  }\n else {\n    String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n    DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));\n    if (!domainValidator.isValid(hostLocation)) {\n      InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n      if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n        return false;\n      }\n    }\n    String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);\n    if (port != null && port.length() > 0) {\n      try {\n        int iPort=Integer.parseInt(port);\n        if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {\n          return false;\n        }\n      }\n catch (      NumberFormatException nfe) {\n        return false;\n      }\n    }\n  }\n  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n  if (extra != null && extra.trim().length() > 0) {\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3135,
        "startLineNumber" : 377,
        "startColumnNumber" : 4,
        "endLineNumber" : 443,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns true if the authority is properly formatted.  An authority is the combination of hostname and port.  A  {@code null} authority value is considered invalid.Note: this implementation validates the domain unless a RegexValidator was provided. If a RegexValidator was supplied and it matches, then the authority is regarded as valid with no further checks, otherwise the method checks against the AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)\n * @param authority Authority value to validate, allows IDN\n * @return true if authority (hostname and port) is valid.\n */\nprotected boolean isValidAuthority(String authority){\n  if (authority == null) {\n    return false;\n  }\n  if (authorityValidator != null && authorityValidator.isValid(authority)) {\n    return true;\n  }\n  final String authorityASCII=DomainValidator.unicodeToASCII(authority);\n  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);\n  if (!authorityMatcher.matches()) {\n    return false;\n  }\n  String ipv6=authorityMatcher.group(PARSE_AUTHORITY_IPV6);\n  if (ipv6 != null) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n      return false;\n    }\n  }\n else {\n    String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n    DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));\n    if (!domainValidator.isValid(hostLocation)) {\n      InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n      if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n        return false;\n      }\n    }\n    String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);\n    if (port != null && port.length() > 0) {\n      try {\n        int iPort=Integer.parseInt(port);\n        if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {\n          return false;\n        }\n      }\n catch (      NumberFormatException nfe) {\n        return false;\n      }\n    }\n  }\n  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n  if (extra != null && extra.trim().length() > 0) {\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 207,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 408,
        "startColumnNumber" : 12,
        "endLineNumber" : 410,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 408,
    "startColumnNumber" : 16,
    "endLineNumber" : 408,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}