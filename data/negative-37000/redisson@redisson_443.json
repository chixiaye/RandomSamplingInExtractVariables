{
  "id" : 443,
  "expression" : "Integer.valueOf(parts[1])",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-18/src/main/java/org/redisson/spring/data/connection/RedisClusterNodeDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer.valueOf(parts[1])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 89,
      "startColumnNumber" : 68,
      "endLineNumber" : 89,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 89,
        "startColumnNumber" : 68,
        "endLineNumber" : 89,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Integer.valueOf(parts[1]) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 64,
        "endLineNumber" : 89,
        "endColumnNumber" : 97
      },
      "nodeContext" : "j < Integer.valueOf(parts[1]) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 89,
        "startColumnNumber" : 24,
        "endLineNumber" : 91,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n  slotsCollection.add(j);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 88,
        "startColumnNumber" : 49,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n    slotsCollection.add(j);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 88,
        "startColumnNumber" : 27,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (parts.length == 2) {\n  for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n    slotsCollection.add(j);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 86,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (parts.length == 1) {\n  slotsCollection.add(Integer.valueOf(parts[0]));\n}\n else if (parts.length == 2) {\n  for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n    slotsCollection.add(j);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 79,
        "startColumnNumber" : 60,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String slots=params[i + 8];\n  if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n    continue;\n  }\n  String[] parts=slots.split(\"-\");\n  if (parts.length == 1) {\n    slotsCollection.add(Integer.valueOf(parts[0]));\n  }\n else   if (parts.length == 2) {\n    for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n      slotsCollection.add(j);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 682,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < params.length - 8; i++) {\n  String slots=params[i + 8];\n  if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n    continue;\n  }\n  String[] parts=slots.split(\"-\");\n  if (parts.length == 1) {\n    slotsCollection.add(Integer.valueOf(parts[0]));\n  }\n else   if (parts.length == 2) {\n    for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n      slotsCollection.add(j);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 108,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 78,
        "startColumnNumber" : 35,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (int i=0; i < params.length - 8; i++) {\n    String slots=params[i + 8];\n    if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n      continue;\n    }\n    String[] parts=slots.split(\"-\");\n    if (parts.length == 1) {\n      slotsCollection.add(Integer.valueOf(parts[0]));\n    }\n else     if (parts.length == 2) {\n      for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n        slotsCollection.add(j);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 737,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (params.length > 8) {\n  for (int i=0; i < params.length - 8; i++) {\n    String slots=params[i + 8];\n    if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n      continue;\n    }\n    String[] parts=slots.split(\"-\");\n    if (parts.length == 1) {\n      slotsCollection.add(Integer.valueOf(parts[0]));\n    }\n else     if (parts.length == 2) {\n      for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n        slotsCollection.add(j);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2527,
        "startLineNumber" : 50,
        "startColumnNumber" : 53,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] params=nodeInfo.split(\" \");\n  String nodeId=params[0];\n  String flagsStr=params[2];\n  Set<Flag> flags=EnumSet.noneOf(Flag.class);\n  for (  String flag : flagsStr.split(\",\")) {\n    String flagValue=flag.toUpperCase().replaceAll(\"\\\\?\",\"\");\n    flags.add(Flag.valueOf(flagValue));\n  }\n  RedisURI address=null;\n  if (!flags.contains(Flag.NOADDR)) {\n    String addr=params[1].split(\"@\")[0];\n    address=new RedisURI(\"redis://\" + addr);\n  }\n  String masterId=params[3];\n  if (\"-\".equals(masterId)) {\n    masterId=null;\n  }\n  Set<Integer> slotsCollection=new HashSet<Integer>();\n  LinkState linkState=null;\n  if (params.length >= 8 && params[7] != null) {\n    linkState=LinkState.valueOf(params[7].toUpperCase());\n  }\n  if (params.length > 8) {\n    for (int i=0; i < params.length - 8; i++) {\n      String slots=params[i + 8];\n      if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n        continue;\n      }\n      String[] parts=slots.split(\"-\");\n      if (parts.length == 1) {\n        slotsCollection.add(Integer.valueOf(parts[0]));\n      }\n else       if (parts.length == 2) {\n        for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n          slotsCollection.add(j);\n        }\n      }\n    }\n  }\n  NodeType type=null;\n  if (flags.contains(Flag.MASTER)) {\n    type=NodeType.MASTER;\n  }\n else   if (flags.contains(Flag.SLAVE)) {\n    type=NodeType.SLAVE;\n  }\n  RedisClusterNodeBuilder builder=RedisClusterNode.newRedisClusterNode().linkState(linkState).slaveOf(masterId).serving(new SlotRange(slotsCollection)).withId(nodeId).promotedAs(type).withFlags(flags);\n  if (address != null) {\n    builder.listeningAt(address.getHost(),address.getPort());\n  }\n  nodes.add(builder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 371,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2572,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String nodeInfo : response.split(\"\\n\")) {\n  String[] params=nodeInfo.split(\" \");\n  String nodeId=params[0];\n  String flagsStr=params[2];\n  Set<Flag> flags=EnumSet.noneOf(Flag.class);\n  for (  String flag : flagsStr.split(\",\")) {\n    String flagValue=flag.toUpperCase().replaceAll(\"\\\\?\",\"\");\n    flags.add(Flag.valueOf(flagValue));\n  }\n  RedisURI address=null;\n  if (!flags.contains(Flag.NOADDR)) {\n    String addr=params[1].split(\"@\")[0];\n    address=new RedisURI(\"redis://\" + addr);\n  }\n  String masterId=params[3];\n  if (\"-\".equals(masterId)) {\n    masterId=null;\n  }\n  Set<Integer> slotsCollection=new HashSet<Integer>();\n  LinkState linkState=null;\n  if (params.length >= 8 && params[7] != null) {\n    linkState=LinkState.valueOf(params[7].toUpperCase());\n  }\n  if (params.length > 8) {\n    for (int i=0; i < params.length - 8; i++) {\n      String slots=params[i + 8];\n      if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n        continue;\n      }\n      String[] parts=slots.split(\"-\");\n      if (parts.length == 1) {\n        slotsCollection.add(Integer.valueOf(parts[0]));\n      }\n else       if (parts.length == 2) {\n        for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n          slotsCollection.add(j);\n        }\n      }\n    }\n  }\n  NodeType type=null;\n  if (flags.contains(Flag.MASTER)) {\n    type=NodeType.MASTER;\n  }\n else   if (flags.contains(Flag.SLAVE)) {\n    type=NodeType.SLAVE;\n  }\n  RedisClusterNodeBuilder builder=RedisClusterNode.newRedisClusterNode().linkState(linkState).slaveOf(masterId).serving(new SlotRange(slotsCollection)).withId(nodeId).promotedAs(type).withFlags(flags);\n  if (address != null) {\n    builder.listeningAt(address.getHost(),address.getPort());\n  }\n  nodes.add(builder.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 380,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2752,
        "startLineNumber" : 46,
        "startColumnNumber" : 86,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String response=buf.toString(CharsetUtil.UTF_8);\n  List<RedisClusterNode> nodes=new ArrayList<RedisClusterNode>();\n  for (  String nodeInfo : response.split(\"\\n\")) {\n    String[] params=nodeInfo.split(\" \");\n    String nodeId=params[0];\n    String flagsStr=params[2];\n    Set<Flag> flags=EnumSet.noneOf(Flag.class);\n    for (    String flag : flagsStr.split(\",\")) {\n      String flagValue=flag.toUpperCase().replaceAll(\"\\\\?\",\"\");\n      flags.add(Flag.valueOf(flagValue));\n    }\n    RedisURI address=null;\n    if (!flags.contains(Flag.NOADDR)) {\n      String addr=params[1].split(\"@\")[0];\n      address=new RedisURI(\"redis://\" + addr);\n    }\n    String masterId=params[3];\n    if (\"-\".equals(masterId)) {\n      masterId=null;\n    }\n    Set<Integer> slotsCollection=new HashSet<Integer>();\n    LinkState linkState=null;\n    if (params.length >= 8 && params[7] != null) {\n      linkState=LinkState.valueOf(params[7].toUpperCase());\n    }\n    if (params.length > 8) {\n      for (int i=0; i < params.length - 8; i++) {\n        String slots=params[i + 8];\n        if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n          continue;\n        }\n        String[] parts=slots.split(\"-\");\n        if (parts.length == 1) {\n          slotsCollection.add(Integer.valueOf(parts[0]));\n        }\n else         if (parts.length == 2) {\n          for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n            slotsCollection.add(j);\n          }\n        }\n      }\n    }\n    NodeType type=null;\n    if (flags.contains(Flag.MASTER)) {\n      type=NodeType.MASTER;\n    }\n else     if (flags.contains(Flag.SLAVE)) {\n      type=NodeType.SLAVE;\n    }\n    RedisClusterNodeBuilder builder=RedisClusterNode.newRedisClusterNode().linkState(linkState).slaveOf(masterId).serving(new SlotRange(slotsCollection)).withId(nodeId).promotedAs(type).withFlags(flags);\n    if (address != null) {\n      builder.listeningAt(address.getHost(),address.getPort());\n    }\n    nodes.add(builder.build());\n  }\n  return nodes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 408,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2848,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<RedisClusterNode> decode(ByteBuf buf,State state) throws IOException {\n  String response=buf.toString(CharsetUtil.UTF_8);\n  List<RedisClusterNode> nodes=new ArrayList<RedisClusterNode>();\n  for (  String nodeInfo : response.split(\"\\n\")) {\n    String[] params=nodeInfo.split(\" \");\n    String nodeId=params[0];\n    String flagsStr=params[2];\n    Set<Flag> flags=EnumSet.noneOf(Flag.class);\n    for (    String flag : flagsStr.split(\",\")) {\n      String flagValue=flag.toUpperCase().replaceAll(\"\\\\?\",\"\");\n      flags.add(Flag.valueOf(flagValue));\n    }\n    RedisURI address=null;\n    if (!flags.contains(Flag.NOADDR)) {\n      String addr=params[1].split(\"@\")[0];\n      address=new RedisURI(\"redis://\" + addr);\n    }\n    String masterId=params[3];\n    if (\"-\".equals(masterId)) {\n      masterId=null;\n    }\n    Set<Integer> slotsCollection=new HashSet<Integer>();\n    LinkState linkState=null;\n    if (params.length >= 8 && params[7] != null) {\n      linkState=LinkState.valueOf(params[7].toUpperCase());\n    }\n    if (params.length > 8) {\n      for (int i=0; i < params.length - 8; i++) {\n        String slots=params[i + 8];\n        if (slots.indexOf(\"-<-\") != -1 || slots.indexOf(\"->-\") != -1) {\n          continue;\n        }\n        String[] parts=slots.split(\"-\");\n        if (parts.length == 1) {\n          slotsCollection.add(Integer.valueOf(parts[0]));\n        }\n else         if (parts.length == 2) {\n          for (int j=Integer.valueOf(parts[0]); j < Integer.valueOf(parts[1]) + 1; j++) {\n            slotsCollection.add(j);\n          }\n        }\n      }\n    }\n    NodeType type=null;\n    if (flags.contains(Flag.MASTER)) {\n      type=NodeType.MASTER;\n    }\n else     if (flags.contains(Flag.SLAVE)) {\n      type=NodeType.SLAVE;\n    }\n    RedisClusterNodeBuilder builder=RedisClusterNode.newRedisClusterNode().linkState(linkState).slaveOf(masterId).serving(new SlotRange(slotsCollection)).withId(nodeId).promotedAs(type).withFlags(flags);\n    if (address != null) {\n      builder.listeningAt(address.getHost(),address.getPort());\n    }\n    nodes.add(builder.build());\n  }\n  return nodes;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 64,
        "endLineNumber" : 89,
        "endColumnNumber" : 97
      },
      "nodeContext" : "j < Integer.valueOf(parts[1]) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 89,
    "startColumnNumber" : 68,
    "endLineNumber" : 89,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}