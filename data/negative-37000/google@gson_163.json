{
  "id" : 163,
  "expression" : "NUMBER_CHAR_FRACTION_DIGIT",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "NUMBER_CHAR_FRACTION_DIGIT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 687,
      "startColumnNumber" : 49,
      "endLineNumber" : 687,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 687,
        "startColumnNumber" : 41,
        "endLineNumber" : 687,
        "endColumnNumber" : 75
      },
      "nodeContext" : "last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 687,
        "startColumnNumber" : 12,
        "endLineNumber" : 687,
        "endColumnNumber" : 75
      },
      "nodeContext" : "last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 687,
        "startColumnNumber" : 8,
        "endLineNumber" : 690,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n  last=NUMBER_CHAR_EXP_E;\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 666,
        "startColumnNumber" : 6,
        "endLineNumber" : 723,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (c) {\ncase '-':  if (last == NUMBER_CHAR_NONE) {\n    negative=true;\n    last=NUMBER_CHAR_SIGN;\n    continue;\n  }\n else   if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\nlast=NUMBER_CHAR_EXP_SIGN;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 184,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 651,
        "startColumnNumber" : 22,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 651,
        "startColumnNumber" : 4,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; true; i++) {\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2201,
        "startLineNumber" : 650,
        "startColumnNumber" : 4,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "charactersOfNumber: for (; true; i++) {\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 233,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3071,
        "startLineNumber" : 637,
        "startColumnNumber" : 46,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 334,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 637,
        "startColumnNumber" : 2,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private int peekNumber() throws IOException {\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 687,
        "startColumnNumber" : 12,
        "endLineNumber" : 687,
        "endColumnNumber" : 75
      },
      "nodeContext" : "last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "NUMBER_CHAR_FRACTION_DIGIT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 719,
      "startColumnNumber" : 17,
      "endLineNumber" : 719,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 719,
        "startColumnNumber" : 10,
        "endLineNumber" : 719,
        "endColumnNumber" : 43
      },
      "nodeContext" : "last=NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 719,
        "startColumnNumber" : 10,
        "endLineNumber" : 719,
        "endColumnNumber" : 44
      },
      "nodeContext" : "last=NUMBER_CHAR_FRACTION_DIGIT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 718,
        "startColumnNumber" : 48,
        "endLineNumber" : 720,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  last=NUMBER_CHAR_FRACTION_DIGIT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 718,
        "startColumnNumber" : 15,
        "endLineNumber" : 722,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (last == NUMBER_CHAR_DECIMAL) {\n  last=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n  last=NUMBER_CHAR_EXP_DIGIT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 598,
        "startLineNumber" : 710,
        "startColumnNumber" : 15,
        "endLineNumber" : 722,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (last == NUMBER_CHAR_DIGIT) {\n  if (value == 0) {\n    return PEEKED_NONE;\n  }\n  long newValue=value * 10 - (c - '0');\n  fitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n  value=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\n  last=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n  last=NUMBER_CHAR_EXP_DIGIT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 707,
        "startColumnNumber" : 8,
        "endLineNumber" : 722,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n  value=-(c - '0');\n  last=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\n  if (value == 0) {\n    return PEEKED_NONE;\n  }\n  long newValue=value * 10 - (c - '0');\n  fitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n  value=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\n  last=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n  last=NUMBER_CHAR_EXP_DIGIT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 666,
        "startColumnNumber" : 6,
        "endLineNumber" : 723,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (c) {\ncase '-':  if (last == NUMBER_CHAR_NONE) {\n    negative=true;\n    last=NUMBER_CHAR_SIGN;\n    continue;\n  }\n else   if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\nlast=NUMBER_CHAR_EXP_SIGN;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 184,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 651,
        "startColumnNumber" : 22,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 651,
        "startColumnNumber" : 4,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; true; i++) {\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2201,
        "startLineNumber" : 650,
        "startColumnNumber" : 4,
        "endLineNumber" : 724,
        "endColumnNumber" : 5
      },
      "nodeContext" : "charactersOfNumber: for (; true; i++) {\n  if (p + i == l) {\n    if (i == buffer.length) {\n      return PEEKED_NONE;\n    }\n    if (!fillBuffer(i + 1)) {\n      break;\n    }\n    p=pos;\n    l=limit;\n  }\n  char c=buffer[p + i];\nswitch (c) {\ncase '-':    if (last == NUMBER_CHAR_NONE) {\n      negative=true;\n      last=NUMBER_CHAR_SIGN;\n      continue;\n    }\n else     if (last == NUMBER_CHAR_EXP_E) {\n      last=NUMBER_CHAR_EXP_SIGN;\n      continue;\n    }\n  return PEEKED_NONE;\ncase '+':if (last == NUMBER_CHAR_EXP_E) {\n  last=NUMBER_CHAR_EXP_SIGN;\n  continue;\n}\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 233,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3071,
        "startLineNumber" : 637,
        "startColumnNumber" : 46,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 334,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 637,
        "startColumnNumber" : 2,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private int peekNumber() throws IOException {\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 719,
        "startColumnNumber" : 10,
        "endLineNumber" : 719,
        "endColumnNumber" : 44
      },
      "nodeContext" : "last=NUMBER_CHAR_FRACTION_DIGIT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "NUMBER_CHAR_FRACTION_DIGIT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 731,
      "startColumnNumber" : 52,
      "endLineNumber" : 731,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 731,
        "startColumnNumber" : 44,
        "endLineNumber" : 731,
        "endColumnNumber" : 78
      },
      "nodeContext" : "last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 731,
        "startColumnNumber" : 15,
        "endLineNumber" : 731,
        "endColumnNumber" : 78
      },
      "nodeContext" : "last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 731,
        "startColumnNumber" : 15,
        "endLineNumber" : 732,
        "endColumnNumber" : 40
      },
      "nodeContext" : "last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 731,
        "startColumnNumber" : 11,
        "endLineNumber" : 737,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\n  peekedNumberLength=i;\n  return peeked=PEEKED_NUMBER;\n}\n else {\n  return PEEKED_NONE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 727,
        "startColumnNumber" : 4,
        "endLineNumber" : 737,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n  peekedLong=negative ? value : -value;\n  pos+=i;\n  return peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\n  peekedNumberLength=i;\n  return peeked=PEEKED_NUMBER;\n}\n else {\n  return PEEKED_NONE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3071,
        "startLineNumber" : 637,
        "startColumnNumber" : 46,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 334,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 637,
        "startColumnNumber" : 2,
        "endLineNumber" : 738,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private int peekNumber() throws IOException {\n  char[] buffer=this.buffer;\n  int p=pos;\n  int l=limit;\n  long value=0;\n  boolean negative=false;\n  boolean fitsInLong=true;\n  int last=NUMBER_CHAR_NONE;\n  int i=0;\n  charactersOfNumber:   for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p=pos;\n      l=limit;\n    }\n    char c=buffer[p + i];\nswitch (c) {\ncase '-':      if (last == NUMBER_CHAR_NONE) {\n        negative=true;\n        last=NUMBER_CHAR_SIGN;\n        continue;\n      }\n else       if (last == NUMBER_CHAR_EXP_E) {\n        last=NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n    return PEEKED_NONE;\ncase '+':  if (last == NUMBER_CHAR_EXP_E) {\n    last=NUMBER_CHAR_EXP_SIGN;\n    continue;\n  }\nreturn PEEKED_NONE;\ncase 'e':case 'E':if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast=NUMBER_CHAR_EXP_E;\ncontinue;\n}\nreturn PEEKED_NONE;\ncase '.':if (last == NUMBER_CHAR_DIGIT) {\nlast=NUMBER_CHAR_DECIMAL;\ncontinue;\n}\nreturn PEEKED_NONE;\ndefault:if (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nbreak charactersOfNumber;\n}\nreturn PEEKED_NONE;\n}\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue=-(c - '0');\nlast=NUMBER_CHAR_DIGIT;\n}\n else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nreturn PEEKED_NONE;\n}\nlong newValue=value * 10 - (c - '0');\nfitsInLong&=value > MIN_INCOMPLETE_INTEGER || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\nvalue=newValue;\n}\n else if (last == NUMBER_CHAR_DECIMAL) {\nlast=NUMBER_CHAR_FRACTION_DIGIT;\n}\n else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast=NUMBER_CHAR_EXP_DIGIT;\n}\n}\n}\nif (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\npeekedLong=negative ? value : -value;\npos+=i;\nreturn peeked=PEEKED_LONG;\n}\n else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT) {\npeekedNumberLength=i;\nreturn peeked=PEEKED_NUMBER;\n}\n else {\nreturn PEEKED_NONE;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 731,
        "startColumnNumber" : 15,
        "endLineNumber" : 731,
        "endColumnNumber" : 78
      },
      "nodeContext" : "last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 687,
    "startColumnNumber" : 49,
    "endLineNumber" : 687,
    "endColumnNumber" : 75
  }, {
    "charLength" : 26,
    "startLineNumber" : 719,
    "startColumnNumber" : 17,
    "endLineNumber" : 719,
    "endColumnNumber" : 43
  }, {
    "charLength" : 26,
    "startLineNumber" : 731,
    "startColumnNumber" : 52,
    "endLineNumber" : 731,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}