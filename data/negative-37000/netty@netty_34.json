{
  "id" : 34,
  "expression" : "HttpHeaderNames",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00.java",
  "occurrences" : 17,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 127,
      "startColumnNumber" : 41,
      "endLineNumber" : 127,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 127,
        "startColumnNumber" : 41,
        "endLineNumber" : 127,
        "endColumnNumber" : 67
      },
      "nodeContext" : "HttpHeaderNames.CONNECTION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 127,
        "startColumnNumber" : 13,
        "endLineNumber" : 127,
        "endColumnNumber" : 100
      },
      "nodeContext" : "req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n  throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 128,
      "startColumnNumber" : 89,
      "endLineNumber" : 128,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 128,
        "startColumnNumber" : 89,
        "endLineNumber" : 128,
        "endColumnNumber" : 112
      },
      "nodeContext" : "HttpHeaderNames.UPGRADE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 128,
        "startColumnNumber" : 71,
        "endLineNumber" : 128,
        "endColumnNumber" : 113
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.UPGRADE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 128,
        "startColumnNumber" : 20,
        "endLineNumber" : 128,
        "endColumnNumber" : 114
      },
      "nodeContext" : "HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 128,
        "startColumnNumber" : 19,
        "endLineNumber" : 128,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n  throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 128,
        "startColumnNumber" : 19,
        "endLineNumber" : 128,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 133,
      "startColumnNumber" : 51,
      "endLineNumber" : 133,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 133,
        "startColumnNumber" : 51,
        "endLineNumber" : 133,
        "endColumnNumber" : 85
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_KEY1",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 133,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 133,
        "startColumnNumber" : 28,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 87
      },
      "nodeContext" : "boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 133,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 134,
      "startColumnNumber" : 51,
      "endLineNumber" : 134,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 134,
        "startColumnNumber" : 51,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_KEY2",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 134,
        "startColumnNumber" : 28,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 133,
        "startColumnNumber" : 28,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 87
      },
      "nodeContext" : "boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 134,
        "startColumnNumber" : 28,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 136,
      "startColumnNumber" : 42,
      "endLineNumber" : 136,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 136,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 64
      },
      "nodeContext" : "HttpHeaderNames.ORIGIN",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 136,
        "startColumnNumber" : 24,
        "endLineNumber" : 136,
        "endColumnNumber" : 65
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.ORIGIN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 136,
        "startColumnNumber" : 15,
        "endLineNumber" : 136,
        "endColumnNumber" : 65
      },
      "nodeContext" : "origin=req.headers().get(HttpHeaderNames.ORIGIN)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 66
      },
      "nodeContext" : "String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 66
      },
      "nodeContext" : "String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 151,
      "startColumnNumber" : 26,
      "endLineNumber" : 151,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 151,
        "startColumnNumber" : 26,
        "endLineNumber" : 151,
        "endColumnNumber" : 49
      },
      "nodeContext" : "HttpHeaderNames.UPGRADE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 78
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 79
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 80
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 78
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 152,
      "startColumnNumber" : 26,
      "endLineNumber" : 152,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 152,
        "startColumnNumber" : 26,
        "endLineNumber" : 152,
        "endColumnNumber" : 52
      },
      "nodeContext" : "HttpHeaderNames.CONNECTION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 79
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 80
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 152,
        "startColumnNumber" : 26,
        "endLineNumber" : 152,
        "endColumnNumber" : 52
      },
      "nodeContext" : "HttpHeaderNames.CONNECTION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 157,
      "startColumnNumber" : 30,
      "endLineNumber" : 157,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 157,
        "startColumnNumber" : 30,
        "endLineNumber" : 157,
        "endColumnNumber" : 66
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_ORIGIN",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 75
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 158,
      "startColumnNumber" : 30,
      "endLineNumber" : 158,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 158,
        "startColumnNumber" : 30,
        "endLineNumber" : 158,
        "endColumnNumber" : 68
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_LOCATION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 76
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 77
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 77
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 160,
      "startColumnNumber" : 52,
      "endLineNumber" : 160,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 160,
        "startColumnNumber" : 52,
        "endLineNumber" : 160,
        "endColumnNumber" : 90
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 160,
        "startColumnNumber" : 34,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 160,
        "startColumnNumber" : 19,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 92
      },
      "nodeContext" : "String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 92
      },
      "nodeContext" : "String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 168,
      "startColumnNumber" : 38,
      "endLineNumber" : 168,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 168,
        "startColumnNumber" : 38,
        "endLineNumber" : 168,
        "endColumnNumber" : 76
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 98
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 99
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 167,
        "startColumnNumber" : 23,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (selectedSubprotocol == null) {\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n  }\n}\n else {\n  res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 161,
        "startColumnNumber" : 38,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String selectedSubprotocol=selectSubprotocol(subprotocols);\n  if (selectedSubprotocol == null) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n    }\n  }\n else {\n    res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (subprotocols != null) {\n  String selectedSubprotocol=selectSubprotocol(subprotocols);\n  if (selectedSubprotocol == null) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n    }\n  }\n else {\n    res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 99
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 173,
      "startColumnNumber" : 44,
      "endLineNumber" : 173,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 173,
        "startColumnNumber" : 44,
        "endLineNumber" : 173,
        "endColumnNumber" : 78
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_KEY1",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 173,
        "startColumnNumber" : 26,
        "endLineNumber" : 173,
        "endColumnNumber" : 79
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 173,
        "startColumnNumber" : 19,
        "endLineNumber" : 173,
        "endColumnNumber" : 79
      },
      "nodeContext" : "key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 174,
      "startColumnNumber" : 44,
      "endLineNumber" : 174,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 174,
        "startColumnNumber" : 44,
        "endLineNumber" : 174,
        "endColumnNumber" : 78
      },
      "nodeContext" : "HttpHeaderNames.SEC_WEBSOCKET_KEY2",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 174,
        "startColumnNumber" : 26,
        "endLineNumber" : 174,
        "endColumnNumber" : 79
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 174,
        "startColumnNumber" : 19,
        "endLineNumber" : 174,
        "endColumnNumber" : 79
      },
      "nodeContext" : "key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 174,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 155,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 174,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 187,
      "startColumnNumber" : 30,
      "endLineNumber" : 187,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 187,
        "startColumnNumber" : 30,
        "endLineNumber" : 187,
        "endColumnNumber" : 62
      },
      "nodeContext" : "HttpHeaderNames.WEBSOCKET_ORIGIN",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 71
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 72
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 72
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 188,
      "startColumnNumber" : 30,
      "endLineNumber" : 188,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 188,
        "startColumnNumber" : 30,
        "endLineNumber" : 188,
        "endColumnNumber" : 64
      },
      "nodeContext" : "HttpHeaderNames.WEBSOCKET_LOCATION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 72
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 73
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 73
      },
      "nodeContext" : "res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 190,
      "startColumnNumber" : 48,
      "endLineNumber" : 190,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 190,
        "startColumnNumber" : 48,
        "endLineNumber" : 190,
        "endColumnNumber" : 82
      },
      "nodeContext" : "HttpHeaderNames.WEBSOCKET_PROTOCOL",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 190,
        "startColumnNumber" : 30,
        "endLineNumber" : 190,
        "endColumnNumber" : 83
      },
      "nodeContext" : "req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 190,
        "startColumnNumber" : 19,
        "endLineNumber" : 190,
        "endColumnNumber" : 83
      },
      "nodeContext" : "protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  }, {
    "nodeContext" : "HttpHeaderNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 192,
      "startColumnNumber" : 34,
      "endLineNumber" : 192,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 192,
        "startColumnNumber" : 34,
        "endLineNumber" : 192,
        "endColumnNumber" : 68
      },
      "nodeContext" : "HttpHeaderNames.WEBSOCKET_PROTOCOL",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 98
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 99
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 191,
        "startColumnNumber" : 34,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (protocol != null) {\n  res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isHixie76) {\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n  String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n  if (subprotocols != null) {\n    String selectedSubprotocol=selectSubprotocol(subprotocols);\n    if (selectedSubprotocol == null) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n      }\n    }\n else {\n      res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n    }\n  }\n  String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n  String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n  int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n  long c=req.content().readLong();\n  ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n  input.writeInt(a);\n  input.writeInt(b);\n  input.writeLong(c);\n  res.content().writeBytes(WebSocketUtil.md5(input.array()));\n}\n else {\n  res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n  res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n  String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n  if (protocol != null) {\n    res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3874,
        "startLineNumber" : 124,
        "startColumnNumber" : 94,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 412,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5238,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Handle the web socket handshake for the web socket specification <a href= \"https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00\">HyBi version 0</a> and lower. This standard is really a rehash of <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\" >hixie-76</a> and <a href=\"https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\" >hixie-75</a>. </p> <p> Browser request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Protocol: chat, sample Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre> <p> Server response: </p> <pre> HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>\n */\n@Override protected FullHttpResponse newHandshakeResponse(FullHttpRequest req,HttpHeaders headers){\n  if (!req.headers().containsValue(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE,true) || !HttpHeaderValues.WEBSOCKET.contentEqualsIgnoreCase(req.headers().get(HttpHeaderNames.UPGRADE))) {\n    throw new WebSocketServerHandshakeException(\"not a WebSocket handshake request: missing upgrade\",req);\n  }\n  boolean isHixie76=req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY1) && req.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n  String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (origin == null && !isHixie76) {\n    throw new WebSocketServerHandshakeException(\"Missing origin header, got only \" + req.headers().names(),req);\n  }\n  FullHttpResponse res=new DefaultFullHttpResponse(HTTP_1_1,new HttpResponseStatus(101,isHixie76 ? \"WebSocket Protocol Handshake\" : \"Web Socket Protocol Handshake\"),req.content().alloc().buffer(0));\n  if (headers != null) {\n    res.headers().add(headers);\n  }\n  res.headers().set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE);\n  if (isHixie76) {\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.SEC_WEBSOCKET_LOCATION,uri());\n    String subprotocols=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL);\n    if (subprotocols != null) {\n      String selectedSubprotocol=selectSubprotocol(subprotocols);\n      if (selectedSubprotocol == null) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Requested subprotocol(s) not supported: {}\",subprotocols);\n        }\n      }\n else {\n        res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,selectedSubprotocol);\n      }\n    }\n    String key1=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY1);\n    String key2=req.headers().get(HttpHeaderNames.SEC_WEBSOCKET_KEY2);\n    int a=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key1).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key1).replaceAll(\"\").length());\n    int b=(int)(Long.parseLong(BEGINNING_DIGIT.matcher(key2).replaceAll(\"\")) / BEGINNING_SPACE.matcher(key2).replaceAll(\"\").length());\n    long c=req.content().readLong();\n    ByteBuf input=Unpooled.wrappedBuffer(new byte[16]).setIndex(0,0);\n    input.writeInt(a);\n    input.writeInt(b);\n    input.writeLong(c);\n    res.content().writeBytes(WebSocketUtil.md5(input.array()));\n  }\n else {\n    res.headers().add(HttpHeaderNames.WEBSOCKET_ORIGIN,origin);\n    res.headers().add(HttpHeaderNames.WEBSOCKET_LOCATION,uri());\n    String protocol=req.headers().get(HttpHeaderNames.WEBSOCKET_PROTOCOL);\n    if (protocol != null) {\n      res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n    }\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 428,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 99
      },
      "nodeContext" : "res.headers().set(HttpHeaderNames.WEBSOCKET_PROTOCOL,selectSubprotocol(protocol));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http.HttpHeaderNames"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 127,
    "startColumnNumber" : 41,
    "endLineNumber" : 127,
    "endColumnNumber" : 56
  }, {
    "charLength" : 15,
    "startLineNumber" : 128,
    "startColumnNumber" : 89,
    "endLineNumber" : 128,
    "endColumnNumber" : 104
  }, {
    "charLength" : 15,
    "startLineNumber" : 133,
    "startColumnNumber" : 51,
    "endLineNumber" : 133,
    "endColumnNumber" : 66
  }, {
    "charLength" : 15,
    "startLineNumber" : 134,
    "startColumnNumber" : 51,
    "endLineNumber" : 134,
    "endColumnNumber" : 66
  }, {
    "charLength" : 15,
    "startLineNumber" : 136,
    "startColumnNumber" : 42,
    "endLineNumber" : 136,
    "endColumnNumber" : 57
  }, {
    "charLength" : 15,
    "startLineNumber" : 151,
    "startColumnNumber" : 26,
    "endLineNumber" : 151,
    "endColumnNumber" : 41
  }, {
    "charLength" : 15,
    "startLineNumber" : 152,
    "startColumnNumber" : 26,
    "endLineNumber" : 152,
    "endColumnNumber" : 41
  }, {
    "charLength" : 15,
    "startLineNumber" : 157,
    "startColumnNumber" : 30,
    "endLineNumber" : 157,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 158,
    "startColumnNumber" : 30,
    "endLineNumber" : 158,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 160,
    "startColumnNumber" : 52,
    "endLineNumber" : 160,
    "endColumnNumber" : 67
  }, {
    "charLength" : 15,
    "startLineNumber" : 168,
    "startColumnNumber" : 38,
    "endLineNumber" : 168,
    "endColumnNumber" : 53
  }, {
    "charLength" : 15,
    "startLineNumber" : 173,
    "startColumnNumber" : 44,
    "endLineNumber" : 173,
    "endColumnNumber" : 59
  }, {
    "charLength" : 15,
    "startLineNumber" : 174,
    "startColumnNumber" : 44,
    "endLineNumber" : 174,
    "endColumnNumber" : 59
  }, {
    "charLength" : 15,
    "startLineNumber" : 187,
    "startColumnNumber" : 30,
    "endLineNumber" : 187,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 188,
    "startColumnNumber" : 30,
    "endLineNumber" : 188,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 190,
    "startColumnNumber" : 48,
    "endLineNumber" : 190,
    "endColumnNumber" : 63
  }, {
    "charLength" : 15,
    "startLineNumber" : 192,
    "startColumnNumber" : 34,
    "endLineNumber" : 192,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 5
  } ]
}