{
  "id" : 6,
  "expression" : "-1",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PathUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 63,
      "startColumnNumber" : 20,
      "endLineNumber" : 63,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 22
      },
      "nodeContext" : "index > -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (index > -1) {\n  normalizedPath=normalizedPath.substring(0,index);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 22
      },
      "nodeContext" : "index > -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 63,
    "startColumnNumber" : 20,
    "endLineNumber" : 63,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}