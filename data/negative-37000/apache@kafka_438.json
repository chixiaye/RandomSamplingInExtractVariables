{
  "id" : 438,
  "expression" : "512",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/raft/src/test/java/org/apache/kafka/raft/internals/BatchMemoryPoolTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "512",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 50,
      "startColumnNumber" : 27,
      "endLineNumber" : 50,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 31
      },
      "nodeContext" : "allocated.position(512)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 32
      },
      "nodeContext" : "allocated.position(512);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 34,
        "startColumnNumber" : 41,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int batchSize=1024;\n  int maxBatches=1;\n  BatchMemoryPool pool=new BatchMemoryPool(maxBatches,batchSize);\n  assertEquals(batchSize,pool.availableMemory());\n  assertFalse(pool.isOutOfMemory());\n  ByteBuffer allocated=pool.tryAllocate(batchSize);\n  assertNotNull(allocated);\n  assertEquals(0,allocated.position());\n  assertEquals(batchSize,allocated.limit());\n  assertEquals(0,pool.availableMemory());\n  assertTrue(pool.isOutOfMemory());\n  assertNull(pool.tryAllocate(batchSize));\n  allocated.position(512);\n  allocated.limit(724);\n  pool.release(allocated);\n  ByteBuffer reallocated=pool.tryAllocate(batchSize);\n  assertSame(allocated,reallocated);\n  assertEquals(0,allocated.position());\n  assertEquals(batchSize,allocated.limit());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAllocateAndRelease(){\n  int batchSize=1024;\n  int maxBatches=1;\n  BatchMemoryPool pool=new BatchMemoryPool(maxBatches,batchSize);\n  assertEquals(batchSize,pool.availableMemory());\n  assertFalse(pool.isOutOfMemory());\n  ByteBuffer allocated=pool.tryAllocate(batchSize);\n  assertNotNull(allocated);\n  assertEquals(0,allocated.position());\n  assertEquals(batchSize,allocated.limit());\n  assertEquals(0,pool.availableMemory());\n  assertTrue(pool.isOutOfMemory());\n  assertNull(pool.tryAllocate(batchSize));\n  allocated.position(512);\n  allocated.limit(724);\n  pool.release(allocated);\n  ByteBuffer reallocated=pool.tryAllocate(batchSize);\n  assertSame(allocated,reallocated);\n  assertEquals(0,allocated.position());\n  assertEquals(batchSize,allocated.limit());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 32
      },
      "nodeContext" : "allocated.position(512);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 50,
    "startColumnNumber" : 27,
    "endLineNumber" : 50,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}