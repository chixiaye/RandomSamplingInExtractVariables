{
  "id" : 410,
  "expression" : "\"Cannot handle datasource: %s\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/TestClusterQuerySegmentWalker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Cannot handle datasource: %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 107,
      "startColumnNumber" : 22,
      "endLineNumber" : 107,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 107,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 92
      },
      "nodeContext" : "throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 106,
        "startColumnNumber" : 44,
        "endLineNumber" : 108,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 108,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!analysis.isConcreteTableBased()) {\n  throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 103,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DataSourceAnalysis analysis=DataSourceAnalysis.forDataSource(queryPlus.getQuery().getDataSource());\n  if (!analysis.isConcreteTableBased()) {\n    throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n  }\n  final String dataSourceName=((TableDataSource)analysis.getBaseDataSource()).getName();\n  FunctionalIterable<SegmentDescriptor> segmentDescriptors=FunctionalIterable.create(intervals).transformCat(interval -> getSegmentsForTable(dataSourceName,interval)).transform(WindowedSegment::getDescriptor);\n  return getQueryRunnerForSegments(queryPlus.getQuery(),segmentDescriptors).run(queryPlus,responseContext);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 103,
        "startColumnNumber" : 11,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(queryPlus,responseContext) -> {\n  final DataSourceAnalysis analysis=DataSourceAnalysis.forDataSource(queryPlus.getQuery().getDataSource());\n  if (!analysis.isConcreteTableBased()) {\n    throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n  }\n  final String dataSourceName=((TableDataSource)analysis.getBaseDataSource()).getName();\n  FunctionalIterable<SegmentDescriptor> segmentDescriptors=FunctionalIterable.create(intervals).transformCat(interval -> getSegmentsForTable(dataSourceName,interval)).transform(WindowedSegment::getDescriptor);\n  return getQueryRunnerForSegments(queryPlus.getQuery(),segmentDescriptors).run(queryPlus,responseContext);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 88,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 92
      },
      "nodeContext" : "throw new ISE(\"Cannot handle datasource: %s\",queryPlus.getQuery().getDataSource());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 107,
    "startColumnNumber" : 22,
    "endLineNumber" : 107,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}