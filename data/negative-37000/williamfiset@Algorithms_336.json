{
  "id" : 336,
  "expression" : "contains(key)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/trie/Trie.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "contains(key)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 80,
      "startColumnNumber" : 9,
      "endLineNumber" : 80,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 22
      },
      "nodeContext" : "!contains(key)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (!contains(key)) return false;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 712,
        "startLineNumber" : 77,
        "startColumnNumber" : 54,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!contains(key))   return false;\n  if (numDeletions <= 0)   throw new IllegalArgumentException(\"numDeletions has to be positive\");\n  Node node=root;\n  for (int i=0; i < key.length(); i++) {\n    char ch=key.charAt(i);\n    Node curNode=node.children.get(ch);\n    curNode.count-=numDeletions;\n    if (curNode.count <= 0) {\n      node.children.remove(ch);\n      curNode.children=null;\n      curNode=null;\n      return true;\n    }\n    node=curNode;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public boolean delete(String key,int numDeletions){\n  if (!contains(key))   return false;\n  if (numDeletions <= 0)   throw new IllegalArgumentException(\"numDeletions has to be positive\");\n  Node node=root;\n  for (int i=0; i < key.length(); i++) {\n    char ch=key.charAt(i);\n    Node curNode=node.children.get(ch);\n    curNode.count-=numDeletions;\n    if (curNode.count <= 0) {\n      node.children.remove(ch);\n      curNode.children=null;\n      curNode=null;\n      return true;\n    }\n    node=curNode;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (!contains(key)) return false;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 80,
    "startColumnNumber" : 9,
    "endLineNumber" : 80,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}