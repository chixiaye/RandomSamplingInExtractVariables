{
  "id" : 311,
  "expression" : "newAggregationArguments",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newAggregationArguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 509,
      "startColumnNumber" : 34,
      "endLineNumber" : 509,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 509,
        "startColumnNumber" : 12,
        "endLineNumber" : 509,
        "endColumnNumber" : 58
      },
      "nodeContext" : "expectedInputs.addAll(newAggregationArguments)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 509,
        "startColumnNumber" : 12,
        "endLineNumber" : 509,
        "endColumnNumber" : 59
      },
      "nodeContext" : "expectedInputs.addAll(newAggregationArguments);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 503,
        "startColumnNumber" : 8,
        "endLineNumber" : 529,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ImmutableSet.Builder<VariableReferenceExpression> expectedInputs=ImmutableSet.builder();\n  List<VariableReferenceExpression> newAggregationArguments=node.getAggregationArguments().stream().filter(context.get()::contains).collect(Collectors.toList());\n  expectedInputs.addAll(newAggregationArguments);\n  ImmutableList.Builder<List<VariableReferenceExpression>> newGroupingSets=ImmutableList.builder();\n  Map<VariableReferenceExpression,VariableReferenceExpression> newGroupingMapping=new HashMap<>();\n  for (  List<VariableReferenceExpression> groupingSet : node.getGroupingSets()) {\n    ImmutableList.Builder<VariableReferenceExpression> newGroupingSet=ImmutableList.builder();\n    for (    VariableReferenceExpression output : groupingSet) {\n      if (context.get().contains(output)) {\n        newGroupingSet.add(output);\n        newGroupingMapping.putIfAbsent(output,node.getGroupingColumns().get(output));\n        expectedInputs.add(node.getGroupingColumns().get(output));\n      }\n    }\n    newGroupingSets.add(newGroupingSet.build());\n  }\n  PlanNode source=context.rewrite(node.getSource(),expectedInputs.build());\n  return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1704,
        "startLineNumber" : 501,
        "startColumnNumber" : 8,
        "endLineNumber" : 529,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public PlanNode visitGroupId(GroupIdNode node,RewriteContext<Set<VariableReferenceExpression>> context){\n  ImmutableSet.Builder<VariableReferenceExpression> expectedInputs=ImmutableSet.builder();\n  List<VariableReferenceExpression> newAggregationArguments=node.getAggregationArguments().stream().filter(context.get()::contains).collect(Collectors.toList());\n  expectedInputs.addAll(newAggregationArguments);\n  ImmutableList.Builder<List<VariableReferenceExpression>> newGroupingSets=ImmutableList.builder();\n  Map<VariableReferenceExpression,VariableReferenceExpression> newGroupingMapping=new HashMap<>();\n  for (  List<VariableReferenceExpression> groupingSet : node.getGroupingSets()) {\n    ImmutableList.Builder<VariableReferenceExpression> newGroupingSet=ImmutableList.builder();\n    for (    VariableReferenceExpression output : groupingSet) {\n      if (context.get().contains(output)) {\n        newGroupingSet.add(output);\n        newGroupingMapping.putIfAbsent(output,node.getGroupingColumns().get(output));\n        expectedInputs.add(node.getGroupingColumns().get(output));\n      }\n    }\n    newGroupingSets.add(newGroupingSet.build());\n  }\n  PlanNode source=context.rewrite(node.getSource(),expectedInputs.build());\n  return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 509,
        "startColumnNumber" : 12,
        "endLineNumber" : 509,
        "endColumnNumber" : 59
      },
      "nodeContext" : "expectedInputs.addAll(newAggregationArguments);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.facebook.presto.spi.relation.VariableReferenceExpression>"
  }, {
    "nodeContext" : "newAggregationArguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 528,
      "startColumnNumber" : 128,
      "endLineNumber" : 528,
      "endColumnNumber" : 151
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 528,
        "startColumnNumber" : 19,
        "endLineNumber" : 528,
        "endColumnNumber" : 179
      },
      "nodeContext" : "new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 528,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 180
      },
      "nodeContext" : "return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 503,
        "startColumnNumber" : 8,
        "endLineNumber" : 529,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ImmutableSet.Builder<VariableReferenceExpression> expectedInputs=ImmutableSet.builder();\n  List<VariableReferenceExpression> newAggregationArguments=node.getAggregationArguments().stream().filter(context.get()::contains).collect(Collectors.toList());\n  expectedInputs.addAll(newAggregationArguments);\n  ImmutableList.Builder<List<VariableReferenceExpression>> newGroupingSets=ImmutableList.builder();\n  Map<VariableReferenceExpression,VariableReferenceExpression> newGroupingMapping=new HashMap<>();\n  for (  List<VariableReferenceExpression> groupingSet : node.getGroupingSets()) {\n    ImmutableList.Builder<VariableReferenceExpression> newGroupingSet=ImmutableList.builder();\n    for (    VariableReferenceExpression output : groupingSet) {\n      if (context.get().contains(output)) {\n        newGroupingSet.add(output);\n        newGroupingMapping.putIfAbsent(output,node.getGroupingColumns().get(output));\n        expectedInputs.add(node.getGroupingColumns().get(output));\n      }\n    }\n    newGroupingSets.add(newGroupingSet.build());\n  }\n  PlanNode source=context.rewrite(node.getSource(),expectedInputs.build());\n  return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1704,
        "startLineNumber" : 501,
        "startColumnNumber" : 8,
        "endLineNumber" : 529,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public PlanNode visitGroupId(GroupIdNode node,RewriteContext<Set<VariableReferenceExpression>> context){\n  ImmutableSet.Builder<VariableReferenceExpression> expectedInputs=ImmutableSet.builder();\n  List<VariableReferenceExpression> newAggregationArguments=node.getAggregationArguments().stream().filter(context.get()::contains).collect(Collectors.toList());\n  expectedInputs.addAll(newAggregationArguments);\n  ImmutableList.Builder<List<VariableReferenceExpression>> newGroupingSets=ImmutableList.builder();\n  Map<VariableReferenceExpression,VariableReferenceExpression> newGroupingMapping=new HashMap<>();\n  for (  List<VariableReferenceExpression> groupingSet : node.getGroupingSets()) {\n    ImmutableList.Builder<VariableReferenceExpression> newGroupingSet=ImmutableList.builder();\n    for (    VariableReferenceExpression output : groupingSet) {\n      if (context.get().contains(output)) {\n        newGroupingSet.add(output);\n        newGroupingMapping.putIfAbsent(output,node.getGroupingColumns().get(output));\n        expectedInputs.add(node.getGroupingColumns().get(output));\n      }\n    }\n    newGroupingSets.add(newGroupingSet.build());\n  }\n  PlanNode source=context.rewrite(node.getSource(),expectedInputs.build());\n  return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 528,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 180
      },
      "nodeContext" : "return new GroupIdNode(node.getSourceLocation(),node.getId(),source,newGroupingSets.build(),newGroupingMapping,newAggregationArguments,node.getGroupIdVariable());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.facebook.presto.spi.relation.VariableReferenceExpression>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 509,
    "startColumnNumber" : 34,
    "endLineNumber" : 509,
    "endColumnNumber" : 57
  }, {
    "charLength" : 23,
    "startLineNumber" : 528,
    "startColumnNumber" : 128,
    "endLineNumber" : 528,
    "endColumnNumber" : 151
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}