{
  "id" : 321,
  "expression" : "serverConnectedChannel",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketDataReadInitialStateTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serverConnectedChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 110,
      "startColumnNumber" : 26,
      "endLineNumber" : 110,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertNotNull(serverConnectedChannel)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(serverConnectedChannel);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3540,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sb.option(AUTO_READ,false);\n  sb.childOption(AUTO_READ,false);\n  cb.option(AUTO_READ,false);\n  final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n  final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n  final CountDownLatch serverReadLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadLatch=new CountDownLatch(1);\n  final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n  sb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          acceptorReadLatch.countDown();\n          ctx.fireChannelRead(msg);\n        }\n      }\n);\n    }\n  }\n);\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      serverConnectedChannelRef.set(ch);\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        ByteBuf msg){\n          ctx.writeAndFlush(msg.retainedDuplicate());\n          serverReadLatch.countDown();\n        }\n      }\n);\n      serverReadyLatch.countDown();\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        Object msg){\n          clientReadLatch.countDown();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n  Thread.sleep(sleepMs);\n  assertEquals(1,acceptorReadLatch.getCount());\n  serverChannel.read();\n  serverReadyLatch.await();\n  Channel serverConnectedChannel=serverConnectedChannelRef.get();\n  assertNotNull(serverConnectedChannel);\n  Thread.sleep(sleepMs);\n  assertEquals(1,serverReadLatch.getCount());\n  serverConnectedChannel.read();\n  serverReadLatch.await();\n  Thread.sleep(sleepMs);\n  assertEquals(1,clientReadLatch.getCount());\n  clientChannel.read();\n  clientReadLatch.await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3773,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  sb.option(AUTO_READ,false);\n  sb.childOption(AUTO_READ,false);\n  cb.option(AUTO_READ,false);\n  final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n  final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n  final CountDownLatch serverReadLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadLatch=new CountDownLatch(1);\n  final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n  sb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          acceptorReadLatch.countDown();\n          ctx.fireChannelRead(msg);\n        }\n      }\n);\n    }\n  }\n);\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      serverConnectedChannelRef.set(ch);\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        ByteBuf msg){\n          ctx.writeAndFlush(msg.retainedDuplicate());\n          serverReadLatch.countDown();\n        }\n      }\n);\n      serverReadyLatch.countDown();\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        Object msg){\n          clientReadLatch.countDown();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n  Thread.sleep(sleepMs);\n  assertEquals(1,acceptorReadLatch.getCount());\n  serverChannel.read();\n  serverReadyLatch.await();\n  Channel serverConnectedChannel=serverConnectedChannelRef.get();\n  assertNotNull(serverConnectedChannel);\n  Thread.sleep(sleepMs);\n  assertEquals(1,serverReadLatch.getCount());\n  serverConnectedChannel.read();\n  serverReadLatch.await();\n  Thread.sleep(sleepMs);\n  assertEquals(1,clientReadLatch.getCount());\n  clientChannel.read();\n  clientReadLatch.await();\n}\n  finally {\n  if (serverChannel != null) {\n    serverChannel.close().sync();\n  }\n  if (clientChannel != null) {\n    clientChannel.close().sync();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 381,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3903,
        "startLineNumber" : 45,
        "startColumnNumber" : 108,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  final int sleepMs=100;\n  try {\n    sb.option(AUTO_READ,false);\n    sb.childOption(AUTO_READ,false);\n    cb.option(AUTO_READ,false);\n    final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n    final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n    final CountDownLatch serverReadLatch=new CountDownLatch(1);\n    final CountDownLatch clientReadLatch=new CountDownLatch(1);\n    final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n    sb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            acceptorReadLatch.countDown();\n            ctx.fireChannelRead(msg);\n          }\n        }\n);\n      }\n    }\n);\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        serverConnectedChannelRef.set(ch);\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          ByteBuf msg){\n            ctx.writeAndFlush(msg.retainedDuplicate());\n            serverReadLatch.countDown();\n          }\n        }\n);\n        serverReadyLatch.countDown();\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          Object msg){\n            clientReadLatch.countDown();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n    Thread.sleep(sleepMs);\n    assertEquals(1,acceptorReadLatch.getCount());\n    serverChannel.read();\n    serverReadyLatch.await();\n    Channel serverConnectedChannel=serverConnectedChannelRef.get();\n    assertNotNull(serverConnectedChannel);\n    Thread.sleep(sleepMs);\n    assertEquals(1,serverReadLatch.getCount());\n    serverConnectedChannel.read();\n    serverReadLatch.await();\n    Thread.sleep(sleepMs);\n    assertEquals(1,clientReadLatch.getCount());\n    clientChannel.read();\n    clientReadLatch.await();\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4007,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testAutoReadOffNoDataReadUntilReadCalled(ServerBootstrap sb,Bootstrap cb) throws Throwable {\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  final int sleepMs=100;\n  try {\n    sb.option(AUTO_READ,false);\n    sb.childOption(AUTO_READ,false);\n    cb.option(AUTO_READ,false);\n    final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n    final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n    final CountDownLatch serverReadLatch=new CountDownLatch(1);\n    final CountDownLatch clientReadLatch=new CountDownLatch(1);\n    final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n    sb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            acceptorReadLatch.countDown();\n            ctx.fireChannelRead(msg);\n          }\n        }\n);\n      }\n    }\n);\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        serverConnectedChannelRef.set(ch);\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          ByteBuf msg){\n            ctx.writeAndFlush(msg.retainedDuplicate());\n            serverReadLatch.countDown();\n          }\n        }\n);\n        serverReadyLatch.countDown();\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          Object msg){\n            clientReadLatch.countDown();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n    Thread.sleep(sleepMs);\n    assertEquals(1,acceptorReadLatch.getCount());\n    serverChannel.read();\n    serverReadyLatch.await();\n    Channel serverConnectedChannel=serverConnectedChannelRef.get();\n    assertNotNull(serverConnectedChannel);\n    Thread.sleep(sleepMs);\n    assertEquals(1,serverReadLatch.getCount());\n    serverConnectedChannel.read();\n    serverReadLatch.await();\n    Thread.sleep(sleepMs);\n    assertEquals(1,clientReadLatch.getCount());\n    clientChannel.read();\n    clientReadLatch.await();\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(serverConnectedChannel);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.Channel"
  }, {
    "nodeContext" : "serverConnectedChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 116,
      "startColumnNumber" : 12,
      "endLineNumber" : 116,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 41
      },
      "nodeContext" : "serverConnectedChannel.read()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 42
      },
      "nodeContext" : "serverConnectedChannel.read();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3540,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sb.option(AUTO_READ,false);\n  sb.childOption(AUTO_READ,false);\n  cb.option(AUTO_READ,false);\n  final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n  final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n  final CountDownLatch serverReadLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadLatch=new CountDownLatch(1);\n  final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n  sb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          acceptorReadLatch.countDown();\n          ctx.fireChannelRead(msg);\n        }\n      }\n);\n    }\n  }\n);\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      serverConnectedChannelRef.set(ch);\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        ByteBuf msg){\n          ctx.writeAndFlush(msg.retainedDuplicate());\n          serverReadLatch.countDown();\n        }\n      }\n);\n      serverReadyLatch.countDown();\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        Object msg){\n          clientReadLatch.countDown();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n  Thread.sleep(sleepMs);\n  assertEquals(1,acceptorReadLatch.getCount());\n  serverChannel.read();\n  serverReadyLatch.await();\n  Channel serverConnectedChannel=serverConnectedChannelRef.get();\n  assertNotNull(serverConnectedChannel);\n  Thread.sleep(sleepMs);\n  assertEquals(1,serverReadLatch.getCount());\n  serverConnectedChannel.read();\n  serverReadLatch.await();\n  Thread.sleep(sleepMs);\n  assertEquals(1,clientReadLatch.getCount());\n  clientChannel.read();\n  clientReadLatch.await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3773,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  sb.option(AUTO_READ,false);\n  sb.childOption(AUTO_READ,false);\n  cb.option(AUTO_READ,false);\n  final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n  final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n  final CountDownLatch serverReadLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadLatch=new CountDownLatch(1);\n  final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n  sb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          acceptorReadLatch.countDown();\n          ctx.fireChannelRead(msg);\n        }\n      }\n);\n    }\n  }\n);\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      serverConnectedChannelRef.set(ch);\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        ByteBuf msg){\n          ctx.writeAndFlush(msg.retainedDuplicate());\n          serverReadLatch.countDown();\n        }\n      }\n);\n      serverReadyLatch.countDown();\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n        @Override protected void messageReceived(        ChannelHandlerContext ctx,        Object msg){\n          clientReadLatch.countDown();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n  Thread.sleep(sleepMs);\n  assertEquals(1,acceptorReadLatch.getCount());\n  serverChannel.read();\n  serverReadyLatch.await();\n  Channel serverConnectedChannel=serverConnectedChannelRef.get();\n  assertNotNull(serverConnectedChannel);\n  Thread.sleep(sleepMs);\n  assertEquals(1,serverReadLatch.getCount());\n  serverConnectedChannel.read();\n  serverReadLatch.await();\n  Thread.sleep(sleepMs);\n  assertEquals(1,clientReadLatch.getCount());\n  clientChannel.read();\n  clientReadLatch.await();\n}\n  finally {\n  if (serverChannel != null) {\n    serverChannel.close().sync();\n  }\n  if (clientChannel != null) {\n    clientChannel.close().sync();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 381,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3903,
        "startLineNumber" : 45,
        "startColumnNumber" : 108,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  final int sleepMs=100;\n  try {\n    sb.option(AUTO_READ,false);\n    sb.childOption(AUTO_READ,false);\n    cb.option(AUTO_READ,false);\n    final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n    final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n    final CountDownLatch serverReadLatch=new CountDownLatch(1);\n    final CountDownLatch clientReadLatch=new CountDownLatch(1);\n    final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n    sb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            acceptorReadLatch.countDown();\n            ctx.fireChannelRead(msg);\n          }\n        }\n);\n      }\n    }\n);\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        serverConnectedChannelRef.set(ch);\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          ByteBuf msg){\n            ctx.writeAndFlush(msg.retainedDuplicate());\n            serverReadLatch.countDown();\n          }\n        }\n);\n        serverReadyLatch.countDown();\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          Object msg){\n            clientReadLatch.countDown();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n    Thread.sleep(sleepMs);\n    assertEquals(1,acceptorReadLatch.getCount());\n    serverChannel.read();\n    serverReadyLatch.await();\n    Channel serverConnectedChannel=serverConnectedChannelRef.get();\n    assertNotNull(serverConnectedChannel);\n    Thread.sleep(sleepMs);\n    assertEquals(1,serverReadLatch.getCount());\n    serverConnectedChannel.read();\n    serverReadLatch.await();\n    Thread.sleep(sleepMs);\n    assertEquals(1,clientReadLatch.getCount());\n    clientChannel.read();\n    clientReadLatch.await();\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4007,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testAutoReadOffNoDataReadUntilReadCalled(ServerBootstrap sb,Bootstrap cb) throws Throwable {\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  final int sleepMs=100;\n  try {\n    sb.option(AUTO_READ,false);\n    sb.childOption(AUTO_READ,false);\n    cb.option(AUTO_READ,false);\n    final CountDownLatch serverReadyLatch=new CountDownLatch(1);\n    final CountDownLatch acceptorReadLatch=new CountDownLatch(1);\n    final CountDownLatch serverReadLatch=new CountDownLatch(1);\n    final CountDownLatch clientReadLatch=new CountDownLatch(1);\n    final AtomicReference<Channel> serverConnectedChannelRef=new AtomicReference<>();\n    sb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            acceptorReadLatch.countDown();\n            ctx.fireChannelRead(msg);\n          }\n        }\n);\n      }\n    }\n);\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        serverConnectedChannelRef.set(ch);\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          ByteBuf msg){\n            ctx.writeAndFlush(msg.retainedDuplicate());\n            serverReadLatch.countDown();\n          }\n        }\n);\n        serverReadyLatch.countDown();\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<Object>(){\n          @Override protected void messageReceived(          ChannelHandlerContext ctx,          Object msg){\n            clientReadLatch.countDown();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.writeAndFlush(clientChannel.alloc().buffer().writeZero(1)).syncUninterruptibly();\n    Thread.sleep(sleepMs);\n    assertEquals(1,acceptorReadLatch.getCount());\n    serverChannel.read();\n    serverReadyLatch.await();\n    Channel serverConnectedChannel=serverConnectedChannelRef.get();\n    assertNotNull(serverConnectedChannel);\n    Thread.sleep(sleepMs);\n    assertEquals(1,serverReadLatch.getCount());\n    serverConnectedChannel.read();\n    serverReadLatch.await();\n    Thread.sleep(sleepMs);\n    assertEquals(1,clientReadLatch.getCount());\n    clientChannel.read();\n    clientReadLatch.await();\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 42
      },
      "nodeContext" : "serverConnectedChannel.read();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.Channel"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 110,
    "startColumnNumber" : 26,
    "endLineNumber" : 110,
    "endColumnNumber" : 48
  }, {
    "charLength" : 22,
    "startLineNumber" : 116,
    "startColumnNumber" : 12,
    "endLineNumber" : 116,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}