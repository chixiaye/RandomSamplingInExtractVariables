{
  "id" : 163,
  "expression" : "new SingleSubscriber<T>(){\n  @Override public void onSubscribe(  Disposable d){\n  }\n  @Override public void onSuccess(  T value){\n    notification.set(NotificationLite.next(value));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onSuccess(value);\n    }\n  }\n  @Override public void onError(  Throwable e){\n    notification.set(NotificationLite.error(e));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onError(e);\n    }\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/single/SingleCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SingleSubscriber<T>(){\n  @Override public void onSubscribe(  Disposable d){\n  }\n  @Override public void onSuccess(  T value){\n    notification.set(NotificationLite.next(value));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onSuccess(value);\n    }\n  }\n  @Override public void onError(  Throwable e){\n    notification.set(NotificationLite.error(e));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onError(e);\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1204,
      "startLineNumber" : 73,
      "startColumnNumber" : 25,
      "endLineNumber" : 106,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 154,
    "astHeight" : 14,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1222,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 10
      },
      "nodeContext" : "source.subscribe(new SingleSubscriber<T>(){\n  @Override public void onSubscribe(  Disposable d){\n  }\n  @Override public void onSuccess(  T value){\n    notification.set(NotificationLite.next(value));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onSuccess(value);\n    }\n  }\n  @Override public void onError(  Throwable e){\n    notification.set(NotificationLite.error(e));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onError(e);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 157,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 11
      },
      "nodeContext" : "source.subscribe(new SingleSubscriber<T>(){\n  @Override public void onSubscribe(  Disposable d){\n  }\n  @Override public void onSuccess(  T value){\n    notification.set(NotificationLite.next(value));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onSuccess(value);\n    }\n  }\n  @Override public void onError(  Throwable e){\n    notification.set(NotificationLite.error(e));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onError(e);\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 158,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2192,
        "startLineNumber" : 40,
        "startColumnNumber" : 66,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object o=notification.get();\n  if (o != null) {\n    s.onSubscribe(EmptyDisposable.INSTANCE);\n    if (NotificationLite.isError(o)) {\n      s.onError(NotificationLite.getError(o));\n    }\n else {\n      s.onSuccess(NotificationLite.<T>getValue(o));\n    }\n    return;\n  }\nsynchronized (subscribers) {\n    o=notification.get();\n    if (o == null) {\n      subscribers.add(s);\n    }\n  }\n  if (o != null) {\n    s.onSubscribe(EmptyDisposable.INSTANCE);\n    if (NotificationLite.isError(o)) {\n      s.onError(NotificationLite.getError(o));\n    }\n else {\n      s.onSuccess(NotificationLite.<T>getValue(o));\n    }\n    return;\n  }\n  if (wip.getAndIncrement() != 0) {\n    return;\n  }\n  source.subscribe(new SingleSubscriber<T>(){\n    @Override public void onSubscribe(    Disposable d){\n    }\n    @Override public void onSuccess(    T value){\n      notification.set(NotificationLite.next(value));\n      List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n        list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n        subscribers.clear();\n      }\n      for (      SingleSubscriber<? super T> s1 : list) {\n        s1.onSuccess(value);\n      }\n    }\n    @Override public void onError(    Throwable e){\n      notification.set(NotificationLite.error(e));\n      List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n        list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n        subscribers.clear();\n      }\n      for (      SingleSubscriber<? super T> s1 : list) {\n        s1.onError(e);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void subscribeActual(SingleSubscriber<? super T> s){\n  Object o=notification.get();\n  if (o != null) {\n    s.onSubscribe(EmptyDisposable.INSTANCE);\n    if (NotificationLite.isError(o)) {\n      s.onError(NotificationLite.getError(o));\n    }\n else {\n      s.onSuccess(NotificationLite.<T>getValue(o));\n    }\n    return;\n  }\nsynchronized (subscribers) {\n    o=notification.get();\n    if (o == null) {\n      subscribers.add(s);\n    }\n  }\n  if (o != null) {\n    s.onSubscribe(EmptyDisposable.INSTANCE);\n    if (NotificationLite.isError(o)) {\n      s.onError(NotificationLite.getError(o));\n    }\n else {\n      s.onSuccess(NotificationLite.<T>getValue(o));\n    }\n    return;\n  }\n  if (wip.getAndIncrement() != 0) {\n    return;\n  }\n  source.subscribe(new SingleSubscriber<T>(){\n    @Override public void onSubscribe(    Disposable d){\n    }\n    @Override public void onSuccess(    T value){\n      notification.set(NotificationLite.next(value));\n      List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n        list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n        subscribers.clear();\n      }\n      for (      SingleSubscriber<? super T> s1 : list) {\n        s1.onSuccess(value);\n      }\n    }\n    @Override public void onError(    Throwable e){\n      notification.set(NotificationLite.error(e));\n      List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n        list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n        subscribers.clear();\n      }\n      for (      SingleSubscriber<? super T> s1 : list) {\n        s1.onError(e);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 11
      },
      "nodeContext" : "source.subscribe(new SingleSubscriber<T>(){\n  @Override public void onSubscribe(  Disposable d){\n  }\n  @Override public void onSuccess(  T value){\n    notification.set(NotificationLite.next(value));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onSuccess(value);\n    }\n  }\n  @Override public void onError(  Throwable e){\n    notification.set(NotificationLite.error(e));\n    List<SingleSubscriber<? super T>> list;\nsynchronized (subscribers) {\n      list=new ArrayList<SingleSubscriber<? super T>>(subscribers);\n      subscribers.clear();\n    }\n    for (    SingleSubscriber<? super T> s1 : list) {\n      s1.onError(e);\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 158,
      "astHeight" : 16
    },
    "tokenLength" : 57,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1204,
    "startLineNumber" : 73,
    "startColumnNumber" : 25,
    "endLineNumber" : 106,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}