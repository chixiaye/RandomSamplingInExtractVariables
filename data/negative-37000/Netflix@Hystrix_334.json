{
  "id" : 334,
  "expression" : "\"countEmit\"",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"countEmit\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 95,
      "startColumnNumber" : 36,
      "endLineNumber" : 95,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 10
      },
      "nodeContext" : "safelyCreateCumulativeGauge(\"countEmit\",new Func0<HystrixEventType>(){\n  @Override public HystrixEventType call(){\n    return HystrixEventType.EMIT;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 11
      },
      "nodeContext" : "safelyCreateCumulativeGauge(\"countEmit\",new Func0<HystrixEventType>(){\n  @Override public HystrixEventType call(){\n    return HystrixEventType.EMIT;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13782,
        "startLineNumber" : 66,
        "startColumnNumber" : 29,
        "endLineNumber" : 386,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  metricsRegistry.newGauge(createMetricName(\"isCircuitBreakerOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long value(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n);\n  createCurrentValueGauge(\"executionSemaphorePermitsInUse\",currentConcurrentExecutionCountThunk);\n  createCurrentValueGauge(\"errorPercentage\",errorPercentageThunk);\n  createExecutionLatencyMeanGauge(\"latencyExecute_mean\");\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_5\",5);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_25\",25);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_50\",50);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_75\",75);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_90\",90);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_99\",99);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_995\",99.5);\n  createTotalLatencyMeanGauge(\"latencyTotal_mean\");\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_5\",5);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_25\",25);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_50\",50);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_75\",75);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_90\",90);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_99\",99);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_995\",99.5);\n  metricsRegistry.newGauge(createMetricName(\"commandGroup\"),new Gauge<String>(){\n    @Override public String value(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerRequestVolumeThreshold\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerErrorThresholdPercentage\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerForceOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerForceClosed\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationStrategy\"),new Gauge<String>(){\n    @Override public String value(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_metricsRollingPercentileEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestLogEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13821,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 386,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initialize(){\n  metricsRegistry.newGauge(createMetricName(\"isCircuitBreakerOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long value(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeGauge(\"countTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingGauge(\"rollingCountTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n);\n  createCurrentValueGauge(\"executionSemaphorePermitsInUse\",currentConcurrentExecutionCountThunk);\n  createCurrentValueGauge(\"errorPercentage\",errorPercentageThunk);\n  createExecutionLatencyMeanGauge(\"latencyExecute_mean\");\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_5\",5);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_25\",25);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_50\",50);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_75\",75);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_90\",90);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_99\",99);\n  createExecutionLatencyPercentileGauge(\"latencyExecute_percentile_995\",99.5);\n  createTotalLatencyMeanGauge(\"latencyTotal_mean\");\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_5\",5);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_25\",25);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_50\",50);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_75\",75);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_90\",90);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_99\",99);\n  createTotalLatencyPercentileGauge(\"latencyTotal_percentile_995\",99.5);\n  metricsRegistry.newGauge(createMetricName(\"commandGroup\"),new Gauge<String>(){\n    @Override public String value(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerRequestVolumeThreshold\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerErrorThresholdPercentage\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerForceOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_circuitBreakerForceClosed\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationStrategy\"),new Gauge<String>(){\n    @Override public String value(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_metricsRollingPercentileEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestLogEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1262,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 10
      },
      "nodeContext" : "safelyCreateCumulativeGauge(\"countEmit\",new Func0<HystrixEventType>(){\n  @Override public HystrixEventType call(){\n    return HystrixEventType.EMIT;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 95,
    "startColumnNumber" : 36,
    "endLineNumber" : 95,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}