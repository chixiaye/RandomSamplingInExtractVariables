{
  "id" : 324,
  "expression" : "taskIdx",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/StatefulSequenceSource.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "taskIdx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 95,
      "startColumnNumber" : 44,
      "endLineNumber" : 95,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 95,
        "startColumnNumber" : 36,
        "endLineNumber" : 95,
        "endColumnNumber" : 51
      },
      "nodeContext" : "start + taskIdx",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 95,
        "startColumnNumber" : 23,
        "endLineNumber" : 95,
        "endColumnNumber" : 51
      },
      "nodeContext" : "congruence=start + taskIdx",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 52
      },
      "nodeContext" : "final long congruence=start + taskIdx;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 90,
        "startColumnNumber" : 15,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n  final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n  final long congruence=start + taskIdx;\n  long totalNoOfElements=Math.abs(end - start + 1);\n  final int baseSize=safeDivide(totalNoOfElements,stepSize);\n  final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n  for (long collected=0; collected < toCollect; collected++) {\n    this.valuesToEmit.add(collected * stepSize + congruence);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (context.isRestored()) {\n  for (  Long v : this.checkpointedState.get()) {\n    this.valuesToEmit.add(v);\n  }\n}\n else {\n  final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n  final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n  final long congruence=start + taskIdx;\n  long totalNoOfElements=Math.abs(end - start + 1);\n  final int baseSize=safeDivide(totalNoOfElements,stepSize);\n  final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n  for (long collected=0; collected < toCollect; collected++) {\n    this.valuesToEmit.add(collected * stepSize + congruence);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 71,
        "startColumnNumber" : 88,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"stateful-sequence-source-state\",LongSerializer.INSTANCE));\n  this.valuesToEmit=new ArrayDeque<>();\n  if (context.isRestored()) {\n    for (    Long v : this.checkpointedState.get()) {\n      this.valuesToEmit.add(v);\n    }\n  }\n else {\n    final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n    final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n    final long congruence=start + taskIdx;\n    long totalNoOfElements=Math.abs(end - start + 1);\n    final int baseSize=safeDivide(totalNoOfElements,stepSize);\n    final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n    for (long collected=0; collected < toCollect; collected++) {\n      this.valuesToEmit.add(collected * stepSize + congruence);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initializeState(FunctionInitializationContext context) throws Exception {\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"stateful-sequence-source-state\",LongSerializer.INSTANCE));\n  this.valuesToEmit=new ArrayDeque<>();\n  if (context.isRestored()) {\n    for (    Long v : this.checkpointedState.get()) {\n      this.valuesToEmit.add(v);\n    }\n  }\n else {\n    final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n    final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n    final long congruence=start + taskIdx;\n    long totalNoOfElements=Math.abs(end - start + 1);\n    final int baseSize=safeDivide(totalNoOfElements,stepSize);\n    final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n    for (long collected=0; collected < toCollect; collected++) {\n      this.valuesToEmit.add(collected * stepSize + congruence);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 52
      },
      "nodeContext" : "final long congruence=start + taskIdx;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "taskIdx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 100,
      "startColumnNumber" : 52,
      "endLineNumber" : 100,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 100,
        "startColumnNumber" : 21,
        "endLineNumber" : 100,
        "endColumnNumber" : 59
      },
      "nodeContext" : "totalNoOfElements % stepSize > taskIdx",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(totalNoOfElements % stepSize > taskIdx)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 86
      },
      "nodeContext" : "(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 99,
        "startColumnNumber" : 22,
        "endLineNumber" : 100,
        "endColumnNumber" : 86
      },
      "nodeContext" : "toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 87
      },
      "nodeContext" : "final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 90,
        "startColumnNumber" : 15,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n  final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n  final long congruence=start + taskIdx;\n  long totalNoOfElements=Math.abs(end - start + 1);\n  final int baseSize=safeDivide(totalNoOfElements,stepSize);\n  final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n  for (long collected=0; collected < toCollect; collected++) {\n    this.valuesToEmit.add(collected * stepSize + congruence);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (context.isRestored()) {\n  for (  Long v : this.checkpointedState.get()) {\n    this.valuesToEmit.add(v);\n  }\n}\n else {\n  final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n  final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n  final long congruence=start + taskIdx;\n  long totalNoOfElements=Math.abs(end - start + 1);\n  final int baseSize=safeDivide(totalNoOfElements,stepSize);\n  final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n  for (long collected=0; collected < toCollect; collected++) {\n    this.valuesToEmit.add(collected * stepSize + congruence);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 71,
        "startColumnNumber" : 88,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"stateful-sequence-source-state\",LongSerializer.INSTANCE));\n  this.valuesToEmit=new ArrayDeque<>();\n  if (context.isRestored()) {\n    for (    Long v : this.checkpointedState.get()) {\n      this.valuesToEmit.add(v);\n    }\n  }\n else {\n    final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n    final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n    final long congruence=start + taskIdx;\n    long totalNoOfElements=Math.abs(end - start + 1);\n    final int baseSize=safeDivide(totalNoOfElements,stepSize);\n    final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n    for (long collected=0; collected < toCollect; collected++) {\n      this.valuesToEmit.add(collected * stepSize + congruence);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initializeState(FunctionInitializationContext context) throws Exception {\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"stateful-sequence-source-state\",LongSerializer.INSTANCE));\n  this.valuesToEmit=new ArrayDeque<>();\n  if (context.isRestored()) {\n    for (    Long v : this.checkpointedState.get()) {\n      this.valuesToEmit.add(v);\n    }\n  }\n else {\n    final int stepSize=getRuntimeContext().getNumberOfParallelSubtasks();\n    final int taskIdx=getRuntimeContext().getIndexOfThisSubtask();\n    final long congruence=start + taskIdx;\n    long totalNoOfElements=Math.abs(end - start + 1);\n    final int baseSize=safeDivide(totalNoOfElements,stepSize);\n    final int toCollect=(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n    for (long collected=0; collected < toCollect; collected++) {\n      this.valuesToEmit.add(collected * stepSize + congruence);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 86
      },
      "nodeContext" : "(totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 95,
    "startColumnNumber" : 44,
    "endLineNumber" : 95,
    "endColumnNumber" : 51
  }, {
    "charLength" : 7,
    "startLineNumber" : 100,
    "startColumnNumber" : 52,
    "endLineNumber" : 100,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}