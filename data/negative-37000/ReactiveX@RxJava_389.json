{
  "id" : 389,
  "expression" : "worker",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 413,
      "startColumnNumber" : 16,
      "endLineNumber" : 413,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 413,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 18
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    try {\n      start.await();\n    }\n catch (    Exception e1) {\n      e1.printStackTrace();\n    }\n    rs.onNext(1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 413,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 19
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    try {\n      start.await();\n    }\n catch (    Exception e1) {\n      e1.printStackTrace();\n    }\n    rs.onNext(1);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 404,
        "startColumnNumber" : 44,
        "endLineNumber" : 466,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i % 1000 == 0) {\n    System.out.println(i);\n  }\n  final BehaviorSubject<Object> rs=BehaviorSubject.create();\n  final CountDownLatch finish=new CountDownLatch(1);\n  final CountDownLatch start=new CountDownLatch(1);\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      try {\n        start.await();\n      }\n catch (      Exception e1) {\n        e1.printStackTrace();\n      }\n      rs.onNext(1);\n    }\n  }\n);\n  final AtomicReference<Object> o=new AtomicReference<Object>();\n  rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n    @Override public void onComplete(){\n      o.set(-1);\n      finish.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      o.set(e);\n      finish.countDown();\n    }\n    @Override public void onNext(    Object t){\n      o.set(t);\n      finish.countDown();\n    }\n  }\n);\n  start.countDown();\n  if (!finish.await(5,TimeUnit.SECONDS)) {\n    System.out.println(o.get());\n    System.out.println(rs.hasSubscribers());\n    rs.onComplete();\n    Assert.fail(\"Timeout @ \" + i);\n    break;\n  }\n else {\n    Assert.assertEquals(1,o.get());\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        rs.onComplete();\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2346,
        "startLineNumber" : 404,
        "startColumnNumber" : 12,
        "endLineNumber" : 466,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 50000; i++) {\n  if (i % 1000 == 0) {\n    System.out.println(i);\n  }\n  final BehaviorSubject<Object> rs=BehaviorSubject.create();\n  final CountDownLatch finish=new CountDownLatch(1);\n  final CountDownLatch start=new CountDownLatch(1);\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      try {\n        start.await();\n      }\n catch (      Exception e1) {\n        e1.printStackTrace();\n      }\n      rs.onNext(1);\n    }\n  }\n);\n  final AtomicReference<Object> o=new AtomicReference<Object>();\n  rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n    @Override public void onComplete(){\n      o.set(-1);\n      finish.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      o.set(e);\n      finish.countDown();\n    }\n    @Override public void onNext(    Object t){\n      o.set(t);\n      finish.countDown();\n    }\n  }\n);\n  start.countDown();\n  if (!finish.await(5,TimeUnit.SECONDS)) {\n    System.out.println(o.get());\n    System.out.println(rs.hasSubscribers());\n    rs.onComplete();\n    Assert.fail(\"Timeout @ \" + i);\n    break;\n  }\n else {\n    Assert.assertEquals(1,o.get());\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        rs.onComplete();\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 257,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2372,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 467,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < 50000; i++) {\n    if (i % 1000 == 0) {\n      System.out.println(i);\n    }\n    final BehaviorSubject<Object> rs=BehaviorSubject.create();\n    final CountDownLatch finish=new CountDownLatch(1);\n    final CountDownLatch start=new CountDownLatch(1);\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        try {\n          start.await();\n        }\n catch (        Exception e1) {\n          e1.printStackTrace();\n        }\n        rs.onNext(1);\n      }\n    }\n);\n    final AtomicReference<Object> o=new AtomicReference<Object>();\n    rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n      @Override public void onComplete(){\n        o.set(-1);\n        finish.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        o.set(e);\n        finish.countDown();\n      }\n      @Override public void onNext(      Object t){\n        o.set(t);\n        finish.countDown();\n      }\n    }\n);\n    start.countDown();\n    if (!finish.await(5,TimeUnit.SECONDS)) {\n      System.out.println(o.get());\n      System.out.println(rs.hasSubscribers());\n      rs.onComplete();\n      Assert.fail(\"Timeout @ \" + i);\n      break;\n    }\n else {\n      Assert.assertEquals(1,o.get());\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          rs.onComplete();\n        }\n      }\n);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 403,
        "startColumnNumber" : 8,
        "endLineNumber" : 469,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < 50000; i++) {\n    if (i % 1000 == 0) {\n      System.out.println(i);\n    }\n    final BehaviorSubject<Object> rs=BehaviorSubject.create();\n    final CountDownLatch finish=new CountDownLatch(1);\n    final CountDownLatch start=new CountDownLatch(1);\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        try {\n          start.await();\n        }\n catch (        Exception e1) {\n          e1.printStackTrace();\n        }\n        rs.onNext(1);\n      }\n    }\n);\n    final AtomicReference<Object> o=new AtomicReference<Object>();\n    rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n      @Override public void onComplete(){\n        o.set(-1);\n        finish.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        o.set(e);\n        finish.countDown();\n      }\n      @Override public void onNext(      Object t){\n        o.set(t);\n        finish.countDown();\n      }\n    }\n);\n    start.countDown();\n    if (!finish.await(5,TimeUnit.SECONDS)) {\n      System.out.println(o.get());\n      System.out.println(rs.hasSubscribers());\n      rs.onComplete();\n      Assert.fail(\"Timeout @ \" + i);\n      break;\n    }\n else {\n      Assert.assertEquals(1,o.get());\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          rs.onComplete();\n        }\n      }\n);\n    }\n  }\n}\n  finally {\n  worker.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 264,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 400,
        "startColumnNumber" : 64,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 399,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEmissionSubscriptionRace() throws Exception {\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 413,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 18
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    try {\n      start.await();\n    }\n catch (    Exception e1) {\n      e1.printStackTrace();\n    }\n    rs.onNext(1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.Scheduler.Worker"
  }, {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 459,
      "startColumnNumber" : 20,
      "endLineNumber" : 459,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 459,
        "startColumnNumber" : 20,
        "endLineNumber" : 464,
        "endColumnNumber" : 22
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    rs.onComplete();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 459,
        "startColumnNumber" : 20,
        "endLineNumber" : 464,
        "endColumnNumber" : 23
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    rs.onComplete();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 457,
        "startColumnNumber" : 23,
        "endLineNumber" : 465,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Assert.assertEquals(1,o.get());\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      rs.onComplete();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 451,
        "startColumnNumber" : 16,
        "endLineNumber" : 465,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!finish.await(5,TimeUnit.SECONDS)) {\n  System.out.println(o.get());\n  System.out.println(rs.hasSubscribers());\n  rs.onComplete();\n  Assert.fail(\"Timeout @ \" + i);\n  break;\n}\n else {\n  Assert.assertEquals(1,o.get());\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      rs.onComplete();\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 404,
        "startColumnNumber" : 44,
        "endLineNumber" : 466,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i % 1000 == 0) {\n    System.out.println(i);\n  }\n  final BehaviorSubject<Object> rs=BehaviorSubject.create();\n  final CountDownLatch finish=new CountDownLatch(1);\n  final CountDownLatch start=new CountDownLatch(1);\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      try {\n        start.await();\n      }\n catch (      Exception e1) {\n        e1.printStackTrace();\n      }\n      rs.onNext(1);\n    }\n  }\n);\n  final AtomicReference<Object> o=new AtomicReference<Object>();\n  rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n    @Override public void onComplete(){\n      o.set(-1);\n      finish.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      o.set(e);\n      finish.countDown();\n    }\n    @Override public void onNext(    Object t){\n      o.set(t);\n      finish.countDown();\n    }\n  }\n);\n  start.countDown();\n  if (!finish.await(5,TimeUnit.SECONDS)) {\n    System.out.println(o.get());\n    System.out.println(rs.hasSubscribers());\n    rs.onComplete();\n    Assert.fail(\"Timeout @ \" + i);\n    break;\n  }\n else {\n    Assert.assertEquals(1,o.get());\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        rs.onComplete();\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2346,
        "startLineNumber" : 404,
        "startColumnNumber" : 12,
        "endLineNumber" : 466,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 50000; i++) {\n  if (i % 1000 == 0) {\n    System.out.println(i);\n  }\n  final BehaviorSubject<Object> rs=BehaviorSubject.create();\n  final CountDownLatch finish=new CountDownLatch(1);\n  final CountDownLatch start=new CountDownLatch(1);\n  worker.schedule(new Runnable(){\n    @Override public void run(){\n      try {\n        start.await();\n      }\n catch (      Exception e1) {\n        e1.printStackTrace();\n      }\n      rs.onNext(1);\n    }\n  }\n);\n  final AtomicReference<Object> o=new AtomicReference<Object>();\n  rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n    @Override public void onComplete(){\n      o.set(-1);\n      finish.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      o.set(e);\n      finish.countDown();\n    }\n    @Override public void onNext(    Object t){\n      o.set(t);\n      finish.countDown();\n    }\n  }\n);\n  start.countDown();\n  if (!finish.await(5,TimeUnit.SECONDS)) {\n    System.out.println(o.get());\n    System.out.println(rs.hasSubscribers());\n    rs.onComplete();\n    Assert.fail(\"Timeout @ \" + i);\n    break;\n  }\n else {\n    Assert.assertEquals(1,o.get());\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        rs.onComplete();\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 257,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2372,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 467,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < 50000; i++) {\n    if (i % 1000 == 0) {\n      System.out.println(i);\n    }\n    final BehaviorSubject<Object> rs=BehaviorSubject.create();\n    final CountDownLatch finish=new CountDownLatch(1);\n    final CountDownLatch start=new CountDownLatch(1);\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        try {\n          start.await();\n        }\n catch (        Exception e1) {\n          e1.printStackTrace();\n        }\n        rs.onNext(1);\n      }\n    }\n);\n    final AtomicReference<Object> o=new AtomicReference<Object>();\n    rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n      @Override public void onComplete(){\n        o.set(-1);\n        finish.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        o.set(e);\n        finish.countDown();\n      }\n      @Override public void onNext(      Object t){\n        o.set(t);\n        finish.countDown();\n      }\n    }\n);\n    start.countDown();\n    if (!finish.await(5,TimeUnit.SECONDS)) {\n      System.out.println(o.get());\n      System.out.println(rs.hasSubscribers());\n      rs.onComplete();\n      Assert.fail(\"Timeout @ \" + i);\n      break;\n    }\n else {\n      Assert.assertEquals(1,o.get());\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          rs.onComplete();\n        }\n      }\n);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 403,
        "startColumnNumber" : 8,
        "endLineNumber" : 469,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < 50000; i++) {\n    if (i % 1000 == 0) {\n      System.out.println(i);\n    }\n    final BehaviorSubject<Object> rs=BehaviorSubject.create();\n    final CountDownLatch finish=new CountDownLatch(1);\n    final CountDownLatch start=new CountDownLatch(1);\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        try {\n          start.await();\n        }\n catch (        Exception e1) {\n          e1.printStackTrace();\n        }\n        rs.onNext(1);\n      }\n    }\n);\n    final AtomicReference<Object> o=new AtomicReference<Object>();\n    rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n      @Override public void onComplete(){\n        o.set(-1);\n        finish.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        o.set(e);\n        finish.countDown();\n      }\n      @Override public void onNext(      Object t){\n        o.set(t);\n        finish.countDown();\n      }\n    }\n);\n    start.countDown();\n    if (!finish.await(5,TimeUnit.SECONDS)) {\n      System.out.println(o.get());\n      System.out.println(rs.hasSubscribers());\n      rs.onComplete();\n      Assert.fail(\"Timeout @ \" + i);\n      break;\n    }\n else {\n      Assert.assertEquals(1,o.get());\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          rs.onComplete();\n        }\n      }\n);\n    }\n  }\n}\n  finally {\n  worker.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 264,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 400,
        "startColumnNumber" : 64,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 399,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEmissionSubscriptionRace() throws Exception {\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 459,
        "startColumnNumber" : 20,
        "endLineNumber" : 464,
        "endColumnNumber" : 22
      },
      "nodeContext" : "worker.schedule(new Runnable(){\n  @Override public void run(){\n    rs.onComplete();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.Scheduler.Worker"
  }, {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 468,
      "startColumnNumber" : 12,
      "endLineNumber" : 468,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 468,
        "startColumnNumber" : 12,
        "endLineNumber" : 468,
        "endColumnNumber" : 28
      },
      "nodeContext" : "worker.dispose()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 468,
        "startColumnNumber" : 12,
        "endLineNumber" : 468,
        "endColumnNumber" : 29
      },
      "nodeContext" : "worker.dispose();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 467,
        "startColumnNumber" : 18,
        "endLineNumber" : 469,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  worker.dispose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 403,
        "startColumnNumber" : 8,
        "endLineNumber" : 469,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < 50000; i++) {\n    if (i % 1000 == 0) {\n      System.out.println(i);\n    }\n    final BehaviorSubject<Object> rs=BehaviorSubject.create();\n    final CountDownLatch finish=new CountDownLatch(1);\n    final CountDownLatch start=new CountDownLatch(1);\n    worker.schedule(new Runnable(){\n      @Override public void run(){\n        try {\n          start.await();\n        }\n catch (        Exception e1) {\n          e1.printStackTrace();\n        }\n        rs.onNext(1);\n      }\n    }\n);\n    final AtomicReference<Object> o=new AtomicReference<Object>();\n    rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n      @Override public void onComplete(){\n        o.set(-1);\n        finish.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        o.set(e);\n        finish.countDown();\n      }\n      @Override public void onNext(      Object t){\n        o.set(t);\n        finish.countDown();\n      }\n    }\n);\n    start.countDown();\n    if (!finish.await(5,TimeUnit.SECONDS)) {\n      System.out.println(o.get());\n      System.out.println(rs.hasSubscribers());\n      rs.onComplete();\n      Assert.fail(\"Timeout @ \" + i);\n      break;\n    }\n else {\n      Assert.assertEquals(1,o.get());\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          rs.onComplete();\n        }\n      }\n);\n    }\n  }\n}\n  finally {\n  worker.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 264,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 400,
        "startColumnNumber" : 64,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 399,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEmissionSubscriptionRace() throws Exception {\n  Scheduler s=Schedulers.io();\n  Scheduler.Worker worker=Schedulers.io().createWorker();\n  try {\n    for (int i=0; i < 50000; i++) {\n      if (i % 1000 == 0) {\n        System.out.println(i);\n      }\n      final BehaviorSubject<Object> rs=BehaviorSubject.create();\n      final CountDownLatch finish=new CountDownLatch(1);\n      final CountDownLatch start=new CountDownLatch(1);\n      worker.schedule(new Runnable(){\n        @Override public void run(){\n          try {\n            start.await();\n          }\n catch (          Exception e1) {\n            e1.printStackTrace();\n          }\n          rs.onNext(1);\n        }\n      }\n);\n      final AtomicReference<Object> o=new AtomicReference<Object>();\n      rs.subscribeOn(s).observeOn(Schedulers.io()).subscribe(new DefaultObserver<Object>(){\n        @Override public void onComplete(){\n          o.set(-1);\n          finish.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          o.set(e);\n          finish.countDown();\n        }\n        @Override public void onNext(        Object t){\n          o.set(t);\n          finish.countDown();\n        }\n      }\n);\n      start.countDown();\n      if (!finish.await(5,TimeUnit.SECONDS)) {\n        System.out.println(o.get());\n        System.out.println(rs.hasSubscribers());\n        rs.onComplete();\n        Assert.fail(\"Timeout @ \" + i);\n        break;\n      }\n else {\n        Assert.assertEquals(1,o.get());\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            rs.onComplete();\n          }\n        }\n);\n      }\n    }\n  }\n  finally {\n    worker.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 468,
        "startColumnNumber" : 12,
        "endLineNumber" : 468,
        "endColumnNumber" : 29
      },
      "nodeContext" : "worker.dispose();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.Scheduler.Worker"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 413,
    "startColumnNumber" : 16,
    "endLineNumber" : 413,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 459,
    "startColumnNumber" : 20,
    "endLineNumber" : 459,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 468,
    "startColumnNumber" : 12,
    "endLineNumber" : 468,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}