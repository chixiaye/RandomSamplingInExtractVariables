{
  "id" : 201,
  "expression" : "spans",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeSpanConsumer.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 62,
      "startColumnNumber" : 8,
      "endLineNumber" : 62,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 23
      },
      "nodeContext" : "spans.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 71
      },
      "nodeContext" : "if (spans.isEmpty()) return Futures.immediateFuture(ResultCode.OK);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 44,
        "startColumnNumber" : 67,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public ListenableFuture<ResultCode> log(List<LogEntry> messages){\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 71
      },
      "nodeContext" : "if (spans.isEmpty()) return Futures.immediateFuture(ResultCode.OK);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<zipkin.Span>"
  }, {
    "nodeContext" : "spans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 63,
      "startColumnNumber" : 21,
      "endLineNumber" : 63,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 63,
        "startColumnNumber" : 21,
        "endLineNumber" : 63,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spans.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 34
      },
      "nodeContext" : "logger.readSpans(spans.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 35
      },
      "nodeContext" : "logger.readSpans(spans.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 44,
        "startColumnNumber" : 67,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public ListenableFuture<ResultCode> log(List<LogEntry> messages){\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 35
      },
      "nodeContext" : "logger.readSpans(spans.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<zipkin.Span>"
  }, {
    "nodeContext" : "spans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 65,
      "startColumnNumber" : 63,
      "endLineNumber" : 65,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 65,
        "startColumnNumber" : 32,
        "endLineNumber" : 65,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new ErrorLoggingFuture(logger,spans)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 65,
        "startColumnNumber" : 23,
        "endLineNumber" : 65,
        "endColumnNumber" : 69
      },
      "nodeContext" : "result=new ErrorLoggingFuture(logger,spans)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 44,
        "startColumnNumber" : 67,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public ListenableFuture<ResultCode> log(List<LogEntry> messages){\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<zipkin.Span>"
  }, {
    "nodeContext" : "spans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 67,
      "startColumnNumber" : 28,
      "endLineNumber" : 67,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 42
      },
      "nodeContext" : "consumer.get().accept(spans,result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 43
      },
      "nodeContext" : "consumer.get().accept(spans,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  consumer.get().accept(spans,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  consumer.get().accept(spans,result);\n}\n catch (RuntimeException e) {\n  result.onError(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 44,
        "startColumnNumber" : 67,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public ListenableFuture<ResultCode> log(List<LogEntry> messages){\n  logger.acceptedMessage();\n  AtomicInteger serializedBytes=new AtomicInteger();\n  List<Span> spans;\n  try {\n    spans=messages.stream().filter(m -> m.category.equals(category)).map(m -> m.message.getBytes(StandardCharsets.ISO_8859_1)).map(b -> Base64.getMimeDecoder().decode(b)).peek(b -> serializedBytes.addAndGet(b.length)).map(Codec.THRIFT::readSpan).filter(s -> s != null).collect(Collectors.toList());\n  }\n catch (  RuntimeException e) {\n    logger.errorReading(e);\n    return Futures.immediateFailedFuture(e);\n  }\n  logger.readBytes(serializedBytes.get());\n  if (spans.isEmpty())   return Futures.immediateFuture(ResultCode.OK);\n  logger.readSpans(spans.size());\n  ErrorLoggingFuture result=new ErrorLoggingFuture(logger,spans);\n  try {\n    consumer.get().accept(spans,result);\n  }\n catch (  RuntimeException e) {\n    result.onError(e);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 43
      },
      "nodeContext" : "consumer.get().accept(spans,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<zipkin.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 62,
    "startColumnNumber" : 8,
    "endLineNumber" : 62,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 63,
    "startColumnNumber" : 21,
    "endLineNumber" : 63,
    "endColumnNumber" : 26
  }, {
    "charLength" : 5,
    "startLineNumber" : 65,
    "startColumnNumber" : 63,
    "endLineNumber" : 65,
    "endColumnNumber" : 68
  }, {
    "charLength" : 5,
    "startLineNumber" : 67,
    "startColumnNumber" : 28,
    "endLineNumber" : 67,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}