{
  "id" : 181,
  "expression" : "start < 0 || start >= n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "start < 0 || start >= n",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 104,
      "startColumnNumber" : 8,
      "endLineNumber" : 104,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 90
      },
      "nodeContext" : "if (start < 0 || start >= n) throw new IllegalArgumentException(\"Invalid node index\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (end < 0 || end >= n)   throw new IllegalArgumentException(\"Invalid node index\");\n  if (start < 0 || start >= n)   throw new IllegalArgumentException(\"Invalid node index\");\n  double dist=dijkstra(start,end);\n  List<Integer> path=new ArrayList<>();\n  if (dist == Double.POSITIVE_INFINITY)   return path;\n  for (Integer at=end; at != null; at=prev[at])   path.add(at);\n  Collections.reverse(path);\n  return path;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 96,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reconstructs the shortest path (of nodes) from 'start' to 'end' inclusive.\n * @return An array of nodes indexes of the shortest path from 'start' to 'end'. If 'start' and'end' are not connected then an empty array is returned.\n */\npublic List<Integer> reconstructPath(int start,int end){\n  if (end < 0 || end >= n)   throw new IllegalArgumentException(\"Invalid node index\");\n  if (start < 0 || start >= n)   throw new IllegalArgumentException(\"Invalid node index\");\n  double dist=dijkstra(start,end);\n  List<Integer> path=new ArrayList<>();\n  if (dist == Double.POSITIVE_INFINITY)   return path;\n  for (Integer at=end; at != null; at=prev[at])   path.add(at);\n  Collections.reverse(path);\n  return path;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 90
      },
      "nodeContext" : "if (start < 0 || start >= n) throw new IllegalArgumentException(\"Invalid node index\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 104,
    "startColumnNumber" : 8,
    "endLineNumber" : 104,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}