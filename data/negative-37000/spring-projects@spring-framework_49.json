{
  "id" : 49,
  "expression" : "bf.getBean(\"!test\")",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/test/java/org/springframework/aop/framework/autoproxy/AdvisorAutoProxyCreatorTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bf.getBean(\"!test\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 189,
      "startColumnNumber" : 21,
      "endLineNumber" : 189,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 189,
        "startColumnNumber" : 9,
        "endLineNumber" : 189,
        "endColumnNumber" : 40
      },
      "nodeContext" : "(ITestBean)bf.getBean(\"!test\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 40
      },
      "nodeContext" : "test=(ITestBean)bf.getBean(\"!test\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 41
      },
      "nodeContext" : "test=(ITestBean)bf.getBean(\"!test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 161,
        "startColumnNumber" : 61,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(QUICK_TARGETSOURCE_CONTEXT,CLASS);\n  ITestBean test=(ITestBean)bf.getBean(\"test\");\n  assertFalse(AopUtils.isAopProxy(test));\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\":test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  Advised advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof CommonsPool2TargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"%test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof ThreadLocalTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"!test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof PrototypeTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n  assertFalse(\"Prototypes cannot be the same object\",test == test2);\n  assertEquals(\"Rod\",test2.getName());\n  assertEquals(\"Kerry\",test2.getSpouse().getName());\n  bf.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1729,
        "startLineNumber" : 160,
        "startColumnNumber" : 1,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testQuickTargetSourceCreator() throws Exception {\n  ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(QUICK_TARGETSOURCE_CONTEXT,CLASS);\n  ITestBean test=(ITestBean)bf.getBean(\"test\");\n  assertFalse(AopUtils.isAopProxy(test));\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\":test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  Advised advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof CommonsPool2TargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"%test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof ThreadLocalTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"!test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof PrototypeTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n  assertFalse(\"Prototypes cannot be the same object\",test == test2);\n  assertEquals(\"Rod\",test2.getName());\n  assertEquals(\"Kerry\",test2.getSpouse().getName());\n  bf.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 41
      },
      "nodeContext" : "test=(ITestBean)bf.getBean(\"!test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "bf.getBean(\"!test\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 198,
      "startColumnNumber" : 32,
      "endLineNumber" : 198,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 198,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(ITestBean)bf.getBean(\"!test\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 198,
        "endColumnNumber" : 51
      },
      "nodeContext" : "test2=(ITestBean)bf.getBean(\"!test\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 198,
        "startColumnNumber" : 2,
        "endLineNumber" : 198,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 161,
        "startColumnNumber" : 61,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(QUICK_TARGETSOURCE_CONTEXT,CLASS);\n  ITestBean test=(ITestBean)bf.getBean(\"test\");\n  assertFalse(AopUtils.isAopProxy(test));\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\":test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  Advised advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof CommonsPool2TargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"%test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof ThreadLocalTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"!test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof PrototypeTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n  assertFalse(\"Prototypes cannot be the same object\",test == test2);\n  assertEquals(\"Rod\",test2.getName());\n  assertEquals(\"Kerry\",test2.getSpouse().getName());\n  bf.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1729,
        "startLineNumber" : 160,
        "startColumnNumber" : 1,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testQuickTargetSourceCreator() throws Exception {\n  ClassPathXmlApplicationContext bf=new ClassPathXmlApplicationContext(QUICK_TARGETSOURCE_CONTEXT,CLASS);\n  ITestBean test=(ITestBean)bf.getBean(\"test\");\n  assertFalse(AopUtils.isAopProxy(test));\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\":test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  Advised advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof CommonsPool2TargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"%test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof ThreadLocalTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  test=(ITestBean)bf.getBean(\"!test\");\n  assertTrue(AopUtils.isAopProxy(test));\n  advised=(Advised)test;\n  assertTrue(advised.getTargetSource() instanceof PrototypeTargetSource);\n  assertEquals(\"Rod\",test.getName());\n  assertEquals(\"Kerry\",test.getSpouse().getName());\n  ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n  assertFalse(\"Prototypes cannot be the same object\",test == test2);\n  assertEquals(\"Rod\",test2.getName());\n  assertEquals(\"Kerry\",test2.getSpouse().getName());\n  bf.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 198,
        "startColumnNumber" : 2,
        "endLineNumber" : 198,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ITestBean test2=(ITestBean)bf.getBean(\"!test\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 189,
    "startColumnNumber" : 21,
    "endLineNumber" : 189,
    "endColumnNumber" : 40
  }, {
    "charLength" : 19,
    "startLineNumber" : 198,
    "startColumnNumber" : 32,
    "endLineNumber" : 198,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}