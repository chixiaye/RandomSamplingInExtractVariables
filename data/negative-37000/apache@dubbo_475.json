{
  "id" : 475,
  "expression" : "ProtocolUtils",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ProtocolUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 89,
      "startColumnNumber" : 27,
      "endLineNumber" : 89,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 89,
        "startColumnNumber" : 27,
        "endLineNumber" : 89,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ProtocolUtils.isDefaultGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n  args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n}\n else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 348,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5950,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6086,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n catch (NoSuchMethodException|ClassNotFoundException e) {\n  throw new RpcException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6302,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6568,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 581,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6620,
        "startLineNumber" : 64,
        "startColumnNumber" : 81,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 587,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 89,
        "startColumnNumber" : 27,
        "endLineNumber" : 89,
        "endColumnNumber" : 79
      },
      "nodeContext" : "ProtocolUtils.isDefaultGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.rpc.support.ProtocolUtils"
  }, {
    "nodeContext" : "ProtocolUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 90,
      "startColumnNumber" : 27,
      "endLineNumber" : 90,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 90,
        "startColumnNumber" : 27,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ProtocolUtils.isGenericReturnRawResult(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n  args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n}\n else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 348,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5950,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6086,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n catch (NoSuchMethodException|ClassNotFoundException e) {\n  throw new RpcException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6302,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6568,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 581,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6620,
        "startLineNumber" : 64,
        "startColumnNumber" : 81,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 587,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 90,
        "startColumnNumber" : 27,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ProtocolUtils.isGenericReturnRawResult(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.rpc.support.ProtocolUtils"
  }, {
    "nodeContext" : "ProtocolUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 92,
      "startColumnNumber" : 27,
      "endLineNumber" : 92,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 92,
        "startColumnNumber" : 27,
        "endLineNumber" : 92,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ProtocolUtils.isJavaGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4541,
        "startLineNumber" : 92,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 322,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n  args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n}\n else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 348,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5950,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6086,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n catch (NoSuchMethodException|ClassNotFoundException e) {\n  throw new RpcException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6302,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6568,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 581,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6620,
        "startLineNumber" : 64,
        "startColumnNumber" : 81,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 587,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 92,
        "startColumnNumber" : 27,
        "endLineNumber" : 92,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ProtocolUtils.isJavaGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.rpc.support.ProtocolUtils"
  }, {
    "nodeContext" : "ProtocolUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 124,
      "startColumnNumber" : 27,
      "endLineNumber" : 124,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 124,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ProtocolUtils.isBeanGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 124,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 166,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4541,
        "startLineNumber" : 92,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 322,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n  args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n}\n else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 348,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5950,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6086,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n catch (NoSuchMethodException|ClassNotFoundException e) {\n  throw new RpcException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6302,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6568,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 581,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6620,
        "startLineNumber" : 64,
        "startColumnNumber" : 81,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 587,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 124,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ProtocolUtils.isBeanGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.rpc.support.ProtocolUtils"
  }, {
    "nodeContext" : "ProtocolUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 138,
      "startColumnNumber" : 27,
      "endLineNumber" : 138,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 138,
        "startColumnNumber" : 27,
        "endLineNumber" : 138,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ProtocolUtils.isProtobufGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 138,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 124,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 166,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4541,
        "startLineNumber" : 92,
        "startColumnNumber" : 23,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 322,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n  args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n}\n else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n  Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n  if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n    String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n    logger.error(notice);\n    throw new RpcException(new IllegalStateException(notice));\n  }\n  for (int i=0; i < args.length; i++) {\n    if (byte[].class == args[i].getClass()) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n        args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n    }\n  }\n}\n else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n  for (int i=0; i < args.length; i++) {\n    if (args[i] instanceof JavaBeanDescriptor) {\n      args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n    }\n  }\n}\n else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n  if (args.length == 1 && args[0] instanceof String) {\n    try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n      args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n    }\n catch (    Exception e) {\n      throw new RpcException(\"Deserialize argument failed.\",e);\n    }\n  }\n else {\n    throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 348,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5950,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6086,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n  Class<?>[] params=method.getParameterTypes();\n  if (args == null) {\n    args=new Object[params.length];\n  }\n  if (args.length != types.length) {\n    throw new RpcException(\"args.length != types.length\");\n  }\n  String generic=inv.getAttachment(GENERIC_KEY);\n  if (StringUtils.isBlank(generic)) {\n    generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n  }\n  if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n    args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n  }\n else   if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n    Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n    if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n      String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n      logger.error(notice);\n      throw new RpcException(new IllegalStateException(notice));\n    }\n    for (int i=0; i < args.length; i++) {\n      if (byte[].class == args[i].getClass()) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n          args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n      }\n    }\n  }\n else   if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof JavaBeanDescriptor) {\n        args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n      }\n    }\n  }\n else   if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n    if (args.length == 1 && args[0] instanceof String) {\n      try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n        args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n      }\n catch (      Exception e) {\n        throw new RpcException(\"Deserialize argument failed.\",e);\n      }\n    }\n else {\n      throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n    }\n  }\n  RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n  rpcInvocation.setInvoker(inv.getInvoker());\n  rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n  return invoker.invoke(rpcInvocation);\n}\n catch (NoSuchMethodException|ClassNotFoundException e) {\n  throw new RpcException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6302,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6568,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n  String name=((String)inv.getArguments()[0]).trim();\n  String[] types=(String[])inv.getArguments()[1];\n  Object[] args=(Object[])inv.getArguments()[2];\n  try {\n    Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n    Class<?>[] params=method.getParameterTypes();\n    if (args == null) {\n      args=new Object[params.length];\n    }\n    if (args.length != types.length) {\n      throw new RpcException(\"args.length != types.length\");\n    }\n    String generic=inv.getAttachment(GENERIC_KEY);\n    if (StringUtils.isBlank(generic)) {\n      generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n    }\n    if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n      args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n    }\n else     if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n      Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n      if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n        String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n        logger.error(notice);\n        throw new RpcException(new IllegalStateException(notice));\n      }\n      for (int i=0; i < args.length; i++) {\n        if (byte[].class == args[i].getClass()) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n            args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n        }\n      }\n    }\n else     if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n      for (int i=0; i < args.length; i++) {\n        if (args[i] instanceof JavaBeanDescriptor) {\n          args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n        }\n      }\n    }\n else     if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n      if (args.length == 1 && args[0] instanceof String) {\n        try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n          args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n        }\n catch (        Exception e) {\n          throw new RpcException(\"Deserialize argument failed.\",e);\n        }\n      }\n else {\n        throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n      }\n    }\n    RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n    rpcInvocation.setInvoker(inv.getInvoker());\n    rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n    return invoker.invoke(rpcInvocation);\n  }\n catch (  NoSuchMethodException|ClassNotFoundException e) {\n    throw new RpcException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 581,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6620,
        "startLineNumber" : 64,
        "startColumnNumber" : 81,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 587,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation inv) throws RpcException {\n  if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n    String name=((String)inv.getArguments()[0]).trim();\n    String[] types=(String[])inv.getArguments()[1];\n    Object[] args=(Object[])inv.getArguments()[2];\n    try {\n      Method method=ReflectUtils.findMethodByMethodSignature(invoker.getInterface(),name,types);\n      Class<?>[] params=method.getParameterTypes();\n      if (args == null) {\n        args=new Object[params.length];\n      }\n      if (args.length != types.length) {\n        throw new RpcException(\"args.length != types.length\");\n      }\n      String generic=inv.getAttachment(GENERIC_KEY);\n      if (StringUtils.isBlank(generic)) {\n        generic=RpcContext.getClientAttachment().getAttachment(GENERIC_KEY);\n      }\n      if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) {\n        args=PojoUtils.realize(args,params,method.getGenericParameterTypes());\n      }\n else       if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n        Configuration configuration=ApplicationModel.getEnvironment().getConfiguration();\n        if (!configuration.getBoolean(CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE,false)) {\n          String notice=\"Trigger the safety barrier! \" + \"Native Java Serializer is not allowed by default.\" + \"This means currently maybe being attacking by others. \"+ \"If you are sure this is a mistake, \"+ \"please set `\" + CommonConstants.ENABLE_NATIVE_JAVA_GENERIC_SERIALIZE + \"` enable in configuration! \"+ \"Before doing so, please make sure you have configure JEP290 to prevent serialization attack.\";\n          logger.error(notice);\n          throw new RpcException(new IllegalStateException(notice));\n        }\n        for (int i=0; i < args.length; i++) {\n          if (byte[].class == args[i].getClass()) {\n            try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream((byte[])args[i])){\n              args[i]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA).deserialize(null,is).readObject();\n            }\n catch (            Exception e) {\n              throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\",e);\n            }\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_NATIVE_JAVA + \"] only support message type \"+ byte[].class+ \" and your message type is \"+ args[i].getClass());\n          }\n        }\n      }\n else       if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n        for (int i=0; i < args.length; i++) {\n          if (args[i] instanceof JavaBeanDescriptor) {\n            args[i]=JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor)args[i]);\n          }\n else {\n            throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_BEAN + \"] only support message type \"+ JavaBeanDescriptor.class.getName()+ \" and your message type is \"+ args[i].getClass().getName());\n          }\n        }\n      }\n else       if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n        if (args.length == 1 && args[0] instanceof String) {\n          try (UnsafeByteArrayInputStream is=new UnsafeByteArrayInputStream(((String)args[0]).getBytes())){\n            args[0]=ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(GENERIC_SERIALIZATION_PROTOBUF).deserialize(null,is).readObject(method.getParameterTypes()[0]);\n          }\n catch (          Exception e) {\n            throw new RpcException(\"Deserialize argument failed.\",e);\n          }\n        }\n else {\n          throw new RpcException(\"Generic serialization [\" + GENERIC_SERIALIZATION_PROTOBUF + \"] only support one \"+ String.class.getName()+ \" argument and your message size is \"+ args.length+ \" and type is\"+ args[0].getClass().getName());\n        }\n      }\n      RpcInvocation rpcInvocation=new RpcInvocation(method,invoker.getInterface().getName(),invoker.getUrl().getProtocolServiceKey(),args,inv.getObjectAttachments(),inv.getAttributes());\n      rpcInvocation.setInvoker(inv.getInvoker());\n      rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n      return invoker.invoke(rpcInvocation);\n    }\n catch (    NoSuchMethodException|ClassNotFoundException e) {\n      throw new RpcException(e.getMessage(),e);\n    }\n  }\n  return invoker.invoke(inv);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 138,
        "startColumnNumber" : 27,
        "endLineNumber" : 138,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ProtocolUtils.isProtobufGenericSerialization(generic)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.rpc.support.ProtocolUtils"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 89,
    "startColumnNumber" : 27,
    "endLineNumber" : 89,
    "endColumnNumber" : 40
  }, {
    "charLength" : 13,
    "startLineNumber" : 90,
    "startColumnNumber" : 27,
    "endLineNumber" : 90,
    "endColumnNumber" : 40
  }, {
    "charLength" : 13,
    "startLineNumber" : 92,
    "startColumnNumber" : 27,
    "endLineNumber" : 92,
    "endColumnNumber" : 40
  }, {
    "charLength" : 13,
    "startLineNumber" : 124,
    "startColumnNumber" : 27,
    "endLineNumber" : 124,
    "endColumnNumber" : 40
  }, {
    "charLength" : 13,
    "startLineNumber" : 138,
    "startColumnNumber" : 27,
    "endLineNumber" : 138,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}