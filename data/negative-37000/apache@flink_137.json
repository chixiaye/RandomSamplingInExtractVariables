{
  "id" : 137,
  "expression" : "i + 1",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 132,
      "startColumnNumber" : 63,
      "endLineNumber" : 132,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 69
      },
      "nodeContext" : "streamGraph.addEdge(inputId,transformationId,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 70
      },
      "nodeContext" : "streamGraph.addEdge(inputId,transformationId,i + 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 131,
        "startColumnNumber" : 45,
        "endLineNumber" : 133,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  streamGraph.addEdge(inputId,transformationId,i + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Integer inputId : inputIds) {\n  streamGraph.addEdge(inputId,transformationId,i + 1);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 128,
        "startColumnNumber" : 62,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Transformation<?> inputTransformation=inputTransformations.get(i);\n  final Collection<Integer> inputIds=context.getStreamNodeIds(inputTransformation);\n  for (  Integer inputId : inputIds) {\n    streamGraph.addEdge(inputId,transformationId,i + 1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < inputTransformations.size(); i++) {\n  final Transformation<?> inputTransformation=inputTransformations.get(i);\n  final Collection<Integer> inputIds=context.getStreamNodeIds(inputTransformation);\n  for (  Integer inputId : inputIds) {\n    streamGraph.addEdge(inputId,transformationId,i + 1);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2421,
        "startLineNumber" : 88,
        "startColumnNumber" : 98,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkNotNull(transformation);\n  checkNotNull(context);\n  final List<Transformation<?>> inputTransformations=transformation.getInputs();\n  checkArgument(!inputTransformations.isEmpty(),\"Empty inputs for MultipleInputTransformation. Did you forget to add inputs?\");\n  MultipleInputSelectionHandler.checkSupportedInputCount(inputTransformations.size());\n  final StreamGraph streamGraph=context.getStreamGraph();\n  final String slotSharingGroup=context.getSlotSharingGroup();\n  final int transformationId=transformation.getId();\n  final ExecutionConfig executionConfig=streamGraph.getExecutionConfig();\n  streamGraph.addMultipleInputOperator(transformationId,slotSharingGroup,transformation.getCoLocationGroupKey(),transformation.getOperatorFactory(),transformation.getInputTypes(),transformation.getOutputType(),transformation.getName());\n  final int parallelism=transformation.getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT ? transformation.getParallelism() : executionConfig.getParallelism();\n  streamGraph.setParallelism(transformationId,parallelism);\n  streamGraph.setMaxParallelism(transformationId,transformation.getMaxParallelism());\n  if (transformation instanceof KeyedMultipleInputTransformation) {\n    KeyedMultipleInputTransformation<OUT> keyedTransform=(KeyedMultipleInputTransformation<OUT>)transformation;\n    TypeSerializer<?> keySerializer=keyedTransform.getStateKeyType().createSerializer(executionConfig);\n    streamGraph.setMultipleInputStateKey(transformationId,keyedTransform.getStateKeySelectors(),keySerializer);\n  }\n  for (int i=0; i < inputTransformations.size(); i++) {\n    final Transformation<?> inputTransformation=inputTransformations.get(i);\n    final Collection<Integer> inputIds=context.getStreamNodeIds(inputTransformation);\n    for (    Integer inputId : inputIds) {\n      streamGraph.addEdge(inputId,transformationId,i + 1);\n    }\n  }\n  return Collections.singleton(transformationId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2566,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Collection<Integer> translateInternal(final AbstractMultipleInputTransformation<OUT> transformation,final Context context){\n  checkNotNull(transformation);\n  checkNotNull(context);\n  final List<Transformation<?>> inputTransformations=transformation.getInputs();\n  checkArgument(!inputTransformations.isEmpty(),\"Empty inputs for MultipleInputTransformation. Did you forget to add inputs?\");\n  MultipleInputSelectionHandler.checkSupportedInputCount(inputTransformations.size());\n  final StreamGraph streamGraph=context.getStreamGraph();\n  final String slotSharingGroup=context.getSlotSharingGroup();\n  final int transformationId=transformation.getId();\n  final ExecutionConfig executionConfig=streamGraph.getExecutionConfig();\n  streamGraph.addMultipleInputOperator(transformationId,slotSharingGroup,transformation.getCoLocationGroupKey(),transformation.getOperatorFactory(),transformation.getInputTypes(),transformation.getOutputType(),transformation.getName());\n  final int parallelism=transformation.getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT ? transformation.getParallelism() : executionConfig.getParallelism();\n  streamGraph.setParallelism(transformationId,parallelism);\n  streamGraph.setMaxParallelism(transformationId,transformation.getMaxParallelism());\n  if (transformation instanceof KeyedMultipleInputTransformation) {\n    KeyedMultipleInputTransformation<OUT> keyedTransform=(KeyedMultipleInputTransformation<OUT>)transformation;\n    TypeSerializer<?> keySerializer=keyedTransform.getStateKeyType().createSerializer(executionConfig);\n    streamGraph.setMultipleInputStateKey(transformationId,keyedTransform.getStateKeySelectors(),keySerializer);\n  }\n  for (int i=0; i < inputTransformations.size(); i++) {\n    final Transformation<?> inputTransformation=inputTransformations.get(i);\n    final Collection<Integer> inputIds=context.getStreamNodeIds(inputTransformation);\n    for (    Integer inputId : inputIds) {\n      streamGraph.addEdge(inputId,transformationId,i + 1);\n    }\n  }\n  return Collections.singleton(transformationId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 70
      },
      "nodeContext" : "streamGraph.addEdge(inputId,transformationId,i + 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 132,
    "startColumnNumber" : 63,
    "endLineNumber" : 132,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}