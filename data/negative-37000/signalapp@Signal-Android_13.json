{
  "id" : 13,
  "expression" : "new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID)",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/conversation/ui/error/SafetyNumberChangeRepository.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 117,
      "startLineNumber" : 129,
      "startColumnNumber" : 48,
      "endLineNumber" : 129,
      "endColumnNumber" : 165
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 129,
        "startColumnNumber" : 30,
        "endLineNumber" : 129,
        "endColumnNumber" : 165
      },
      "nodeContext" : "mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 166
      },
      "nodeContext" : "SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 128,
        "startColumnNumber" : 66,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n  Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n  TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n  Log.d(TAG,\"Saving identity result: \" + result);\n  if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n    Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n    SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n    SessionUtil.archiveSiblingSessions(mismatchAddress);\n    DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1116,
        "startLineNumber" : 128,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (ChangedRecipient changedRecipient : changedRecipients) {\n  SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n  Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n  TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n  Log.d(TAG,\"Saving identity result: \" + result);\n  if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n    Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n    SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n    SessionUtil.archiveSiblingSessions(mismatchAddress);\n    DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1130,
        "startLineNumber" : 127,
        "startColumnNumber" : 81,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  ChangedRecipient changedRecipient : changedRecipients) {\n    SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n    Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n    TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n    Log.d(TAG,\"Saving identity result: \" + result);\n    if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n      Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n      SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n      SessionUtil.archiveSiblingSessions(mismatchAddress);\n      DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (SignalSessionLock.Lock unused=ReentrantSessionLock.INSTANCE.acquire()){\n  for (  ChangedRecipient changedRecipient : changedRecipients) {\n    SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n    Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n    TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n    Log.d(TAG,\"Saving identity result: \" + result);\n    if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n      Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n      SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n      SessionUtil.archiveSiblingSessions(mismatchAddress);\n      DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1556,
        "startLineNumber" : 122,
        "startColumnNumber" : 117,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (changedRecipients.isEmpty()) {\n    Log.d(TAG,\"No changed recipients to process, will still process message record\");\n  }\n  try (SignalSessionLock.Lock unused=ReentrantSessionLock.INSTANCE.acquire()){\n    for (    ChangedRecipient changedRecipient : changedRecipients) {\n      SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n      Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n      TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n      Log.d(TAG,\"Saving identity result: \" + result);\n      if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n        Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n        SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n        SessionUtil.archiveSiblingSessions(mismatchAddress);\n        DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n      }\n    }\n  }\n   if (messageRecord.isOutgoing()) {\n    processOutgoingMessageRecord(changedRecipients,messageRecord);\n  }\n  return TrustAndVerifyResult.trustVerifyAndResend(changedRecipients,messageRecord);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private TrustAndVerifyResult trustOrVerifyChangedRecipientsAndResendInternal(@NonNull List<ChangedRecipient> changedRecipients,@NonNull MessageRecord messageRecord){\n  if (changedRecipients.isEmpty()) {\n    Log.d(TAG,\"No changed recipients to process, will still process message record\");\n  }\n  try (SignalSessionLock.Lock unused=ReentrantSessionLock.INSTANCE.acquire()){\n    for (    ChangedRecipient changedRecipient : changedRecipients) {\n      SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n      Log.d(TAG,\"Saving identity for: \" + changedRecipient.getRecipient().getId() + \" \"+ changedRecipient.getIdentityRecord().getIdentityKey().hashCode());\n      TextSecureIdentityKeyStore.SaveResult result=ApplicationDependencies.getIdentityStore().saveIdentity(mismatchAddress,changedRecipient.getIdentityRecord().getIdentityKey(),true);\n      Log.d(TAG,\"Saving identity result: \" + result);\n      if (result == TextSecureIdentityKeyStore.SaveResult.NO_CHANGE) {\n        Log.i(TAG,\"Archiving sessions explicitly as they appear to be out of sync.\");\n        SessionUtil.archiveSession(changedRecipient.getRecipient().getId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n        SessionUtil.archiveSiblingSessions(mismatchAddress);\n        DatabaseFactory.getSenderKeySharedDatabase(context).deleteAllFor(changedRecipient.getRecipient().getId());\n      }\n    }\n  }\n   if (messageRecord.isOutgoing()) {\n    processOutgoingMessageRecord(changedRecipients,messageRecord);\n  }\n  return TrustAndVerifyResult.trustVerifyAndResend(changedRecipients,messageRecord);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 166
      },
      "nodeContext" : "SignalProtocolAddress mismatchAddress=new SignalProtocolAddress(changedRecipient.getRecipient().requireServiceId(),SignalServiceAddress.DEFAULT_DEVICE_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "org.thoughtcrime.securesms.conversation.ui.error.SignalProtocolAddress"
  } ],
  "positionList" : [ {
    "charLength" : 117,
    "startLineNumber" : 129,
    "startColumnNumber" : 48,
    "endLineNumber" : 129,
    "endColumnNumber" : 165
  } ],
  "layoutRelationDataList" : [ ]
}