{
  "id" : 85,
  "expression" : "newEvents.size()",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newEvents.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 99,
      "startColumnNumber" : 12,
      "endLineNumber" : 99,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newEvents.size() > maxLogSizePerAggregate",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (newEvents.size() > maxLogSizePerAggregate) {\n  log.debug(\"Threshold for {} reached. Compacting events\",id);\n  compact(newEvents);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean doAppend(List<ClientApplicationEvent> events){\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newEvents.size() > maxLogSizePerAggregate",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 99,
    "startColumnNumber" : 12,
    "endLineNumber" : 99,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}