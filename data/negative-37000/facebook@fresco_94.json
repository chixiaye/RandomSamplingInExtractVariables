{
  "id" : 94,
  "expression" : "mOriginalStream.available()",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/fbcore/src/test/java/com/facebook/common/streams/LimitedInputStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mOriginalStream.available()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 67,
      "startColumnNumber" : 48,
      "endLineNumber" : 67,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(BYTES_LENGTH - LIMITED_LENGTH,mOriginalStream.available())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(BYTES_LENGTH - LIMITED_LENGTH,mOriginalStream.available());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 62,
        "startColumnNumber" : 68,
        "endLineNumber" : 68,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < BYTES_LENGTH; ++i) {\n    final int lastByte=mLimitedStream.read();\n    assertEquals(i >= LIMITED_LENGTH,lastByte == -1);\n  }\n  assertEquals(BYTES_LENGTH - LIMITED_LENGTH,mOriginalStream.available());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 68,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testDoesNotReadTooMuch_singleBytes() throws Exception {\n  for (int i=0; i < BYTES_LENGTH; ++i) {\n    final int lastByte=mLimitedStream.read();\n    assertEquals(i >= LIMITED_LENGTH,lastByte == -1);\n  }\n  assertEquals(BYTES_LENGTH - LIMITED_LENGTH,mOriginalStream.available());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 48,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(BYTES_LENGTH - LIMITED_LENGTH,mOriginalStream.available());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 67,
    "startColumnNumber" : 48,
    "endLineNumber" : 67,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}