{
  "id" : 239,
  "expression" : "atomDataSize / 4",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Sniffer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "atomDataSize / 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 186,
      "startColumnNumber" : 26,
      "endLineNumber" : 186,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 42
      },
      "nodeContext" : "brandsCount=atomDataSize / 4",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 43
      },
      "nodeContext" : "int brandsCount=atomDataSize / 4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 179,
        "startColumnNumber" : 38,
        "endLineNumber" : 200,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (atomDataSize < 8) {\n    return false;\n  }\n  buffer.reset(atomDataSize);\n  input.peekFully(buffer.getData(),0,atomDataSize);\n  int brandsCount=atomDataSize / 4;\n  for (int i=0; i < brandsCount; i++) {\n    if (i == 1) {\n      buffer.skipBytes(4);\n    }\n else     if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n      foundGoodFileType=true;\n      break;\n    }\n  }\n  if (!foundGoodFileType) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (atomType == Atom.TYPE_ftyp) {\n  if (atomDataSize < 8) {\n    return false;\n  }\n  buffer.reset(atomDataSize);\n  input.peekFully(buffer.getData(),0,atomDataSize);\n  int brandsCount=atomDataSize / 4;\n  for (int i=0; i < brandsCount; i++) {\n    if (i == 1) {\n      buffer.skipBytes(4);\n    }\n else     if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n      foundGoodFileType=true;\n      break;\n    }\n  }\n  if (!foundGoodFileType) {\n    return false;\n  }\n}\n else if (atomDataSize != 0) {\n  input.advancePeekPosition(atomDataSize);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3219,
        "startLineNumber" : 121,
        "startColumnNumber" : 42,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int headerSize=Atom.HEADER_SIZE;\n  buffer.reset(headerSize);\n  boolean success=input.peekFully(buffer.getData(),0,headerSize,true);\n  if (!success) {\n    break;\n  }\n  long atomSize=buffer.readUnsignedInt();\n  int atomType=buffer.readInt();\n  if (atomSize == Atom.DEFINES_LARGE_SIZE) {\n    headerSize=Atom.LONG_HEADER_SIZE;\n    input.peekFully(buffer.getData(),Atom.HEADER_SIZE,Atom.LONG_HEADER_SIZE - Atom.HEADER_SIZE);\n    buffer.setLimit(Atom.LONG_HEADER_SIZE);\n    atomSize=buffer.readLong();\n  }\n else   if (atomSize == Atom.EXTENDS_TO_END_SIZE) {\n    long fileEndPosition=input.getLength();\n    if (fileEndPosition != C.LENGTH_UNSET) {\n      atomSize=fileEndPosition - input.getPeekPosition() + headerSize;\n    }\n  }\n  if (atomSize < headerSize) {\n    return false;\n  }\n  bytesSearched+=headerSize;\n  if (atomType == Atom.TYPE_moov) {\n    bytesToSearch+=(int)atomSize;\n    if (inputLength != C.LENGTH_UNSET && bytesToSearch > inputLength) {\n      bytesToSearch=(int)inputLength;\n    }\n    continue;\n  }\n  if (atomType == Atom.TYPE_moof || atomType == Atom.TYPE_mvex) {\n    isFragmented=true;\n    break;\n  }\n  if (bytesSearched + atomSize - headerSize >= bytesToSearch) {\n    break;\n  }\n  int atomDataSize=(int)(atomSize - headerSize);\n  bytesSearched+=atomDataSize;\n  if (atomType == Atom.TYPE_ftyp) {\n    if (atomDataSize < 8) {\n      return false;\n    }\n    buffer.reset(atomDataSize);\n    input.peekFully(buffer.getData(),0,atomDataSize);\n    int brandsCount=atomDataSize / 4;\n    for (int i=0; i < brandsCount; i++) {\n      if (i == 1) {\n        buffer.skipBytes(4);\n      }\n else       if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n        foundGoodFileType=true;\n        break;\n      }\n    }\n    if (!foundGoodFileType) {\n      return false;\n    }\n  }\n else   if (atomDataSize != 0) {\n    input.advancePeekPosition(atomDataSize);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (bytesSearched < bytesToSearch) {\n  int headerSize=Atom.HEADER_SIZE;\n  buffer.reset(headerSize);\n  boolean success=input.peekFully(buffer.getData(),0,headerSize,true);\n  if (!success) {\n    break;\n  }\n  long atomSize=buffer.readUnsignedInt();\n  int atomType=buffer.readInt();\n  if (atomSize == Atom.DEFINES_LARGE_SIZE) {\n    headerSize=Atom.LONG_HEADER_SIZE;\n    input.peekFully(buffer.getData(),Atom.HEADER_SIZE,Atom.LONG_HEADER_SIZE - Atom.HEADER_SIZE);\n    buffer.setLimit(Atom.LONG_HEADER_SIZE);\n    atomSize=buffer.readLong();\n  }\n else   if (atomSize == Atom.EXTENDS_TO_END_SIZE) {\n    long fileEndPosition=input.getLength();\n    if (fileEndPosition != C.LENGTH_UNSET) {\n      atomSize=fileEndPosition - input.getPeekPosition() + headerSize;\n    }\n  }\n  if (atomSize < headerSize) {\n    return false;\n  }\n  bytesSearched+=headerSize;\n  if (atomType == Atom.TYPE_moov) {\n    bytesToSearch+=(int)atomSize;\n    if (inputLength != C.LENGTH_UNSET && bytesToSearch > inputLength) {\n      bytesToSearch=(int)inputLength;\n    }\n    continue;\n  }\n  if (atomType == Atom.TYPE_moof || atomType == Atom.TYPE_mvex) {\n    isFragmented=true;\n    break;\n  }\n  if (bytesSearched + atomSize - headerSize >= bytesToSearch) {\n    break;\n  }\n  int atomDataSize=(int)(atomSize - headerSize);\n  bytesSearched+=atomDataSize;\n  if (atomType == Atom.TYPE_ftyp) {\n    if (atomDataSize < 8) {\n      return false;\n    }\n    buffer.reset(atomDataSize);\n    input.peekFully(buffer.getData(),0,atomDataSize);\n    int brandsCount=atomDataSize / 4;\n    for (int i=0; i < brandsCount; i++) {\n      if (i == 1) {\n        buffer.skipBytes(4);\n      }\n else       if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n        foundGoodFileType=true;\n        break;\n      }\n    }\n    if (!foundGoodFileType) {\n      return false;\n    }\n  }\n else   if (atomDataSize != 0) {\n    input.advancePeekPosition(atomDataSize);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 293,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3704,
        "startLineNumber" : 109,
        "startColumnNumber" : 25,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long inputLength=input.getLength();\n  int bytesToSearch=(int)(inputLength == C.LENGTH_UNSET || inputLength > SEARCH_LENGTH ? SEARCH_LENGTH : inputLength);\n  ParsableByteArray buffer=new ParsableByteArray(64);\n  int bytesSearched=0;\n  boolean foundGoodFileType=false;\n  boolean isFragmented=false;\n  while (bytesSearched < bytesToSearch) {\n    int headerSize=Atom.HEADER_SIZE;\n    buffer.reset(headerSize);\n    boolean success=input.peekFully(buffer.getData(),0,headerSize,true);\n    if (!success) {\n      break;\n    }\n    long atomSize=buffer.readUnsignedInt();\n    int atomType=buffer.readInt();\n    if (atomSize == Atom.DEFINES_LARGE_SIZE) {\n      headerSize=Atom.LONG_HEADER_SIZE;\n      input.peekFully(buffer.getData(),Atom.HEADER_SIZE,Atom.LONG_HEADER_SIZE - Atom.HEADER_SIZE);\n      buffer.setLimit(Atom.LONG_HEADER_SIZE);\n      atomSize=buffer.readLong();\n    }\n else     if (atomSize == Atom.EXTENDS_TO_END_SIZE) {\n      long fileEndPosition=input.getLength();\n      if (fileEndPosition != C.LENGTH_UNSET) {\n        atomSize=fileEndPosition - input.getPeekPosition() + headerSize;\n      }\n    }\n    if (atomSize < headerSize) {\n      return false;\n    }\n    bytesSearched+=headerSize;\n    if (atomType == Atom.TYPE_moov) {\n      bytesToSearch+=(int)atomSize;\n      if (inputLength != C.LENGTH_UNSET && bytesToSearch > inputLength) {\n        bytesToSearch=(int)inputLength;\n      }\n      continue;\n    }\n    if (atomType == Atom.TYPE_moof || atomType == Atom.TYPE_mvex) {\n      isFragmented=true;\n      break;\n    }\n    if (bytesSearched + atomSize - headerSize >= bytesToSearch) {\n      break;\n    }\n    int atomDataSize=(int)(atomSize - headerSize);\n    bytesSearched+=atomDataSize;\n    if (atomType == Atom.TYPE_ftyp) {\n      if (atomDataSize < 8) {\n        return false;\n      }\n      buffer.reset(atomDataSize);\n      input.peekFully(buffer.getData(),0,atomDataSize);\n      int brandsCount=atomDataSize / 4;\n      for (int i=0; i < brandsCount; i++) {\n        if (i == 1) {\n          buffer.skipBytes(4);\n        }\n else         if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n          foundGoodFileType=true;\n          break;\n        }\n      }\n      if (!foundGoodFileType) {\n        return false;\n      }\n    }\n else     if (atomDataSize != 0) {\n      input.advancePeekPosition(atomDataSize);\n    }\n  }\n  return foundGoodFileType && fragmented == isFragmented;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static boolean sniffInternal(ExtractorInput input,boolean fragmented,boolean acceptHeic) throws IOException {\n  long inputLength=input.getLength();\n  int bytesToSearch=(int)(inputLength == C.LENGTH_UNSET || inputLength > SEARCH_LENGTH ? SEARCH_LENGTH : inputLength);\n  ParsableByteArray buffer=new ParsableByteArray(64);\n  int bytesSearched=0;\n  boolean foundGoodFileType=false;\n  boolean isFragmented=false;\n  while (bytesSearched < bytesToSearch) {\n    int headerSize=Atom.HEADER_SIZE;\n    buffer.reset(headerSize);\n    boolean success=input.peekFully(buffer.getData(),0,headerSize,true);\n    if (!success) {\n      break;\n    }\n    long atomSize=buffer.readUnsignedInt();\n    int atomType=buffer.readInt();\n    if (atomSize == Atom.DEFINES_LARGE_SIZE) {\n      headerSize=Atom.LONG_HEADER_SIZE;\n      input.peekFully(buffer.getData(),Atom.HEADER_SIZE,Atom.LONG_HEADER_SIZE - Atom.HEADER_SIZE);\n      buffer.setLimit(Atom.LONG_HEADER_SIZE);\n      atomSize=buffer.readLong();\n    }\n else     if (atomSize == Atom.EXTENDS_TO_END_SIZE) {\n      long fileEndPosition=input.getLength();\n      if (fileEndPosition != C.LENGTH_UNSET) {\n        atomSize=fileEndPosition - input.getPeekPosition() + headerSize;\n      }\n    }\n    if (atomSize < headerSize) {\n      return false;\n    }\n    bytesSearched+=headerSize;\n    if (atomType == Atom.TYPE_moov) {\n      bytesToSearch+=(int)atomSize;\n      if (inputLength != C.LENGTH_UNSET && bytesToSearch > inputLength) {\n        bytesToSearch=(int)inputLength;\n      }\n      continue;\n    }\n    if (atomType == Atom.TYPE_moof || atomType == Atom.TYPE_mvex) {\n      isFragmented=true;\n      break;\n    }\n    if (bytesSearched + atomSize - headerSize >= bytesToSearch) {\n      break;\n    }\n    int atomDataSize=(int)(atomSize - headerSize);\n    bytesSearched+=atomDataSize;\n    if (atomType == Atom.TYPE_ftyp) {\n      if (atomDataSize < 8) {\n        return false;\n      }\n      buffer.reset(atomDataSize);\n      input.peekFully(buffer.getData(),0,atomDataSize);\n      int brandsCount=atomDataSize / 4;\n      for (int i=0; i < brandsCount; i++) {\n        if (i == 1) {\n          buffer.skipBytes(4);\n        }\n else         if (isCompatibleBrand(buffer.readInt(),acceptHeic)) {\n          foundGoodFileType=true;\n          break;\n        }\n      }\n      if (!foundGoodFileType) {\n        return false;\n      }\n    }\n else     if (atomDataSize != 0) {\n      input.advancePeekPosition(atomDataSize);\n    }\n  }\n  return foundGoodFileType && fragmented == isFragmented;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 367,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 43
      },
      "nodeContext" : "int brandsCount=atomDataSize / 4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 186,
    "startColumnNumber" : 26,
    "endLineNumber" : 186,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}