{
  "id" : 147,
  "expression" : "new TextWebSocketFrame(msg)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/http/websocketx/client/WebSocketClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TextWebSocketFrame(msg)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 138,
      "startColumnNumber" : 43,
      "endLineNumber" : 138,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 138,
        "startColumnNumber" : 35,
        "endLineNumber" : 138,
        "endColumnNumber" : 70
      },
      "nodeContext" : "frame=new TextWebSocketFrame(msg)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 138,
        "startColumnNumber" : 20,
        "endLineNumber" : 138,
        "endColumnNumber" : 71
      },
      "nodeContext" : "WebSocketFrame frame=new TextWebSocketFrame(msg);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 137,
        "startColumnNumber" : 23,
        "endLineNumber" : 140,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  WebSocketFrame frame=new TextWebSocketFrame(msg);\n  ch.writeAndFlush(frame);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 134,
        "startColumnNumber" : 23,
        "endLineNumber" : 140,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (\"ping\".equalsIgnoreCase(msg)) {\n  WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n  ch.writeAndFlush(frame);\n}\n else {\n  WebSocketFrame frame=new TextWebSocketFrame(msg);\n  ch.writeAndFlush(frame);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 130,
        "startColumnNumber" : 23,
        "endLineNumber" : 140,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (\"bye\".equalsIgnoreCase(msg)) {\n  ch.writeAndFlush(new CloseWebSocketFrame());\n  ch.closeFuture().sync();\n  break;\n}\n else if (\"ping\".equalsIgnoreCase(msg)) {\n  WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n  ch.writeAndFlush(frame);\n}\n else {\n  WebSocketFrame frame=new TextWebSocketFrame(msg);\n  ch.writeAndFlush(frame);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (msg == null) {\n  break;\n}\n else if (\"bye\".equalsIgnoreCase(msg)) {\n  ch.writeAndFlush(new CloseWebSocketFrame());\n  ch.closeFuture().sync();\n  break;\n}\n else if (\"ping\".equalsIgnoreCase(msg)) {\n  WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n  ch.writeAndFlush(frame);\n}\n else {\n  WebSocketFrame frame=new TextWebSocketFrame(msg);\n  ch.writeAndFlush(frame);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 126,
        "startColumnNumber" : 25,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String msg=console.readLine();\n  if (msg == null) {\n    break;\n  }\n else   if (\"bye\".equalsIgnoreCase(msg)) {\n    ch.writeAndFlush(new CloseWebSocketFrame());\n    ch.closeFuture().sync();\n    break;\n  }\n else   if (\"ping\".equalsIgnoreCase(msg)) {\n    WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n    ch.writeAndFlush(frame);\n  }\n else {\n    WebSocketFrame frame=new TextWebSocketFrame(msg);\n    ch.writeAndFlush(frame);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  String msg=console.readLine();\n  if (msg == null) {\n    break;\n  }\n else   if (\"bye\".equalsIgnoreCase(msg)) {\n    ch.writeAndFlush(new CloseWebSocketFrame());\n    ch.closeFuture().sync();\n    break;\n  }\n else   if (\"ping\".equalsIgnoreCase(msg)) {\n    WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n    ch.writeAndFlush(frame);\n  }\n else {\n    WebSocketFrame frame=new TextWebSocketFrame(msg);\n    ch.writeAndFlush(frame);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 83,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final WebSocketClientHandler handler=new WebSocketClientHandler(WebSocketClientHandshakerFactory.newHandshaker(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders()));\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>(){\n    @Override protected void initChannel(    SocketChannel ch){\n      ChannelPipeline p=ch.pipeline();\n      if (sslCtx != null) {\n        p.addLast(sslCtx.newHandler(ch.alloc(),host,port));\n      }\n      p.addLast(new HttpClientCodec(),new HttpObjectAggregator(8192),WebSocketClientCompressionHandler.INSTANCE,handler);\n    }\n  }\n);\n  Channel ch=b.connect(uri.getHost(),port).get();\n  handler.handshakeFuture().sync();\n  BufferedReader console=new BufferedReader(new InputStreamReader(System.in));\n  while (true) {\n    String msg=console.readLine();\n    if (msg == null) {\n      break;\n    }\n else     if (\"bye\".equalsIgnoreCase(msg)) {\n      ch.writeAndFlush(new CloseWebSocketFrame());\n      ch.closeFuture().sync();\n      break;\n    }\n else     if (\"ping\".equalsIgnoreCase(msg)) {\n      WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n      ch.writeAndFlush(frame);\n    }\n else {\n      WebSocketFrame frame=new TextWebSocketFrame(msg);\n      ch.writeAndFlush(frame);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final WebSocketClientHandler handler=new WebSocketClientHandler(WebSocketClientHandshakerFactory.newHandshaker(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders()));\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>(){\n    @Override protected void initChannel(    SocketChannel ch){\n      ChannelPipeline p=ch.pipeline();\n      if (sslCtx != null) {\n        p.addLast(sslCtx.newHandler(ch.alloc(),host,port));\n      }\n      p.addLast(new HttpClientCodec(),new HttpObjectAggregator(8192),WebSocketClientCompressionHandler.INSTANCE,handler);\n    }\n  }\n);\n  Channel ch=b.connect(uri.getHost(),port).get();\n  handler.handshakeFuture().sync();\n  BufferedReader console=new BufferedReader(new InputStreamReader(System.in));\n  while (true) {\n    String msg=console.readLine();\n    if (msg == null) {\n      break;\n    }\n else     if (\"bye\".equalsIgnoreCase(msg)) {\n      ch.writeAndFlush(new CloseWebSocketFrame());\n      ch.closeFuture().sync();\n      break;\n    }\n else     if (\"ping\".equalsIgnoreCase(msg)) {\n      WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n      ch.writeAndFlush(frame);\n    }\n else {\n      WebSocketFrame frame=new TextWebSocketFrame(msg);\n      ch.writeAndFlush(frame);\n    }\n  }\n}\n  finally {\n  group.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 223,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3489,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URI uri=new URI(URL);\n  String scheme=uri.getScheme() == null ? \"ws\" : uri.getScheme();\n  final String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  final int port;\n  if (uri.getPort() == -1) {\n    if (\"ws\".equalsIgnoreCase(scheme)) {\n      port=80;\n    }\n else     if (\"wss\".equalsIgnoreCase(scheme)) {\n      port=443;\n    }\n else {\n      port=-1;\n    }\n  }\n else {\n    port=uri.getPort();\n  }\n  if (!\"ws\".equalsIgnoreCase(scheme) && !\"wss\".equalsIgnoreCase(scheme)) {\n    System.err.println(\"Only WS(S) is supported.\");\n    return;\n  }\n  final boolean ssl=\"wss\".equalsIgnoreCase(scheme);\n  final SslContext sslCtx;\n  if (ssl) {\n    sslCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n  }\n else {\n    sslCtx=null;\n  }\n  EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  try {\n    final WebSocketClientHandler handler=new WebSocketClientHandler(WebSocketClientHandshakerFactory.newHandshaker(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders()));\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>(){\n      @Override protected void initChannel(      SocketChannel ch){\n        ChannelPipeline p=ch.pipeline();\n        if (sslCtx != null) {\n          p.addLast(sslCtx.newHandler(ch.alloc(),host,port));\n        }\n        p.addLast(new HttpClientCodec(),new HttpObjectAggregator(8192),WebSocketClientCompressionHandler.INSTANCE,handler);\n      }\n    }\n);\n    Channel ch=b.connect(uri.getHost(),port).get();\n    handler.handshakeFuture().sync();\n    BufferedReader console=new BufferedReader(new InputStreamReader(System.in));\n    while (true) {\n      String msg=console.readLine();\n      if (msg == null) {\n        break;\n      }\n else       if (\"bye\".equalsIgnoreCase(msg)) {\n        ch.writeAndFlush(new CloseWebSocketFrame());\n        ch.closeFuture().sync();\n        break;\n      }\n else       if (\"ping\".equalsIgnoreCase(msg)) {\n        WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n        ch.writeAndFlush(frame);\n      }\n else {\n        WebSocketFrame frame=new TextWebSocketFrame(msg);\n        ch.writeAndFlush(frame);\n      }\n    }\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 378,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  URI uri=new URI(URL);\n  String scheme=uri.getScheme() == null ? \"ws\" : uri.getScheme();\n  final String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  final int port;\n  if (uri.getPort() == -1) {\n    if (\"ws\".equalsIgnoreCase(scheme)) {\n      port=80;\n    }\n else     if (\"wss\".equalsIgnoreCase(scheme)) {\n      port=443;\n    }\n else {\n      port=-1;\n    }\n  }\n else {\n    port=uri.getPort();\n  }\n  if (!\"ws\".equalsIgnoreCase(scheme) && !\"wss\".equalsIgnoreCase(scheme)) {\n    System.err.println(\"Only WS(S) is supported.\");\n    return;\n  }\n  final boolean ssl=\"wss\".equalsIgnoreCase(scheme);\n  final SslContext sslCtx;\n  if (ssl) {\n    sslCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n  }\n else {\n    sslCtx=null;\n  }\n  EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  try {\n    final WebSocketClientHandler handler=new WebSocketClientHandler(WebSocketClientHandshakerFactory.newHandshaker(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders()));\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>(){\n      @Override protected void initChannel(      SocketChannel ch){\n        ChannelPipeline p=ch.pipeline();\n        if (sslCtx != null) {\n          p.addLast(sslCtx.newHandler(ch.alloc(),host,port));\n        }\n        p.addLast(new HttpClientCodec(),new HttpObjectAggregator(8192),WebSocketClientCompressionHandler.INSTANCE,handler);\n      }\n    }\n);\n    Channel ch=b.connect(uri.getHost(),port).get();\n    handler.handshakeFuture().sync();\n    BufferedReader console=new BufferedReader(new InputStreamReader(System.in));\n    while (true) {\n      String msg=console.readLine();\n      if (msg == null) {\n        break;\n      }\n else       if (\"bye\".equalsIgnoreCase(msg)) {\n        ch.writeAndFlush(new CloseWebSocketFrame());\n        ch.closeFuture().sync();\n        break;\n      }\n else       if (\"ping\".equalsIgnoreCase(msg)) {\n        WebSocketFrame frame=new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8,1,8,1}));\n        ch.writeAndFlush(frame);\n      }\n else {\n        WebSocketFrame frame=new TextWebSocketFrame(msg);\n        ch.writeAndFlush(frame);\n      }\n    }\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 138,
        "startColumnNumber" : 20,
        "endLineNumber" : 138,
        "endColumnNumber" : 71
      },
      "nodeContext" : "WebSocketFrame frame=new TextWebSocketFrame(msg);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.netty.handler.codec.http.websocketx.TextWebSocketFrame"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 138,
    "startColumnNumber" : 43,
    "endLineNumber" : 138,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}