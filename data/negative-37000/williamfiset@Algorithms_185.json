{
  "id" : 185,
  "expression" : "graph[at]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/examples/DinicsExample.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "graph[at]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 200,
      "startColumnNumber" : 27,
      "endLineNumber" : 200,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 200,
        "startColumnNumber" : 27,
        "endLineNumber" : 200,
        "endColumnNumber" : 43
      },
      "nodeContext" : "graph[at].size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 200,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 43
      },
      "nodeContext" : "numEdges=graph[at].size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 44
      },
      "nodeContext" : "final int numEdges=graph[at].size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 198,
        "startColumnNumber" : 52,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (at == t)   return flow;\n  final int numEdges=graph[at].size();\n  for (; next[at] < numEdges; next[at]++) {\n    Edge edge=graph[at].get(next[at]);\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == level[at] + 1) {\n      long bottleNeck=dfs(edge.to,next,min(flow,cap));\n      if (bottleNeck > 0) {\n        edge.augment(bottleNeck);\n        return bottleNeck;\n      }\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private long dfs(int at,int[] next,long flow){\n  if (at == t)   return flow;\n  final int numEdges=graph[at].size();\n  for (; next[at] < numEdges; next[at]++) {\n    Edge edge=graph[at].get(next[at]);\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == level[at] + 1) {\n      long bottleNeck=dfs(edge.to,next,min(flow,cap));\n      if (bottleNeck > 0) {\n        edge.augment(bottleNeck);\n        return bottleNeck;\n      }\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 44
      },
      "nodeContext" : "final int numEdges=graph[at].size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.List<com.williamfiset.algorithms.graphtheory.networkflow.examples.DinicsExample.Edge>"
  }, {
    "nodeContext" : "graph[at]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 203,
      "startColumnNumber" : 20,
      "endLineNumber" : 203,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 203,
        "startColumnNumber" : 20,
        "endLineNumber" : 203,
        "endColumnNumber" : 43
      },
      "nodeContext" : "graph[at].get(next[at])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 203,
        "startColumnNumber" : 13,
        "endLineNumber" : 203,
        "endColumnNumber" : 43
      },
      "nodeContext" : "edge=graph[at].get(next[at])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 203,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Edge edge=graph[at].get(next[at]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 202,
        "startColumnNumber" : 46,
        "endLineNumber" : 213,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Edge edge=graph[at].get(next[at]);\n  long cap=edge.remainingCapacity();\n  if (cap > 0 && level[edge.to] == level[at] + 1) {\n    long bottleNeck=dfs(edge.to,next,min(flow,cap));\n    if (bottleNeck > 0) {\n      edge.augment(bottleNeck);\n      return bottleNeck;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 202,
        "startColumnNumber" : 6,
        "endLineNumber" : 213,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (; next[at] < numEdges; next[at]++) {\n  Edge edge=graph[at].get(next[at]);\n  long cap=edge.remainingCapacity();\n  if (cap > 0 && level[edge.to] == level[at] + 1) {\n    long bottleNeck=dfs(edge.to,next,min(flow,cap));\n    if (bottleNeck > 0) {\n      edge.augment(bottleNeck);\n      return bottleNeck;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 198,
        "startColumnNumber" : 52,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (at == t)   return flow;\n  final int numEdges=graph[at].size();\n  for (; next[at] < numEdges; next[at]++) {\n    Edge edge=graph[at].get(next[at]);\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == level[at] + 1) {\n      long bottleNeck=dfs(edge.to,next,min(flow,cap));\n      if (bottleNeck > 0) {\n        edge.augment(bottleNeck);\n        return bottleNeck;\n      }\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private long dfs(int at,int[] next,long flow){\n  if (at == t)   return flow;\n  final int numEdges=graph[at].size();\n  for (; next[at] < numEdges; next[at]++) {\n    Edge edge=graph[at].get(next[at]);\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == level[at] + 1) {\n      long bottleNeck=dfs(edge.to,next,min(flow,cap));\n      if (bottleNeck > 0) {\n        edge.augment(bottleNeck);\n        return bottleNeck;\n      }\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 203,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Edge edge=graph[at].get(next[at]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.List<com.williamfiset.algorithms.graphtheory.networkflow.examples.DinicsExample.Edge>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 200,
    "startColumnNumber" : 27,
    "endLineNumber" : 200,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 203,
    "startColumnNumber" : 20,
    "endLineNumber" : 203,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}