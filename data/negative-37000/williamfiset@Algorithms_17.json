{
  "id" : 17,
  "expression" : "0",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/dp/CoinChange.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 19,
      "startColumnNumber" : 24,
      "endLineNumber" : 19,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 25
      },
      "nodeContext" : "coins.length == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 83
      },
      "nodeContext" : "if (coins.length == 0) throw new IllegalArgumentException(\"No coin values :/\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 16,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int coinChange(int[] coins,int amount){\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 83
      },
      "nodeContext" : "if (coins.length == 0) throw new IllegalArgumentException(\"No coin values :/\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 24,
      "startColumnNumber" : 29,
      "endLineNumber" : 24,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 24,
        "startColumnNumber" : 26,
        "endLineNumber" : 24,
        "endColumnNumber" : 31
      },
      "nodeContext" : "DP[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 37
      },
      "nodeContext" : "java.util.Arrays.fill(DP[0],INF)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 38
      },
      "nodeContext" : "java.util.Arrays.fill(DP[0],INF);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 16,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int coinChange(int[] coins,int amount){\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 38
      },
      "nodeContext" : "java.util.Arrays.fill(DP[0],INF);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 25,
      "startColumnNumber" : 10,
      "endLineNumber" : 25,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 12
      },
      "nodeContext" : "DP[1][0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 16
      },
      "nodeContext" : "DP[1][0]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 17
      },
      "nodeContext" : "DP[1][0]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 16,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int coinChange(int[] coins,int amount){\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 17
      },
      "nodeContext" : "DP[1][0]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 25,
      "startColumnNumber" : 15,
      "endLineNumber" : 25,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 16
      },
      "nodeContext" : "DP[1][0]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 17
      },
      "nodeContext" : "DP[1][0]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 16,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int coinChange(int[] coins,int amount){\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 25,
        "endColumnNumber" : 17
      },
      "nodeContext" : "DP[1][0]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 29,
      "endLineNumber" : 37,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 30
      },
      "nodeContext" : "j - coinValue >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 69
      },
      "nodeContext" : "j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 46
      },
      "nodeContext" : "if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j]) DP[i][j]=DP[i][j - coinValue] + 1;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 31,
        "startColumnNumber" : 40,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  DP[i][j]=DP[i - 1][j];\n  if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])   DP[i][j]=DP[i][j - coinValue] + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 31,
        "startColumnNumber" : 6,
        "endLineNumber" : 39,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=1; j <= amount; j++) {\n  DP[i][j]=DP[i - 1][j];\n  if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])   DP[i][j]=DP[i][j - coinValue] + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 28,
        "startColumnNumber" : 33,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int coinValue=coins[i - 1];\n  for (int j=1; j <= amount; j++) {\n    DP[i][j]=DP[i - 1][j];\n    if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])     DP[i][j]=DP[i][j - coinValue] + 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int coinValue=coins[i - 1];\n  for (int j=1; j <= amount; j++) {\n    DP[i][j]=DP[i - 1][j];\n    if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])     DP[i][j]=DP[i][j - coinValue] + 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 16,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int coinChange(int[] coins,int amount){\n  if (coins == null)   throw new IllegalArgumentException(\"Coins array is null\");\n  if (coins.length == 0)   throw new IllegalArgumentException(\"No coin values :/\");\n  final int N=coins.length;\n  int[][] DP=new int[N + 1][amount + 1];\n  java.util.Arrays.fill(DP[0],INF);\n  DP[1][0]=0;\n  for (int i=1; i <= N; i++) {\n    int coinValue=coins[i - 1];\n    for (int j=1; j <= amount; j++) {\n      DP[i][j]=DP[i - 1][j];\n      if (j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j])       DP[i][j]=DP[i][j - coinValue] + 1;\n    }\n  }\n  if (DP[N][amount] == INF)   return -1;\n  return DP[N][amount];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 69
      },
      "nodeContext" : "j - coinValue >= 0 && DP[i][j - coinValue] + 1 < DP[i][j]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 19,
    "startColumnNumber" : 24,
    "endLineNumber" : 19,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 24,
    "startColumnNumber" : 29,
    "endLineNumber" : 24,
    "endColumnNumber" : 30
  }, {
    "charLength" : 1,
    "startLineNumber" : 25,
    "startColumnNumber" : 10,
    "endLineNumber" : 25,
    "endColumnNumber" : 11
  }, {
    "charLength" : 1,
    "startLineNumber" : 25,
    "startColumnNumber" : 15,
    "endLineNumber" : 25,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 29,
    "endLineNumber" : 37,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 7
  } ]
}