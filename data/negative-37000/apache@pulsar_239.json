{
  "id" : 239,
  "expression" : "commands",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/RuntimeUtilsTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 114,
      "startColumnNumber" : 60,
      "endLineNumber" : 114,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 114,
        "startColumnNumber" : 60,
        "endLineNumber" : 114,
        "endColumnNumber" : 75
      },
      "nodeContext" : "commands.get(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 114,
        "startColumnNumber" : 60,
        "endLineNumber" : 114,
        "endColumnNumber" : 101
      },
      "nodeContext" : "commands.get(2).replaceAll(\"^\\'|\\'$\",\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 114,
        "startColumnNumber" : 31,
        "endLineNumber" : 114,
        "endColumnNumber" : 117
      },
      "nodeContext" : "new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 117
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 118
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 113,
        "startColumnNumber" : 24,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (k8sRuntime) {\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n}\n else {\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 58,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5454,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"k8sRuntime\") public void getGoInstanceCmd(boolean k8sRuntime) throws IOException {\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 118
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 116,
      "startColumnNumber" : 60,
      "endLineNumber" : 116,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 116,
        "startColumnNumber" : 60,
        "endLineNumber" : 116,
        "endColumnNumber" : 75
      },
      "nodeContext" : "commands.get(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 116,
        "startColumnNumber" : 31,
        "endLineNumber" : 116,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new ObjectMapper().readValue(commands.get(2),HashMap.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 91
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 92
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 115,
        "startColumnNumber" : 15,
        "endLineNumber" : 117,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (k8sRuntime) {\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n}\n else {\n  goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 58,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5454,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"k8sRuntime\") public void getGoInstanceCmd(boolean k8sRuntime) throws IOException {\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 92
      },
      "nodeContext" : "goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 118,
      "startColumnNumber" : 28,
      "endLineNumber" : 118,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 118,
        "startColumnNumber" : 28,
        "endLineNumber" : 118,
        "endColumnNumber" : 46
      },
      "nodeContext" : "commands.toArray()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 118,
        "startColumnNumber" : 28,
        "endLineNumber" : 118,
        "endColumnNumber" : 53
      },
      "nodeContext" : "commands.toArray().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assert.assertEquals(commands.toArray().length,3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assert.assertEquals(commands.toArray().length,3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 58,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5454,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"k8sRuntime\") public void getGoInstanceCmd(boolean k8sRuntime) throws IOException {\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assert.assertEquals(commands.toArray().length,3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 119,
      "startColumnNumber" : 28,
      "endLineNumber" : 119,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 119,
        "startColumnNumber" : 28,
        "endLineNumber" : 119,
        "endColumnNumber" : 43
      },
      "nodeContext" : "commands.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(commands.get(0),\"config\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(commands.get(0),\"config\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 58,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5454,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"k8sRuntime\") public void getGoInstanceCmd(boolean k8sRuntime) throws IOException {\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(commands.get(0),\"config\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 120,
      "startColumnNumber" : 28,
      "endLineNumber" : 120,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 120,
        "startColumnNumber" : 28,
        "endLineNumber" : 120,
        "endColumnNumber" : 43
      },
      "nodeContext" : "commands.get(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(commands.get(1),\"-instance-conf\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(commands.get(1),\"-instance-conf\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 58,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5454,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"k8sRuntime\") public void getGoInstanceCmd(boolean k8sRuntime) throws IOException {\n  HashMap<String,String> goInstanceConfig;\n  InstanceConfig instanceConfig=new InstanceConfig();\n  instanceConfig.setClusterName(\"kluster\");\n  instanceConfig.setInstanceId(3000);\n  instanceConfig.setFunctionId(\"func-7734\");\n  instanceConfig.setFunctionVersion(\"1.0.0\");\n  instanceConfig.setMaxBufferedTuples(5);\n  instanceConfig.setPort(1337);\n  instanceConfig.setMetricsPort(60000);\n  JSONObject userConfig=new JSONObject();\n  userConfig.put(\"word-of-the-day\",\"der Weltschmerz\");\n  JSONObject secretsMap=new JSONObject();\n  secretsMap.put(\"secret\",\"cake is a lie\");\n  Function.SourceSpec sources=Function.SourceSpec.newBuilder().setCleanupSubscription(true).setSubscriptionName(\"go-func-sub\").setTimeoutMs(500).putInputSpecs(\"go-func-input\",Function.ConsumerSpec.newBuilder().setIsRegexPattern(false).build()).build();\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"go-func-deadletter\").setMaxMessageRetries(1).build();\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(2).setDisk(1024).setRam(32).build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setAutoAck(true).setTenant(\"public\").setNamespace(\"default\").setName(\"go-func\").setLogTopic(\"go-func-log\").setProcessingGuarantees(Function.ProcessingGuarantees.ATLEAST_ONCE).setSecretsMap(secretsMap.toJSONString()).setParallelism(1).setSource(sources).setRetryDetails(retryDetails).setResources(resources).setUserConfig(userConfig.toJSONString()).build();\n  instanceConfig.setFunctionDetails(functionDetails);\n  List<String> commands=RuntimeUtils.getGoInstanceCmd(instanceConfig,\"config\",\"pulsar://localhost:6650\",k8sRuntime);\n  if (k8sRuntime) {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2).replaceAll(\"^\\'|\\'$\",\"\"),HashMap.class);\n  }\n else {\n    goInstanceConfig=new ObjectMapper().readValue(commands.get(2),HashMap.class);\n  }\n  Assert.assertEquals(commands.toArray().length,3);\n  Assert.assertEquals(commands.get(0),\"config\");\n  Assert.assertEquals(commands.get(1),\"-instance-conf\");\n  Assert.assertEquals(goInstanceConfig.get(\"maxBufTuples\"),5);\n  Assert.assertEquals(goInstanceConfig.get(\"maxMessageRetries\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"killAfterIdleMs\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"parallelism\"),1);\n  Assert.assertEquals(goInstanceConfig.get(\"className\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSpecsTopic\"),\"go-func-input\");\n  Assert.assertEquals(goInstanceConfig.get(\"secretsMap\"),secretsMap.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"sourceSchemaType\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"sinkSpecsTopic\"),\"\");\n  Assert.assertEquals(goInstanceConfig.get(\"clusterName\"),\"kluster\");\n  Assert.assertEquals(goInstanceConfig.get(\"nameSpace\"),\"default\");\n  Assert.assertEquals(goInstanceConfig.get(\"receiverQueueSize\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"tenant\"),\"public\");\n  Assert.assertEquals(goInstanceConfig.get(\"ram\"),32);\n  Assert.assertEquals(goInstanceConfig.get(\"logTopic\"),\"go-func-log\");\n  Assert.assertEquals(goInstanceConfig.get(\"processingGuarantees\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"autoAck\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"regexPatternSubscription\"),false);\n  Assert.assertEquals(goInstanceConfig.get(\"pulsarServiceURL\"),\"pulsar://localhost:6650\");\n  Assert.assertEquals(goInstanceConfig.get(\"runtime\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"cpu\"),2.0);\n  Assert.assertEquals(goInstanceConfig.get(\"funcID\"),\"func-7734\");\n  Assert.assertEquals(goInstanceConfig.get(\"funcVersion\"),\"1.0.0\");\n  Assert.assertEquals(goInstanceConfig.get(\"disk\"),1024);\n  Assert.assertEquals(goInstanceConfig.get(\"instanceID\"),3000);\n  Assert.assertEquals(goInstanceConfig.get(\"cleanupSubscription\"),true);\n  Assert.assertEquals(goInstanceConfig.get(\"port\"),1337);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionType\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"timeoutMs\"),500);\n  Assert.assertEquals(goInstanceConfig.get(\"subscriptionName\"),\"go-func-sub\");\n  Assert.assertEquals(goInstanceConfig.get(\"name\"),\"go-func\");\n  Assert.assertEquals(goInstanceConfig.get(\"expectedHealthCheckInterval\"),0);\n  Assert.assertEquals(goInstanceConfig.get(\"deadLetterTopic\"),\"go-func-deadletter\");\n  Assert.assertEquals(goInstanceConfig.get(\"userConfig\"),userConfig.toString());\n  Assert.assertEquals(goInstanceConfig.get(\"metricsPort\"),60000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(commands.get(1),\"-instance-conf\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 114,
    "startColumnNumber" : 60,
    "endLineNumber" : 114,
    "endColumnNumber" : 68
  }, {
    "charLength" : 8,
    "startLineNumber" : 116,
    "startColumnNumber" : 60,
    "endLineNumber" : 116,
    "endColumnNumber" : 68
  }, {
    "charLength" : 8,
    "startLineNumber" : 118,
    "startColumnNumber" : 28,
    "endLineNumber" : 118,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 119,
    "startColumnNumber" : 28,
    "endLineNumber" : 119,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 120,
    "startColumnNumber" : 28,
    "endLineNumber" : 120,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}