{
  "id" : 349,
  "expression" : "7",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 30,
      "startColumnNumber" : 12,
      "endLineNumber" : 30,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 13
      },
      "nodeContext" : "n=7",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 14
      },
      "nodeContext" : "int n=7;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 29,
        "startColumnNumber" : 41,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=7;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,9);\n  addUndirectedEdge(g,0,2,0);\n  addUndirectedEdge(g,0,3,5);\n  addUndirectedEdge(g,0,5,7);\n  addUndirectedEdge(g,1,3,-2);\n  addUndirectedEdge(g,1,4,3);\n  addUndirectedEdge(g,1,6,4);\n  addUndirectedEdge(g,2,5,6);\n  addUndirectedEdge(g,3,5,2);\n  addUndirectedEdge(g,3,6,3);\n  addUndirectedEdge(g,4,6,6);\n  addUndirectedEdge(g,5,6,1);\n  MinimumSpanningTreeSolver solver=new MinimumSpanningTreeSolver(g);\n  if (!solver.mstExists()) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + solver.getMstCost());\n    System.out.println(\"MST edges:\");\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"  (%d, %d, %d)\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1088,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=7;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,9);\n  addUndirectedEdge(g,0,2,0);\n  addUndirectedEdge(g,0,3,5);\n  addUndirectedEdge(g,0,5,7);\n  addUndirectedEdge(g,1,3,-2);\n  addUndirectedEdge(g,1,4,3);\n  addUndirectedEdge(g,1,6,4);\n  addUndirectedEdge(g,2,5,6);\n  addUndirectedEdge(g,3,5,2);\n  addUndirectedEdge(g,3,6,3);\n  addUndirectedEdge(g,4,6,6);\n  addUndirectedEdge(g,5,6,1);\n  MinimumSpanningTreeSolver solver=new MinimumSpanningTreeSolver(g);\n  if (!solver.mstExists()) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + solver.getMstCost());\n    System.out.println(\"MST edges:\");\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"  (%d, %d, %d)\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 14
      },
      "nodeContext" : "int n=7;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 36,
      "startColumnNumber" : 31,
      "endLineNumber" : 36,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addUndirectedEdge(g,0,5,7)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addUndirectedEdge(g,0,5,7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 29,
        "startColumnNumber" : 41,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=7;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,9);\n  addUndirectedEdge(g,0,2,0);\n  addUndirectedEdge(g,0,3,5);\n  addUndirectedEdge(g,0,5,7);\n  addUndirectedEdge(g,1,3,-2);\n  addUndirectedEdge(g,1,4,3);\n  addUndirectedEdge(g,1,6,4);\n  addUndirectedEdge(g,2,5,6);\n  addUndirectedEdge(g,3,5,2);\n  addUndirectedEdge(g,3,6,3);\n  addUndirectedEdge(g,4,6,6);\n  addUndirectedEdge(g,5,6,1);\n  MinimumSpanningTreeSolver solver=new MinimumSpanningTreeSolver(g);\n  if (!solver.mstExists()) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + solver.getMstCost());\n    System.out.println(\"MST edges:\");\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"  (%d, %d, %d)\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1088,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=7;\n  List<List<Edge>> g=createEmptyGraph(n);\n  addUndirectedEdge(g,0,1,9);\n  addUndirectedEdge(g,0,2,0);\n  addUndirectedEdge(g,0,3,5);\n  addUndirectedEdge(g,0,5,7);\n  addUndirectedEdge(g,1,3,-2);\n  addUndirectedEdge(g,1,4,3);\n  addUndirectedEdge(g,1,6,4);\n  addUndirectedEdge(g,2,5,6);\n  addUndirectedEdge(g,3,5,2);\n  addUndirectedEdge(g,3,6,3);\n  addUndirectedEdge(g,4,6,6);\n  addUndirectedEdge(g,5,6,1);\n  MinimumSpanningTreeSolver solver=new MinimumSpanningTreeSolver(g);\n  if (!solver.mstExists()) {\n    System.out.println(\"No MST does not exists\");\n  }\n else {\n    System.out.println(\"MST cost: \" + solver.getMstCost());\n    System.out.println(\"MST edges:\");\n    for (    Edge e : solver.getMst()) {\n      System.out.println(String.format(\"  (%d, %d, %d)\",e.from,e.to,e.cost));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addUndirectedEdge(g,0,5,7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 30,
    "startColumnNumber" : 12,
    "endLineNumber" : 30,
    "endColumnNumber" : 13
  }, {
    "charLength" : 1,
    "startLineNumber" : 36,
    "startColumnNumber" : 31,
    "endLineNumber" : 36,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}