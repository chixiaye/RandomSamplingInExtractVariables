{
  "id" : 334,
  "expression" : "edges != null",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterativeFastStack.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "edges != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 79,
      "startColumnNumber" : 12,
      "endLineNumber" : 79,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edges != null) {\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      stack.push(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 73,
        "startColumnNumber" : 26,
        "endLineNumber" : 86,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  count++;\n  visited[node]=true;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        stack.push(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!visited[node]) {\n  count++;\n  visited[node]=true;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        stack.push(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 71,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int node=stack.pop();\n  if (!visited[node]) {\n    count++;\n    visited[node]=true;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          stack.push(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int node=stack.pop();\n  if (!visited[node]) {\n    count++;\n    visited[node]=true;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          stack.push(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 62,
        "startColumnNumber" : 67,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntStack stack=new IntStack(n);\n  stack.push(start);\n  while (!stack.isEmpty()) {\n    int node=stack.pop();\n    if (!visited[node]) {\n      count++;\n      visited[node]=true;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            stack.push(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static int dfs(Map<Integer,List<Edge>> graph,int start,int n){\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntStack stack=new IntStack(n);\n  stack.push(start);\n  while (!stack.isEmpty()) {\n    int node=stack.pop();\n    if (!visited[node]) {\n      count++;\n      visited[node]=true;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            stack.push(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 122,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edges != null) {\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      stack.push(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 10
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 79,
    "startColumnNumber" : 12,
    "endLineNumber" : 79,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}