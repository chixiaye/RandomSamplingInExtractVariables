{
  "id" : 211,
  "expression" : "cc",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramMulticastTest.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 85,
      "startColumnNumber" : 28,
      "endLineNumber" : 85,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 85,
        "startColumnNumber" : 28,
        "endLineNumber" : 85,
        "endColumnNumber" : 39
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 85,
        "startColumnNumber" : 28,
        "endLineNumber" : 85,
        "endColumnNumber" : 61
      },
      "nodeContext" : "cc.config().getNetworkInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertEquals(iface,cc.config().getNetworkInterface())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(iface,cc.config().getNetworkInterface());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(iface,cc.config().getNetworkInterface());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 86,
      "startColumnNumber" : 38,
      "endLineNumber" : 86,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 86,
        "startColumnNumber" : 38,
        "endLineNumber" : 86,
        "endColumnNumber" : 49
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 86,
        "startColumnNumber" : 38,
        "endLineNumber" : 86,
        "endColumnNumber" : 64
      },
      "nodeContext" : "cc.config().getInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertInterfaceAddress(iface,cc.config().getInterface())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertInterfaceAddress(iface,cc.config().getInterface());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertInterfaceAddress(iface,cc.config().getInterface());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 90,
      "startColumnNumber" : 8,
      "endLineNumber" : 90,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 41
      },
      "nodeContext" : "cc.joinGroup(groupAddress,iface)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cc.joinGroup(groupAddress,iface).sync()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 49
      },
      "nodeContext" : "cc.joinGroup(groupAddress,iface).sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 49
      },
      "nodeContext" : "cc.joinGroup(groupAddress,iface).sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 96,
      "startColumnNumber" : 8,
      "endLineNumber" : 96,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 42
      },
      "nodeContext" : "cc.leaveGroup(groupAddress,iface)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 49
      },
      "nodeContext" : "cc.leaveGroup(groupAddress,iface).sync()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cc.leaveGroup(groupAddress,iface).sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cc.leaveGroup(groupAddress,iface).sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 105,
      "startColumnNumber" : 8,
      "endLineNumber" : 105,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 108,
      "startColumnNumber" : 20,
      "endLineNumber" : 108,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 31
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 56
      },
      "nodeContext" : "cc.config().isLoopbackModeDisabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertFalse(cc.config().isLoopbackModeDisabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertFalse(cc.config().isLoopbackModeDisabled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertFalse(cc.config().isLoopbackModeDisabled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 111,
      "startColumnNumber" : 8,
      "endLineNumber" : 111,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 49
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cc.config().setLoopbackModeDisabled(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 114,
      "startColumnNumber" : 19,
      "endLineNumber" : 114,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 114,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 30
      },
      "nodeContext" : "cc.config()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 114,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cc.config().isLoopbackModeDisabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertTrue(cc.config().isLoopbackModeDisabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertTrue(cc.config().isLoopbackModeDisabled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertTrue(cc.config().isLoopbackModeDisabled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 118,
      "startColumnNumber" : 8,
      "endLineNumber" : 118,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 18
      },
      "nodeContext" : "cc.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 41
      },
      "nodeContext" : "cc.close().awaitUninterruptibly()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 42
      },
      "nodeContext" : "cc.close().awaitUninterruptibly();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMulticast(Bootstrap sb,Bootstrap cb) throws Throwable {\n  NetworkInterface iface=multicastNetworkInterface();\n  assumeTrue(iface != null,\"No NetworkInterface found that supports multicast and \" + socketInternetProtocalFamily());\n  MulticastTestHandler mhandler=new MulticastTestHandler();\n  sb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msg) throws Exception {\n    }\n  }\n);\n  cb.handler(mhandler);\n  sb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  sb.option(ChannelOption.SO_REUSEADDR,true);\n  cb.option(ChannelOption.IP_MULTICAST_IF,iface);\n  cb.option(ChannelOption.SO_REUSEADDR,true);\n  DatagramChannel sc=(DatagramChannel)sb.bind(newSocketAddress(iface)).get();\n  assertEquals(iface,sc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,sc.config().getInterface());\n  InetSocketAddress addr=sc.localAddress();\n  cb.localAddress(addr.getPort());\n  DatagramChannel cc=(DatagramChannel)cb.bind().get();\n  assertEquals(iface,cc.config().getNetworkInterface());\n  assertInterfaceAddress(iface,cc.config().getInterface());\n  InetSocketAddress groupAddress=SocketUtils.socketAddress(groupAddress(),addr.getPort());\n  cc.joinGroup(groupAddress,iface).sync();\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  assertTrue(mhandler.await());\n  cc.leaveGroup(groupAddress,iface).sync();\n  Thread.sleep(1000);\n  sc.writeAndFlush(new DatagramPacket(Unpooled.copyInt(1),groupAddress)).sync();\n  mhandler.await();\n  cc.config().setLoopbackModeDisabled(false);\n  sc.config().setLoopbackModeDisabled(false);\n  assertFalse(cc.config().isLoopbackModeDisabled());\n  assertFalse(sc.config().isLoopbackModeDisabled());\n  cc.config().setLoopbackModeDisabled(true);\n  sc.config().setLoopbackModeDisabled(true);\n  assertTrue(cc.config().isLoopbackModeDisabled());\n  assertTrue(sc.config().isLoopbackModeDisabled());\n  sc.close().awaitUninterruptibly();\n  cc.close().awaitUninterruptibly();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 42
      },
      "nodeContext" : "cc.close().awaitUninterruptibly();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.channel.socket.DatagramChannel"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 85,
    "startColumnNumber" : 28,
    "endLineNumber" : 85,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 86,
    "startColumnNumber" : 38,
    "endLineNumber" : 86,
    "endColumnNumber" : 40
  }, {
    "charLength" : 2,
    "startLineNumber" : 90,
    "startColumnNumber" : 8,
    "endLineNumber" : 90,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 96,
    "startColumnNumber" : 8,
    "endLineNumber" : 96,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 105,
    "startColumnNumber" : 8,
    "endLineNumber" : 105,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 108,
    "startColumnNumber" : 20,
    "endLineNumber" : 108,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 111,
    "startColumnNumber" : 8,
    "endLineNumber" : 111,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 114,
    "startColumnNumber" : 19,
    "endLineNumber" : 114,
    "endColumnNumber" : 21
  }, {
    "charLength" : 2,
    "startLineNumber" : 118,
    "startColumnNumber" : 8,
    "endLineNumber" : 118,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  } ]
}