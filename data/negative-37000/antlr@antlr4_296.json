{
  "id" : 296,
  "expression" : "vocabulary",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestVocabulary.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 41,
      "startColumnNumber" : 23,
      "endLineNumber" : 41,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertNotNull(vocabulary)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Assert.assertNotNull(vocabulary);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Assert.assertNotNull(vocabulary);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 42,
      "startColumnNumber" : 29,
      "endLineNumber" : 42,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 42,
        "startColumnNumber" : 29,
        "endLineNumber" : 42,
        "endColumnNumber" : 66
      },
      "nodeContext" : "vocabulary.getSymbolicName(Token.EOF)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 44,
      "startColumnNumber" : 38,
      "endLineNumber" : 44,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 44,
        "startColumnNumber" : 38,
        "endLineNumber" : 44,
        "endColumnNumber" : 66
      },
      "nodeContext" : "vocabulary.getDisplayName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 44,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 44,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 44,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 47,
      "startColumnNumber" : 39,
      "endLineNumber" : 47,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 47,
        "startColumnNumber" : 39,
        "endLineNumber" : 47,
        "endColumnNumber" : 67
      },
      "nodeContext" : "vocabulary.getLiteralName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 49,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 48,
      "startColumnNumber" : 22,
      "endLineNumber" : 48,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 48,
        "startColumnNumber" : 22,
        "endLineNumber" : 48,
        "endColumnNumber" : 51
      },
      "nodeContext" : "vocabulary.getSymbolicName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 49,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 51,
      "startColumnNumber" : 22,
      "endLineNumber" : 51,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 51,
        "startColumnNumber" : 22,
        "endLineNumber" : 51,
        "endColumnNumber" : 50
      },
      "nodeContext" : "vocabulary.getLiteralName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 50,
        "startColumnNumber" : 60,
        "endLineNumber" : 53,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 52,
      "startColumnNumber" : 39,
      "endLineNumber" : 52,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 52,
        "startColumnNumber" : 39,
        "endLineNumber" : 52,
        "endColumnNumber" : 68
      },
      "nodeContext" : "vocabulary.getSymbolicName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 50,
        "startColumnNumber" : 60,
        "endLineNumber" : 53,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 55,
      "startColumnNumber" : 22,
      "endLineNumber" : 55,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 55,
        "startColumnNumber" : 22,
        "endLineNumber" : 55,
        "endColumnNumber" : 50
      },
      "nodeContext" : "vocabulary.getLiteralName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getLiteralName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  }, {
    "nodeContext" : "vocabulary",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 56,
      "startColumnNumber" : 22,
      "endLineNumber" : 56,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 56,
        "startColumnNumber" : 22,
        "endLineNumber" : 56,
        "endColumnNumber" : 51
      },
      "nodeContext" : "vocabulary.getSymbolicName(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 46,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (tokenNames[i].startsWith(\"'\")) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n else if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n}\n else {\n  Assert.assertNull(vocabulary.getLiteralName(i));\n  Assert.assertNull(vocabulary.getSymbolicName(i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokenNames.length; i++) {\n  Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n  if (tokenNames[i].startsWith(\"'\")) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n else   if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n  }\n else {\n    Assert.assertNull(vocabulary.getLiteralName(i));\n    Assert.assertNull(vocabulary.getSymbolicName(i));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 34,
        "startColumnNumber" : 44,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testVocabularyFromTokenNames(){\n  String[] tokenNames={\"<INVALID>\",\"TOKEN_REF\",\"RULE_REF\",\"'//'\",\"'/'\",\"'*'\",\"'!'\",\"ID\",\"STRING\"};\n  Vocabulary vocabulary=VocabularyImpl.fromTokenNames(tokenNames);\n  Assert.assertNotNull(vocabulary);\n  Assert.assertEquals(\"EOF\",vocabulary.getSymbolicName(Token.EOF));\n  for (int i=0; i < tokenNames.length; i++) {\n    Assert.assertEquals(tokenNames[i],vocabulary.getDisplayName(i));\n    if (tokenNames[i].startsWith(\"'\")) {\n      Assert.assertEquals(tokenNames[i],vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n else     if (Character.isUpperCase(tokenNames[i].charAt(0))) {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertEquals(tokenNames[i],vocabulary.getSymbolicName(i));\n    }\n else {\n      Assert.assertNull(vocabulary.getLiteralName(i));\n      Assert.assertNull(vocabulary.getSymbolicName(i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Assert.assertNull(vocabulary.getSymbolicName(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.Vocabulary"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 41,
    "startColumnNumber" : 23,
    "endLineNumber" : 41,
    "endColumnNumber" : 33
  }, {
    "charLength" : 10,
    "startLineNumber" : 42,
    "startColumnNumber" : 29,
    "endLineNumber" : 42,
    "endColumnNumber" : 39
  }, {
    "charLength" : 10,
    "startLineNumber" : 44,
    "startColumnNumber" : 38,
    "endLineNumber" : 44,
    "endColumnNumber" : 48
  }, {
    "charLength" : 10,
    "startLineNumber" : 47,
    "startColumnNumber" : 39,
    "endLineNumber" : 47,
    "endColumnNumber" : 49
  }, {
    "charLength" : 10,
    "startLineNumber" : 48,
    "startColumnNumber" : 22,
    "endLineNumber" : 48,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 51,
    "startColumnNumber" : 22,
    "endLineNumber" : 51,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 52,
    "startColumnNumber" : 39,
    "endLineNumber" : 52,
    "endColumnNumber" : 49
  }, {
    "charLength" : 10,
    "startLineNumber" : 55,
    "startColumnNumber" : 22,
    "endLineNumber" : 55,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 56,
    "startColumnNumber" : 22,
    "endLineNumber" : 56,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  } ]
}