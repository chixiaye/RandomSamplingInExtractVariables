{
  "id" : 107,
  "expression" : "segmentsWithMissingRules",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/server/coordinator/duty/RunRules.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "segmentsWithMissingRules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 152,
      "startColumnNumber" : 12,
      "endLineNumber" : 152,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 43
      },
      "nodeContext" : "segmentsWithMissingRules.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 63
      },
      "nodeContext" : "segmentsWithMissingRules.size() < MAX_MISSING_RULES",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n  segmentsWithMissingRules.add(segment.getId());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 151,
        "startColumnNumber" : 30,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n    segmentsWithMissingRules.add(segment.getId());\n  }\n  missingRules++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 151,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!foundMatchingRule) {\n  if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n    segmentsWithMissingRules.add(segment.getId());\n  }\n  missingRules++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 124,
        "startColumnNumber" : 57,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (overshadowed.contains(segment.getId())) {\n    continue;\n  }\n  List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n  boolean foundMatchingRule=false;\n  for (  Rule rule : rules) {\n    if (rule.appliesTo(segment,now)) {\n      if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n        log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n        paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n      }\n      stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n      foundMatchingRule=true;\n      break;\n    }\n  }\n  if (!foundMatchingRule) {\n    if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n      segmentsWithMissingRules.add(segment.getId());\n    }\n    missingRules++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1602,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DataSegment segment : params.getUsedSegments()) {\n  if (overshadowed.contains(segment.getId())) {\n    continue;\n  }\n  List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n  boolean foundMatchingRule=false;\n  for (  Rule rule : rules) {\n    if (rule.appliesTo(segment,now)) {\n      if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n        log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n        paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n      }\n      stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n      foundMatchingRule=true;\n      break;\n    }\n  }\n  if (!foundMatchingRule) {\n    if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n      segmentsWithMissingRules.add(segment.getId());\n    }\n    missingRules++;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4306,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params){\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 63
      },
      "nodeContext" : "segmentsWithMissingRules.size() < MAX_MISSING_RULES",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.timeline.SegmentId>"
  }, {
    "nodeContext" : "segmentsWithMissingRules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 153,
      "startColumnNumber" : 10,
      "endLineNumber" : 153,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 153,
        "endColumnNumber" : 55
      },
      "nodeContext" : "segmentsWithMissingRules.add(segment.getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 153,
        "endColumnNumber" : 56
      },
      "nodeContext" : "segmentsWithMissingRules.add(segment.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 152,
        "startColumnNumber" : 65,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  segmentsWithMissingRules.add(segment.getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n  segmentsWithMissingRules.add(segment.getId());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 151,
        "startColumnNumber" : 30,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n    segmentsWithMissingRules.add(segment.getId());\n  }\n  missingRules++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 151,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!foundMatchingRule) {\n  if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n    segmentsWithMissingRules.add(segment.getId());\n  }\n  missingRules++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 124,
        "startColumnNumber" : 57,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (overshadowed.contains(segment.getId())) {\n    continue;\n  }\n  List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n  boolean foundMatchingRule=false;\n  for (  Rule rule : rules) {\n    if (rule.appliesTo(segment,now)) {\n      if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n        log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n        paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n      }\n      stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n      foundMatchingRule=true;\n      break;\n    }\n  }\n  if (!foundMatchingRule) {\n    if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n      segmentsWithMissingRules.add(segment.getId());\n    }\n    missingRules++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1602,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DataSegment segment : params.getUsedSegments()) {\n  if (overshadowed.contains(segment.getId())) {\n    continue;\n  }\n  List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n  boolean foundMatchingRule=false;\n  for (  Rule rule : rules) {\n    if (rule.appliesTo(segment,now)) {\n      if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n        log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n        paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n      }\n      stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n      foundMatchingRule=true;\n      break;\n    }\n  }\n  if (!foundMatchingRule) {\n    if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n      segmentsWithMissingRules.add(segment.getId());\n    }\n    missingRules++;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4306,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params){\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 153,
        "endColumnNumber" : 56
      },
      "nodeContext" : "segmentsWithMissingRules.add(segment.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.timeline.SegmentId>"
  }, {
    "nodeContext" : "segmentsWithMissingRules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 159,
      "startColumnNumber" : 9,
      "endLineNumber" : 159,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 159,
        "startColumnNumber" : 9,
        "endLineNumber" : 159,
        "endColumnNumber" : 43
      },
      "nodeContext" : "segmentsWithMissingRules.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!segmentsWithMissingRules.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!segmentsWithMissingRules.isEmpty()) {\n  log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4306,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params){\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!segmentsWithMissingRules.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.timeline.SegmentId>"
  }, {
    "nodeContext" : "segmentsWithMissingRules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 162,
      "startColumnNumber" : 46,
      "endLineNumber" : 162,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 71
      },
      "nodeContext" : "log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 163,
        "endColumnNumber" : 16
      },
      "nodeContext" : "log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 159,
        "startColumnNumber" : 45,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!segmentsWithMissingRules.isEmpty()) {\n  log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4306,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params){\n  replicatorThrottler.updateParams(coordinator.getDynamicConfigs().getReplicationThrottleLimit(),coordinator.getDynamicConfigs().getReplicantLifetime(),false);\n  CoordinatorStats stats=new CoordinatorStats();\n  DruidCluster cluster=params.getDruidCluster();\n  if (cluster.isEmpty()) {\n    log.warn(\"Uh... I have no servers. Not assigning anything...\");\n    return params;\n  }\n  Set<SegmentId> overshadowed=params.getDataSourcesSnapshot().getOvershadowedSegments();\n  for (  String tier : cluster.getTierNames()) {\n    replicatorThrottler.updateReplicationState(tier);\n  }\n  DruidCoordinatorRuntimeParams paramsWithReplicationManager=params.buildFromExistingWithoutSegmentsMetadata().withReplicationManager(replicatorThrottler).build();\n  DateTime now=DateTimes.nowUtc();\n  MetadataRuleManager databaseRuleManager=paramsWithReplicationManager.getDatabaseRuleManager();\n  final List<SegmentId> segmentsWithMissingRules=Lists.newArrayListWithCapacity(MAX_MISSING_RULES);\n  int missingRules=0;\n  final Set<String> broadcastDatasources=new HashSet<>();\n  for (  ImmutableDruidDataSource dataSource : params.getDataSourcesSnapshot().getDataSourcesMap().values()) {\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(dataSource.getName());\n    for (    Rule rule : rules) {\n      if (rule instanceof BroadcastDistributionRule) {\n        broadcastDatasources.add(dataSource.getName());\n        break;\n      }\n    }\n  }\n  for (  DataSegment segment : params.getUsedSegments()) {\n    if (overshadowed.contains(segment.getId())) {\n      continue;\n    }\n    List<Rule> rules=databaseRuleManager.getRulesWithDefault(segment.getDataSource());\n    boolean foundMatchingRule=false;\n    for (    Rule rule : rules) {\n      if (rule.appliesTo(segment,now)) {\n        if (stats.getGlobalStat(\"totalNonPrimaryReplicantsLoaded\") >= paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad() && !paramsWithReplicationManager.getReplicationManager().isLoadPrimaryReplicantsOnly()) {\n          log.info(\"Maximum number of non-primary replicants [%d] have been loaded for the current RunRules execution. Only loading primary replicants from here on for this coordinator run cycle.\",paramsWithReplicationManager.getCoordinatorDynamicConfig().getMaxNonPrimaryReplicantsToLoad());\n          paramsWithReplicationManager.getReplicationManager().setLoadPrimaryReplicantsOnly(true);\n        }\n        stats.accumulate(rule.run(coordinator,paramsWithReplicationManager,segment));\n        foundMatchingRule=true;\n        break;\n      }\n    }\n    if (!foundMatchingRule) {\n      if (segmentsWithMissingRules.size() < MAX_MISSING_RULES) {\n        segmentsWithMissingRules.add(segment.getId());\n      }\n      missingRules++;\n    }\n  }\n  if (!segmentsWithMissingRules.isEmpty()) {\n    log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules).emit();\n  }\n  return params.buildFromExisting().withCoordinatorStats(stats).withBroadcastDatasources(broadcastDatasources).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 71
      },
      "nodeContext" : "log.makeAlert(\"Unable to find matching rules!\").addData(\"segmentsWithMissingRulesCount\",missingRules).addData(\"segmentsWithMissingRules\",segmentsWithMissingRules)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.timeline.SegmentId>"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 152,
    "startColumnNumber" : 12,
    "endLineNumber" : 152,
    "endColumnNumber" : 36
  }, {
    "charLength" : 24,
    "startLineNumber" : 153,
    "startColumnNumber" : 10,
    "endLineNumber" : 153,
    "endColumnNumber" : 34
  }, {
    "charLength" : 24,
    "startLineNumber" : 159,
    "startColumnNumber" : 9,
    "endLineNumber" : 159,
    "endColumnNumber" : 33
  }, {
    "charLength" : 24,
    "startLineNumber" : 162,
    "startColumnNumber" : 46,
    "endLineNumber" : 162,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}