{
  "id" : 237,
  "expression" : "client.getOptions().getInitialSettings()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/http/impl/Http2Pool.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "client.getOptions().getInitialSettings()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 75,
      "startColumnNumber" : 27,
      "endLineNumber" : 75,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 71,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 395,
        "startLineNumber" : 71,
        "startColumnNumber" : 67,
        "endLineNumber" : 76,
        "endColumnNumber" : 128
      },
      "nodeContext" : "new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 71,
        "startColumnNumber" : 67,
        "endLineNumber" : 77,
        "endColumnNumber" : 18
      },
      "nodeContext" : "new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 71,
        "startColumnNumber" : 57,
        "endLineNumber" : 77,
        "endColumnNumber" : 18
      },
      "nodeContext" : "handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 46,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 77,
        "endColumnNumber" : 19
      },
      "nodeContext" : "VertxHttp2ConnectionHandler<Http2ClientConnection> handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 52,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1004,
        "startLineNumber" : 70,
        "startColumnNumber" : 25,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VertxHttp2ConnectionHandler<Http2ClientConnection> handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build();\n  if (upgrade) {\n    handler.onHttpClientUpgrade();\n  }\n  Http2ClientConnection conn=handler.connection;\n  connection=conn;\n  int idleTimeout=client.getOptions().getIdleTimeout();\n  if (idleTimeout > 0) {\n    p.addLast(\"idle\",new IdleStateHandler(0,0,idleTimeout));\n  }\n  p.addLast(handler);\n  conn.streamCount++;\n  waiter.handleConnection(conn);\n  deliverStream(conn,waiter);\n  checkPending(conn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (queue) {\n  VertxHttp2ConnectionHandler<Http2ClientConnection> handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build();\n  if (upgrade) {\n    handler.onHttpClientUpgrade();\n  }\n  Http2ClientConnection conn=handler.connection;\n  connection=conn;\n  int idleTimeout=client.getOptions().getIdleTimeout();\n  if (idleTimeout > 0) {\n    p.addLast(\"idle\",new IdleStateHandler(0,0,idleTimeout));\n  }\n  p.addLast(handler);\n  conn.streamCount++;\n  waiter.handleConnection(conn);\n  deliverStream(conn,waiter);\n  checkPending(conn);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 123,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1074,
        "startLineNumber" : 68,
        "startColumnNumber" : 105,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ChannelPipeline p=ch.pipeline();\nsynchronized (queue) {\n    VertxHttp2ConnectionHandler<Http2ClientConnection> handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build();\n    if (upgrade) {\n      handler.onHttpClientUpgrade();\n    }\n    Http2ClientConnection conn=handler.connection;\n    connection=conn;\n    int idleTimeout=client.getOptions().getIdleTimeout();\n    if (idleTimeout > 0) {\n      p.addLast(\"idle\",new IdleStateHandler(0,0,idleTimeout));\n    }\n    p.addLast(handler);\n    conn.streamCount++;\n    waiter.handleConnection(conn);\n    deliverStream(conn,waiter);\n    checkPending(conn);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "void createConn(ContextImpl context,Channel ch,Waiter waiter,boolean upgrade) throws Http2Exception {\n  ChannelPipeline p=ch.pipeline();\nsynchronized (queue) {\n    VertxHttp2ConnectionHandler<Http2ClientConnection> handler=new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings()).connectionFactory(connHandler -> new Http2ClientConnection(Http2Pool.this,context,ch,connHandler,client.metrics)).build();\n    if (upgrade) {\n      handler.onHttpClientUpgrade();\n    }\n    Http2ClientConnection conn=handler.connection;\n    connection=conn;\n    int idleTimeout=client.getOptions().getIdleTimeout();\n    if (idleTimeout > 0) {\n      p.addLast(\"idle\",new IdleStateHandler(0,0,idleTimeout));\n    }\n    p.addLast(handler);\n    conn.streamCount++;\n    waiter.handleConnection(conn);\n    deliverStream(conn,waiter);\n    checkPending(conn);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 71,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>().connectionMap(connectionMap).server(false).useCompression(client.getOptions().isTryUseCompression()).initialSettings(client.getOptions().getInitialSettings())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "io.vertx.core.http.Http2Settings"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 75,
    "startColumnNumber" : 27,
    "endLineNumber" : 75,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}