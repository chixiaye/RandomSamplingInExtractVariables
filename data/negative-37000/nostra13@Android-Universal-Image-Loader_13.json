{
  "id" : 13,
  "expression" : "srcHeight / 2",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "srcHeight / 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 105,
      "startColumnNumber" : 43,
      "endLineNumber" : 105,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 105,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 109,
        "endColumnNumber" : 6
      },
      "nodeContext" : "while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n  srcWidth/=2;\n  srcHeight/=2;\n  scale*=2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 104,
        "startColumnNumber" : 23,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.max(widthScale,heightScale);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 582,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n      srcWidth/=2;\n      srcHeight/=2;\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(widthScale,heightScale);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nwhile (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n  srcWidth/=2;\n  srcHeight/=2;\n  scale*=2;\n}\n}\n else {\nscale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 91,
        "startColumnNumber" : 26,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int srcWidth=srcSize.getWidth();\n  int srcHeight=srcSize.getHeight();\n  int targetWidth=targetSize.getWidth();\n  int targetHeight=targetSize.getHeight();\n  int scale=1;\n  int widthScale=srcWidth / targetWidth;\n  int heightScale=srcHeight / targetHeight;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n        srcWidth/=2;\n        srcHeight/=2;\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(widthScale,heightScale);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2393,
        "startLineNumber" : 63,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  int srcWidth=srcSize.getWidth();\n  int srcHeight=srcSize.getHeight();\n  int targetWidth=targetSize.getWidth();\n  int targetHeight=targetSize.getHeight();\n  int scale=1;\n  int widthScale=srcWidth / targetWidth;\n  int heightScale=srcHeight / targetHeight;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n        srcWidth/=2;\n        srcHeight/=2;\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(widthScale,heightScale);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "srcHeight / 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 116,
      "startColumnNumber" : 43,
      "endLineNumber" : 116,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 116,
        "startColumnNumber" : 43,
        "endLineNumber" : 116,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 116,
        "startColumnNumber" : 5,
        "endLineNumber" : 120,
        "endColumnNumber" : 6
      },
      "nodeContext" : "while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n  srcWidth/=2;\n  srcHeight/=2;\n  scale*=2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 115,
        "startColumnNumber" : 23,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(widthScale,heightScale);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 582,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n      srcWidth/=2;\n      srcHeight/=2;\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(widthScale,heightScale);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nwhile (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n  srcWidth/=2;\n  srcHeight/=2;\n  scale*=2;\n}\n}\n else {\nscale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 91,
        "startColumnNumber" : 26,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int srcWidth=srcSize.getWidth();\n  int srcHeight=srcSize.getHeight();\n  int targetWidth=targetSize.getWidth();\n  int targetHeight=targetSize.getHeight();\n  int scale=1;\n  int widthScale=srcWidth / targetWidth;\n  int heightScale=srcHeight / targetHeight;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n        srcWidth/=2;\n        srcHeight/=2;\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(widthScale,heightScale);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2393,
        "startLineNumber" : 63,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  int srcWidth=srcSize.getWidth();\n  int srcHeight=srcSize.getHeight();\n  int targetWidth=targetSize.getWidth();\n  int targetHeight=targetSize.getHeight();\n  int scale=1;\n  int widthScale=srcWidth / targetWidth;\n  int heightScale=srcHeight / targetHeight;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      while (srcWidth / 2 >= targetWidth || srcHeight / 2 >= targetHeight) {\n        srcWidth/=2;\n        srcHeight/=2;\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(widthScale,heightScale);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  while (srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight) {\n    srcWidth/=2;\n    srcHeight/=2;\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(widthScale,heightScale);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 72
      },
      "nodeContext" : "srcWidth / 2 >= targetWidth && srcHeight / 2 >= targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 105,
    "startColumnNumber" : 43,
    "endLineNumber" : 105,
    "endColumnNumber" : 56
  }, {
    "charLength" : 13,
    "startLineNumber" : 116,
    "startColumnNumber" : 43,
    "endLineNumber" : 116,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}