{
  "id" : 222,
  "expression" : "sentinel++",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/LongestCommonSubstring.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sentinel++",
    "nodeType" : "PostfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 394,
      "startColumnNumber" : 20,
      "endLineNumber" : 394,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 30
      },
      "nodeContext" : "text[k++]=sentinel++",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 31
      },
      "nodeContext" : "text[k++]=sentinel++;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 380,
        "startColumnNumber" : 54,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String str=strings[i];\n  for (int j=0; j < str.length(); j++) {\n    text[k++]=((int)str.charAt(j)) + shift;\n    if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n    }\n  }\n  text[k++]=sentinel++;\n  if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 380,
        "startColumnNumber" : 6,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, k=0; i < strings.length; i++) {\n  String str=strings[i];\n  for (int j=0; j < str.length(); j++) {\n    text[k++]=((int)str.charAt(j)) + shift;\n    if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n    }\n  }\n  text[k++]=sentinel++;\n  if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 375,
        "startColumnNumber" : 29,
        "endLineNumber" : 402,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyMinAndMaxAsciiValues();\n  text=new int[textLength];\n  int sentinel=0;\n  for (int i=0, k=0; i < strings.length; i++) {\n    String str=strings[i];\n    for (int j=0; j < str.length(); j++) {\n      text[k++]=((int)str.charAt(j)) + shift;\n      if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n        throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n      }\n    }\n    text[k++]=sentinel++;\n    if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 402,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildText(){\n  verifyMinAndMaxAsciiValues();\n  text=new int[textLength];\n  int sentinel=0;\n  for (int i=0, k=0; i < strings.length; i++) {\n    String str=strings[i];\n    for (int j=0; j < str.length(); j++) {\n      text[k++]=((int)str.charAt(j)) + shift;\n      if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n        throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n      }\n    }\n    text[k++]=sentinel++;\n    if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 31
      },
      "nodeContext" : "text[k++]=sentinel++;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 394,
    "startColumnNumber" : 20,
    "endLineNumber" : 394,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}