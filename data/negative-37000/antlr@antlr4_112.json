{
  "id" : 112,
  "expression" : "parserName + \"ATN.swift\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/swift/BaseSwiftTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parserName + \"ATN.swift\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 389,
      "startColumnNumber" : 13,
      "endLineNumber" : 389,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 389,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 38
      },
      "nodeContext" : "files.add(parserName + \"ATN.swift\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 389,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 39
      },
      "nodeContext" : "files.add(parserName + \"ATN.swift\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 387,
        "startColumnNumber" : 26,
        "endLineNumber" : 400,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  files.add(parserName + \".swift\");\n  files.add(parserName + \"ATN.swift\");\n  Set<String> optionsSet=new HashSet<>(Arrays.asList(extraOptions));\n  String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n  if (!optionsSet.contains(\"-no-listener\")) {\n    files.add(grammarName + \"Listener.swift\");\n    files.add(grammarName + \"BaseListener.swift\");\n  }\n  if (optionsSet.contains(\"-visitor\")) {\n    files.add(grammarName + \"Visitor.swift\");\n    files.add(grammarName + \"BaseVisitor.swift\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 387,
        "startColumnNumber" : 2,
        "endLineNumber" : 400,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (parserName != null) {\n  files.add(parserName + \".swift\");\n  files.add(parserName + \"ATN.swift\");\n  Set<String> optionsSet=new HashSet<>(Arrays.asList(extraOptions));\n  String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n  if (!optionsSet.contains(\"-no-listener\")) {\n    files.add(grammarName + \"Listener.swift\");\n    files.add(grammarName + \"BaseListener.swift\");\n  }\n  if (optionsSet.contains(\"-visitor\")) {\n    files.add(grammarName + \"Visitor.swift\");\n    files.add(grammarName + \"BaseVisitor.swift\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 376,
        "startColumnNumber" : 32,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ErrorQueue equeue=antlrOnString(getTempDirPath(),\"Swift\",grammarFileName,grammarStr,false,extraOptions);\n  assertTrue(equeue.errors.isEmpty());\n  List<String> files=new ArrayList<>();\n  if (lexerName != null) {\n    files.add(lexerName + \".swift\");\n    files.add(lexerName + \"ATN.swift\");\n  }\n  if (parserName != null) {\n    files.add(parserName + \".swift\");\n    files.add(parserName + \"ATN.swift\");\n    Set<String> optionsSet=new HashSet<>(Arrays.asList(extraOptions));\n    String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n    if (!optionsSet.contains(\"-no-listener\")) {\n      files.add(grammarName + \"Listener.swift\");\n      files.add(grammarName + \"BaseListener.swift\");\n    }\n    if (optionsSet.contains(\"-visitor\")) {\n      files.add(grammarName + \"Visitor.swift\");\n      files.add(grammarName + \"BaseVisitor.swift\");\n    }\n  }\n  addSourceFiles(files.toArray(new String[0]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1205,
        "startLineNumber" : 369,
        "startColumnNumber" : 1,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Generates the parser for one test case.\n */\nprivate void generateParser(String grammarFileName,String grammarStr,String parserName,String lexerName,String... extraOptions){\n  ErrorQueue equeue=antlrOnString(getTempDirPath(),\"Swift\",grammarFileName,grammarStr,false,extraOptions);\n  assertTrue(equeue.errors.isEmpty());\n  List<String> files=new ArrayList<>();\n  if (lexerName != null) {\n    files.add(lexerName + \".swift\");\n    files.add(lexerName + \"ATN.swift\");\n  }\n  if (parserName != null) {\n    files.add(parserName + \".swift\");\n    files.add(parserName + \"ATN.swift\");\n    Set<String> optionsSet=new HashSet<>(Arrays.asList(extraOptions));\n    String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n    if (!optionsSet.contains(\"-no-listener\")) {\n      files.add(grammarName + \"Listener.swift\");\n      files.add(grammarName + \"BaseListener.swift\");\n    }\n    if (optionsSet.contains(\"-visitor\")) {\n      files.add(grammarName + \"Visitor.swift\");\n      files.add(grammarName + \"BaseVisitor.swift\");\n    }\n  }\n  addSourceFiles(files.toArray(new String[0]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 389,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 39
      },
      "nodeContext" : "files.add(parserName + \"ATN.swift\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 389,
    "startColumnNumber" : 13,
    "endLineNumber" : 389,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}