{
  "id" : 43,
  "expression" : "listenerPosition",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "f89fb0f12f5a0c21d95dae234d53f590e1384557",
  "filePath" : "/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "listenerPosition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 297,
      "startColumnNumber" : 60,
      "endLineNumber" : 297,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 297,
        "startColumnNumber" : 41,
        "endLineNumber" : 297,
        "endColumnNumber" : 77
      },
      "nodeContext" : "listenerParameters[listenerPosition]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 297,
        "startColumnNumber" : 18,
        "endLineNumber" : 297,
        "endColumnNumber" : 78
      },
      "nodeContext" : "parameter.requiresCast(listenerParameters[listenerPosition])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 297,
        "startColumnNumber" : 14,
        "endLineNumber" : 302,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n else {\n  builder.add(\"p$L\",listenerPosition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 585,
        "startLineNumber" : 289,
        "startColumnNumber" : 71,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0, count=parameters.size(); i < count; i++) {\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 285,
        "startColumnNumber" : 71,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 285,
        "startColumnNumber" : 10,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (MethodViewBinding binding : methodBindings.get(method)) {\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 284,
        "startColumnNumber" : 48,
        "endLineNumber" : 306,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 284,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (methodBindings.containsKey(method)) {\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n else if (hasReturnType) {\n  builder.add(\"$L;\\n\",method.defaultReturn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 268,
        "startColumnNumber" : 65,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (ListenerMethod method : getListenerMethods(listener)) {\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 255,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2478,
        "startLineNumber" : 261,
        "startColumnNumber" : 42,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2597,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 359,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 247,
        "startColumnNumber" : 83,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 411,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void addMethodBindings(MethodSpec.Builder result,ViewBindings bindings){\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 297,
        "startColumnNumber" : 18,
        "endLineNumber" : 297,
        "endColumnNumber" : 78
      },
      "nodeContext" : "parameter.requiresCast(listenerParameters[listenerPosition])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "listenerPosition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 299,
      "startColumnNumber" : 20,
      "endLineNumber" : 299,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 93
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 297,
        "startColumnNumber" : 80,
        "endLineNumber" : 300,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 297,
        "startColumnNumber" : 14,
        "endLineNumber" : 302,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n else {\n  builder.add(\"p$L\",listenerPosition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 585,
        "startLineNumber" : 289,
        "startColumnNumber" : 71,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0, count=parameters.size(); i < count; i++) {\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 285,
        "startColumnNumber" : 71,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 285,
        "startColumnNumber" : 10,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (MethodViewBinding binding : methodBindings.get(method)) {\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 284,
        "startColumnNumber" : 48,
        "endLineNumber" : 306,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 284,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (methodBindings.containsKey(method)) {\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n else if (hasReturnType) {\n  builder.add(\"$L;\\n\",method.defaultReturn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 268,
        "startColumnNumber" : 65,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (ListenerMethod method : getListenerMethods(listener)) {\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 255,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2478,
        "startLineNumber" : 261,
        "startColumnNumber" : 42,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2597,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 359,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 247,
        "startColumnNumber" : 83,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 411,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void addMethodBindings(MethodSpec.Builder result,ViewBindings bindings){\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "listenerPosition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 299,
      "startColumnNumber" : 53,
      "endLineNumber" : 299,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 93
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 297,
        "startColumnNumber" : 80,
        "endLineNumber" : 300,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 297,
        "startColumnNumber" : 14,
        "endLineNumber" : 302,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n else {\n  builder.add(\"p$L\",listenerPosition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 585,
        "startLineNumber" : 289,
        "startColumnNumber" : 71,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0, count=parameters.size(); i < count; i++) {\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 285,
        "startColumnNumber" : 71,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 285,
        "startColumnNumber" : 10,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (MethodViewBinding binding : methodBindings.get(method)) {\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 284,
        "startColumnNumber" : 48,
        "endLineNumber" : 306,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 284,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (methodBindings.containsKey(method)) {\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n else if (hasReturnType) {\n  builder.add(\"$L;\\n\",method.defaultReturn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 268,
        "startColumnNumber" : 65,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (ListenerMethod method : getListenerMethods(listener)) {\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 255,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2478,
        "startLineNumber" : 261,
        "startColumnNumber" : 42,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2597,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 359,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 247,
        "startColumnNumber" : 83,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 411,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void addMethodBindings(MethodSpec.Builder result,ViewBindings bindings){\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "listenerPosition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 301,
      "startColumnNumber" : 35,
      "endLineNumber" : 301,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 52
      },
      "nodeContext" : "builder.add(\"p$L\",listenerPosition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 53
      },
      "nodeContext" : "builder.add(\"p$L\",listenerPosition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 300,
        "startColumnNumber" : 21,
        "endLineNumber" : 302,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  builder.add(\"p$L\",listenerPosition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 297,
        "startColumnNumber" : 14,
        "endLineNumber" : 302,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n  builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n}\n else {\n  builder.add(\"p$L\",listenerPosition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 585,
        "startLineNumber" : 289,
        "startColumnNumber" : 71,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0, count=parameters.size(); i < count; i++) {\n  if (i > 0) {\n    builder.add(\", \");\n  }\n  Parameter parameter=parameters.get(i);\n  int listenerPosition=parameter.getListenerPosition();\n  if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n    builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n  }\n else {\n    builder.add(\"p$L\",listenerPosition);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 285,
        "startColumnNumber" : 71,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 285,
        "startColumnNumber" : 10,
        "endLineNumber" : 305,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (MethodViewBinding binding : methodBindings.get(method)) {\n  builder.add(\"target.$L(\",binding.getName());\n  List<Parameter> parameters=binding.getParameters();\n  String[] listenerParameters=method.parameters();\n  for (int i=0, count=parameters.size(); i < count; i++) {\n    if (i > 0) {\n      builder.add(\", \");\n    }\n    Parameter parameter=parameters.get(i);\n    int listenerPosition=parameter.getListenerPosition();\n    if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n      builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n    }\n else {\n      builder.add(\"p$L\",listenerPosition);\n    }\n  }\n  builder.add(\");\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 284,
        "startColumnNumber" : 48,
        "endLineNumber" : 306,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 284,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (methodBindings.containsKey(method)) {\n  for (  MethodViewBinding binding : methodBindings.get(method)) {\n    builder.add(\"target.$L(\",binding.getName());\n    List<Parameter> parameters=binding.getParameters();\n    String[] listenerParameters=method.parameters();\n    for (int i=0, count=parameters.size(); i < count; i++) {\n      if (i > 0) {\n        builder.add(\", \");\n      }\n      Parameter parameter=parameters.get(i);\n      int listenerPosition=parameter.getListenerPosition();\n      if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n        builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n      }\n else {\n        builder.add(\"p$L\",listenerPosition);\n      }\n    }\n    builder.add(\");\\n\");\n  }\n}\n else if (hasReturnType) {\n  builder.add(\"$L;\\n\",method.defaultReturn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 268,
        "startColumnNumber" : 65,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 311,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (ListenerMethod method : getListenerMethods(listener)) {\n  MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n  String[] parameterTypes=method.parameters();\n  for (int i=0, count=parameterTypes.length; i < count; i++) {\n    callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n  }\n  boolean hasReturnType=!\"void\".equals(method.returnType());\n  CodeBlock.Builder builder=CodeBlock.builder();\n  if (hasReturnType) {\n    builder.add(\"return \");\n  }\n  if (methodBindings.containsKey(method)) {\n    for (    MethodViewBinding binding : methodBindings.get(method)) {\n      builder.add(\"target.$L(\",binding.getName());\n      List<Parameter> parameters=binding.getParameters();\n      String[] listenerParameters=method.parameters();\n      for (int i=0, count=parameters.size(); i < count; i++) {\n        if (i > 0) {\n          builder.add(\", \");\n        }\n        Parameter parameter=parameters.get(i);\n        int listenerPosition=parameter.getListenerPosition();\n        if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n          builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n        }\n else {\n          builder.add(\"p$L\",listenerPosition);\n        }\n      }\n      builder.add(\");\\n\");\n    }\n  }\n else   if (hasReturnType) {\n    builder.add(\"$L;\\n\",method.defaultReturn());\n  }\n  callbackMethod.addCode(builder.build());\n  callback.addMethod(callbackMethod.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 255,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2478,
        "startLineNumber" : 261,
        "startColumnNumber" : 42,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2597,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n  ListenerClass listener=e.getKey();\n  Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n  TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n  for (  ListenerMethod method : getListenerMethods(listener)) {\n    MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n    String[] parameterTypes=method.parameters();\n    for (int i=0, count=parameterTypes.length; i < count; i++) {\n      callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n    }\n    boolean hasReturnType=!\"void\".equals(method.returnType());\n    CodeBlock.Builder builder=CodeBlock.builder();\n    if (hasReturnType) {\n      builder.add(\"return \");\n    }\n    if (methodBindings.containsKey(method)) {\n      for (      MethodViewBinding binding : methodBindings.get(method)) {\n        builder.add(\"target.$L(\",binding.getName());\n        List<Parameter> parameters=binding.getParameters();\n        String[] listenerParameters=method.parameters();\n        for (int i=0, count=parameters.size(); i < count; i++) {\n          if (i > 0) {\n            builder.add(\", \");\n          }\n          Parameter parameter=parameters.get(i);\n          int listenerPosition=parameter.getListenerPosition();\n          if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n            builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n          }\n else {\n            builder.add(\"p$L\",listenerPosition);\n          }\n        }\n        builder.add(\");\\n\");\n      }\n    }\n else     if (hasReturnType) {\n      builder.add(\"$L;\\n\",method.defaultReturn());\n    }\n    callbackMethod.addCode(builder.build());\n    callback.addMethod(callbackMethod.build());\n  }\n  if (!VIEW_TYPE.equals(listener.targetType())) {\n    result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n  }\n else {\n    result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 359,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3103,
        "startLineNumber" : 247,
        "startColumnNumber" : 83,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 411,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 324,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void addMethodBindings(MethodSpec.Builder result,ViewBindings bindings){\n  Map<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> classMethodBindings=bindings.getMethodBindings();\n  if (classMethodBindings.isEmpty()) {\n    return;\n  }\n  boolean needsNullChecked=bindings.getRequiredBindings().isEmpty();\n  if (needsNullChecked) {\n    result.beginControlFlow(\"if (view != null)\");\n  }\n  for (  Map.Entry<ListenerClass,Map<ListenerMethod,Set<MethodViewBinding>>> e : classMethodBindings.entrySet()) {\n    ListenerClass listener=e.getKey();\n    Map<ListenerMethod,Set<MethodViewBinding>> methodBindings=e.getValue();\n    TypeSpec.Builder callback=TypeSpec.anonymousClassBuilder(\"\").superclass(ClassName.bestGuess(listener.type()));\n    for (    ListenerMethod method : getListenerMethods(listener)) {\n      MethodSpec.Builder callbackMethod=MethodSpec.methodBuilder(method.name()).addAnnotation(Override.class).addModifiers(PUBLIC).returns(bestGuess(method.returnType()));\n      String[] parameterTypes=method.parameters();\n      for (int i=0, count=parameterTypes.length; i < count; i++) {\n        callbackMethod.addParameter(bestGuess(parameterTypes[i]),\"p\" + i);\n      }\n      boolean hasReturnType=!\"void\".equals(method.returnType());\n      CodeBlock.Builder builder=CodeBlock.builder();\n      if (hasReturnType) {\n        builder.add(\"return \");\n      }\n      if (methodBindings.containsKey(method)) {\n        for (        MethodViewBinding binding : methodBindings.get(method)) {\n          builder.add(\"target.$L(\",binding.getName());\n          List<Parameter> parameters=binding.getParameters();\n          String[] listenerParameters=method.parameters();\n          for (int i=0, count=parameters.size(); i < count; i++) {\n            if (i > 0) {\n              builder.add(\", \");\n            }\n            Parameter parameter=parameters.get(i);\n            int listenerPosition=parameter.getListenerPosition();\n            if (parameter.requiresCast(listenerParameters[listenerPosition])) {\n              builder.add(\"finder.<$T>castParam(p$L, $S, $L, $S, $L)\\n\",parameter.getType(),listenerPosition,method.name(),listenerPosition,binding.getName(),i);\n            }\n else {\n              builder.add(\"p$L\",listenerPosition);\n            }\n          }\n          builder.add(\");\\n\");\n        }\n      }\n else       if (hasReturnType) {\n        builder.add(\"$L;\\n\",method.defaultReturn());\n      }\n      callbackMethod.addCode(builder.build());\n      callback.addMethod(callbackMethod.build());\n    }\n    if (!VIEW_TYPE.equals(listener.targetType())) {\n      result.addStatement(\"(($T) view).$L($L)\",bestGuess(listener.targetType()),listener.setter(),callback.build());\n    }\n else {\n      result.addStatement(\"view.$L($L)\",listener.setter(),callback.build());\n    }\n  }\n  if (needsNullChecked) {\n    result.endControlFlow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 53
      },
      "nodeContext" : "builder.add(\"p$L\",listenerPosition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 297,
    "startColumnNumber" : 60,
    "endLineNumber" : 297,
    "endColumnNumber" : 76
  }, {
    "charLength" : 16,
    "startLineNumber" : 299,
    "startColumnNumber" : 20,
    "endLineNumber" : 299,
    "endColumnNumber" : 36
  }, {
    "charLength" : 16,
    "startLineNumber" : 299,
    "startColumnNumber" : 53,
    "endLineNumber" : 299,
    "endColumnNumber" : 69
  }, {
    "charLength" : 16,
    "startLineNumber" : 301,
    "startColumnNumber" : 35,
    "endLineNumber" : 301,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}