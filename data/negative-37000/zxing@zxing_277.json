{
  "id" : 277,
  "expression" : "width >> 1",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/detector/Detector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "width >> 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 222,
      "startColumnNumber" : 20,
      "endLineNumber" : 222,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 30
      },
      "nodeContext" : "halfWidth=width >> 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 222,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int halfWidth=width >> 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 219,
        "startColumnNumber" : 84,
        "endLineNumber" : 284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int height=matrix.getHeight();\n  int width=matrix.getWidth();\n  int halfWidth=width >> 1;\n  ResultPoint[] result=new ResultPoint[8];\n  boolean found=false;\n  int[] counters=new int[START_PATTERN_REVERSE.length];\n  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));\n  for (int i=height - 1; i > 0; i-=rowStep) {\n    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);\n    if (loc != null) {\n      result[0]=new ResultPoint(loc[1],i);\n      result[4]=new ResultPoint(loc[0],i);\n      found=true;\n      break;\n    }\n  }\n  if (found) {\n    found=false;\n    for (int i=0; i < height; i+=rowStep) {\n      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[1]=new ResultPoint(loc[1],i);\n        result[5]=new ResultPoint(loc[0],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  counters=new int[STOP_PATTERN_REVERSE.length];\n  if (found) {\n    found=false;\n    for (int i=height - 1; i > 0; i-=rowStep) {\n      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[2]=new ResultPoint(loc[0],i);\n        result[6]=new ResultPoint(loc[1],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  if (found) {\n    found=false;\n    for (int i=0; i < height; i+=rowStep) {\n      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[3]=new ResultPoint(loc[0],i);\n        result[7]=new ResultPoint(loc[1],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  return found ? result : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3015,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Locate the vertices and the codewords area of a black blob using the Start and Stop patterns as locators. This assumes that the image is rotated 180 degrees and if it locates the start and stop patterns at it will re-map the vertices for a 0 degree rotation. TODO: Change assumption about barcode location.\n * @param matrix the scanned barcode image.\n * @return an array containing the vertices:vertices[0] x, y top left barcode vertices[1] x, y bottom left barcode vertices[2] x, y top right barcode vertices[3] x, y bottom right barcode vertices[4] x, y top left codeword area vertices[5] x, y bottom left codeword area vertices[6] x, y top right codeword area vertices[7] x, y bottom right codeword area\n */\nprivate static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){\n  int height=matrix.getHeight();\n  int width=matrix.getWidth();\n  int halfWidth=width >> 1;\n  ResultPoint[] result=new ResultPoint[8];\n  boolean found=false;\n  int[] counters=new int[START_PATTERN_REVERSE.length];\n  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));\n  for (int i=height - 1; i > 0; i-=rowStep) {\n    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);\n    if (loc != null) {\n      result[0]=new ResultPoint(loc[1],i);\n      result[4]=new ResultPoint(loc[0],i);\n      found=true;\n      break;\n    }\n  }\n  if (found) {\n    found=false;\n    for (int i=0; i < height; i+=rowStep) {\n      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[1]=new ResultPoint(loc[1],i);\n        result[5]=new ResultPoint(loc[0],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  counters=new int[STOP_PATTERN_REVERSE.length];\n  if (found) {\n    found=false;\n    for (int i=height - 1; i > 0; i-=rowStep) {\n      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[2]=new ResultPoint(loc[0],i);\n        result[6]=new ResultPoint(loc[1],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  if (found) {\n    found=false;\n    for (int i=0; i < height; i+=rowStep) {\n      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);\n      if (loc != null) {\n        result[3]=new ResultPoint(loc[0],i);\n        result[7]=new ResultPoint(loc[1],i);\n        found=true;\n        break;\n      }\n    }\n  }\n  return found ? result : null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 222,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int halfWidth=width >> 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 222,
    "startColumnNumber" : 20,
    "endLineNumber" : 222,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}