{
  "id" : 66,
  "expression" : "sqlText",
  "projectName" : "mybatis@mybatis-3",
  "commitID" : "a84ece4f08bb04fa6a5babd800113fe7338a9880",
  "filePath" : "/src/test/java/com/ibatis/sqlmap/engine/builder/DynamicSqlSource.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 56,
      "startColumnNumber" : 10,
      "endLineNumber" : 56,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 56,
        "startColumnNumber" : 10,
        "endLineNumber" : 56,
        "endColumnNumber" : 57
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 56,
        "startColumnNumber" : 10,
        "endLineNumber" : 56,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 54,
        "startColumnNumber" : 31,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sqlText=new SqlText();\n  sqlText.setPostParseRequired(postParseRequired);\n  sqlText.setText(data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (postParseRequired) {\n  sqlText=new SqlText();\n  sqlText.setPostParseRequired(postParseRequired);\n  sqlText.setText(data);\n}\n else {\n  InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n  sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n  sqlText.setPostParseRequired(postParseRequired);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n else if (\"include\".equals(nodeName)) {\n  String refid=child.getStringAttribute(\"refid\");\n  XNode includeNode=configParser.getSqlFragment(refid);\n  if (includeNode == null) {\n    String nsrefid=mapParser.applyNamespace(refid);\n    includeNode=configParser.getSqlFragment(nsrefid);\n    if (includeNode == null) {\n      throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n    }\n  }\n  parseDynamicTags(includeNode,dynamic,postParseRequired);\n}\n else {\n  SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n  if (handler != null) {\n    SqlTag tag=new SqlTag();\n    tag.setName(nodeName);\n    tag.setHandler(handler);\n    tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n    tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n    tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n    tag.setOpenAttr(child.getStringAttribute(\"open\"));\n    tag.setCloseAttr(child.getStringAttribute(\"close\"));\n    tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n    tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n    tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n    if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n      tag.setPropertyAttr(\"_collection\");\n    }\n    if (dynamic instanceof SqlTag) {\n      SqlTag parentSqlTag=(SqlTag)dynamic;\n      if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n else     if (dynamic instanceof DynamicSql) {\n      if (tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n    dynamic.addChild(tag);\n    if (child.getNode().hasChildNodes()) {\n      parseDynamicTags(child,tag,tag.isPostParseRequired());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 338,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3064,
        "startLineNumber" : 47,
        "startColumnNumber" : 51,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3111,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < children.getLength(); i++) {\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3177,
        "startLineNumber" : 45,
        "startColumnNumber" : 94,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 385,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseDynamicTags(XNode node,DynamicParent dynamic,boolean postParseRequired){\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 56,
        "startColumnNumber" : 10,
        "endLineNumber" : 56,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.ibatis.sqlmap.engine.mapping.sql.SqlText"
  }, {
    "nodeContext" : "sqlText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 57,
      "startColumnNumber" : 10,
      "endLineNumber" : 57,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 57,
        "startColumnNumber" : 10,
        "endLineNumber" : 57,
        "endColumnNumber" : 31
      },
      "nodeContext" : "sqlText.setText(data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 57,
        "startColumnNumber" : 10,
        "endLineNumber" : 57,
        "endColumnNumber" : 32
      },
      "nodeContext" : "sqlText.setText(data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 54,
        "startColumnNumber" : 31,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sqlText=new SqlText();\n  sqlText.setPostParseRequired(postParseRequired);\n  sqlText.setText(data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (postParseRequired) {\n  sqlText=new SqlText();\n  sqlText.setPostParseRequired(postParseRequired);\n  sqlText.setText(data);\n}\n else {\n  InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n  sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n  sqlText.setPostParseRequired(postParseRequired);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n else if (\"include\".equals(nodeName)) {\n  String refid=child.getStringAttribute(\"refid\");\n  XNode includeNode=configParser.getSqlFragment(refid);\n  if (includeNode == null) {\n    String nsrefid=mapParser.applyNamespace(refid);\n    includeNode=configParser.getSqlFragment(nsrefid);\n    if (includeNode == null) {\n      throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n    }\n  }\n  parseDynamicTags(includeNode,dynamic,postParseRequired);\n}\n else {\n  SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n  if (handler != null) {\n    SqlTag tag=new SqlTag();\n    tag.setName(nodeName);\n    tag.setHandler(handler);\n    tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n    tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n    tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n    tag.setOpenAttr(child.getStringAttribute(\"open\"));\n    tag.setCloseAttr(child.getStringAttribute(\"close\"));\n    tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n    tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n    tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n    if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n      tag.setPropertyAttr(\"_collection\");\n    }\n    if (dynamic instanceof SqlTag) {\n      SqlTag parentSqlTag=(SqlTag)dynamic;\n      if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n else     if (dynamic instanceof DynamicSql) {\n      if (tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n    dynamic.addChild(tag);\n    if (child.getNode().hasChildNodes()) {\n      parseDynamicTags(child,tag,tag.isPostParseRequired());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 338,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3064,
        "startLineNumber" : 47,
        "startColumnNumber" : 51,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3111,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < children.getLength(); i++) {\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3177,
        "startLineNumber" : 45,
        "startColumnNumber" : 94,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 385,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseDynamicTags(XNode node,DynamicParent dynamic,boolean postParseRequired){\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 57,
        "startColumnNumber" : 10,
        "endLineNumber" : 57,
        "endColumnNumber" : 32
      },
      "nodeContext" : "sqlText.setText(data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.ibatis.sqlmap.engine.mapping.sql.SqlText"
  }, {
    "nodeContext" : "sqlText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 61,
      "startColumnNumber" : 10,
      "endLineNumber" : 61,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 57
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 58,
        "startColumnNumber" : 15,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n  sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n  sqlText.setPostParseRequired(postParseRequired);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (postParseRequired) {\n  sqlText=new SqlText();\n  sqlText.setPostParseRequired(postParseRequired);\n  sqlText.setText(data);\n}\n else {\n  InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n  sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n  sqlText.setPostParseRequired(postParseRequired);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n else if (\"include\".equals(nodeName)) {\n  String refid=child.getStringAttribute(\"refid\");\n  XNode includeNode=configParser.getSqlFragment(refid);\n  if (includeNode == null) {\n    String nsrefid=mapParser.applyNamespace(refid);\n    includeNode=configParser.getSqlFragment(nsrefid);\n    if (includeNode == null) {\n      throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n    }\n  }\n  parseDynamicTags(includeNode,dynamic,postParseRequired);\n}\n else {\n  SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n  if (handler != null) {\n    SqlTag tag=new SqlTag();\n    tag.setName(nodeName);\n    tag.setHandler(handler);\n    tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n    tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n    tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n    tag.setOpenAttr(child.getStringAttribute(\"open\"));\n    tag.setCloseAttr(child.getStringAttribute(\"close\"));\n    tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n    tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n    tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n    if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n      tag.setPropertyAttr(\"_collection\");\n    }\n    if (dynamic instanceof SqlTag) {\n      SqlTag parentSqlTag=(SqlTag)dynamic;\n      if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n else     if (dynamic instanceof DynamicSql) {\n      if (tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n    dynamic.addChild(tag);\n    if (child.getNode().hasChildNodes()) {\n      parseDynamicTags(child,tag,tag.isPostParseRequired());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 338,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3064,
        "startLineNumber" : 47,
        "startColumnNumber" : 51,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3111,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < children.getLength(); i++) {\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3177,
        "startLineNumber" : 45,
        "startColumnNumber" : 94,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 385,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseDynamicTags(XNode node,DynamicParent dynamic,boolean postParseRequired){\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sqlText.setPostParseRequired(postParseRequired);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.ibatis.sqlmap.engine.mapping.sql.SqlText"
  }, {
    "nodeContext" : "sqlText",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 63,
      "startColumnNumber" : 25,
      "endLineNumber" : 63,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 33
      },
      "nodeContext" : "dynamic.addChild(sqlText)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 34
      },
      "nodeContext" : "dynamic.addChild(sqlText);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n  String data=child.getStringBody(\"\");\n  SqlText sqlText;\n  if (postParseRequired) {\n    sqlText=new SqlText();\n    sqlText.setPostParseRequired(postParseRequired);\n    sqlText.setText(data);\n  }\n else {\n    InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n    sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n    sqlText.setPostParseRequired(postParseRequired);\n  }\n  dynamic.addChild(sqlText);\n}\n else if (\"include\".equals(nodeName)) {\n  String refid=child.getStringAttribute(\"refid\");\n  XNode includeNode=configParser.getSqlFragment(refid);\n  if (includeNode == null) {\n    String nsrefid=mapParser.applyNamespace(refid);\n    includeNode=configParser.getSqlFragment(nsrefid);\n    if (includeNode == null) {\n      throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n    }\n  }\n  parseDynamicTags(includeNode,dynamic,postParseRequired);\n}\n else {\n  SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n  if (handler != null) {\n    SqlTag tag=new SqlTag();\n    tag.setName(nodeName);\n    tag.setHandler(handler);\n    tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n    tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n    tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n    tag.setOpenAttr(child.getStringAttribute(\"open\"));\n    tag.setCloseAttr(child.getStringAttribute(\"close\"));\n    tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n    tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n    tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n    if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n      tag.setPropertyAttr(\"_collection\");\n    }\n    if (dynamic instanceof SqlTag) {\n      SqlTag parentSqlTag=(SqlTag)dynamic;\n      if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n else     if (dynamic instanceof DynamicSql) {\n      if (tag.getHandler() instanceof IterateTagHandler) {\n        tag.setPostParseRequired(true);\n      }\n    }\n    dynamic.addChild(tag);\n    if (child.getNode().hasChildNodes()) {\n      parseDynamicTags(child,tag,tag.isPostParseRequired());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 338,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3064,
        "startLineNumber" : 47,
        "startColumnNumber" : 51,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3111,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < children.getLength(); i++) {\n  XNode child=node.newXNode(children.item(i));\n  String nodeName=child.getNode().getNodeName();\n  if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n    String data=child.getStringBody(\"\");\n    SqlText sqlText;\n    if (postParseRequired) {\n      sqlText=new SqlText();\n      sqlText.setPostParseRequired(postParseRequired);\n      sqlText.setText(data);\n    }\n else {\n      InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n      sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n      sqlText.setPostParseRequired(postParseRequired);\n    }\n    dynamic.addChild(sqlText);\n  }\n else   if (\"include\".equals(nodeName)) {\n    String refid=child.getStringAttribute(\"refid\");\n    XNode includeNode=configParser.getSqlFragment(refid);\n    if (includeNode == null) {\n      String nsrefid=mapParser.applyNamespace(refid);\n      includeNode=configParser.getSqlFragment(nsrefid);\n      if (includeNode == null) {\n        throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n      }\n    }\n    parseDynamicTags(includeNode,dynamic,postParseRequired);\n  }\n else {\n    SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n    if (handler != null) {\n      SqlTag tag=new SqlTag();\n      tag.setName(nodeName);\n      tag.setHandler(handler);\n      tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n      tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n      tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n      tag.setOpenAttr(child.getStringAttribute(\"open\"));\n      tag.setCloseAttr(child.getStringAttribute(\"close\"));\n      tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n      tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n      tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n      if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n        tag.setPropertyAttr(\"_collection\");\n      }\n      if (dynamic instanceof SqlTag) {\n        SqlTag parentSqlTag=(SqlTag)dynamic;\n        if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n else       if (dynamic instanceof DynamicSql) {\n        if (tag.getHandler() instanceof IterateTagHandler) {\n          tag.setPostParseRequired(true);\n        }\n      }\n      dynamic.addChild(tag);\n      if (child.getNode().hasChildNodes()) {\n        parseDynamicTags(child,tag,tag.isPostParseRequired());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 374,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3177,
        "startLineNumber" : 45,
        "startColumnNumber" : 94,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 385,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseDynamicTags(XNode node,DynamicParent dynamic,boolean postParseRequired){\n  NodeList children=node.getNode().getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    XNode child=node.newXNode(children.item(i));\n    String nodeName=child.getNode().getNodeName();\n    if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n      String data=child.getStringBody(\"\");\n      SqlText sqlText;\n      if (postParseRequired) {\n        sqlText=new SqlText();\n        sqlText.setPostParseRequired(postParseRequired);\n        sqlText.setText(data);\n      }\n else {\n        InlineParameterMapParser inlineParameterMapParser=new InlineParameterMapParser(configuration);\n        sqlText=inlineParameterMapParser.parseInlineParameterMap(data);\n        sqlText.setPostParseRequired(postParseRequired);\n      }\n      dynamic.addChild(sqlText);\n    }\n else     if (\"include\".equals(nodeName)) {\n      String refid=child.getStringAttribute(\"refid\");\n      XNode includeNode=configParser.getSqlFragment(refid);\n      if (includeNode == null) {\n        String nsrefid=mapParser.applyNamespace(refid);\n        includeNode=configParser.getSqlFragment(nsrefid);\n        if (includeNode == null) {\n          throw new RuntimeException(\"Could not find SQL statement to include with refid '\" + refid + \"'\");\n        }\n      }\n      parseDynamicTags(includeNode,dynamic,postParseRequired);\n    }\n else {\n      SqlTagHandler handler=SqlTagHandlerFactory.getSqlTagHandler(nodeName);\n      if (handler != null) {\n        SqlTag tag=new SqlTag();\n        tag.setName(nodeName);\n        tag.setHandler(handler);\n        tag.setPrependAttr(child.getStringAttribute(\"prepend\"));\n        tag.setPropertyAttr(child.getStringAttribute(\"property\"));\n        tag.setRemoveFirstPrepend(child.getStringAttribute(\"removeFirstPrepend\"));\n        tag.setOpenAttr(child.getStringAttribute(\"open\"));\n        tag.setCloseAttr(child.getStringAttribute(\"close\"));\n        tag.setComparePropertyAttr(child.getStringAttribute(\"compareProperty\"));\n        tag.setCompareValueAttr(child.getStringAttribute(\"compareValue\"));\n        tag.setConjunctionAttr(child.getStringAttribute(\"conjunction\"));\n        if (handler instanceof IterateTagHandler && (tag.getPropertyAttr() == null || \"\".equals(tag.getPropertyAttr()))) {\n          tag.setPropertyAttr(\"_collection\");\n        }\n        if (dynamic instanceof SqlTag) {\n          SqlTag parentSqlTag=(SqlTag)dynamic;\n          if (parentSqlTag.isPostParseRequired() || tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n else         if (dynamic instanceof DynamicSql) {\n          if (tag.getHandler() instanceof IterateTagHandler) {\n            tag.setPostParseRequired(true);\n          }\n        }\n        dynamic.addChild(tag);\n        if (child.getNode().hasChildNodes()) {\n          parseDynamicTags(child,tag,tag.isPostParseRequired());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 34
      },
      "nodeContext" : "dynamic.addChild(sqlText);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.ibatis.sqlmap.engine.mapping.sql.SqlText"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 56,
    "startColumnNumber" : 10,
    "endLineNumber" : 56,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 57,
    "startColumnNumber" : 10,
    "endLineNumber" : 57,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 61,
    "startColumnNumber" : 10,
    "endLineNumber" : 61,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 63,
    "startColumnNumber" : 25,
    "endLineNumber" : 63,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}