{
  "id" : 36,
  "expression" : "input.canDropItem()",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/graphics/OverlayRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "input.canDropItem()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 179,
      "startColumnNumber" : 15,
      "endLineNumber" : 179,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 179,
        "startColumnNumber" : 15,
        "endLineNumber" : 179,
        "endColumnNumber" : 50
      },
      "nodeContext" : "input.canDropItem() && tile != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 179,
        "startColumnNumber" : 15,
        "endLineNumber" : 179,
        "endColumnNumber" : 86
      },
      "nodeContext" : "input.canDropItem() && tile != null && tile.interactable(player.team())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 179,
        "startColumnNumber" : 15,
        "endLineNumber" : 179,
        "endColumnNumber" : 175
      },
      "nodeContext" : "input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 179,
        "startColumnNumber" : 15,
        "endLineNumber" : 179,
        "endColumnNumber" : 217
      },
      "nodeContext" : "input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 179,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)) {\n  Lines.stroke(3f,Pal.gray);\n  Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 3 + Mathf.absin(Time.time,5f,1f));\n  Lines.stroke(1f,Pal.place);\n  Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 2 + Mathf.absin(Time.time,5f,1f));\n  Draw.reset();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 170,
        "startColumnNumber" : 34,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Vec2 v=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n  float size=8;\n  Draw.rect(player.unit().item().icon(Cicon.medium),v.x,v.y,size,size);\n  Draw.color(Pal.accent);\n  Lines.circle(v.x,v.y,6 + Mathf.absin(Time.time,5f,1f));\n  Draw.reset();\n  Building tile=world.buildWorld(v.x,v.y);\n  if (input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)) {\n    Lines.stroke(3f,Pal.gray);\n    Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 3 + Mathf.absin(Time.time,5f,1f));\n    Lines.stroke(1f,Pal.place);\n    Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 2 + Mathf.absin(Time.time,5f,1f));\n    Draw.reset();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1010,
        "startLineNumber" : 170,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (input.isDroppingItem()) {\n  Vec2 v=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n  float size=8;\n  Draw.rect(player.unit().item().icon(Cicon.medium),v.x,v.y,size,size);\n  Draw.color(Pal.accent);\n  Lines.circle(v.x,v.y,6 + Mathf.absin(Time.time,5f,1f));\n  Draw.reset();\n  Building tile=world.buildWorld(v.x,v.y);\n  if (input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)) {\n    Lines.stroke(3f,Pal.gray);\n    Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 3 + Mathf.absin(Time.time,5f,1f));\n    Lines.stroke(1f,Pal.place);\n    Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 2 + Mathf.absin(Time.time,5f,1f));\n    Draw.reset();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 216,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6811,
        "startLineNumber" : 38,
        "startColumnNumber" : 25,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!player.dead() && ui.hudfrag.shown) {\n    if (Core.settings.getBool(\"playerindicators\")) {\n      for (      Player player : Groups.player) {\n        if (Vars.player != player && Vars.player.team() == player.team()) {\n          if (!rect.setSize(Core.camera.width * 0.9f,Core.camera.height * 0.9f).setCenter(Core.camera.position.x,Core.camera.position.y).contains(player.x,player.y)) {\n            Tmp.v1.set(player).sub(Vars.player).setLength(indicatorLength);\n            Lines.stroke(2f,Vars.player.team().color);\n            Lines.lineAngle(Vars.player.x + Tmp.v1.x,Vars.player.y + Tmp.v1.y,Tmp.v1.angle(),4f);\n            Draw.reset();\n          }\n        }\n      }\n    }\n    if (Core.settings.getBool(\"indicators\")) {\n      Groups.unit.each(unit -> {\n        if (!unit.isLocal() && unit.team != player.team() && !rect.setSize(Core.camera.width * 0.9f,Core.camera.height * 0.9f).setCenter(Core.camera.position.x,Core.camera.position.y).contains(unit.x,unit.y)) {\n          Tmp.v1.set(unit.x,unit.y).sub(player).setLength(indicatorLength);\n          Lines.stroke(1f,unit.team().color);\n          Lines.lineAngle(player.x + Tmp.v1.x,player.y + Tmp.v1.y,Tmp.v1.angle(),3f);\n          Draw.reset();\n        }\n      }\n);\n    }\n  }\n  if (player.dead())   return;\n  InputHandler input=control.input;\n  Unit select=input.selectedUnit();\n  if (!Core.input.keyDown(Binding.control))   select=null;\n  unitFade=Mathf.lerpDelta(unitFade,Mathf.num(select != null),0.1f);\n  if (select != null)   lastSelect=select;\n  if (select == null)   select=lastSelect;\n  if (select != null && select.isAI()) {\n    Draw.mixcol(Pal.accent,1f);\n    Draw.alpha(unitFade);\n    if (select instanceof BlockUnitc) {\n      Fill.square(select.x,select.y,((BlockUnitc)select).tile().block.size * tilesize / 2f);\n    }\n else {\n      Draw.rect(select.type.icon(Cicon.full),select.x(),select.y(),select.rotation() - 90);\n    }\n    for (int i=0; i < 4; i++) {\n      float rot=i * 90f + 45f + (-Time.time) % 360f;\n      float length=select.hitSize() * 1.5f + (unitFade * 2.5f);\n      Draw.rect(\"select-arrow\",select.x + Angles.trnsx(rot,length),select.y + Angles.trnsy(rot,length),length / 1.9f,length / 1.9f,rot - 135f);\n    }\n    Draw.reset();\n  }\n  if (input.frag.config.isShown()) {\n    Building tile=input.frag.config.getSelectedTile();\n    tile.drawConfigure();\n  }\n  input.drawTop();\n  buildFade=Mathf.lerpDelta(buildFade,input.isPlacing() || input.isUsingSchematic() ? 1f : 0f,0.06f);\n  Draw.reset();\n  Lines.stroke(buildFade * 2f);\n  if (buildFade > 0.005f) {\n    state.teams.eachEnemyCore(player.team(),core -> {\n      float dst=core.dst(player);\n      if (dst < state.rules.enemyCoreBuildRadius * 2.2f) {\n        Draw.color(Color.darkGray);\n        Lines.circle(core.x,core.y - 2,state.rules.enemyCoreBuildRadius);\n        Draw.color(Pal.accent,core.team.color,0.5f + Mathf.absin(Time.time,10f,0.5f));\n        Lines.circle(core.x,core.y,state.rules.enemyCoreBuildRadius);\n      }\n    }\n);\n  }\n  Lines.stroke(2f);\n  Draw.color(Color.gray,Color.lightGray,Mathf.absin(Time.time,8f,1f));\n  if (state.hasSpawns()) {\n    for (    Tile tile : spawner.getSpawns()) {\n      if (tile.within(player.x,player.y,state.rules.dropZoneRadius + spawnerMargin)) {\n        Draw.alpha(Mathf.clamp(1f - (player.dst(tile) - state.rules.dropZoneRadius) / spawnerMargin));\n        Lines.dashCircle(tile.worldx(),tile.worldy(),state.rules.dropZoneRadius);\n      }\n    }\n  }\n  Draw.reset();\n  if (input.block == null && !Core.scene.hasMouse()) {\n    Vec2 vec=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n    Building build=world.buildWorld(vec.x,vec.y);\n    if (build != null && build.team == player.team()) {\n      build.drawSelect();\n      if (!build.enabled && build.block.drawDisabled) {\n        build.drawDisabled();\n      }\n      if (Core.input.keyDown(Binding.rotateplaced) && build.block.rotate && build.block.quickRotate&& build.interactable(player.team())) {\n        control.input.drawArrow(build.block,build.tileX(),build.tileY(),build.rotation,true);\n        Draw.color(Pal.accent,0.3f + Mathf.absin(4f,0.2f));\n        Fill.square(build.x,build.y,build.block.size * tilesize / 2f);\n        Draw.color();\n      }\n    }\n  }\n  input.drawOverSelect();\n  if (ui.hudfrag.blockfrag.hover() instanceof   Unit unit && unit.controller() instanceof   LogicAI ai && ai.controller instanceof   Building build&& build.isValid()) {\n    Drawf.square(build.x,build.y,build.block.size * tilesize / 2f + 2f);\n    if (!unit.within(build,unit.hitSize * 2f)) {\n      Drawf.arrow(unit.x,unit.y,build.x,build.y,unit.hitSize * 2f,4f);\n    }\n  }\n  if (input.isDroppingItem()) {\n    Vec2 v=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n    float size=8;\n    Draw.rect(player.unit().item().icon(Cicon.medium),v.x,v.y,size,size);\n    Draw.color(Pal.accent);\n    Lines.circle(v.x,v.y,6 + Mathf.absin(Time.time,5f,1f));\n    Draw.reset();\n    Building tile=world.buildWorld(v.x,v.y);\n    if (input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)) {\n      Lines.stroke(3f,Pal.gray);\n      Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 3 + Mathf.absin(Time.time,5f,1f));\n      Lines.stroke(1f,Pal.place);\n      Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 2 + Mathf.absin(Time.time,5f,1f));\n      Draw.reset();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1231,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6832,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void drawTop(){\n  if (!player.dead() && ui.hudfrag.shown) {\n    if (Core.settings.getBool(\"playerindicators\")) {\n      for (      Player player : Groups.player) {\n        if (Vars.player != player && Vars.player.team() == player.team()) {\n          if (!rect.setSize(Core.camera.width * 0.9f,Core.camera.height * 0.9f).setCenter(Core.camera.position.x,Core.camera.position.y).contains(player.x,player.y)) {\n            Tmp.v1.set(player).sub(Vars.player).setLength(indicatorLength);\n            Lines.stroke(2f,Vars.player.team().color);\n            Lines.lineAngle(Vars.player.x + Tmp.v1.x,Vars.player.y + Tmp.v1.y,Tmp.v1.angle(),4f);\n            Draw.reset();\n          }\n        }\n      }\n    }\n    if (Core.settings.getBool(\"indicators\")) {\n      Groups.unit.each(unit -> {\n        if (!unit.isLocal() && unit.team != player.team() && !rect.setSize(Core.camera.width * 0.9f,Core.camera.height * 0.9f).setCenter(Core.camera.position.x,Core.camera.position.y).contains(unit.x,unit.y)) {\n          Tmp.v1.set(unit.x,unit.y).sub(player).setLength(indicatorLength);\n          Lines.stroke(1f,unit.team().color);\n          Lines.lineAngle(player.x + Tmp.v1.x,player.y + Tmp.v1.y,Tmp.v1.angle(),3f);\n          Draw.reset();\n        }\n      }\n);\n    }\n  }\n  if (player.dead())   return;\n  InputHandler input=control.input;\n  Unit select=input.selectedUnit();\n  if (!Core.input.keyDown(Binding.control))   select=null;\n  unitFade=Mathf.lerpDelta(unitFade,Mathf.num(select != null),0.1f);\n  if (select != null)   lastSelect=select;\n  if (select == null)   select=lastSelect;\n  if (select != null && select.isAI()) {\n    Draw.mixcol(Pal.accent,1f);\n    Draw.alpha(unitFade);\n    if (select instanceof BlockUnitc) {\n      Fill.square(select.x,select.y,((BlockUnitc)select).tile().block.size * tilesize / 2f);\n    }\n else {\n      Draw.rect(select.type.icon(Cicon.full),select.x(),select.y(),select.rotation() - 90);\n    }\n    for (int i=0; i < 4; i++) {\n      float rot=i * 90f + 45f + (-Time.time) % 360f;\n      float length=select.hitSize() * 1.5f + (unitFade * 2.5f);\n      Draw.rect(\"select-arrow\",select.x + Angles.trnsx(rot,length),select.y + Angles.trnsy(rot,length),length / 1.9f,length / 1.9f,rot - 135f);\n    }\n    Draw.reset();\n  }\n  if (input.frag.config.isShown()) {\n    Building tile=input.frag.config.getSelectedTile();\n    tile.drawConfigure();\n  }\n  input.drawTop();\n  buildFade=Mathf.lerpDelta(buildFade,input.isPlacing() || input.isUsingSchematic() ? 1f : 0f,0.06f);\n  Draw.reset();\n  Lines.stroke(buildFade * 2f);\n  if (buildFade > 0.005f) {\n    state.teams.eachEnemyCore(player.team(),core -> {\n      float dst=core.dst(player);\n      if (dst < state.rules.enemyCoreBuildRadius * 2.2f) {\n        Draw.color(Color.darkGray);\n        Lines.circle(core.x,core.y - 2,state.rules.enemyCoreBuildRadius);\n        Draw.color(Pal.accent,core.team.color,0.5f + Mathf.absin(Time.time,10f,0.5f));\n        Lines.circle(core.x,core.y,state.rules.enemyCoreBuildRadius);\n      }\n    }\n);\n  }\n  Lines.stroke(2f);\n  Draw.color(Color.gray,Color.lightGray,Mathf.absin(Time.time,8f,1f));\n  if (state.hasSpawns()) {\n    for (    Tile tile : spawner.getSpawns()) {\n      if (tile.within(player.x,player.y,state.rules.dropZoneRadius + spawnerMargin)) {\n        Draw.alpha(Mathf.clamp(1f - (player.dst(tile) - state.rules.dropZoneRadius) / spawnerMargin));\n        Lines.dashCircle(tile.worldx(),tile.worldy(),state.rules.dropZoneRadius);\n      }\n    }\n  }\n  Draw.reset();\n  if (input.block == null && !Core.scene.hasMouse()) {\n    Vec2 vec=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n    Building build=world.buildWorld(vec.x,vec.y);\n    if (build != null && build.team == player.team()) {\n      build.drawSelect();\n      if (!build.enabled && build.block.drawDisabled) {\n        build.drawDisabled();\n      }\n      if (Core.input.keyDown(Binding.rotateplaced) && build.block.rotate && build.block.quickRotate&& build.interactable(player.team())) {\n        control.input.drawArrow(build.block,build.tileX(),build.tileY(),build.rotation,true);\n        Draw.color(Pal.accent,0.3f + Mathf.absin(4f,0.2f));\n        Fill.square(build.x,build.y,build.block.size * tilesize / 2f);\n        Draw.color();\n      }\n    }\n  }\n  input.drawOverSelect();\n  if (ui.hudfrag.blockfrag.hover() instanceof   Unit unit && unit.controller() instanceof   LogicAI ai && ai.controller instanceof   Building build&& build.isValid()) {\n    Drawf.square(build.x,build.y,build.block.size * tilesize / 2f + 2f);\n    if (!unit.within(build,unit.hitSize * 2f)) {\n      Drawf.arrow(unit.x,unit.y,build.x,build.y,unit.hitSize * 2f,4f);\n    }\n  }\n  if (input.isDroppingItem()) {\n    Vec2 v=Core.input.mouseWorld(input.getMouseX(),input.getMouseY());\n    float size=8;\n    Draw.rect(player.unit().item().icon(Cicon.medium),v.x,v.y,size,size);\n    Draw.color(Pal.accent);\n    Lines.circle(v.x,v.y,6 + Mathf.absin(Time.time,5f,1f));\n    Draw.reset();\n    Building tile=world.buildWorld(v.x,v.y);\n    if (input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)) {\n      Lines.stroke(3f,Pal.gray);\n      Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 3 + Mathf.absin(Time.time,5f,1f));\n      Lines.stroke(1f,Pal.place);\n      Lines.square(tile.x,tile.y,tile.block.size * tilesize / 2f + 2 + Mathf.absin(Time.time,5f,1f));\n      Draw.reset();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1235,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 179,
        "startColumnNumber" : 15,
        "endLineNumber" : 179,
        "endColumnNumber" : 217
      },
      "nodeContext" : "input.canDropItem() && tile != null && tile.interactable(player.team()) && tile.acceptStack(player.unit().item(),player.unit().stack.amount,player.unit()) > 0 && player.within(tile,itemTransferRange)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 41,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 179,
    "startColumnNumber" : 15,
    "endLineNumber" : 179,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}