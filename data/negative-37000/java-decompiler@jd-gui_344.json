{
  "id" : 344,
  "expression" : "entryTypePath.length()",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/service/type/ClassFileTypeFactoryProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entryTypePath.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 74,
      "startColumnNumber" : 109,
      "endLineNumber" : 74,
      "endColumnNumber" : 131
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 74,
        "startColumnNumber" : 82,
        "endLineNumber" : 74,
        "endColumnNumber" : 131
      },
      "nodeContext" : "entry.getPath().length() - entryTypePath.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 74,
        "startColumnNumber" : 53,
        "endLineNumber" : 74,
        "endColumnNumber" : 132
      },
      "nodeContext" : "entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 74,
        "startColumnNumber" : 53,
        "endLineNumber" : 74,
        "endColumnNumber" : 151
      },
      "nodeContext" : "entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 74,
        "startColumnNumber" : 39,
        "endLineNumber" : 74,
        "endColumnNumber" : 151
      },
      "nodeContext" : "pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 74,
        "endColumnNumber" : 152
      },
      "nodeContext" : "String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 72,
        "startColumnNumber" : 73,
        "endLineNumber" : 96,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n  Container.Entry entryFound=null;\n  for (  Container.Entry e : entry.getParent().getChildren()) {\n    if (e.getPath().equals(pathToFound)) {\n      entryFound=e;\n      break;\n    }\n  }\n  if (entryFound == null)   return null;\n  entry=entryFound;\n  try (InputStream is2=entry.getInputStream()){\n    classReader=new ClassReader(is2);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n    return null;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1313,
        "startLineNumber" : 72,
        "startColumnNumber" : 28,
        "endLineNumber" : 96,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (entry.getPath().endsWith(entryTypePath)) {\n  String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n  Container.Entry entryFound=null;\n  for (  Container.Entry e : entry.getParent().getChildren()) {\n    if (e.getPath().equals(pathToFound)) {\n      entryFound=e;\n      break;\n    }\n  }\n  if (entryFound == null)   return null;\n  entry=entryFound;\n  try (InputStream is2=entry.getInputStream()){\n    classReader=new ClassReader(is2);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n    return null;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 71,
        "startColumnNumber" : 37,
        "endLineNumber" : 107,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (entry.getPath().endsWith(entryTypePath)) {\n    String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n    Container.Entry entryFound=null;\n    for (    Container.Entry e : entry.getParent().getChildren()) {\n      if (e.getPath().equals(pathToFound)) {\n        entryFound=e;\n        break;\n      }\n    }\n    if (entryFound == null)     return null;\n    entry=entryFound;\n    try (InputStream is2=entry.getInputStream()){\n      classReader=new ClassReader(is2);\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n      return null;\n    }\n    break;\n  }\n  int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n  if (firstPackageSeparatorIndex == -1) {\n    return null;\n  }\n  entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n  fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1978,
        "startLineNumber" : 71,
        "startColumnNumber" : 24,
        "endLineNumber" : 107,
        "endColumnNumber" : 25
      },
      "nodeContext" : "while (true) {\n  if (entry.getPath().endsWith(entryTypePath)) {\n    String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n    Container.Entry entryFound=null;\n    for (    Container.Entry e : entry.getParent().getChildren()) {\n      if (e.getPath().equals(pathToFound)) {\n        entryFound=e;\n        break;\n      }\n    }\n    if (entryFound == null)     return null;\n    entry=entryFound;\n    try (InputStream is2=entry.getInputStream()){\n      classReader=new ClassReader(is2);\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n      return null;\n    }\n    break;\n  }\n  int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n  if (firstPackageSeparatorIndex == -1) {\n    return null;\n  }\n  entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n  fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 145,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2244,
        "startLineNumber" : 66,
        "startColumnNumber" : 70,
        "endLineNumber" : 108,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String entryTypePath=classReader.getClassName() + \".class\";\n  String fragmentTypePath=fragment + \".class\";\n  while (true) {\n    if (entry.getPath().endsWith(entryTypePath)) {\n      String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n      Container.Entry entryFound=null;\n      for (      Container.Entry e : entry.getParent().getChildren()) {\n        if (e.getPath().equals(pathToFound)) {\n          entryFound=e;\n          break;\n        }\n      }\n      if (entryFound == null)       return null;\n      entry=entryFound;\n      try (InputStream is2=entry.getInputStream()){\n        classReader=new ClassReader(is2);\n      }\n catch (      IOException e) {\n        assert ExceptionUtil.printStackTrace(e);\n        return null;\n      }\n      break;\n    }\n    int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n    if (firstPackageSeparatorIndex == -1) {\n      return null;\n    }\n    entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n    fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2294,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!classReader.getClassName().equals(fragment)) {\n  String entryTypePath=classReader.getClassName() + \".class\";\n  String fragmentTypePath=fragment + \".class\";\n  while (true) {\n    if (entry.getPath().endsWith(entryTypePath)) {\n      String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n      Container.Entry entryFound=null;\n      for (      Container.Entry e : entry.getParent().getChildren()) {\n        if (e.getPath().equals(pathToFound)) {\n          entryFound=e;\n          break;\n        }\n      }\n      if (entryFound == null)       return null;\n      entry=entryFound;\n      try (InputStream is2=entry.getInputStream()){\n        classReader=new ClassReader(is2);\n      }\n catch (      IOException e) {\n        assert ExceptionUtil.printStackTrace(e);\n        return null;\n      }\n      break;\n    }\n    int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n    if (firstPackageSeparatorIndex == -1) {\n      return null;\n    }\n    entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n    fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2671,
        "startLineNumber" : 58,
        "startColumnNumber" : 67,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int index=fragment.indexOf('-');\n  if (index != -1) {\n    fragment=fragment.substring(0,index);\n  }\n  if (!classReader.getClassName().equals(fragment)) {\n    String entryTypePath=classReader.getClassName() + \".class\";\n    String fragmentTypePath=fragment + \".class\";\n    while (true) {\n      if (entry.getPath().endsWith(entryTypePath)) {\n        String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n        Container.Entry entryFound=null;\n        for (        Container.Entry e : entry.getParent().getChildren()) {\n          if (e.getPath().equals(pathToFound)) {\n            entryFound=e;\n            break;\n          }\n        }\n        if (entryFound == null)         return null;\n        entry=entryFound;\n        try (InputStream is2=entry.getInputStream()){\n          classReader=new ClassReader(is2);\n        }\n catch (        IOException e) {\n          assert ExceptionUtil.printStackTrace(e);\n          return null;\n        }\n        break;\n      }\n      int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n      if (firstPackageSeparatorIndex == -1) {\n        return null;\n      }\n      entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n      fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2722,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if ((fragment != null) && (fragment.length() > 0)) {\n  int index=fragment.indexOf('-');\n  if (index != -1) {\n    fragment=fragment.substring(0,index);\n  }\n  if (!classReader.getClassName().equals(fragment)) {\n    String entryTypePath=classReader.getClassName() + \".class\";\n    String fragmentTypePath=fragment + \".class\";\n    while (true) {\n      if (entry.getPath().endsWith(entryTypePath)) {\n        String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n        Container.Entry entryFound=null;\n        for (        Container.Entry e : entry.getParent().getChildren()) {\n          if (e.getPath().equals(pathToFound)) {\n            entryFound=e;\n            break;\n          }\n        }\n        if (entryFound == null)         return null;\n        entry=entryFound;\n        try (InputStream is2=entry.getInputStream()){\n          classReader=new ClassReader(is2);\n        }\n catch (        IOException e) {\n          assert ExceptionUtil.printStackTrace(e);\n          return null;\n        }\n        break;\n      }\n      int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n      if (firstPackageSeparatorIndex == -1) {\n        return null;\n      }\n      entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n      fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 55,
        "startColumnNumber" : 58,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ClassReader classReader=new ClassReader(is);\n  if ((fragment != null) && (fragment.length() > 0)) {\n    int index=fragment.indexOf('-');\n    if (index != -1) {\n      fragment=fragment.substring(0,index);\n    }\n    if (!classReader.getClassName().equals(fragment)) {\n      String entryTypePath=classReader.getClassName() + \".class\";\n      String fragmentTypePath=fragment + \".class\";\n      while (true) {\n        if (entry.getPath().endsWith(entryTypePath)) {\n          String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n          Container.Entry entryFound=null;\n          for (          Container.Entry e : entry.getParent().getChildren()) {\n            if (e.getPath().equals(pathToFound)) {\n              entryFound=e;\n              break;\n            }\n          }\n          if (entryFound == null)           return null;\n          entry=entryFound;\n          try (InputStream is2=entry.getInputStream()){\n            classReader=new ClassReader(is2);\n          }\n catch (          IOException e) {\n            assert ExceptionUtil.printStackTrace(e);\n            return null;\n          }\n          break;\n        }\n        int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n        if (firstPackageSeparatorIndex == -1) {\n          return null;\n        }\n        entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n        fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n      }\n    }\n  }\n  type=new JavaType(entry,classReader,-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 115,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (InputStream is=entry.getInputStream()){\n  ClassReader classReader=new ClassReader(is);\n  if ((fragment != null) && (fragment.length() > 0)) {\n    int index=fragment.indexOf('-');\n    if (index != -1) {\n      fragment=fragment.substring(0,index);\n    }\n    if (!classReader.getClassName().equals(fragment)) {\n      String entryTypePath=classReader.getClassName() + \".class\";\n      String fragmentTypePath=fragment + \".class\";\n      while (true) {\n        if (entry.getPath().endsWith(entryTypePath)) {\n          String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n          Container.Entry entryFound=null;\n          for (          Container.Entry e : entry.getParent().getChildren()) {\n            if (e.getPath().equals(pathToFound)) {\n              entryFound=e;\n              break;\n            }\n          }\n          if (entryFound == null)           return null;\n          entry=entryFound;\n          try (InputStream is2=entry.getInputStream()){\n            classReader=new ClassReader(is2);\n          }\n catch (          IOException e) {\n            assert ExceptionUtil.printStackTrace(e);\n            return null;\n          }\n          break;\n        }\n        int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n        if (firstPackageSeparatorIndex == -1) {\n          return null;\n        }\n        entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n        fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n      }\n    }\n  }\n  type=new JavaType(entry,classReader,-1);\n}\n catch (IOException e) {\n  assert ExceptionUtil.printStackTrace(e);\n  type=null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 251,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3178,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JavaType type;\n  try (InputStream is=entry.getInputStream()){\n    ClassReader classReader=new ClassReader(is);\n    if ((fragment != null) && (fragment.length() > 0)) {\n      int index=fragment.indexOf('-');\n      if (index != -1) {\n        fragment=fragment.substring(0,index);\n      }\n      if (!classReader.getClassName().equals(fragment)) {\n        String entryTypePath=classReader.getClassName() + \".class\";\n        String fragmentTypePath=fragment + \".class\";\n        while (true) {\n          if (entry.getPath().endsWith(entryTypePath)) {\n            String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n            Container.Entry entryFound=null;\n            for (            Container.Entry e : entry.getParent().getChildren()) {\n              if (e.getPath().equals(pathToFound)) {\n                entryFound=e;\n                break;\n              }\n            }\n            if (entryFound == null)             return null;\n            entry=entryFound;\n            try (InputStream is2=entry.getInputStream()){\n              classReader=new ClassReader(is2);\n            }\n catch (            IOException e) {\n              assert ExceptionUtil.printStackTrace(e);\n              return null;\n            }\n            break;\n          }\n          int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n          if (firstPackageSeparatorIndex == -1) {\n            return null;\n          }\n          entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n          fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n        }\n      }\n    }\n    type=new JavaType(entry,classReader,-1);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n    type=null;\n  }\n  cache.put(key,type);\n  return type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3260,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cache.containsKey(key)) {\n  return cache.get(key);\n}\n else {\n  JavaType type;\n  try (InputStream is=entry.getInputStream()){\n    ClassReader classReader=new ClassReader(is);\n    if ((fragment != null) && (fragment.length() > 0)) {\n      int index=fragment.indexOf('-');\n      if (index != -1) {\n        fragment=fragment.substring(0,index);\n      }\n      if (!classReader.getClassName().equals(fragment)) {\n        String entryTypePath=classReader.getClassName() + \".class\";\n        String fragmentTypePath=fragment + \".class\";\n        while (true) {\n          if (entry.getPath().endsWith(entryTypePath)) {\n            String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n            Container.Entry entryFound=null;\n            for (            Container.Entry e : entry.getParent().getChildren()) {\n              if (e.getPath().equals(pathToFound)) {\n                entryFound=e;\n                break;\n              }\n            }\n            if (entryFound == null)             return null;\n            entry=entryFound;\n            try (InputStream is2=entry.getInputStream()){\n              classReader=new ClassReader(is2);\n            }\n catch (            IOException e) {\n              assert ExceptionUtil.printStackTrace(e);\n              return null;\n            }\n            break;\n          }\n          int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n          if (firstPackageSeparatorIndex == -1) {\n            return null;\n          }\n          entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n          fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n        }\n      }\n    }\n    type=new JavaType(entry,classReader,-1);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n    type=null;\n  }\n  cache.put(key,type);\n  return type;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 276,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3315,
        "startLineNumber" : 47,
        "startColumnNumber" : 70,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URI key=entry.getUri();\n  if (cache.containsKey(key)) {\n    return cache.get(key);\n  }\n else {\n    JavaType type;\n    try (InputStream is=entry.getInputStream()){\n      ClassReader classReader=new ClassReader(is);\n      if ((fragment != null) && (fragment.length() > 0)) {\n        int index=fragment.indexOf('-');\n        if (index != -1) {\n          fragment=fragment.substring(0,index);\n        }\n        if (!classReader.getClassName().equals(fragment)) {\n          String entryTypePath=classReader.getClassName() + \".class\";\n          String fragmentTypePath=fragment + \".class\";\n          while (true) {\n            if (entry.getPath().endsWith(entryTypePath)) {\n              String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n              Container.Entry entryFound=null;\n              for (              Container.Entry e : entry.getParent().getChildren()) {\n                if (e.getPath().equals(pathToFound)) {\n                  entryFound=e;\n                  break;\n                }\n              }\n              if (entryFound == null)               return null;\n              entry=entryFound;\n              try (InputStream is2=entry.getInputStream()){\n                classReader=new ClassReader(is2);\n              }\n catch (              IOException e) {\n                assert ExceptionUtil.printStackTrace(e);\n                return null;\n              }\n              break;\n            }\n            int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n            if (firstPackageSeparatorIndex == -1) {\n              return null;\n            }\n            entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n            fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n          }\n        }\n      }\n      type=new JavaType(entry,classReader,-1);\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n      type=null;\n    }\n    cache.put(key,type);\n    return type;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Type make(API api,Container.Entry entry,String fragment){\n  URI key=entry.getUri();\n  if (cache.containsKey(key)) {\n    return cache.get(key);\n  }\n else {\n    JavaType type;\n    try (InputStream is=entry.getInputStream()){\n      ClassReader classReader=new ClassReader(is);\n      if ((fragment != null) && (fragment.length() > 0)) {\n        int index=fragment.indexOf('-');\n        if (index != -1) {\n          fragment=fragment.substring(0,index);\n        }\n        if (!classReader.getClassName().equals(fragment)) {\n          String entryTypePath=classReader.getClassName() + \".class\";\n          String fragmentTypePath=fragment + \".class\";\n          while (true) {\n            if (entry.getPath().endsWith(entryTypePath)) {\n              String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n              Container.Entry entryFound=null;\n              for (              Container.Entry e : entry.getParent().getChildren()) {\n                if (e.getPath().equals(pathToFound)) {\n                  entryFound=e;\n                  break;\n                }\n              }\n              if (entryFound == null)               return null;\n              entry=entryFound;\n              try (InputStream is2=entry.getInputStream()){\n                classReader=new ClassReader(is2);\n              }\n catch (              IOException e) {\n                assert ExceptionUtil.printStackTrace(e);\n                return null;\n              }\n              break;\n            }\n            int firstPackageSeparatorIndex=entryTypePath.indexOf('/');\n            if (firstPackageSeparatorIndex == -1) {\n              return null;\n            }\n            entryTypePath=entryTypePath.substring(firstPackageSeparatorIndex + 1);\n            fragmentTypePath=fragmentTypePath.substring(fragmentTypePath.indexOf('/') + 1);\n          }\n        }\n      }\n      type=new JavaType(entry,classReader,-1);\n    }\n catch (    IOException e) {\n      assert ExceptionUtil.printStackTrace(e);\n      type=null;\n    }\n    cache.put(key,type);\n    return type;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 74,
        "endColumnNumber" : 152
      },
      "nodeContext" : "String pathToFound=entry.getPath().substring(0,entry.getPath().length() - entryTypePath.length()) + fragmentTypePath;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 74,
    "startColumnNumber" : 109,
    "endLineNumber" : 74,
    "endColumnNumber" : 131
  } ],
  "layoutRelationDataList" : [ ]
}