{
  "id" : 86,
  "expression" : "5.0d",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestTDigestFunctions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5.0d",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 421,
      "startColumnNumber" : 86,
      "endLineNumber" : 421,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 421,
        "startColumnNumber" : 39,
        "endLineNumber" : 421,
        "endColumnNumber" : 115
      },
      "nodeContext" : "ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 421,
        "startColumnNumber" : 30,
        "endLineNumber" : 421,
        "endColumnNumber" : 115
      },
      "nodeContext" : "values=ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 421,
        "startColumnNumber" : 8,
        "endLineNumber" : 421,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ImmutableList<Double> values=ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1791,
        "startLineNumber" : 419,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TDigest tDigest=createTDigest(STANDARD_COMPRESSION_FACTOR);\n  ImmutableList<Double> values=ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d);\n  values.stream().forEach(tDigest::add);\n  List<Integer> weights=Collections.nCopies(values.size(),1);\n  double compression=Double.valueOf(STANDARD_COMPRESSION_FACTOR);\n  double min=values.stream().reduce(Double.POSITIVE_INFINITY,Double::min);\n  double max=values.stream().reduce(Double.NEGATIVE_INFINITY,Double::max);\n  double sum=values.stream().reduce(0.0d,Double::sum);\n  long count=values.size();\n  String sql=format(\"destructure_tdigest(CAST(X'%s' AS tdigest(%s)))\",new SqlVarbinary(tDigest.serialize().getBytes()).toString().replaceAll(\"\\\\s+\",\" \"),DOUBLE);\n  functionAssertions.assertFunction(sql,TDIGEST_CENTROIDS_ROW_TYPE,ImmutableList.of(values,weights,compression,min,max,sum,count));\n  functionAssertions.assertFunction(format(\"%s.compression\",sql),DOUBLE,compression);\n  functionAssertions.assertFunction(format(\"%s.min\",sql),DOUBLE,min);\n  functionAssertions.assertFunction(format(\"%s.max\",sql),DOUBLE,max);\n  functionAssertions.assertFunction(format(\"%s.sum\",sql),DOUBLE,sum);\n  functionAssertions.assertFunction(format(\"%s.count\",sql),BIGINT,count);\n  functionAssertions.assertFunction(format(\"%s.centroid_means\",sql),new ArrayType(DOUBLE),values);\n  functionAssertions.assertFunction(format(\"%s.centroid_weights\",sql),new ArrayType(INTEGER),weights);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1842,
        "startLineNumber" : 417,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDestructureTDigest(){\n  TDigest tDigest=createTDigest(STANDARD_COMPRESSION_FACTOR);\n  ImmutableList<Double> values=ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d);\n  values.stream().forEach(tDigest::add);\n  List<Integer> weights=Collections.nCopies(values.size(),1);\n  double compression=Double.valueOf(STANDARD_COMPRESSION_FACTOR);\n  double min=values.stream().reduce(Double.POSITIVE_INFINITY,Double::min);\n  double max=values.stream().reduce(Double.NEGATIVE_INFINITY,Double::max);\n  double sum=values.stream().reduce(0.0d,Double::sum);\n  long count=values.size();\n  String sql=format(\"destructure_tdigest(CAST(X'%s' AS tdigest(%s)))\",new SqlVarbinary(tDigest.serialize().getBytes()).toString().replaceAll(\"\\\\s+\",\" \"),DOUBLE);\n  functionAssertions.assertFunction(sql,TDIGEST_CENTROIDS_ROW_TYPE,ImmutableList.of(values,weights,compression,min,max,sum,count));\n  functionAssertions.assertFunction(format(\"%s.compression\",sql),DOUBLE,compression);\n  functionAssertions.assertFunction(format(\"%s.min\",sql),DOUBLE,min);\n  functionAssertions.assertFunction(format(\"%s.max\",sql),DOUBLE,max);\n  functionAssertions.assertFunction(format(\"%s.sum\",sql),DOUBLE,sum);\n  functionAssertions.assertFunction(format(\"%s.count\",sql),BIGINT,count);\n  functionAssertions.assertFunction(format(\"%s.centroid_means\",sql),new ArrayType(DOUBLE),values);\n  functionAssertions.assertFunction(format(\"%s.centroid_weights\",sql),new ArrayType(INTEGER),weights);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 421,
        "startColumnNumber" : 8,
        "endLineNumber" : 421,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ImmutableList<Double> values=ImmutableList.of(0.0d,1.0d,2.0d,3.0d,4.0d,5.0d,6.0d,7.0d,8.0d,9.0d);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 421,
    "startColumnNumber" : 86,
    "endLineNumber" : 421,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}