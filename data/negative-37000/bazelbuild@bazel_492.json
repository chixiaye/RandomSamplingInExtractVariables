{
  "id" : 492,
  "expression" : "\"true\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/buildtool/UnusedInputsFailureIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"true\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 73,
      "startColumnNumber" : 28,
      "endLineNumber" : 73,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 35
      },
      "nodeContext" : "write(\"foo/gen_run.sh\",\"true\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 55
      },
      "nodeContext" : "write(\"foo/gen_run.sh\",\"true\").setExecutable(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 56
      },
      "nodeContext" : "write(\"foo/gen_run.sh\",\"true\").setExecutable(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 45,
        "startColumnNumber" : 65,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RecordingBugReporter bugReporter=recordBugReportsAndReinitialize();\n  write(\"foo/pruning.bzl\",\"def _impl(ctx):\",\"  inputs = ctx.attr.inputs.files\",\"  output = ctx.actions.declare_file(ctx.label.name + '.out')\",\"  unused_file = ctx.actions.declare_file(ctx.label.name + '.unused')\",\"  ctx.actions.run(\",\"    # Make sure original inputs are one level down, so 'leaf unrolling' doesn't get them\",\"    inputs = depset(transitive = [ctx.attr.filler.files, inputs]),\",\"    outputs = [output, unused_file],\",\"    arguments = [output.path, unused_file.path] + [f.path for f in inputs.to_list()],\",\"    executable = ctx.executable.executable,\",\"    unused_inputs_list = unused_file,\",\"  )\",\"  return DefaultInfo(files = depset([output]))\",\"\",\"build_rule = rule(\",\"  attrs = {\",\"    'inputs': attr.label(allow_files = True),\",\"    'filler': attr.label(allow_files = True),\",\"    'executable': attr.label(executable = True, allow_files = True, cfg = 'host'),\",\"  },\",\"  implementation = _impl,\",\")\");\n  write(\"foo/unused.sh\",\"touch $1\",\"shift\",\"unused=$1\",\"shift\",\"echo $@ > $unused\").setExecutable(true);\n  write(\"foo/gen_run.sh\",\"true\").setExecutable(true);\n  write(\"foo/filler\");\n  write(\"foo/BUILD\",\"load('//foo:pruning.bzl', 'build_rule')\",\"build_rule(name = 'foo', filler = ':filler', inputs = ':in', executable = ':unused.sh')\",\"genrule(name = 'gen', outs = ['in'], tools = [':gen_run.sh'], cmd = '$(location\" + \" :gen_run.sh) && touch $@')\");\n  buildTarget(\"//foo:foo\");\n  bugReporter.assertNoExceptions();\n  write(\"foo/gen_run.sh\",\"false\");\n  if (keepGoing) {\n    buildTarget(\"//foo:foo\");\n    bugReporter.assertNoExceptions();\n  }\n else {\n    RecordingOutErr outErr=new RecordingOutErr();\n    this.outErr=outErr;\n    BuildFailedException e=assertThrows(BuildFailedException.class,() -> buildTarget(\"//foo\"));\n    assertThat(e.getDetailedExitCode().getFailureDetail()).comparingExpectedFieldsOnly().isEqualTo(FailureDetails.FailureDetail.newBuilder().setExecution(FailureDetails.Execution.newBuilder().setCode(FailureDetails.Execution.Code.UNEXPECTED_EXCEPTION).build()).build());\n    assertThat(outErr.errAsLatin1()).contains(\"Executing genrule //foo:gen failed\");\n    Throwable cause=bugReporter.getFirstCause();\n    assertThat(cause).hasMessageThat().contains(\"Error evaluating artifact nested set\");\n    assertThat(cause).hasMessageThat().contains(\"foo/gen_run.sh\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2929,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void incrementalFailureOnUnusedInput() throws Exception {\n  RecordingBugReporter bugReporter=recordBugReportsAndReinitialize();\n  write(\"foo/pruning.bzl\",\"def _impl(ctx):\",\"  inputs = ctx.attr.inputs.files\",\"  output = ctx.actions.declare_file(ctx.label.name + '.out')\",\"  unused_file = ctx.actions.declare_file(ctx.label.name + '.unused')\",\"  ctx.actions.run(\",\"    # Make sure original inputs are one level down, so 'leaf unrolling' doesn't get them\",\"    inputs = depset(transitive = [ctx.attr.filler.files, inputs]),\",\"    outputs = [output, unused_file],\",\"    arguments = [output.path, unused_file.path] + [f.path for f in inputs.to_list()],\",\"    executable = ctx.executable.executable,\",\"    unused_inputs_list = unused_file,\",\"  )\",\"  return DefaultInfo(files = depset([output]))\",\"\",\"build_rule = rule(\",\"  attrs = {\",\"    'inputs': attr.label(allow_files = True),\",\"    'filler': attr.label(allow_files = True),\",\"    'executable': attr.label(executable = True, allow_files = True, cfg = 'host'),\",\"  },\",\"  implementation = _impl,\",\")\");\n  write(\"foo/unused.sh\",\"touch $1\",\"shift\",\"unused=$1\",\"shift\",\"echo $@ > $unused\").setExecutable(true);\n  write(\"foo/gen_run.sh\",\"true\").setExecutable(true);\n  write(\"foo/filler\");\n  write(\"foo/BUILD\",\"load('//foo:pruning.bzl', 'build_rule')\",\"build_rule(name = 'foo', filler = ':filler', inputs = ':in', executable = ':unused.sh')\",\"genrule(name = 'gen', outs = ['in'], tools = [':gen_run.sh'], cmd = '$(location\" + \" :gen_run.sh) && touch $@')\");\n  buildTarget(\"//foo:foo\");\n  bugReporter.assertNoExceptions();\n  write(\"foo/gen_run.sh\",\"false\");\n  if (keepGoing) {\n    buildTarget(\"//foo:foo\");\n    bugReporter.assertNoExceptions();\n  }\n else {\n    RecordingOutErr outErr=new RecordingOutErr();\n    this.outErr=outErr;\n    BuildFailedException e=assertThrows(BuildFailedException.class,() -> buildTarget(\"//foo\"));\n    assertThat(e.getDetailedExitCode().getFailureDetail()).comparingExpectedFieldsOnly().isEqualTo(FailureDetails.FailureDetail.newBuilder().setExecution(FailureDetails.Execution.newBuilder().setCode(FailureDetails.Execution.Code.UNEXPECTED_EXCEPTION).build()).build());\n    assertThat(outErr.errAsLatin1()).contains(\"Executing genrule //foo:gen failed\");\n    Throwable cause=bugReporter.getFirstCause();\n    assertThat(cause).hasMessageThat().contains(\"Error evaluating artifact nested set\");\n    assertThat(cause).hasMessageThat().contains(\"foo/gen_run.sh\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 56
      },
      "nodeContext" : "write(\"foo/gen_run.sh\",\"true\").setExecutable(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 73,
    "startColumnNumber" : 28,
    "endLineNumber" : 73,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}