{
  "id" : 391,
  "expression" : "\" cannot determine if it is @Testable\"",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" cannot determine if it is @Testable\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 727,
      "startColumnNumber" : 78,
      "endLineNumber" : 727,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 727,
        "startColumnNumber" : 29,
        "endLineNumber" : 727,
        "endColumnNumber" : 116
      },
      "nodeContext" : "\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 727,
        "startColumnNumber" : 20,
        "endLineNumber" : 727,
        "endColumnNumber" : 117
      },
      "nodeContext" : "log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 727,
        "startColumnNumber" : 20,
        "endLineNumber" : 727,
        "endColumnNumber" : 118
      },
      "nodeContext" : "log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 726,
        "startColumnNumber" : 51,
        "endLineNumber" : 728,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 726,
        "startColumnNumber" : 18,
        "endLineNumber" : 728,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (ClassNotFoundException e) {\n  log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 721,
        "startColumnNumber" : 16,
        "endLineNumber" : 728,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n  if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n    ret.add(annotation);\n  }\n}\n catch (ClassNotFoundException e) {\n  log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 648,
        "startLineNumber" : 716,
        "startColumnNumber" : 68,
        "endLineNumber" : 729,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (processed.contains(annotation)) {\n    continue;\n  }\n  processed.add(annotation);\n  try {\n    Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n    if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n      ret.add(annotation);\n    }\n  }\n catch (  ClassNotFoundException e) {\n    log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 704,
        "startLineNumber" : 716,
        "startColumnNumber" : 12,
        "endLineNumber" : 729,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (DotName annotation : clazz.annotations().keySet()) {\n  if (processed.contains(annotation)) {\n    continue;\n  }\n  processed.add(annotation);\n  try {\n    Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n    if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n      ret.add(annotation);\n    }\n  }\n catch (  ClassNotFoundException e) {\n    log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 728,
        "startLineNumber" : 715,
        "startColumnNumber" : 56,
        "endLineNumber" : 730,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  DotName annotation : clazz.annotations().keySet()) {\n    if (processed.contains(annotation)) {\n      continue;\n    }\n    processed.add(annotation);\n    try {\n      Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n      if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n        ret.add(annotation);\n      }\n    }\n catch (    ClassNotFoundException e) {\n      log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 715,
        "startColumnNumber" : 8,
        "endLineNumber" : 730,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ClassInfo clazz : index.getKnownClasses()) {\n  for (  DotName annotation : clazz.annotations().keySet()) {\n    if (processed.contains(annotation)) {\n      continue;\n    }\n    processed.add(annotation);\n    try {\n      Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n      if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n        ret.add(annotation);\n      }\n    }\n catch (    ClassNotFoundException e) {\n      log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 691,
        "startColumnNumber" : 68,
        "endLineNumber" : 732,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<DotName> ret=new HashSet<>();\n  ret.add(TEST);\n  ret.add(REPEATED_TEST);\n  ret.add(PARAMETERIZED_TEST);\n  ret.add(TEST_FACTORY);\n  ret.add(TEST_TEMPLATE);\n  ret.add(TESTABLE);\n  Set<DotName> metaAnnotations=new HashSet<>(ret);\n  metaAnnotations.add(TESTABLE);\n  for (  DotName an : metaAnnotations) {\n    for (    AnnotationInstance instance : index.getAnnotations(an)) {\n      if (instance.target().kind() == AnnotationTarget.Kind.CLASS) {\n        ret.add(instance.target().asClass().name());\n      }\n    }\n  }\n  Set<DotName> processed=new HashSet<>();\n  processed.addAll(ret);\n  for (  ClassInfo clazz : index.getKnownClasses()) {\n    for (    DotName annotation : clazz.annotations().keySet()) {\n      if (processed.contains(annotation)) {\n        continue;\n      }\n      processed.add(annotation);\n      try {\n        Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n        if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n          ret.add(annotation);\n        }\n      }\n catch (      ClassNotFoundException e) {\n        log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n      }\n    }\n  }\n  return ret;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 691,
        "startColumnNumber" : 4,
        "endLineNumber" : 732,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Set<DotName> collectTestAnnotations(Index index){\n  Set<DotName> ret=new HashSet<>();\n  ret.add(TEST);\n  ret.add(REPEATED_TEST);\n  ret.add(PARAMETERIZED_TEST);\n  ret.add(TEST_FACTORY);\n  ret.add(TEST_TEMPLATE);\n  ret.add(TESTABLE);\n  Set<DotName> metaAnnotations=new HashSet<>(ret);\n  metaAnnotations.add(TESTABLE);\n  for (  DotName an : metaAnnotations) {\n    for (    AnnotationInstance instance : index.getAnnotations(an)) {\n      if (instance.target().kind() == AnnotationTarget.Kind.CLASS) {\n        ret.add(instance.target().asClass().name());\n      }\n    }\n  }\n  Set<DotName> processed=new HashSet<>();\n  processed.addAll(ret);\n  for (  ClassInfo clazz : index.getKnownClasses()) {\n    for (    DotName annotation : clazz.annotations().keySet()) {\n      if (processed.contains(annotation)) {\n        continue;\n      }\n      processed.add(annotation);\n      try {\n        Class<?> loadedAnnotation=Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n        if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n          ret.add(annotation);\n        }\n      }\n catch (      ClassNotFoundException e) {\n        log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n      }\n    }\n  }\n  return ret;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 727,
        "startColumnNumber" : 20,
        "endLineNumber" : 727,
        "endColumnNumber" : 118
      },
      "nodeContext" : "log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 727,
    "startColumnNumber" : 78,
    "endLineNumber" : 727,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ ]
}