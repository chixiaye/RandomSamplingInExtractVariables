{
  "id" : 332,
  "expression" : "INSTRUMENTABLE_LOADER_CLASS_NAME",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "INSTRUMENTABLE_LOADER_CLASS_NAME",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 71,
      "startColumnNumber" : 53,
      "endLineNumber" : 71,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 71,
        "startColumnNumber" : 31,
        "endLineNumber" : 71,
        "endColumnNumber" : 86
      },
      "nodeContext" : "classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 86
      },
      "nodeContext" : "instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 70,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n  this.addTransformerMethod=instrumentableLoaderClass.getMethod(\"addTransformer\",ClassFileTransformer.class);\n  this.copyMethod=instrumentableLoaderClass.getMethod(\"copy\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n  this.addTransformerMethod=instrumentableLoaderClass.getMethod(\"addTransformer\",ClassFileTransformer.class);\n  this.copyMethod=instrumentableLoaderClass.getMethod(\"copy\");\n}\n catch (Throwable ex) {\n  throw new IllegalStateException(\"Could not initialize GlassFishLoadTimeWeaver because GlassFish API classes are not available\",ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1167,
        "startLineNumber" : 66,
        "startColumnNumber" : 67,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(classLoader,\"ClassLoader must not be null\");\n  Class<?> instrumentableLoaderClass;\n  try {\n    instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n    this.addTransformerMethod=instrumentableLoaderClass.getMethod(\"addTransformer\",ClassFileTransformer.class);\n    this.copyMethod=instrumentableLoaderClass.getMethod(\"copy\");\n  }\n catch (  Throwable ex) {\n    throw new IllegalStateException(\"Could not initialize GlassFishLoadTimeWeaver because GlassFish API classes are not available\",ex);\n  }\n  ClassLoader clazzLoader=null;\n  for (ClassLoader cl=classLoader; cl != null && clazzLoader == null; cl=cl.getParent()) {\n    if (instrumentableLoaderClass.isInstance(cl)) {\n      clazzLoader=cl;\n    }\n  }\n  if (clazzLoader == null) {\n    throw new IllegalArgumentException(classLoader + \" and its parents are not suitable ClassLoaders: A [\" + instrumentableLoaderClass.getName()+ \"] implementation is required.\");\n  }\n  this.classLoader=clazzLoader;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1432,
        "startLineNumber" : 61,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Create a new instance of the  {@link GlassFishLoadTimeWeaver} class usingthe supplied  {@link ClassLoader}.\n * @param classLoader the {@code ClassLoader} to delegate to for weaving\n */\npublic GlassFishLoadTimeWeaver(@Nullable ClassLoader classLoader){\n  Assert.notNull(classLoader,\"ClassLoader must not be null\");\n  Class<?> instrumentableLoaderClass;\n  try {\n    instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n    this.addTransformerMethod=instrumentableLoaderClass.getMethod(\"addTransformer\",ClassFileTransformer.class);\n    this.copyMethod=instrumentableLoaderClass.getMethod(\"copy\");\n  }\n catch (  Throwable ex) {\n    throw new IllegalStateException(\"Could not initialize GlassFishLoadTimeWeaver because GlassFish API classes are not available\",ex);\n  }\n  ClassLoader clazzLoader=null;\n  for (ClassLoader cl=classLoader; cl != null && clazzLoader == null; cl=cl.getParent()) {\n    if (instrumentableLoaderClass.isInstance(cl)) {\n      clazzLoader=cl;\n    }\n  }\n  if (clazzLoader == null) {\n    throw new IllegalArgumentException(classLoader + \" and its parents are not suitable ClassLoaders: A [\" + instrumentableLoaderClass.getName()+ \"] implementation is required.\");\n  }\n  this.classLoader=clazzLoader;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 71,
    "startColumnNumber" : 53,
    "endLineNumber" : 71,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}