{
  "id" : 518,
  "expression" : "new DefaultObserver<Integer>(){\n  boolean first=true;\n  @Override public void onStart(){\n    request(2);\n  }\n  @Override public void onComplete(){\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n  }\n  @Override public void onNext(  Integer t){\n    count.incrementAndGet();\n    if (first) {\n      request(Long.MAX_VALUE - 1);\n      request(Long.MAX_VALUE - 1);\n      request(10);\n      first=false;\n    }\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableObserveOnTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DefaultObserver<Integer>(){\n  boolean first=true;\n  @Override public void onStart(){\n    request(2);\n  }\n  @Override public void onComplete(){\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n  }\n  @Override public void onNext(  Integer t){\n    count.incrementAndGet();\n    if (first) {\n      request(Long.MAX_VALUE - 1);\n      request(Long.MAX_VALUE - 1);\n      request(10);\n      first=false;\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 942,
      "startLineNumber" : 726,
      "startColumnNumber" : 27,
      "endLineNumber" : 755,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 87,
    "astHeight" : 11,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 725,
        "startColumnNumber" : 8,
        "endLineNumber" : 755,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.range(1,100).observeOn(Schedulers.computation()).subscribe(new DefaultObserver<Integer>(){\n  boolean first=true;\n  @Override public void onStart(){\n    request(2);\n  }\n  @Override public void onComplete(){\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n  }\n  @Override public void onNext(  Integer t){\n    count.incrementAndGet();\n    if (first) {\n      request(Long.MAX_VALUE - 1);\n      request(Long.MAX_VALUE - 1);\n      request(10);\n      first=false;\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 725,
        "startColumnNumber" : 8,
        "endLineNumber" : 755,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Flowable.range(1,100).observeOn(Schedulers.computation()).subscribe(new DefaultObserver<Integer>(){\n  boolean first=true;\n  @Override public void onStart(){\n    request(2);\n  }\n  @Override public void onComplete(){\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n  }\n  @Override public void onNext(  Integer t){\n    count.incrementAndGet();\n    if (first) {\n      request(Long.MAX_VALUE - 1);\n      request(Long.MAX_VALUE - 1);\n      request(10);\n      first=false;\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1269,
        "startLineNumber" : 721,
        "startColumnNumber" : 66,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger count=new AtomicInteger();\n  Flowable.range(1,100).observeOn(Schedulers.computation()).subscribe(new DefaultObserver<Integer>(){\n    boolean first=true;\n    @Override public void onStart(){\n      request(2);\n    }\n    @Override public void onComplete(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    Integer t){\n      count.incrementAndGet();\n      if (first) {\n        request(Long.MAX_VALUE - 1);\n        request(Long.MAX_VALUE - 1);\n        request(10);\n        first=false;\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10,TimeUnit.SECONDS));\n  assertEquals(100,count.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 720,
        "startColumnNumber" : 4,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRequestOverflow() throws InterruptedException {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger count=new AtomicInteger();\n  Flowable.range(1,100).observeOn(Schedulers.computation()).subscribe(new DefaultObserver<Integer>(){\n    boolean first=true;\n    @Override public void onStart(){\n      request(2);\n    }\n    @Override public void onComplete(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    Integer t){\n      count.incrementAndGet();\n      if (first) {\n        request(Long.MAX_VALUE - 1);\n        request(Long.MAX_VALUE - 1);\n        request(10);\n        first=false;\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10,TimeUnit.SECONDS));\n  assertEquals(100,count.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 725,
        "startColumnNumber" : 8,
        "endLineNumber" : 755,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.range(1,100).observeOn(Schedulers.computation()).subscribe(new DefaultObserver<Integer>(){\n  boolean first=true;\n  @Override public void onStart(){\n    request(2);\n  }\n  @Override public void onComplete(){\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n  }\n  @Override public void onNext(  Integer t){\n    count.incrementAndGet();\n    if (first) {\n      request(Long.MAX_VALUE - 1);\n      request(Long.MAX_VALUE - 1);\n      request(10);\n      first=false;\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 99,
      "astHeight" : 12
    },
    "tokenLength" : 36,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 942,
    "startLineNumber" : 726,
    "startColumnNumber" : 27,
    "endLineNumber" : 755,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}