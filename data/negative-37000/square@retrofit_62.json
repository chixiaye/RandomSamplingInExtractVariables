{
  "id" : 62,
  "expression" : "null",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 241,
      "startColumnNumber" : 26,
      "endLineNumber" : 241,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 241,
        "startColumnNumber" : 14,
        "endLineNumber" : 241,
        "endColumnNumber" : 30
      },
      "nodeContext" : "newError == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 241,
        "startColumnNumber" : 10,
        "endLineNumber" : 244,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (newError == null) {\n  throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 239,
        "startColumnNumber" : 38,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Throwable newError=restAdapter.errorHandler.handleError(error);\n  if (newError == null) {\n    throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n  }\n  throw newError;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 239,
        "startColumnNumber" : 10,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (RetrofitError error) {\n  Throwable newError=restAdapter.errorHandler.handleError(error);\n  if (newError == null) {\n    throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n  }\n  throw newError;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 404,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n}\n catch (RetrofitError error) {\n  Throwable newError=restAdapter.errorHandler.handleError(error);\n  if (newError == null) {\n    throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n  }\n  throw newError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 236,
        "startColumnNumber" : 36,
        "endLineNumber" : 247,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  try {\n    return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n  }\n catch (  RetrofitError error) {\n    Throwable newError=restAdapter.errorHandler.handleError(error);\n    if (newError == null) {\n      throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n    }\n    throw newError;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 236,
        "startColumnNumber" : 6,
        "endLineNumber" : 247,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (methodInfo.isSynchronous) {\n  try {\n    return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n  }\n catch (  RetrofitError error) {\n    Throwable newError=restAdapter.errorHandler.handleError(error);\n    if (newError == null) {\n      throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n    }\n    throw newError;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object invoke(Object proxy,Method method,final Object[] args) throws Throwable {\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 241,
        "startColumnNumber" : 14,
        "endLineNumber" : 241,
        "endColumnNumber" : 30
      },
      "nodeContext" : "newError == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 249,
      "startColumnNumber" : 38,
      "endLineNumber" : 249,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 249,
        "endColumnNumber" : 42
      },
      "nodeContext" : "restAdapter.httpExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 249,
        "endColumnNumber" : 82
      },
      "nodeContext" : "restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 251,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n  throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object invoke(Object proxy,Method method,final Object[] args) throws Throwable {\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 249,
        "endColumnNumber" : 82
      },
      "nodeContext" : "restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 249,
      "startColumnNumber" : 78,
      "endLineNumber" : 249,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 249,
        "startColumnNumber" : 46,
        "endLineNumber" : 249,
        "endColumnNumber" : 82
      },
      "nodeContext" : "restAdapter.callbackExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 249,
        "endColumnNumber" : 82
      },
      "nodeContext" : "restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 251,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n  throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object invoke(Object proxy,Method method,final Object[] args) throws Throwable {\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 249,
        "endColumnNumber" : 82
      },
      "nodeContext" : "restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 258,
      "startColumnNumber" : 29,
      "endLineNumber" : 258,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 33
      },
      "nodeContext" : "mockRxSupport == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mockRxSupport == null) {\n  if (Platform.HAS_RX_JAVA) {\n    mockRxSupport=new MockRxSupport(restAdapter);\n  }\n else {\n    throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 257,
        "startColumnNumber" : 35,
        "endLineNumber" : 266,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (mockRxSupport == null) {\n    if (Platform.HAS_RX_JAVA) {\n      mockRxSupport=new MockRxSupport(restAdapter);\n    }\n else {\n      throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n    }\n  }\n  return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 257,
        "startColumnNumber" : 6,
        "endLineNumber" : 266,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (methodInfo.isObservable) {\n  if (mockRxSupport == null) {\n    if (Platform.HAS_RX_JAVA) {\n      mockRxSupport=new MockRxSupport(restAdapter);\n    }\n else {\n      throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n    }\n  }\n  return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object invoke(Object proxy,Method method,final Object[] args) throws Throwable {\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 33
      },
      "nodeContext" : "mockRxSupport == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 273,
      "startColumnNumber" : 13,
      "endLineNumber" : 273,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 273,
        "startColumnNumber" : 6,
        "endLineNumber" : 273,
        "endColumnNumber" : 18
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object invoke(Object proxy,Method method,final Object[] args) throws Throwable {\n  if (method.getDeclaringClass() == Object.class) {\n    return method.invoke(this,args);\n  }\n  final RestMethodInfo methodInfo=RestAdapter.getMethodInfo(methodInfoCache,method);\n  if (methodInfo.isSynchronous) {\n    try {\n      return invokeSync(methodInfo,restAdapter.requestInterceptor,args);\n    }\n catch (    RetrofitError error) {\n      Throwable newError=restAdapter.errorHandler.handleError(error);\n      if (newError == null) {\n        throw new IllegalStateException(\"Error handler returned null for wrapped exception.\",error);\n      }\n      throw newError;\n    }\n  }\n  if (restAdapter.httpExecutor == null || restAdapter.callbackExecutor == null) {\n    throw new IllegalStateException(\"Asynchronous invocation requires calling setExecutors.\");\n  }\n  final RequestInterceptorTape interceptorTape=new RequestInterceptorTape();\n  restAdapter.requestInterceptor.intercept(interceptorTape);\n  if (methodInfo.isObservable) {\n    if (mockRxSupport == null) {\n      if (Platform.HAS_RX_JAVA) {\n        mockRxSupport=new MockRxSupport(restAdapter);\n      }\n else {\n        throw new IllegalStateException(\"Observable method found but no RxJava on classpath\");\n      }\n    }\n    return mockRxSupport.createMockObservable(this,methodInfo,interceptorTape,args);\n  }\n  restAdapter.httpExecutor.execute(new Runnable(){\n    @Override public void run(){\n      invokeAsync(methodInfo,interceptorTape,args);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 273,
        "startColumnNumber" : 6,
        "endLineNumber" : 273,
        "endColumnNumber" : 18
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 241,
    "startColumnNumber" : 26,
    "endLineNumber" : 241,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 249,
    "startColumnNumber" : 38,
    "endLineNumber" : 249,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 249,
    "startColumnNumber" : 78,
    "endLineNumber" : 249,
    "endColumnNumber" : 82
  }, {
    "charLength" : 4,
    "startLineNumber" : 258,
    "startColumnNumber" : 29,
    "endLineNumber" : 258,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 273,
    "startColumnNumber" : 13,
    "endLineNumber" : 273,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  } ]
}