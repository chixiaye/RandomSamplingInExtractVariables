{
  "id" : 151,
  "expression" : "addr",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "addr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 105,
      "startColumnNumber" : 73,
      "endLineNumber" : 105,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 105,
        "startColumnNumber" : 51,
        "endLineNumber" : 105,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new QuorumServer(sid,addr)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 79
      },
      "nodeContext" : "servers.put(Long.valueOf(sid),new QuorumServer(sid,addr))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (parts.length == 2) servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else if (parts.length == 3) {\n  InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n  servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 94,
        "startColumnNumber" : 50,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 94,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 142,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 92,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1279,
        "startLineNumber" : 90,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1382,
        "startLineNumber" : 88,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1483,
        "startLineNumber" : 86,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 194,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 84,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 82,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"dataLogDir\")) {\n  dataLogDir=value;\n}\n else if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 217,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1756,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"dataDir\")) {\n  dataDir=value;\n}\n else if (key.equals(\"dataLogDir\")) {\n  dataLogDir=value;\n}\n else if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 227,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1888,
        "startLineNumber" : 77,
        "startColumnNumber" : 59,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String key=entry.getKey().toString();\n  String value=entry.getValue().toString();\n  if (key.equals(\"dataDir\")) {\n    dataDir=value;\n  }\n else   if (key.equals(\"dataLogDir\")) {\n    dataLogDir=value;\n  }\n else   if (key.equals(\"clientPort\")) {\n    clientPort=Integer.parseInt(value);\n  }\n else   if (key.equals(\"tickTime\")) {\n    tickTime=Integer.parseInt(value);\n  }\n else   if (key.equals(\"initLimit\")) {\n    initLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"syncLimit\")) {\n    syncLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"electionAlg\")) {\n    electionAlg=Integer.parseInt(value);\n  }\n else   if (key.startsWith(\"server.\")) {\n    int dot=key.indexOf('.');\n    long sid=Long.parseLong(key.substring(dot + 1));\n    String parts[]=value.split(\":\");\n    if ((parts.length != 2) && (parts.length != 3)) {\n      LOG.error(value + \" does not have the form host:port or host:port:port\");\n    }\n    InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n    if (parts.length == 2)     servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else     if (parts.length == 3) {\n      InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n      servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n    }\n  }\n else {\n    System.setProperty(\"zookeeper.\" + key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1939,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<Object,Object> entry : cfg.entrySet()) {\n  String key=entry.getKey().toString();\n  String value=entry.getValue().toString();\n  if (key.equals(\"dataDir\")) {\n    dataDir=value;\n  }\n else   if (key.equals(\"dataLogDir\")) {\n    dataLogDir=value;\n  }\n else   if (key.equals(\"clientPort\")) {\n    clientPort=Integer.parseInt(value);\n  }\n else   if (key.equals(\"tickTime\")) {\n    tickTime=Integer.parseInt(value);\n  }\n else   if (key.equals(\"initLimit\")) {\n    initLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"syncLimit\")) {\n    syncLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"electionAlg\")) {\n    electionAlg=Integer.parseInt(value);\n  }\n else   if (key.startsWith(\"server.\")) {\n    int dot=key.indexOf('.');\n    long sid=Long.parseLong(key.substring(dot + 1));\n    String parts[]=value.split(\":\");\n    if ((parts.length != 2) && (parts.length != 3)) {\n      LOG.error(value + \" does not have the form host:port or host:port:port\");\n    }\n    InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n    if (parts.length == 2)     servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else     if (parts.length == 3) {\n      InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n      servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n    }\n  }\n else {\n    System.setProperty(\"zookeeper.\" + key,value);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 261,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5273,
        "startLineNumber" : 50,
        "startColumnNumber" : 61,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 644,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5330,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void parse(String[] args) throws Exception {\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 657,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.net.InetSocketAddress"
  }, {
    "nodeContext" : "addr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 109,
      "startColumnNumber" : 73,
      "endLineNumber" : 109,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 109,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new QuorumServer(sid,addr,electionAddr)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 110,
        "endColumnNumber" : 42
      },
      "nodeContext" : "servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 110,
        "endColumnNumber" : 43
      },
      "nodeContext" : "servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 106,
        "startColumnNumber" : 44,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n  servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 106,
        "startColumnNumber" : 21,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (parts.length == 3) {\n  InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n  servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (parts.length == 2) servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else if (parts.length == 3) {\n  InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n  servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 94,
        "startColumnNumber" : 50,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 94,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 142,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 92,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1279,
        "startLineNumber" : 90,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1382,
        "startLineNumber" : 88,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1483,
        "startLineNumber" : 86,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 194,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 84,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 82,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"dataLogDir\")) {\n  dataLogDir=value;\n}\n else if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 217,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1756,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key.equals(\"dataDir\")) {\n  dataDir=value;\n}\n else if (key.equals(\"dataLogDir\")) {\n  dataLogDir=value;\n}\n else if (key.equals(\"clientPort\")) {\n  clientPort=Integer.parseInt(value);\n}\n else if (key.equals(\"tickTime\")) {\n  tickTime=Integer.parseInt(value);\n}\n else if (key.equals(\"initLimit\")) {\n  initLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"syncLimit\")) {\n  syncLimit=Integer.parseInt(value);\n}\n else if (key.equals(\"electionAlg\")) {\n  electionAlg=Integer.parseInt(value);\n}\n else if (key.startsWith(\"server.\")) {\n  int dot=key.indexOf('.');\n  long sid=Long.parseLong(key.substring(dot + 1));\n  String parts[]=value.split(\":\");\n  if ((parts.length != 2) && (parts.length != 3)) {\n    LOG.error(value + \" does not have the form host:port or host:port:port\");\n  }\n  InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n  if (parts.length == 2)   servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else   if (parts.length == 3) {\n    InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n    servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n  }\n}\n else {\n  System.setProperty(\"zookeeper.\" + key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 227,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1888,
        "startLineNumber" : 77,
        "startColumnNumber" : 59,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String key=entry.getKey().toString();\n  String value=entry.getValue().toString();\n  if (key.equals(\"dataDir\")) {\n    dataDir=value;\n  }\n else   if (key.equals(\"dataLogDir\")) {\n    dataLogDir=value;\n  }\n else   if (key.equals(\"clientPort\")) {\n    clientPort=Integer.parseInt(value);\n  }\n else   if (key.equals(\"tickTime\")) {\n    tickTime=Integer.parseInt(value);\n  }\n else   if (key.equals(\"initLimit\")) {\n    initLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"syncLimit\")) {\n    syncLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"electionAlg\")) {\n    electionAlg=Integer.parseInt(value);\n  }\n else   if (key.startsWith(\"server.\")) {\n    int dot=key.indexOf('.');\n    long sid=Long.parseLong(key.substring(dot + 1));\n    String parts[]=value.split(\":\");\n    if ((parts.length != 2) && (parts.length != 3)) {\n      LOG.error(value + \" does not have the form host:port or host:port:port\");\n    }\n    InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n    if (parts.length == 2)     servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else     if (parts.length == 3) {\n      InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n      servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n    }\n  }\n else {\n    System.setProperty(\"zookeeper.\" + key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1939,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<Object,Object> entry : cfg.entrySet()) {\n  String key=entry.getKey().toString();\n  String value=entry.getValue().toString();\n  if (key.equals(\"dataDir\")) {\n    dataDir=value;\n  }\n else   if (key.equals(\"dataLogDir\")) {\n    dataLogDir=value;\n  }\n else   if (key.equals(\"clientPort\")) {\n    clientPort=Integer.parseInt(value);\n  }\n else   if (key.equals(\"tickTime\")) {\n    tickTime=Integer.parseInt(value);\n  }\n else   if (key.equals(\"initLimit\")) {\n    initLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"syncLimit\")) {\n    syncLimit=Integer.parseInt(value);\n  }\n else   if (key.equals(\"electionAlg\")) {\n    electionAlg=Integer.parseInt(value);\n  }\n else   if (key.startsWith(\"server.\")) {\n    int dot=key.indexOf('.');\n    long sid=Long.parseLong(key.substring(dot + 1));\n    String parts[]=value.split(\":\");\n    if ((parts.length != 2) && (parts.length != 3)) {\n      LOG.error(value + \" does not have the form host:port or host:port:port\");\n    }\n    InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n    if (parts.length == 2)     servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else     if (parts.length == 3) {\n      InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n      servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n    }\n  }\n else {\n    System.setProperty(\"zookeeper.\" + key,value);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 261,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5273,
        "startLineNumber" : 50,
        "startColumnNumber" : 61,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 644,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5330,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void parse(String[] args) throws Exception {\n  if (instance != null)   return;\n  if (args.length != 1) {\n    throw new IllegalArgumentException(\"Invalid usage.\");\n  }\n  File zooCfgFile=new File(args[0]);\n  if (!zooCfgFile.exists()) {\n    throw new IllegalArgumentException(zooCfgFile.toString() + \" file is missing\");\n  }\n  Properties cfg=new Properties();\n  FileInputStream zooCfgStream=new FileInputStream(zooCfgFile);\n  try {\n    cfg.load(zooCfgStream);\n  }\n  finally {\n    zooCfgStream.close();\n  }\n  HashMap<Long,QuorumServer> servers=new HashMap<Long,QuorumServer>();\n  String dataDir=null;\n  String dataLogDir=null;\n  int clientPort=0;\n  int tickTime=0;\n  int initLimit=0;\n  int syncLimit=0;\n  int electionAlg=3;\n  int electionPort=2182;\n  for (  Entry<Object,Object> entry : cfg.entrySet()) {\n    String key=entry.getKey().toString();\n    String value=entry.getValue().toString();\n    if (key.equals(\"dataDir\")) {\n      dataDir=value;\n    }\n else     if (key.equals(\"dataLogDir\")) {\n      dataLogDir=value;\n    }\n else     if (key.equals(\"clientPort\")) {\n      clientPort=Integer.parseInt(value);\n    }\n else     if (key.equals(\"tickTime\")) {\n      tickTime=Integer.parseInt(value);\n    }\n else     if (key.equals(\"initLimit\")) {\n      initLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"syncLimit\")) {\n      syncLimit=Integer.parseInt(value);\n    }\n else     if (key.equals(\"electionAlg\")) {\n      electionAlg=Integer.parseInt(value);\n    }\n else     if (key.startsWith(\"server.\")) {\n      int dot=key.indexOf('.');\n      long sid=Long.parseLong(key.substring(dot + 1));\n      String parts[]=value.split(\":\");\n      if ((parts.length != 2) && (parts.length != 3)) {\n        LOG.error(value + \" does not have the form host:port or host:port:port\");\n      }\n      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));\n      if (parts.length == 2)       servers.put(Long.valueOf(sid),new QuorumServer(sid,addr));\n else       if (parts.length == 3) {\n        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));\n        servers.put(Long.valueOf(sid),new QuorumServer(sid,addr,electionAddr));\n      }\n    }\n else {\n      System.setProperty(\"zookeeper.\" + key,value);\n    }\n  }\n  if (dataDir == null) {\n    throw new IllegalArgumentException(\"dataDir is not set\");\n  }\n  if (dataLogDir == null) {\n    dataLogDir=dataDir;\n  }\n else {\n    if (!new File(dataLogDir).isDirectory()) {\n      throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir + \" is missing.\");\n    }\n  }\n  if (clientPort == 0) {\n    throw new IllegalArgumentException(\"clientPort is not set\");\n  }\n  if (tickTime == 0) {\n    throw new IllegalArgumentException(\"tickTime is not set\");\n  }\n  if (servers.size() > 1 && initLimit == 0) {\n    throw new IllegalArgumentException(\"initLimit is not set\");\n  }\n  if (servers.size() > 1 && syncLimit == 0) {\n    throw new IllegalArgumentException(\"syncLimit is not set\");\n  }\n  QuorumPeerConfig conf=new QuorumPeerConfig(clientPort,dataDir,dataLogDir);\n  conf.tickTime=tickTime;\n  conf.initLimit=initLimit;\n  conf.syncLimit=syncLimit;\n  conf.electionAlg=electionAlg;\n  conf.servers=servers;\n  if (servers.size() > 1) {\n    if (electionAlg != 0) {\n      for (      QuorumServer s : servers.values()) {\n        if (s.electionAddr == null)         throw new IllegalArgumentException(\"Missing election port for server: \" + s.id);\n      }\n    }\n    File myIdFile=new File(dataDir,\"myid\");\n    if (!myIdFile.exists()) {\n      throw new IllegalArgumentException(myIdFile.toString() + \" file is missing\");\n    }\n    BufferedReader br=new BufferedReader(new FileReader(myIdFile));\n    String myIdString;\n    try {\n      myIdString=br.readLine();\n    }\n  finally {\n      br.close();\n    }\n    try {\n      conf.serverId=Long.parseLong(myIdString);\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"serverid \" + myIdString + \" is not a number\");\n    }\n  }\n  instance=conf;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 657,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 109,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new QuorumServer(sid,addr,electionAddr)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.net.InetSocketAddress"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 105,
    "startColumnNumber" : 73,
    "endLineNumber" : 105,
    "endColumnNumber" : 77
  }, {
    "charLength" : 4,
    "startLineNumber" : 109,
    "startColumnNumber" : 73,
    "endLineNumber" : 109,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}