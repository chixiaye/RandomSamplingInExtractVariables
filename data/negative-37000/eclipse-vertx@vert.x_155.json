{
  "id" : 155,
  "expression" : "httpServer",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/Http1xTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpServer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1742,
      "startColumnNumber" : 4,
      "endLineNumber" : 1742,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 1742,
        "startColumnNumber" : 4,
        "endLineNumber" : 1748,
        "endColumnNumber" : 6
      },
      "nodeContext" : "httpServer.requestHandler(request -> {\n  request.response().setChunked(true);\n  for (int i=0; i < buffer.length() / 8192; i++) {\n    request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n  }\n  request.response().end();\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 54,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 1742,
        "startColumnNumber" : 4,
        "endLineNumber" : 1748,
        "endColumnNumber" : 7
      },
      "nodeContext" : "httpServer.requestHandler(request -> {\n  request.response().setChunked(true);\n  for (int i=0; i < buffer.length() / 8192; i++) {\n    request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n  }\n  request.response().end();\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 55,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 1736,
        "startColumnNumber" : 46,
        "endLineNumber" : 1775,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] data=new byte[64 * 1024 * 1024];\n  new Random().nextBytes(data);\n  Buffer buffer=Buffer.buffer(data);\n  Buffer readBuffer=Buffer.buffer(64 * 1024 * 1024);\n  HttpServer httpServer=vertx.createHttpServer();\n  httpServer.requestHandler(request -> {\n    request.response().setChunked(true);\n    for (int i=0; i < buffer.length() / 8192; i++) {\n      request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n    }\n    request.response().end();\n  }\n);\n  httpServer.listen(10000);\n  HttpClient httpClient=vertx.createHttpClient();\n  HttpClientRequest clientRequest=httpClient.get(10000,\"localhost\",\"/\");\n  clientRequest.handler(resp -> {\n    resp.handler(b -> {\n      readBuffer.appendBuffer(b);\n      for (int i=0; i < 64; i++) {\n        vertx.setTimer(1,n -> {\n          try {\n            Thread.sleep(0);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n);\n      }\n      ;\n      resp.endHandler(v -> {\n        byte[] expectedData=buffer.getBytes();\n        byte[] actualData=readBuffer.getBytes();\n        assertTrue(Arrays.equals(expectedData,actualData));\n        testComplete();\n      }\n);\n    }\n);\n  }\n);\n  clientRequest.end();\n  await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1360,
        "startLineNumber" : 1735,
        "startColumnNumber" : 2,
        "endLineNumber" : 1775,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPauseResumeClientResponse(){\n  byte[] data=new byte[64 * 1024 * 1024];\n  new Random().nextBytes(data);\n  Buffer buffer=Buffer.buffer(data);\n  Buffer readBuffer=Buffer.buffer(64 * 1024 * 1024);\n  HttpServer httpServer=vertx.createHttpServer();\n  httpServer.requestHandler(request -> {\n    request.response().setChunked(true);\n    for (int i=0; i < buffer.length() / 8192; i++) {\n      request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n    }\n    request.response().end();\n  }\n);\n  httpServer.listen(10000);\n  HttpClient httpClient=vertx.createHttpClient();\n  HttpClientRequest clientRequest=httpClient.get(10000,\"localhost\",\"/\");\n  clientRequest.handler(resp -> {\n    resp.handler(b -> {\n      readBuffer.appendBuffer(b);\n      for (int i=0; i < 64; i++) {\n        vertx.setTimer(1,n -> {\n          try {\n            Thread.sleep(0);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n);\n      }\n      ;\n      resp.endHandler(v -> {\n        byte[] expectedData=buffer.getBytes();\n        byte[] actualData=readBuffer.getBytes();\n        assertTrue(Arrays.equals(expectedData,actualData));\n        testComplete();\n      }\n);\n    }\n);\n  }\n);\n  clientRequest.end();\n  await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 1742,
        "startColumnNumber" : 4,
        "endLineNumber" : 1748,
        "endColumnNumber" : 6
      },
      "nodeContext" : "httpServer.requestHandler(request -> {\n  request.response().setChunked(true);\n  for (int i=0; i < buffer.length() / 8192; i++) {\n    request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n  }\n  request.response().end();\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 54,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.HttpServer"
  }, {
    "nodeContext" : "httpServer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1749,
      "startColumnNumber" : 4,
      "endLineNumber" : 1749,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1749,
        "startColumnNumber" : 4,
        "endLineNumber" : 1749,
        "endColumnNumber" : 28
      },
      "nodeContext" : "httpServer.listen(10000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1749,
        "startColumnNumber" : 4,
        "endLineNumber" : 1749,
        "endColumnNumber" : 29
      },
      "nodeContext" : "httpServer.listen(10000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 1736,
        "startColumnNumber" : 46,
        "endLineNumber" : 1775,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] data=new byte[64 * 1024 * 1024];\n  new Random().nextBytes(data);\n  Buffer buffer=Buffer.buffer(data);\n  Buffer readBuffer=Buffer.buffer(64 * 1024 * 1024);\n  HttpServer httpServer=vertx.createHttpServer();\n  httpServer.requestHandler(request -> {\n    request.response().setChunked(true);\n    for (int i=0; i < buffer.length() / 8192; i++) {\n      request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n    }\n    request.response().end();\n  }\n);\n  httpServer.listen(10000);\n  HttpClient httpClient=vertx.createHttpClient();\n  HttpClientRequest clientRequest=httpClient.get(10000,\"localhost\",\"/\");\n  clientRequest.handler(resp -> {\n    resp.handler(b -> {\n      readBuffer.appendBuffer(b);\n      for (int i=0; i < 64; i++) {\n        vertx.setTimer(1,n -> {\n          try {\n            Thread.sleep(0);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n);\n      }\n      ;\n      resp.endHandler(v -> {\n        byte[] expectedData=buffer.getBytes();\n        byte[] actualData=readBuffer.getBytes();\n        assertTrue(Arrays.equals(expectedData,actualData));\n        testComplete();\n      }\n);\n    }\n);\n  }\n);\n  clientRequest.end();\n  await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1360,
        "startLineNumber" : 1735,
        "startColumnNumber" : 2,
        "endLineNumber" : 1775,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPauseResumeClientResponse(){\n  byte[] data=new byte[64 * 1024 * 1024];\n  new Random().nextBytes(data);\n  Buffer buffer=Buffer.buffer(data);\n  Buffer readBuffer=Buffer.buffer(64 * 1024 * 1024);\n  HttpServer httpServer=vertx.createHttpServer();\n  httpServer.requestHandler(request -> {\n    request.response().setChunked(true);\n    for (int i=0; i < buffer.length() / 8192; i++) {\n      request.response().write(buffer.slice(i * 8192,(i + 1) * 8192));\n    }\n    request.response().end();\n  }\n);\n  httpServer.listen(10000);\n  HttpClient httpClient=vertx.createHttpClient();\n  HttpClientRequest clientRequest=httpClient.get(10000,\"localhost\",\"/\");\n  clientRequest.handler(resp -> {\n    resp.handler(b -> {\n      readBuffer.appendBuffer(b);\n      for (int i=0; i < 64; i++) {\n        vertx.setTimer(1,n -> {\n          try {\n            Thread.sleep(0);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n);\n      }\n      ;\n      resp.endHandler(v -> {\n        byte[] expectedData=buffer.getBytes();\n        byte[] actualData=readBuffer.getBytes();\n        assertTrue(Arrays.equals(expectedData,actualData));\n        testComplete();\n      }\n);\n    }\n);\n  }\n);\n  clientRequest.end();\n  await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1749,
        "startColumnNumber" : 4,
        "endLineNumber" : 1749,
        "endColumnNumber" : 29
      },
      "nodeContext" : "httpServer.listen(10000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.http.HttpServer"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 1742,
    "startColumnNumber" : 4,
    "endLineNumber" : 1742,
    "endColumnNumber" : 14
  }, {
    "charLength" : 10,
    "startLineNumber" : 1749,
    "startColumnNumber" : 4,
    "endLineNumber" : 1749,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}