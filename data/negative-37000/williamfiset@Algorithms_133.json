{
  "id" : 133,
  "expression" : "numSentinels <= text[k - 1]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/LongestCommonSubstring.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numSentinels <= text[k - 1]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 384,
      "startColumnNumber" : 16,
      "endLineNumber" : 384,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 384,
        "startColumnNumber" : 16,
        "endLineNumber" : 385,
        "endColumnNumber" : 85
      },
      "nodeContext" : "numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 384,
        "startColumnNumber" : 15,
        "endLineNumber" : 385,
        "endColumnNumber" : 86
      },
      "nodeContext" : "(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 384,
        "startColumnNumber" : 14,
        "endLineNumber" : 385,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 384,
        "startColumnNumber" : 10,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n  throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 382,
        "startColumnNumber" : 47,
        "endLineNumber" : 393,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  text[k++]=((int)str.charAt(j)) + shift;\n  if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 382,
        "startColumnNumber" : 8,
        "endLineNumber" : 393,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < str.length(); j++) {\n  text[k++]=((int)str.charAt(j)) + shift;\n  if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 380,
        "startColumnNumber" : 54,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String str=strings[i];\n  for (int j=0; j < str.length(); j++) {\n    text[k++]=((int)str.charAt(j)) + shift;\n    if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n    }\n  }\n  text[k++]=sentinel++;\n  if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 380,
        "startColumnNumber" : 6,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, k=0; i < strings.length; i++) {\n  String str=strings[i];\n  for (int j=0; j < str.length(); j++) {\n    text[k++]=((int)str.charAt(j)) + shift;\n    if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n    }\n  }\n  text[k++]=sentinel++;\n  if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n    throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 375,
        "startColumnNumber" : 29,
        "endLineNumber" : 402,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyMinAndMaxAsciiValues();\n  text=new int[textLength];\n  int sentinel=0;\n  for (int i=0, k=0; i < strings.length; i++) {\n    String str=strings[i];\n    for (int j=0; j < str.length(); j++) {\n      text[k++]=((int)str.charAt(j)) + shift;\n      if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n        throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n      }\n    }\n    text[k++]=sentinel++;\n    if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 402,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildText(){\n  verifyMinAndMaxAsciiValues();\n  text=new int[textLength];\n  int sentinel=0;\n  for (int i=0, k=0; i < strings.length; i++) {\n    String str=strings[i];\n    for (int j=0; j < str.length(); j++) {\n      text[k++]=((int)str.charAt(j)) + shift;\n      if (!(numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue))) {\n        throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d]\",text[k - 1],numSentinels,(numSentinels + highestAsciiValue - lowestAsciiValue)));\n      }\n    }\n    text[k++]=sentinel++;\n    if (!(0 <= text[k - 1] && text[k - 1] < numSentinels)) {\n      throw new IllegalStateException(String.format(\"Unexpected character range. Was: %d, wanted between [%d, %d)\",text[k - 1],0,numSentinels));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 384,
        "startColumnNumber" : 16,
        "endLineNumber" : 385,
        "endColumnNumber" : 85
      },
      "nodeContext" : "numSentinels <= text[k - 1] && text[k - 1] <= (numSentinels + highestAsciiValue - lowestAsciiValue)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 384,
    "startColumnNumber" : 16,
    "endLineNumber" : 384,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}