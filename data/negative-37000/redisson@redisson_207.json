{
  "id" : 207,
  "expression" : "(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE)",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/codec/SnappyCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 99,
      "startColumnNumber" : 35,
      "endLineNumber" : 99,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 14,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 99,
        "startColumnNumber" : 20,
        "endLineNumber" : 99,
        "endColumnNumber" : 98
      },
      "nodeContext" : "chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 99
      },
      "nodeContext" : "int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n  for (int i=1; i <= chunksAmount; i++) {\n    int chunkSize=Math.min(Short.MAX_VALUE,buf.readableBytes());\n    ByteBuf chunk=buf.readSlice(chunkSize);\n    int lenIndex=out.writerIndex();\n    out.writeInt(0);\n    SNAPPY_ENCODER.get().encode(chunk,out,chunk.readableBytes());\n    int compressedDataLength=out.writerIndex() - 4 - lenIndex;\n    out.setInt(lenIndex,compressedDataLength);\n  }\n  return out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n  for (int i=1; i <= chunksAmount; i++) {\n    int chunkSize=Math.min(Short.MAX_VALUE,buf.readableBytes());\n    ByteBuf chunk=buf.readSlice(chunkSize);\n    int lenIndex=out.writerIndex();\n    out.writeInt(0);\n    SNAPPY_ENCODER.get().encode(chunk,out,chunk.readableBytes());\n    int compressedDataLength=out.writerIndex() - 4 - lenIndex;\n    out.setInt(lenIndex,compressedDataLength);\n  }\n  return out;\n}\n  finally {\n  buf.release();\n  SNAPPY_ENCODER.get().reset();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 95,
        "startColumnNumber" : 60,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ByteBuf buf=innerCodec.getValueEncoder().encode(in);\n  ByteBuf out=ByteBufAllocator.DEFAULT.buffer();\n  try {\n    int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n    for (int i=1; i <= chunksAmount; i++) {\n      int chunkSize=Math.min(Short.MAX_VALUE,buf.readableBytes());\n      ByteBuf chunk=buf.readSlice(chunkSize);\n      int lenIndex=out.writerIndex();\n      out.writeInt(0);\n      SNAPPY_ENCODER.get().encode(chunk,out,chunk.readableBytes());\n      int compressedDataLength=out.writerIndex() - 4 - lenIndex;\n      out.setInt(lenIndex,compressedDataLength);\n    }\n    return out;\n  }\n  finally {\n    buf.release();\n    SNAPPY_ENCODER.get().reset();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1013,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public ByteBuf encode(Object in) throws IOException {\n  ByteBuf buf=innerCodec.getValueEncoder().encode(in);\n  ByteBuf out=ByteBufAllocator.DEFAULT.buffer();\n  try {\n    int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n    for (int i=1; i <= chunksAmount; i++) {\n      int chunkSize=Math.min(Short.MAX_VALUE,buf.readableBytes());\n      ByteBuf chunk=buf.readSlice(chunkSize);\n      int lenIndex=out.writerIndex();\n      out.writeInt(0);\n      SNAPPY_ENCODER.get().encode(chunk,out,chunk.readableBytes());\n      int compressedDataLength=out.writerIndex() - 4 - lenIndex;\n      out.setInt(lenIndex,compressedDataLength);\n    }\n    return out;\n  }\n  finally {\n    buf.release();\n    SNAPPY_ENCODER.get().reset();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 99
      },
      "nodeContext" : "int chunksAmount=(int)Math.ceil(buf.readableBytes() / (double)Short.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    },
    "tokenLength" : 8,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 99,
    "startColumnNumber" : 35,
    "endLineNumber" : 99,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ ]
}