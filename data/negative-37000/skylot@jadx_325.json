{
  "id" : 325,
  "expression" : "INT",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "INT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 70,
      "startColumnNumber" : 8,
      "endLineNumber" : 70,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 70,
        "startColumnNumber" : 3,
        "endLineNumber" : 70,
        "endColumnNumber" : 12
      },
      "nodeContext" : "case INT:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (type.getPrimitiveType()) {\ncase BOOLEAN:  return lit == 0 ? \"false\" : \"true\";\ncase CHAR:char ch=(char)lit;\nif (!NameMapper.isPrintableChar(ch)) {\nreturn Integer.toString(ch);\n}\nreturn stringUtils.unescapeChar(ch);\ncase BYTE:return formatByte((byte)lit);\ncase SHORT:return formatShort((short)lit);\ncase INT:return formatInteger((int)lit);\ncase LONG:return formatLong(lit);\ncase FLOAT:return formatFloat(Float.intBitsToFloat((int)lit));\ncase DOUBLE:return formatDouble(Double.longBitsToDouble(lit));\ncase OBJECT:case ARRAY:if (lit != 0) {\nLOG.warn(\"Wrong object literal: {} for type: {}\",lit,type);\nreturn Long.toString(lit);\n}\nreturn \"null\";\ndefault:throw new JadxRuntimeException(\"Unknown type in literalToString: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 120,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 46,
        "startColumnNumber" : 88,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (type == null || !type.isTypeKnown()) {\n    String n=Long.toString(lit);\n    if (Math.abs(lit) > 100) {\n      n+=\"; // 0x\" + Long.toHexString(lit) + \" float:\"+ Float.intBitsToFloat((int)lit)+ \" double:\"+ Double.longBitsToDouble(lit);\n    }\n    return n;\n  }\nswitch (type.getPrimitiveType()) {\ncase BOOLEAN:    return lit == 0 ? \"false\" : \"true\";\ncase CHAR:  char ch=(char)lit;\nif (!NameMapper.isPrintableChar(ch)) {\n  return Integer.toString(ch);\n}\nreturn stringUtils.unescapeChar(ch);\ncase BYTE:return formatByte((byte)lit);\ncase SHORT:return formatShort((short)lit);\ncase INT:return formatInteger((int)lit);\ncase LONG:return formatLong(lit);\ncase FLOAT:return formatFloat(Float.intBitsToFloat((int)lit));\ncase DOUBLE:return formatDouble(Double.longBitsToDouble(lit));\ncase OBJECT:case ARRAY:if (lit != 0) {\nLOG.warn(\"Wrong object literal: {} for type: {}\",lit,type);\nreturn Long.toString(lit);\n}\nreturn \"null\";\ndefault:throw new JadxRuntimeException(\"Unknown type in literalToString: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1236,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static String literalToString(long lit,ArgType type,StringUtils stringUtils){\n  if (type == null || !type.isTypeKnown()) {\n    String n=Long.toString(lit);\n    if (Math.abs(lit) > 100) {\n      n+=\"; // 0x\" + Long.toHexString(lit) + \" float:\"+ Float.intBitsToFloat((int)lit)+ \" double:\"+ Double.longBitsToDouble(lit);\n    }\n    return n;\n  }\nswitch (type.getPrimitiveType()) {\ncase BOOLEAN:    return lit == 0 ? \"false\" : \"true\";\ncase CHAR:  char ch=(char)lit;\nif (!NameMapper.isPrintableChar(ch)) {\n  return Integer.toString(ch);\n}\nreturn stringUtils.unescapeChar(ch);\ncase BYTE:return formatByte((byte)lit);\ncase SHORT:return formatShort((short)lit);\ncase INT:return formatInteger((int)lit);\ncase LONG:return formatLong(lit);\ncase FLOAT:return formatFloat(Float.intBitsToFloat((int)lit));\ncase DOUBLE:return formatDouble(Double.longBitsToDouble(lit));\ncase OBJECT:case ARRAY:if (lit != 0) {\nLOG.warn(\"Wrong object literal: {} for type: {}\",lit,type);\nreturn Long.toString(lit);\n}\nreturn \"null\";\ndefault:throw new JadxRuntimeException(\"Unknown type in literalToString: \" + type);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 188,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 70,
        "startColumnNumber" : 3,
        "endLineNumber" : 70,
        "endColumnNumber" : 12
      },
      "nodeContext" : "case INT:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.instructions.args.PrimitiveType"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 70,
    "startColumnNumber" : 8,
    "endLineNumber" : 70,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}