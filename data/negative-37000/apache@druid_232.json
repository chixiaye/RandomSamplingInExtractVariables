{
  "id" : 232,
  "expression" : "expected.get(i).getInterval()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/query/datasourcemetadata/DataSourceMetadataQueryTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expected.get(i).getInterval()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 268,
      "startColumnNumber" : 26,
      "endLineNumber" : 268,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 267,
        "startColumnNumber" : 46,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < segments.size(); i++) {\n  Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3331,
        "startLineNumber" : 154,
        "startColumnNumber" : 2,
        "endLineNumber" : 270,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GenericQueryMetricsFactory queryMetricsFactory=DefaultGenericQueryMetricsFactory.instance();\n  DataSourceQueryQueryToolChest toolChest=new DataSourceQueryQueryToolChest(queryMetricsFactory);\n  List<LogicalSegment> segments=toolChest.filterSegments(null,Arrays.asList(new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2012-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2012-01-01T01/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T01/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T02/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n));\n  Assert.assertEquals(segments.size(),2);\n  List<LogicalSegment> expected=Arrays.asList(new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T02/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n);\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3374,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 270,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFilterSegments(){\n  GenericQueryMetricsFactory queryMetricsFactory=DefaultGenericQueryMetricsFactory.instance();\n  DataSourceQueryQueryToolChest toolChest=new DataSourceQueryQueryToolChest(queryMetricsFactory);\n  List<LogicalSegment> segments=toolChest.filterSegments(null,Arrays.asList(new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2012-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2012-01-01T01/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T01/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T02/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n));\n  Assert.assertEquals(segments.size(),2);\n  List<LogicalSegment> expected=Arrays.asList(new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01/P1D\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n,new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(\"2013-01-01T02/PT1H\");\n    }\n    @Override public Interval getTrueInterval(){\n      return getInterval();\n    }\n  }\n);\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 268,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(expected.get(i).getInterval(),segments.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.apache.druid.timeline.Interval"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 268,
    "startColumnNumber" : 26,
    "endLineNumber" : 268,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}