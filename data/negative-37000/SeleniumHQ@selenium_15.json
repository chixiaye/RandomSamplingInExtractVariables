{
  "id" : 15,
  "expression" : "origUrl.getPath()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/http/netty/NettyWebSocket.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "origUrl.getPath()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 61,
      "startColumnNumber" : 80,
      "endLineNumber" : 61,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 61,
        "startColumnNumber" : 18,
        "endLineNumber" : 61,
        "endColumnNumber" : 110
      },
      "nodeContext" : "new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 110
      },
      "nodeContext" : "wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 61,
        "startColumnNumber" : 6,
        "endLineNumber" : 61,
        "endColumnNumber" : 111
      },
      "nodeContext" : "URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1687,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URL origUrl=new URL(request.getUrl());\n  String wsScheme=\"https\".equalsIgnoreCase(origUrl.getProtocol()) ? \"wss\" : \"ws\";\n  URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n  ListenableFuture<org.asynchttpclient.netty.ws.NettyWebSocket> future=client.prepareGet(wsUri.toString()).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){\n    @Override public void onOpen(    org.asynchttpclient.ws.WebSocket websocket){\n    }\n    @Override public void onClose(    org.asynchttpclient.ws.WebSocket websocket,    int code,    String reason){\n      listener.onClose(code,reason);\n    }\n    @Override public void onError(    Throwable t){\n      listener.onError(t);\n    }\n    @Override public void onBinaryFrame(    byte[] payload,    boolean finalFragment,    int rsv){\n      if (payload != null) {\n        listener.onBinary(payload);\n      }\n    }\n    @Override public void onTextFrame(    String payload,    boolean finalFragment,    int rsv){\n      if (payload != null) {\n        listener.onText(payload);\n      }\n    }\n  }\n).build());\n  socket=future.toCompletableFuture().exceptionally(t -> {\n    log.log(Level.WARNING,t.getMessage(),t);\n    return null;\n  }\n).get();\n  if (socket == null) {\n    throw new ConnectionFailedException(\"Unable to establish websocket connection to \" + request.getUrl());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2121,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  URL origUrl=new URL(request.getUrl());\n  String wsScheme=\"https\".equalsIgnoreCase(origUrl.getProtocol()) ? \"wss\" : \"ws\";\n  URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n  ListenableFuture<org.asynchttpclient.netty.ws.NettyWebSocket> future=client.prepareGet(wsUri.toString()).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){\n    @Override public void onOpen(    org.asynchttpclient.ws.WebSocket websocket){\n    }\n    @Override public void onClose(    org.asynchttpclient.ws.WebSocket websocket,    int code,    String reason){\n      listener.onClose(code,reason);\n    }\n    @Override public void onError(    Throwable t){\n      listener.onError(t);\n    }\n    @Override public void onBinaryFrame(    byte[] payload,    boolean finalFragment,    int rsv){\n      if (payload != null) {\n        listener.onBinary(payload);\n      }\n    }\n    @Override public void onTextFrame(    String payload,    boolean finalFragment,    int rsv){\n      if (payload != null) {\n        listener.onText(payload);\n      }\n    }\n  }\n).build());\n  socket=future.toCompletableFuture().exceptionally(t -> {\n    log.log(Level.WARNING,t.getMessage(),t);\n    return null;\n  }\n).get();\n  if (socket == null) {\n    throw new ConnectionFailedException(\"Unable to establish websocket connection to \" + request.getUrl());\n  }\n}\n catch (InterruptedException e) {\n  Thread.currentThread().interrupt();\n  log.log(Level.WARNING,\"NettyWebSocket initial request interrupted\",e);\n  throw new ConnectionFailedException(\"NettyWebSocket initial request interrupted\",e);\n}\ncatch (ExecutionException|MalformedURLException|URISyntaxException e) {\n  throw new ConnectionFailedException(\"NettyWebSocket initial request execution error\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 288,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2229,
        "startLineNumber" : 53,
        "startColumnNumber" : 105,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"HTTP client\",client);\n  Require.nonNull(\"WebSocket listener\",listener);\n  try {\n    URL origUrl=new URL(request.getUrl());\n    String wsScheme=\"https\".equalsIgnoreCase(origUrl.getProtocol()) ? \"wss\" : \"ws\";\n    URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n    ListenableFuture<org.asynchttpclient.netty.ws.NettyWebSocket> future=client.prepareGet(wsUri.toString()).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){\n      @Override public void onOpen(      org.asynchttpclient.ws.WebSocket websocket){\n      }\n      @Override public void onClose(      org.asynchttpclient.ws.WebSocket websocket,      int code,      String reason){\n        listener.onClose(code,reason);\n      }\n      @Override public void onError(      Throwable t){\n        listener.onError(t);\n      }\n      @Override public void onBinaryFrame(      byte[] payload,      boolean finalFragment,      int rsv){\n        if (payload != null) {\n          listener.onBinary(payload);\n        }\n      }\n      @Override public void onTextFrame(      String payload,      boolean finalFragment,      int rsv){\n        if (payload != null) {\n          listener.onText(payload);\n        }\n      }\n    }\n).build());\n    socket=future.toCompletableFuture().exceptionally(t -> {\n      log.log(Level.WARNING,t.getMessage(),t);\n      return null;\n    }\n).get();\n    if (socket == null) {\n      throw new ConnectionFailedException(\"Unable to establish websocket connection to \" + request.getUrl());\n    }\n  }\n catch (  InterruptedException e) {\n    Thread.currentThread().interrupt();\n    log.log(Level.WARNING,\"NettyWebSocket initial request interrupted\",e);\n    throw new ConnectionFailedException(\"NettyWebSocket initial request interrupted\",e);\n  }\ncatch (  ExecutionException|MalformedURLException|URISyntaxException e) {\n    throw new ConnectionFailedException(\"NettyWebSocket initial request execution error\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2332,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private NettyWebSocket(AsyncHttpClient client,org.asynchttpclient.Request request,Listener listener){\n  Require.nonNull(\"HTTP client\",client);\n  Require.nonNull(\"WebSocket listener\",listener);\n  try {\n    URL origUrl=new URL(request.getUrl());\n    String wsScheme=\"https\".equalsIgnoreCase(origUrl.getProtocol()) ? \"wss\" : \"ws\";\n    URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n    ListenableFuture<org.asynchttpclient.netty.ws.NettyWebSocket> future=client.prepareGet(wsUri.toString()).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener(){\n      @Override public void onOpen(      org.asynchttpclient.ws.WebSocket websocket){\n      }\n      @Override public void onClose(      org.asynchttpclient.ws.WebSocket websocket,      int code,      String reason){\n        listener.onClose(code,reason);\n      }\n      @Override public void onError(      Throwable t){\n        listener.onError(t);\n      }\n      @Override public void onBinaryFrame(      byte[] payload,      boolean finalFragment,      int rsv){\n        if (payload != null) {\n          listener.onBinary(payload);\n        }\n      }\n      @Override public void onTextFrame(      String payload,      boolean finalFragment,      int rsv){\n        if (payload != null) {\n          listener.onText(payload);\n        }\n      }\n    }\n).build());\n    socket=future.toCompletableFuture().exceptionally(t -> {\n      log.log(Level.WARNING,t.getMessage(),t);\n      return null;\n    }\n).get();\n    if (socket == null) {\n      throw new ConnectionFailedException(\"Unable to establish websocket connection to \" + request.getUrl());\n    }\n  }\n catch (  InterruptedException e) {\n    Thread.currentThread().interrupt();\n    log.log(Level.WARNING,\"NettyWebSocket initial request interrupted\",e);\n    throw new ConnectionFailedException(\"NettyWebSocket initial request interrupted\",e);\n  }\ncatch (  ExecutionException|MalformedURLException|URISyntaxException e) {\n    throw new ConnectionFailedException(\"NettyWebSocket initial request execution error\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 61,
        "startColumnNumber" : 6,
        "endLineNumber" : 61,
        "endColumnNumber" : 111
      },
      "nodeContext" : "URI wsUri=new URI(wsScheme,null,origUrl.getHost(),origUrl.getPort(),origUrl.getPath(),null,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 61,
    "startColumnNumber" : 80,
    "endLineNumber" : 61,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}