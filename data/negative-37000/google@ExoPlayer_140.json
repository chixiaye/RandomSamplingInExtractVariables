{
  "id" : 140,
  "expression" : "targetAllocationCount",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetAllocationCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 134,
      "startColumnNumber" : 38,
      "endLineNumber" : 134,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 134,
        "startColumnNumber" : 38,
        "endLineNumber" : 134,
        "endColumnNumber" : 76
      },
      "nodeContext" : "targetAllocationCount - allocatedCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 134,
        "startColumnNumber" : 31,
        "endLineNumber" : 134,
        "endColumnNumber" : 77
      },
      "nodeContext" : "max(0,targetAllocationCount - allocatedCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 77
      },
      "nodeContext" : "targetAvailableCount=max(0,targetAllocationCount - allocatedCount)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 78
      },
      "nodeContext" : "int targetAvailableCount=max(0,targetAllocationCount - allocatedCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 132,
        "startColumnNumber" : 34,
        "endLineNumber" : 171,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int targetAllocationCount=Util.ceilDivide(targetBufferSize,individualAllocationSize);\n  int targetAvailableCount=max(0,targetAllocationCount - allocatedCount);\n  if (targetAvailableCount >= availableCount) {\n    return;\n  }\n  if (initialAllocationBlock != null) {\n    int lowIndex=0;\n    int highIndex=availableCount - 1;\n    while (lowIndex <= highIndex) {\n      Allocation lowAllocation=Assertions.checkNotNull(availableAllocations[lowIndex]);\n      if (lowAllocation.data == initialAllocationBlock) {\n        lowIndex++;\n      }\n else {\n        Allocation highAllocation=Assertions.checkNotNull(availableAllocations[highIndex]);\n        if (highAllocation.data != initialAllocationBlock) {\n          highIndex--;\n        }\n else {\n          availableAllocations[lowIndex++]=highAllocation;\n          availableAllocations[highIndex--]=lowAllocation;\n        }\n      }\n    }\n    targetAvailableCount=max(targetAvailableCount,lowIndex);\n    if (targetAvailableCount >= availableCount) {\n      return;\n    }\n  }\n  Arrays.fill(availableAllocations,targetAvailableCount,availableCount,null);\n  availableCount=targetAvailableCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1721,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 171,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public synchronized void trim(){\n  int targetAllocationCount=Util.ceilDivide(targetBufferSize,individualAllocationSize);\n  int targetAvailableCount=max(0,targetAllocationCount - allocatedCount);\n  if (targetAvailableCount >= availableCount) {\n    return;\n  }\n  if (initialAllocationBlock != null) {\n    int lowIndex=0;\n    int highIndex=availableCount - 1;\n    while (lowIndex <= highIndex) {\n      Allocation lowAllocation=Assertions.checkNotNull(availableAllocations[lowIndex]);\n      if (lowAllocation.data == initialAllocationBlock) {\n        lowIndex++;\n      }\n else {\n        Allocation highAllocation=Assertions.checkNotNull(availableAllocations[highIndex]);\n        if (highAllocation.data != initialAllocationBlock) {\n          highIndex--;\n        }\n else {\n          availableAllocations[lowIndex++]=highAllocation;\n          availableAllocations[highIndex--]=lowAllocation;\n        }\n      }\n    }\n    targetAvailableCount=max(targetAvailableCount,lowIndex);\n    if (targetAvailableCount >= availableCount) {\n      return;\n    }\n  }\n  Arrays.fill(availableAllocations,targetAvailableCount,availableCount,null);\n  availableCount=targetAvailableCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 78
      },
      "nodeContext" : "int targetAvailableCount=max(0,targetAllocationCount - allocatedCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 134,
    "startColumnNumber" : 38,
    "endLineNumber" : 134,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}