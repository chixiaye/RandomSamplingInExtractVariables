{
  "id" : 283,
  "expression" : "http10Config",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/accesslog/AccessLogFileTestCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "http10Config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 106,
      "startColumnNumber" : 84,
      "endLineNumber" : 106,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 106,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 97
      },
      "nodeContext" : "new RequestSpecBuilder().setConfig(http10Config)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 106,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 105
      },
      "nodeContext" : "new RequestSpecBuilder().setConfig(http10Config).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 106,
        "startColumnNumber" : 35,
        "endLineNumber" : 106,
        "endColumnNumber" : 105
      },
      "nodeContext" : "requestSpec=new RequestSpecBuilder().setConfig(http10Config).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 106
      },
      "nodeContext" : "final RequestSpecification requestSpec=new RequestSpecBuilder().setConfig(http10Config).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2381,
        "startLineNumber" : 101,
        "startColumnNumber" : 86,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final RestAssuredConfig http10Config=RestAssured.config().httpClient(new HttpClientConfig().setParam(CoreProtocolPNames.PROTOCOL_VERSION,new ProtocolVersion(\"HTTP\",1,0)));\n  final RequestSpecification requestSpec=new RequestSpecBuilder().setConfig(http10Config).build();\n  final String paramValue=UUID.randomUUID().toString();\n  RestAssured.given(requestSpec).get(\"/health\");\n  RestAssured.given(requestSpec).get(\"/liveliness\");\n  RestAssured.given(requestSpec).get(\"/does-not-exist?foo=\" + paramValue);\n  Awaitility.given().pollInterval(100,TimeUnit.MILLISECONDS).atMost(10,TimeUnit.SECONDS).untilAsserted(new ThrowingRunnable(){\n    @Override public void run() throws Throwable {\n      try (Stream<Path> files=Files.list(logDirectory)){\n        Assertions.assertEquals(1,(int)files.count());\n      }\n       Path path=logDirectory.resolve(\"server.log\");\n      Assertions.assertTrue(Files.exists(path));\n      String data=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      Assertions.assertFalse(data.contains(\"/health\"));\n      Assertions.assertFalse(data.contains(\"/liveliness\"));\n      Assertions.assertTrue(data.contains(\"/does-not-exist\"));\n      Assertions.assertTrue(data.contains(\"?foo=\" + paramValue),\"access log is missing query params\");\n      Assertions.assertFalse(data.contains(\"?foo=\" + paramValue + \"?foo=\"+ paramValue),\"access log contains duplicated query params\");\n      Assertions.assertTrue(data.contains(\"HTTP/1.0\"),\"HTTP/1.0 protocol value is missing in the access log\");\n      Assertions.assertTrue(data.contains(\"Accept: */*\"),\"Accept header is missing in the access log\");\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2473,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSingleLogMessageToFile() throws IOException, InterruptedException {\n  final RestAssuredConfig http10Config=RestAssured.config().httpClient(new HttpClientConfig().setParam(CoreProtocolPNames.PROTOCOL_VERSION,new ProtocolVersion(\"HTTP\",1,0)));\n  final RequestSpecification requestSpec=new RequestSpecBuilder().setConfig(http10Config).build();\n  final String paramValue=UUID.randomUUID().toString();\n  RestAssured.given(requestSpec).get(\"/health\");\n  RestAssured.given(requestSpec).get(\"/liveliness\");\n  RestAssured.given(requestSpec).get(\"/does-not-exist?foo=\" + paramValue);\n  Awaitility.given().pollInterval(100,TimeUnit.MILLISECONDS).atMost(10,TimeUnit.SECONDS).untilAsserted(new ThrowingRunnable(){\n    @Override public void run() throws Throwable {\n      try (Stream<Path> files=Files.list(logDirectory)){\n        Assertions.assertEquals(1,(int)files.count());\n      }\n       Path path=logDirectory.resolve(\"server.log\");\n      Assertions.assertTrue(Files.exists(path));\n      String data=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      Assertions.assertFalse(data.contains(\"/health\"));\n      Assertions.assertFalse(data.contains(\"/liveliness\"));\n      Assertions.assertTrue(data.contains(\"/does-not-exist\"));\n      Assertions.assertTrue(data.contains(\"?foo=\" + paramValue),\"access log is missing query params\");\n      Assertions.assertFalse(data.contains(\"?foo=\" + paramValue + \"?foo=\"+ paramValue),\"access log contains duplicated query params\");\n      Assertions.assertTrue(data.contains(\"HTTP/1.0\"),\"HTTP/1.0 protocol value is missing in the access log\");\n      Assertions.assertTrue(data.contains(\"Accept: */*\"),\"Accept header is missing in the access log\");\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 106
      },
      "nodeContext" : "final RequestSpecification requestSpec=new RequestSpecBuilder().setConfig(http10Config).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.vertx.http.accesslog.RestAssuredConfig"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 106,
    "startColumnNumber" : 84,
    "endLineNumber" : 106,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}