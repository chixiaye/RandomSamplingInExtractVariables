{
  "id" : 237,
  "expression" : "new RegexPatternConverter()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/common/options/RegexPatternConverterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RegexPatternConverter()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 50,
      "startColumnNumber" : 38,
      "endLineNumber" : 50,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 50,
        "startColumnNumber" : 26,
        "endLineNumber" : 50,
        "endColumnNumber" : 65
      },
      "nodeContext" : "converter=new RegexPatternConverter()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 66
      },
      "nodeContext" : "RegexPatternConverter converter=new RegexPatternConverter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 49,
        "startColumnNumber" : 68,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RegexPatternConverter converter=new RegexPatternConverter();\n  for (  String regex : new String[]{\"\",\".*\",\"\\\\s*(\\\\w+)\",\"prefix (suffix1|suffix2)\"}) {\n    assertThat(converter.convert(regex).regexPattern().pattern()).isEqualTo(regex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void createsProperPattern() throws OptionsParsingException {\n  RegexPatternConverter converter=new RegexPatternConverter();\n  for (  String regex : new String[]{\"\",\".*\",\"\\\\s*(\\\\w+)\",\"prefix (suffix1|suffix2)\"}) {\n    assertThat(converter.convert(regex).regexPattern().pattern()).isEqualTo(regex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 47,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 66
      },
      "nodeContext" : "RegexPatternConverter converter=new RegexPatternConverter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.common.options.Converters.RegexPatternConverter"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 50,
    "startColumnNumber" : 38,
    "endLineNumber" : 50,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}