{
  "id" : 210,
  "expression" : "g.createLexerInterpreter(input)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestBufferedTokenStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "g.createLexerInterpreter(input)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 46,
      "startColumnNumber" : 37,
      "endLineNumber" : 46,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 46,
        "startColumnNumber" : 25,
        "endLineNumber" : 46,
        "endColumnNumber" : 68
      },
      "nodeContext" : "lexEngine=g.createLexerInterpreter(input)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 69
      },
      "nodeContext" : "LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 33,
        "startColumnNumber" : 53,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  CharStream input=new ANTLRInputStream(\"x = 3 * 0 + 2 * 0;\");\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  TokenStream tokens=createTokenStream(lexEngine);\n  String result=tokens.LT(1).getText();\n  String expecting=\"x\";\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFirstToken() throws Exception {\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  CharStream input=new ANTLRInputStream(\"x = 3 * 0 + 2 * 0;\");\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  TokenStream tokens=createTokenStream(lexEngine);\n  String result=tokens.LT(1).getText();\n  String expecting=\"x\";\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 74,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 69
      },
      "nodeContext" : "LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.antlr.v4.runtime.LexerInterpreter"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 46,
    "startColumnNumber" : 37,
    "endLineNumber" : 46,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}