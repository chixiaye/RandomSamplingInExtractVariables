{
  "id" : 311,
  "expression" : "new AtomicBoolean(false)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/test/org/openqa/selenium/grid/node/NodeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AtomicBoolean(false)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 244,
      "startColumnNumber" : 27,
      "endLineNumber" : 244,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 244,
        "endColumnNumber" : 51
      },
      "nodeContext" : "called=new AtomicBoolean(false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 52
      },
      "nodeContext" : "AtomicBoolean called=new AtomicBoolean(false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 243,
        "startColumnNumber" : 66,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AtomicBoolean called=new AtomicBoolean(false);\nclass Recording extends Session implements HttpHandler {\n    private Recording(){\n      super(new SessionId(UUID.randomUUID()),uri,stereotype,caps,Instant.now());\n    }\n    @Override public HttpResponse execute(    HttpRequest req) throws UncheckedIOException {\n      called.set(true);\n      return new HttpResponse();\n    }\n  }\n  Node local=LocalNode.builder(tracer,bus,uri,uri,registrationSecret).add(caps,new TestSessionFactory((id,c) -> new Recording())).build();\n  Node remote=new RemoteNode(tracer,new PassthroughHttpClient.Factory(local),new NodeId(UUID.randomUUID()),uri,registrationSecret,ImmutableSet.of(caps));\n  Session session=remote.newSession(createSessionRequest(caps)).map(CreateSessionResponse::getSession).orElseThrow(() -> new RuntimeException(\"Session not created\"));\n  HttpRequest req=new HttpRequest(POST,String.format(\"/session/%s/url\",session.getId()));\n  remote.execute(req);\n  assertThat(called.get()).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1221,
        "startLineNumber" : 242,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void willRespondToWebDriverCommandsSentToOwnedSessions(){\n  AtomicBoolean called=new AtomicBoolean(false);\nclass Recording extends Session implements HttpHandler {\n    private Recording(){\n      super(new SessionId(UUID.randomUUID()),uri,stereotype,caps,Instant.now());\n    }\n    @Override public HttpResponse execute(    HttpRequest req) throws UncheckedIOException {\n      called.set(true);\n      return new HttpResponse();\n    }\n  }\n  Node local=LocalNode.builder(tracer,bus,uri,uri,registrationSecret).add(caps,new TestSessionFactory((id,c) -> new Recording())).build();\n  Node remote=new RemoteNode(tracer,new PassthroughHttpClient.Factory(local),new NodeId(UUID.randomUUID()),uri,registrationSecret,ImmutableSet.of(caps));\n  Session session=remote.newSession(createSessionRequest(caps)).map(CreateSessionResponse::getSession).orElseThrow(() -> new RuntimeException(\"Session not created\"));\n  HttpRequest req=new HttpRequest(POST,String.format(\"/session/%s/url\",session.getId()));\n  remote.execute(req);\n  assertThat(called.get()).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 52
      },
      "nodeContext" : "AtomicBoolean called=new AtomicBoolean(false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.atomic.AtomicBoolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 244,
    "startColumnNumber" : 27,
    "endLineNumber" : 244,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}