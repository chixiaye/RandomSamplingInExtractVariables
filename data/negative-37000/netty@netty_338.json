{
  "id" : 338,
  "expression" : "GZIP.contentEqualsIgnoreCase(contentEncoding)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "GZIP.contentEqualsIgnoreCase(contentEncoding)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 244,
      "startColumnNumber" : 12,
      "endLineNumber" : 244,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 108
      },
      "nodeContext" : "GZIP.contentEqualsIgnoreCase(contentEncoding) || X_GZIP.contentEqualsIgnoreCase(contentEncoding)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (GZIP.contentEqualsIgnoreCase(contentEncoding) || X_GZIP.contentEqualsIgnoreCase(contentEncoding)) {\n  return newCompressionChannel(ctx,ZlibWrapper.GZIP);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 889,
        "startLineNumber" : 243,
        "startColumnNumber" : 34,
        "endLineNumber" : 259,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (GZIP.contentEqualsIgnoreCase(contentEncoding) || X_GZIP.contentEqualsIgnoreCase(contentEncoding)) {\n    return newCompressionChannel(ctx,ZlibWrapper.GZIP);\n  }\n  if (DEFLATE.contentEqualsIgnoreCase(contentEncoding) || X_DEFLATE.contentEqualsIgnoreCase(contentEncoding)) {\n    return newCompressionChannel(ctx,ZlibWrapper.ZLIB);\n  }\n  if (brotliOptions != null && BR.contentEqualsIgnoreCase(contentEncoding)) {\n    return BrotliCompressor.newFactory(brotliOptions.parameters()).get();\n  }\n  if (zstdOptions != null && ZSTD.contentEqualsIgnoreCase(contentEncoding)) {\n    return ZstdCompressor.newFactory(zstdOptions.compressionLevel(),zstdOptions.blockSize(),zstdOptions.maxEncodeSize()).get();\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1608,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a new  {@link Compressor} that encodes the HTTP2 message content encoded in the specified{@code contentEncoding}.\n * @param ctx the context.\n * @param contentEncoding the value of the {@code content-encoding} header\n * @return a new {@link ByteToMessageDecoder} if the specified encoding is supported. {@code null} otherwise(alternatively, you can throw a  {@link Http2Exception} to block unknown encoding).\n * @throws Http2Exception If the specified encoding is not not supported and warrants an exception\n */\nprotected Compressor newContentCompressor(ChannelHandlerContext ctx,CharSequence contentEncoding) throws Http2Exception {\n  if (GZIP.contentEqualsIgnoreCase(contentEncoding) || X_GZIP.contentEqualsIgnoreCase(contentEncoding)) {\n    return newCompressionChannel(ctx,ZlibWrapper.GZIP);\n  }\n  if (DEFLATE.contentEqualsIgnoreCase(contentEncoding) || X_DEFLATE.contentEqualsIgnoreCase(contentEncoding)) {\n    return newCompressionChannel(ctx,ZlibWrapper.ZLIB);\n  }\n  if (brotliOptions != null && BR.contentEqualsIgnoreCase(contentEncoding)) {\n    return BrotliCompressor.newFactory(brotliOptions.parameters()).get();\n  }\n  if (zstdOptions != null && ZSTD.contentEqualsIgnoreCase(contentEncoding)) {\n    return ZstdCompressor.newFactory(zstdOptions.compressionLevel(),zstdOptions.blockSize(),zstdOptions.maxEncodeSize()).get();\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 108
      },
      "nodeContext" : "GZIP.contentEqualsIgnoreCase(contentEncoding) || X_GZIP.contentEqualsIgnoreCase(contentEncoding)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 244,
    "startColumnNumber" : 12,
    "endLineNumber" : 244,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}