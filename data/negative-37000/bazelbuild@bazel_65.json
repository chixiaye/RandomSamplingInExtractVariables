{
  "id" : 65,
  "expression" : "DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/vfs/Path.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 734,
      "startColumnNumber" : 30,
      "endLineNumber" : 734,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 734,
        "startColumnNumber" : 14,
        "endLineNumber" : 734,
        "endColumnNumber" : 95
      },
      "nodeContext" : "hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 734,
        "startColumnNumber" : 14,
        "endLineNumber" : 734,
        "endColumnNumber" : 96
      },
      "nodeContext" : "hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 728,
        "startColumnNumber" : 35,
        "endLineNumber" : 735,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (resolved.isExecutable()) {\n    hasher.putChar('x');\n  }\n else {\n    hasher.putChar('-');\n  }\n  hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 728,
        "startColumnNumber" : 12,
        "endLineNumber" : 738,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolved.isFile()) {\n  if (resolved.isExecutable()) {\n    hasher.putChar('x');\n  }\n else {\n    hasher.putChar('-');\n  }\n  hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n}\n else {\n  hasher.putChar('l').putUnencodedChars(link.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 726,
        "startColumnNumber" : 14,
        "endLineNumber" : 739,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Path resolved=path.resolveSymbolicLinks();\n  if (resolved.isFile()) {\n    if (resolved.isExecutable()) {\n      hasher.putChar('x');\n    }\n else {\n      hasher.putChar('-');\n    }\n    hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 726,
        "startColumnNumber" : 10,
        "endLineNumber" : 742,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  Path resolved=path.resolveSymbolicLinks();\n  if (resolved.isFile()) {\n    if (resolved.isExecutable()) {\n      hasher.putChar('x');\n    }\n else {\n      hasher.putChar('-');\n    }\n    hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n catch (IOException e) {\n  hasher.putChar('l').putUnencodedChars(link.toString());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 725,
        "startColumnNumber" : 31,
        "endLineNumber" : 743,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Path resolved=path.resolveSymbolicLinks();\n    if (resolved.isFile()) {\n      if (resolved.isExecutable()) {\n        hasher.putChar('x');\n      }\n else {\n        hasher.putChar('-');\n      }\n      hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n    }\n else {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n catch (  IOException e) {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 906,
        "startLineNumber" : 725,
        "startColumnNumber" : 8,
        "endLineNumber" : 746,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (link.isAbsolute()) {\n  try {\n    Path resolved=path.resolveSymbolicLinks();\n    if (resolved.isFile()) {\n      if (resolved.isExecutable()) {\n        hasher.putChar('x');\n      }\n else {\n        hasher.putChar('-');\n      }\n      hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n    }\n else {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n catch (  IOException e) {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n else {\n  hasher.putChar('l').putUnencodedChars(link.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 977,
        "startLineNumber" : 723,
        "startColumnNumber" : 40,
        "endLineNumber" : 747,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  PathFragment link=path.readSymbolicLink();\n  if (link.isAbsolute()) {\n    try {\n      Path resolved=path.resolveSymbolicLinks();\n      if (resolved.isFile()) {\n        if (resolved.isExecutable()) {\n          hasher.putChar('x');\n        }\n else {\n          hasher.putChar('-');\n        }\n        hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n catch (    IOException e) {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1216,
        "startLineNumber" : 723,
        "startColumnNumber" : 13,
        "endLineNumber" : 751,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (stat.isSymbolicLink()) {\n  PathFragment link=path.readSymbolicLink();\n  if (link.isAbsolute()) {\n    try {\n      Path resolved=path.resolveSymbolicLinks();\n      if (resolved.isFile()) {\n        if (resolved.isExecutable()) {\n          hasher.putChar('x');\n        }\n else {\n          hasher.putChar('-');\n        }\n        hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n catch (    IOException e) {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n else {\n  hasher.putChar('s');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1329,
        "startLineNumber" : 721,
        "startColumnNumber" : 13,
        "endLineNumber" : 751,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (stat.isDirectory()) {\n  hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n}\n else if (stat.isSymbolicLink()) {\n  PathFragment link=path.readSymbolicLink();\n  if (link.isAbsolute()) {\n    try {\n      Path resolved=path.resolveSymbolicLinks();\n      if (resolved.isFile()) {\n        if (resolved.isExecutable()) {\n          hasher.putChar('x');\n        }\n else {\n          hasher.putChar('-');\n        }\n        hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n catch (    IOException e) {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n else {\n  hasher.putChar('s');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1575,
        "startLineNumber" : 714,
        "startColumnNumber" : 6,
        "endLineNumber" : 751,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (stat.isFile()) {\n  if (path.isExecutable()) {\n    hasher.putChar('x');\n  }\n else {\n    hasher.putChar('-');\n  }\n  hasher.putBytes(DigestUtils.getDigestWithManualFallback(path,stat.getSize()));\n}\n else if (stat.isDirectory()) {\n  hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n}\n else if (stat.isSymbolicLink()) {\n  PathFragment link=path.readSymbolicLink();\n  if (link.isAbsolute()) {\n    try {\n      Path resolved=path.resolveSymbolicLinks();\n      if (resolved.isFile()) {\n        if (resolved.isExecutable()) {\n          hasher.putChar('x');\n        }\n else {\n          hasher.putChar('-');\n        }\n        hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n catch (    IOException e) {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('l').putUnencodedChars(link.toString());\n  }\n}\n else {\n  hasher.putChar('s');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 710,
        "startColumnNumber" : 33,
        "endLineNumber" : 752,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path path=this.getChild(entry);\n  FileStatus stat=path.stat(Symlinks.NOFOLLOW);\n  hasher.putUnencodedChars(entry);\n  if (stat.isFile()) {\n    if (path.isExecutable()) {\n      hasher.putChar('x');\n    }\n else {\n      hasher.putChar('-');\n    }\n    hasher.putBytes(DigestUtils.getDigestWithManualFallback(path,stat.getSize()));\n  }\n else   if (stat.isDirectory()) {\n    hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n  }\n else   if (stat.isSymbolicLink()) {\n    PathFragment link=path.readSymbolicLink();\n    if (link.isAbsolute()) {\n      try {\n        Path resolved=path.resolveSymbolicLinks();\n        if (resolved.isFile()) {\n          if (resolved.isExecutable()) {\n            hasher.putChar('x');\n          }\n else {\n            hasher.putChar('-');\n          }\n          hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n        }\n else {\n          hasher.putChar('l').putUnencodedChars(link.toString());\n        }\n      }\n catch (      IOException e) {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n else {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('s');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 710,
        "startColumnNumber" : 4,
        "endLineNumber" : 752,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String entry : entries) {\n  Path path=this.getChild(entry);\n  FileStatus stat=path.stat(Symlinks.NOFOLLOW);\n  hasher.putUnencodedChars(entry);\n  if (stat.isFile()) {\n    if (path.isExecutable()) {\n      hasher.putChar('x');\n    }\n else {\n      hasher.putChar('-');\n    }\n    hasher.putBytes(DigestUtils.getDigestWithManualFallback(path,stat.getSize()));\n  }\n else   if (stat.isDirectory()) {\n    hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n  }\n else   if (stat.isSymbolicLink()) {\n    PathFragment link=path.readSymbolicLink();\n    if (link.isAbsolute()) {\n      try {\n        Path resolved=path.resolveSymbolicLinks();\n        if (resolved.isFile()) {\n          if (resolved.isExecutable()) {\n            hasher.putChar('x');\n          }\n else {\n            hasher.putChar('-');\n          }\n          hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n        }\n else {\n          hasher.putChar('l').putUnencodedChars(link.toString());\n        }\n      }\n catch (      IOException e) {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n else {\n      hasher.putChar('l').putUnencodedChars(link.toString());\n    }\n  }\n else {\n    hasher.putChar('s');\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 180,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 706,
        "startColumnNumber" : 56,
        "endLineNumber" : 754,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList<String> entries=ImmutableList.sortedCopyOf(fileSystem.getDirectoryEntries(asFragment()));\n  Hasher hasher=fileSystem.getDigestFunction().getHashFunction().newHasher();\n  for (  String entry : entries) {\n    Path path=this.getChild(entry);\n    FileStatus stat=path.stat(Symlinks.NOFOLLOW);\n    hasher.putUnencodedChars(entry);\n    if (stat.isFile()) {\n      if (path.isExecutable()) {\n        hasher.putChar('x');\n      }\n else {\n        hasher.putChar('-');\n      }\n      hasher.putBytes(DigestUtils.getDigestWithManualFallback(path,stat.getSize()));\n    }\n else     if (stat.isDirectory()) {\n      hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n    }\n else     if (stat.isSymbolicLink()) {\n      PathFragment link=path.readSymbolicLink();\n      if (link.isAbsolute()) {\n        try {\n          Path resolved=path.resolveSymbolicLinks();\n          if (resolved.isFile()) {\n            if (resolved.isExecutable()) {\n              hasher.putChar('x');\n            }\n else {\n              hasher.putChar('-');\n            }\n            hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n          }\n else {\n            hasher.putChar('l').putUnencodedChars(link.toString());\n          }\n        }\n catch (        IOException e) {\n          hasher.putChar('l').putUnencodedChars(link.toString());\n        }\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n else {\n      hasher.putChar('s');\n    }\n  }\n  return hasher.hash().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2816,
        "startLineNumber" : 693,
        "startColumnNumber" : 2,
        "endLineNumber" : 754,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return a string representation, as hexadecimal digits, of some hash of the directory. <p>The hash itself is computed according to the design document https://github.com/bazelbuild/proposals/blob/master/designs/2018-07-13-repository-hashing.md and takes enough information into account, to detect the typical non-reproducibility of source-like repository rules, while leaving out what will change from invocation to invocation of a repository rule (in particular file owners) and can reasonably be ignored when considering if a repository is \"the same source tree\".\n * @return a string representation of the bash of the directory\n * @throws IOException if the digest could not be computed for any reason\n */\npublic String getDirectoryDigest() throws IOException {\n  ImmutableList<String> entries=ImmutableList.sortedCopyOf(fileSystem.getDirectoryEntries(asFragment()));\n  Hasher hasher=fileSystem.getDigestFunction().getHashFunction().newHasher();\n  for (  String entry : entries) {\n    Path path=this.getChild(entry);\n    FileStatus stat=path.stat(Symlinks.NOFOLLOW);\n    hasher.putUnencodedChars(entry);\n    if (stat.isFile()) {\n      if (path.isExecutable()) {\n        hasher.putChar('x');\n      }\n else {\n        hasher.putChar('-');\n      }\n      hasher.putBytes(DigestUtils.getDigestWithManualFallback(path,stat.getSize()));\n    }\n else     if (stat.isDirectory()) {\n      hasher.putChar('d').putUnencodedChars(path.getDirectoryDigest());\n    }\n else     if (stat.isSymbolicLink()) {\n      PathFragment link=path.readSymbolicLink();\n      if (link.isAbsolute()) {\n        try {\n          Path resolved=path.resolveSymbolicLinks();\n          if (resolved.isFile()) {\n            if (resolved.isExecutable()) {\n              hasher.putChar('x');\n            }\n else {\n              hasher.putChar('-');\n            }\n            hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n          }\n else {\n            hasher.putChar('l').putUnencodedChars(link.toString());\n          }\n        }\n catch (        IOException e) {\n          hasher.putChar('l').putUnencodedChars(link.toString());\n        }\n      }\n else {\n        hasher.putChar('l').putUnencodedChars(link.toString());\n      }\n    }\n else {\n      hasher.putChar('s');\n    }\n  }\n  return hasher.hash().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 223,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 734,
        "startColumnNumber" : 14,
        "endLineNumber" : 734,
        "endColumnNumber" : 96
      },
      "nodeContext" : "hasher.putBytes(DigestUtils.getDigestWithManualFallbackWhenSizeUnknown(resolved));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 734,
    "startColumnNumber" : 30,
    "endLineNumber" : 734,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}