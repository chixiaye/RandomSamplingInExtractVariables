{
  "id" : 316,
  "expression" : "annotators == null",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/console/ConsoleAnnotationOutputStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotators == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 113,
      "startColumnNumber" : 28,
      "endLineNumber" : 113,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 113,
        "startColumnNumber" : 24,
        "endLineNumber" : 114,
        "endColumnNumber" : 59
      },
      "nodeContext" : "if (annotators == null) annotators=new ArrayList<>();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 112,
        "startColumnNumber" : 33,
        "endLineNumber" : 121,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (annotators == null)   annotators=new ArrayList<>();\n  annotators.add(new ConsoleAnnotator<T>(){\n    @Override public ConsoleAnnotator<T> annotate(    T context,    MarkupText text){\n      return a.annotate(context,text,charPos);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (a != null) {\n  if (annotators == null)   annotators=new ArrayList<>();\n  annotators.add(new ConsoleAnnotator<T>(){\n    @Override public ConsoleAnnotator<T> annotate(    T context,    MarkupText text){\n      return a.annotate(context,text,charPos);\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 110,
        "startColumnNumber" : 20,
        "endLineNumber" : 122,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n  if (a != null) {\n    if (annotators == null)     annotators=new ArrayList<>();\n    annotators.add(new ConsoleAnnotator<T>(){\n      @Override public ConsoleAnnotator<T> annotate(      T context,      MarkupText text){\n        return a.annotate(context,text,charPos);\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 916,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n  if (a != null) {\n    if (annotators == null)     annotators=new ArrayList<>();\n    annotators.add(new ConsoleAnnotator<T>(){\n      @Override public ConsoleAnnotator<T> annotate(      T context,      MarkupText text){\n        return a.annotate(context,text,charPos);\n      }\n    }\n);\n  }\n}\n catch (IOException|ClassNotFoundException e) {\n  LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 97,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (next > written) {\n    lineOut.write(in,written,next - written);\n    lineOut.flush();\n    written=next;\n  }\n else {\n    assert next == written;\n  }\n  final int charPos=strBuf.length();\n  int rest=sz - next;\n  ByteArrayInputStream b=new ByteArrayInputStream(in,next,rest);\n  try {\n    final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n    if (a != null) {\n      if (annotators == null)       annotators=new ArrayList<>();\n      annotators.add(new ConsoleAnnotator<T>(){\n        @Override public ConsoleAnnotator<T> annotate(        T context,        MarkupText text){\n          return a.annotate(context,text,charPos);\n        }\n      }\n);\n    }\n  }\n catch (  IOException|ClassNotFoundException e) {\n    LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n  }\n  int bytesUsed=rest - b.available();\n  written+=bytesUsed;\n  next=ConsoleNote.findPreamble(in,written,sz - written);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1687,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (next >= 0) {\n  if (next > written) {\n    lineOut.write(in,written,next - written);\n    lineOut.flush();\n    written=next;\n  }\n else {\n    assert next == written;\n  }\n  final int charPos=strBuf.length();\n  int rest=sz - next;\n  ByteArrayInputStream b=new ByteArrayInputStream(in,next,rest);\n  try {\n    final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n    if (a != null) {\n      if (annotators == null)       annotators=new ArrayList<>();\n      annotators.add(new ConsoleAnnotator<T>(){\n        @Override public ConsoleAnnotator<T> annotate(        T context,        MarkupText text){\n          return a.annotate(context,text,charPos);\n        }\n      }\n);\n    }\n  }\n catch (  IOException|ClassNotFoundException e) {\n    LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n  }\n  int bytesUsed=rest - b.available();\n  written+=bytesUsed;\n  next=ConsoleNote.findPreamble(in,written,sz - written);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 179,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2190,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int written=0;\n  while (next >= 0) {\n    if (next > written) {\n      lineOut.write(in,written,next - written);\n      lineOut.flush();\n      written=next;\n    }\n else {\n      assert next == written;\n    }\n    final int charPos=strBuf.length();\n    int rest=sz - next;\n    ByteArrayInputStream b=new ByteArrayInputStream(in,next,rest);\n    try {\n      final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n      if (a != null) {\n        if (annotators == null)         annotators=new ArrayList<>();\n        annotators.add(new ConsoleAnnotator<T>(){\n          @Override public ConsoleAnnotator<T> annotate(          T context,          MarkupText text){\n            return a.annotate(context,text,charPos);\n          }\n        }\n);\n      }\n    }\n catch (    IOException|ClassNotFoundException e) {\n      LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n    }\n    int bytesUsed=rest - b.available();\n    written+=bytesUsed;\n    next=ConsoleNote.findPreamble(in,written,sz - written);\n  }\n  lineOut.write(in,written,sz - written);\n  if (annotators != null) {\n    if (ann != null)     annotators.add(ann);\n    ann=ConsoleAnnotator.combine(annotators);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 85,
        "startColumnNumber" : 61,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  line.reset();\n  final StringBuffer strBuf=line.getStringBuffer();\n  int next=ConsoleNote.findPreamble(in,0,sz);\n  List<ConsoleAnnotator<T>> annotators=null;\n{\n    int written=0;\n    while (next >= 0) {\n      if (next > written) {\n        lineOut.write(in,written,next - written);\n        lineOut.flush();\n        written=next;\n      }\n else {\n        assert next == written;\n      }\n      final int charPos=strBuf.length();\n      int rest=sz - next;\n      ByteArrayInputStream b=new ByteArrayInputStream(in,next,rest);\n      try {\n        final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n        if (a != null) {\n          if (annotators == null)           annotators=new ArrayList<>();\n          annotators.add(new ConsoleAnnotator<T>(){\n            @Override public ConsoleAnnotator<T> annotate(            T context,            MarkupText text){\n              return a.annotate(context,text,charPos);\n            }\n          }\n);\n        }\n      }\n catch (      IOException|ClassNotFoundException e) {\n        LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n      }\n      int bytesUsed=rest - b.available();\n      written+=bytesUsed;\n      next=ConsoleNote.findPreamble(in,written,sz - written);\n    }\n    lineOut.write(in,written,sz - written);\n    if (annotators != null) {\n      if (ann != null)       annotators.add(ann);\n      ann=ConsoleAnnotator.combine(annotators);\n    }\n  }\n  lineOut.flush();\n  MarkupText mt=new MarkupText(strBuf.toString());\n  if (ann != null)   ann=ann.annotate(context,mt);\n  out.write(mt.toString(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2960,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Called after we read the whole line of plain text, which is stored in  {@link #buf}. This method performs annotations and send the result to  {@link #out}.\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Override protected void eol(byte[] in,int sz) throws IOException {\n  line.reset();\n  final StringBuffer strBuf=line.getStringBuffer();\n  int next=ConsoleNote.findPreamble(in,0,sz);\n  List<ConsoleAnnotator<T>> annotators=null;\n{\n    int written=0;\n    while (next >= 0) {\n      if (next > written) {\n        lineOut.write(in,written,next - written);\n        lineOut.flush();\n        written=next;\n      }\n else {\n        assert next == written;\n      }\n      final int charPos=strBuf.length();\n      int rest=sz - next;\n      ByteArrayInputStream b=new ByteArrayInputStream(in,next,rest);\n      try {\n        final ConsoleNote a=ConsoleNote.readFrom(new DataInputStream(b));\n        if (a != null) {\n          if (annotators == null)           annotators=new ArrayList<>();\n          annotators.add(new ConsoleAnnotator<T>(){\n            @Override public ConsoleAnnotator<T> annotate(            T context,            MarkupText text){\n              return a.annotate(context,text,charPos);\n            }\n          }\n);\n        }\n      }\n catch (      IOException|ClassNotFoundException e) {\n        LOGGER.log(Level.FINE,\"Failed to resurrect annotation from \\\"\" + StringEscapeUtils.escapeJava(new String(in,next,rest)) + \"\\\"\",e);\n      }\n      int bytesUsed=rest - b.available();\n      written+=bytesUsed;\n      next=ConsoleNote.findPreamble(in,written,sz - written);\n    }\n    lineOut.write(in,written,sz - written);\n    if (annotators != null) {\n      if (ann != null)       annotators.add(ann);\n      ann=ConsoleAnnotator.combine(annotators);\n    }\n  }\n  lineOut.flush();\n  MarkupText mt=new MarkupText(strBuf.toString());\n  if (ann != null)   ann=ann.annotate(context,mt);\n  out.write(mt.toString(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 113,
        "startColumnNumber" : 24,
        "endLineNumber" : 114,
        "endColumnNumber" : 59
      },
      "nodeContext" : "if (annotators == null) annotators=new ArrayList<>();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 113,
    "startColumnNumber" : 28,
    "endLineNumber" : 113,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}