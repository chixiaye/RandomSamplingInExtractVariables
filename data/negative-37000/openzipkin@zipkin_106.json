{
  "id" : 106,
  "expression" : "callback",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "callback",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 41,
      "startColumnNumber" : 34,
      "endLineNumber" : 41,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 43
      },
      "nodeContext" : "asyncConsumer.accept(sampled,callback)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 44
      },
      "nodeContext" : "asyncConsumer.accept(sampled,callback);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 34,
        "startColumnNumber" : 64,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Span> sampled=new ArrayList<>(input.size());\n  for (  Span s : input) {\n    if (sampler.isSampled(s))     sampled.add(s);\n  }\n  int dropped=input.size() - sampled.size();\n  if (dropped > 0)   metrics.incrementSpansDropped(dropped);\n  asyncConsumer.accept(sampled,callback);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void accept(List<Span> input,Callback<Void> callback){\n  List<Span> sampled=new ArrayList<>(input.size());\n  for (  Span s : input) {\n    if (sampler.isSampled(s))     sampled.add(s);\n  }\n  int dropped=input.size() - sampled.size();\n  if (dropped > 0)   metrics.incrementSpansDropped(dropped);\n  asyncConsumer.accept(sampled,callback);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 79,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 44
      },
      "nodeContext" : "asyncConsumer.accept(sampled,callback);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "zipkin.Callback<java.lang.Void>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 41,
    "startColumnNumber" : 34,
    "endLineNumber" : 41,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}