{
  "id" : 418,
  "expression" : "\"created json from map => \" + json.toString()",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/util/JsonUtility.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"created json from map => \" + json.toString()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 78,
      "startColumnNumber" : 25,
      "endLineNumber" : 78,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 71
      },
      "nodeContext" : "logger.debug(\"created json from map => \" + json.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 72
      },
      "nodeContext" : "logger.debug(\"created json from map => \" + json.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1820,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonDocument json=new JsonDocument();\n  json.startGroup();\n  for (  String key : jsonData.keySet()) {\n    Object data=jsonData.get(key);\n    if (data instanceof Map) {\n      json.addValue(key,jsonFromMap((Map<String,Object>)data));\n    }\n else     if (data instanceof Object[]) {\n      json.addValue(key,\"[\" + stringArrayFromObjectArray((Object[])data) + \"]\");\n    }\n else     if (data instanceof Collection) {\n      json.addValue(key,\"[\" + stringArrayFromObjectArray(((Collection)data).toArray()) + \"]\");\n    }\n else     if (data instanceof int[]) {\n      String intArray=Arrays.toString((int[])data);\n      intArray=intArray.replaceAll(\" \",\"\");\n      json.addValue(key,intArray);\n    }\n else     if (data instanceof JsonCapableObject) {\n      json.addValue(key,jsonFromMap(((JsonCapableObject)data).jsonMap()));\n    }\n else {\n      json.addValue(key,String.valueOf(data));\n    }\n  }\n  json.endGroup();\n  logger.debug(\"created json from map => \" + json.toString());\n  return json.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonDocument json=new JsonDocument();\n  json.startGroup();\n  for (  String key : jsonData.keySet()) {\n    Object data=jsonData.get(key);\n    if (data instanceof Map) {\n      json.addValue(key,jsonFromMap((Map<String,Object>)data));\n    }\n else     if (data instanceof Object[]) {\n      json.addValue(key,\"[\" + stringArrayFromObjectArray((Object[])data) + \"]\");\n    }\n else     if (data instanceof Collection) {\n      json.addValue(key,\"[\" + stringArrayFromObjectArray(((Collection)data).toArray()) + \"]\");\n    }\n else     if (data instanceof int[]) {\n      String intArray=Arrays.toString((int[])data);\n      intArray=intArray.replaceAll(\" \",\"\");\n      json.addValue(key,intArray);\n    }\n else     if (data instanceof JsonCapableObject) {\n      json.addValue(key,jsonFromMap(((JsonCapableObject)data).jsonMap()));\n    }\n else {\n      json.addValue(key,String.valueOf(data));\n    }\n  }\n  json.endGroup();\n  logger.debug(\"created json from map => \" + json.toString());\n  return json.toString();\n}\n catch (Exception e) {\n  logger.error(\"Could not create JSON from Map. \",e);\n  return \"{}\";\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 196,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1963,
        "startLineNumber" : 46,
        "startColumnNumber" : 67,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    JsonDocument json=new JsonDocument();\n    json.startGroup();\n    for (    String key : jsonData.keySet()) {\n      Object data=jsonData.get(key);\n      if (data instanceof Map) {\n        json.addValue(key,jsonFromMap((Map<String,Object>)data));\n      }\n else       if (data instanceof Object[]) {\n        json.addValue(key,\"[\" + stringArrayFromObjectArray((Object[])data) + \"]\");\n      }\n else       if (data instanceof Collection) {\n        json.addValue(key,\"[\" + stringArrayFromObjectArray(((Collection)data).toArray()) + \"]\");\n      }\n else       if (data instanceof int[]) {\n        String intArray=Arrays.toString((int[])data);\n        intArray=intArray.replaceAll(\" \",\"\");\n        json.addValue(key,intArray);\n      }\n else       if (data instanceof JsonCapableObject) {\n        json.addValue(key,jsonFromMap(((JsonCapableObject)data).jsonMap()));\n      }\n else {\n        json.addValue(key,String.valueOf(data));\n      }\n    }\n    json.endGroup();\n    logger.debug(\"created json from map => \" + json.toString());\n    return json.toString();\n  }\n catch (  Exception e) {\n    logger.error(\"Could not create JSON from Map. \",e);\n    return \"{}\";\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2512,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Pass in a Map and this method will return a JSON string. <p/> The map can contain Objects, int[], Object[] and Collections and they will be converted into string representations. <p/> Nested maps can be included as values and the JSON will have nested object notation. <p/> Arrays/Collections can have Maps in them as well. <p/> See the unit tests for examples.\n * @param jsonData\n * @return\n */\npublic static String jsonFromMap(Map<String,Object> jsonData){\n  try {\n    JsonDocument json=new JsonDocument();\n    json.startGroup();\n    for (    String key : jsonData.keySet()) {\n      Object data=jsonData.get(key);\n      if (data instanceof Map) {\n        json.addValue(key,jsonFromMap((Map<String,Object>)data));\n      }\n else       if (data instanceof Object[]) {\n        json.addValue(key,\"[\" + stringArrayFromObjectArray((Object[])data) + \"]\");\n      }\n else       if (data instanceof Collection) {\n        json.addValue(key,\"[\" + stringArrayFromObjectArray(((Collection)data).toArray()) + \"]\");\n      }\n else       if (data instanceof int[]) {\n        String intArray=Arrays.toString((int[])data);\n        intArray=intArray.replaceAll(\" \",\"\");\n        json.addValue(key,intArray);\n      }\n else       if (data instanceof JsonCapableObject) {\n        json.addValue(key,jsonFromMap(((JsonCapableObject)data).jsonMap()));\n      }\n else {\n        json.addValue(key,String.valueOf(data));\n      }\n    }\n    json.endGroup();\n    logger.debug(\"created json from map => \" + json.toString());\n    return json.toString();\n  }\n catch (  Exception e) {\n    logger.error(\"Could not create JSON from Map. \",e);\n    return \"{}\";\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 72
      },
      "nodeContext" : "logger.debug(\"created json from map => \" + json.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 78,
    "startColumnNumber" : 25,
    "endLineNumber" : 78,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}