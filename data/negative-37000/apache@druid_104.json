{
  "id" : 104,
  "expression" : "objectMap.get(\"interval\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/timeline/SegmentWithOvershadowedStatusTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "objectMap.get(\"interval\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 90,
      "startColumnNumber" : 45,
      "endLineNumber" : 90,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Assert.assertEquals(INTERVAL.toString(),objectMap.get(\"interval\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(INTERVAL.toString(),objectMap.get(\"interval\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Map<String,Object> objectMap=MAPPER.readValue(MAPPER.writeValueAsString(SEGMENT),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n  Assert.assertEquals(11,objectMap.size());\n  Assert.assertEquals(\"something\",objectMap.get(\"dataSource\"));\n  Assert.assertEquals(INTERVAL.toString(),objectMap.get(\"interval\"));\n  Assert.assertEquals(\"1\",objectMap.get(\"version\"));\n  Assert.assertEquals(LOAD_SPEC,objectMap.get(\"loadSpec\"));\n  Assert.assertEquals(\"dim1,dim2\",objectMap.get(\"dimensions\"));\n  Assert.assertEquals(\"met1,met2\",objectMap.get(\"metrics\"));\n  Assert.assertEquals(ImmutableMap.of(\"type\",\"none\"),objectMap.get(\"shardSpec\"));\n  Assert.assertEquals(TEST_VERSION,objectMap.get(\"binaryVersion\"));\n  Assert.assertEquals(1,objectMap.get(\"size\"));\n  Assert.assertEquals(OVERSHADOWED,objectMap.get(\"overshadowed\"));\n  final String json=MAPPER.writeValueAsString(SEGMENT);\n  final TestSegmentWithOvershadowedStatus deserializedSegment=MAPPER.readValue(json,TestSegmentWithOvershadowedStatus.class);\n  DataSegment dataSegment=SEGMENT.getDataSegment();\n  Assert.assertEquals(dataSegment.getDataSource(),deserializedSegment.getDataSource());\n  Assert.assertEquals(dataSegment.getInterval(),deserializedSegment.getInterval());\n  Assert.assertEquals(dataSegment.getVersion(),deserializedSegment.getVersion());\n  Assert.assertEquals(dataSegment.getLoadSpec(),deserializedSegment.getLoadSpec());\n  Assert.assertEquals(dataSegment.getDimensions(),deserializedSegment.getDimensions());\n  Assert.assertEquals(dataSegment.getMetrics(),deserializedSegment.getMetrics());\n  Assert.assertEquals(dataSegment.getShardSpec(),deserializedSegment.getShardSpec());\n  Assert.assertEquals(dataSegment.getSize(),deserializedSegment.getSize());\n  Assert.assertEquals(dataSegment.getId(),deserializedSegment.getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2026,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testUnwrappedSegmentWithOvershadowedStatusDeserialization() throws Exception {\n  final Map<String,Object> objectMap=MAPPER.readValue(MAPPER.writeValueAsString(SEGMENT),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n  Assert.assertEquals(11,objectMap.size());\n  Assert.assertEquals(\"something\",objectMap.get(\"dataSource\"));\n  Assert.assertEquals(INTERVAL.toString(),objectMap.get(\"interval\"));\n  Assert.assertEquals(\"1\",objectMap.get(\"version\"));\n  Assert.assertEquals(LOAD_SPEC,objectMap.get(\"loadSpec\"));\n  Assert.assertEquals(\"dim1,dim2\",objectMap.get(\"dimensions\"));\n  Assert.assertEquals(\"met1,met2\",objectMap.get(\"metrics\"));\n  Assert.assertEquals(ImmutableMap.of(\"type\",\"none\"),objectMap.get(\"shardSpec\"));\n  Assert.assertEquals(TEST_VERSION,objectMap.get(\"binaryVersion\"));\n  Assert.assertEquals(1,objectMap.get(\"size\"));\n  Assert.assertEquals(OVERSHADOWED,objectMap.get(\"overshadowed\"));\n  final String json=MAPPER.writeValueAsString(SEGMENT);\n  final TestSegmentWithOvershadowedStatus deserializedSegment=MAPPER.readValue(json,TestSegmentWithOvershadowedStatus.class);\n  DataSegment dataSegment=SEGMENT.getDataSegment();\n  Assert.assertEquals(dataSegment.getDataSource(),deserializedSegment.getDataSource());\n  Assert.assertEquals(dataSegment.getInterval(),deserializedSegment.getInterval());\n  Assert.assertEquals(dataSegment.getVersion(),deserializedSegment.getVersion());\n  Assert.assertEquals(dataSegment.getLoadSpec(),deserializedSegment.getLoadSpec());\n  Assert.assertEquals(dataSegment.getDimensions(),deserializedSegment.getDimensions());\n  Assert.assertEquals(dataSegment.getMetrics(),deserializedSegment.getMetrics());\n  Assert.assertEquals(dataSegment.getShardSpec(),deserializedSegment.getShardSpec());\n  Assert.assertEquals(dataSegment.getSize(),deserializedSegment.getSize());\n  Assert.assertEquals(dataSegment.getId(),deserializedSegment.getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(INTERVAL.toString(),objectMap.get(\"interval\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 90,
    "startColumnNumber" : 45,
    "endLineNumber" : 90,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}