{
  "id" : 409,
  "expression" : "side",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ai/formations/patterns/SquareFormation.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 13,
      "startColumnNumber" : 24,
      "endLineNumber" : 13,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 13,
        "startColumnNumber" : 17,
        "endLineNumber" : 13,
        "endColumnNumber" : 28
      },
      "nodeContext" : "slot % side",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 13,
        "startColumnNumber" : 12,
        "endLineNumber" : 13,
        "endColumnNumber" : 28
      },
      "nodeContext" : "cx=slot % side",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int cx=slot % side, cy=slot / side;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int cx=slot % side, cy=slot / side;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 13,
      "startColumnNumber" : 42,
      "endLineNumber" : 13,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 13,
        "startColumnNumber" : 35,
        "endLineNumber" : 13,
        "endColumnNumber" : 46
      },
      "nodeContext" : "slot / side",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 13,
        "startColumnNumber" : 30,
        "endLineNumber" : 13,
        "endColumnNumber" : 46
      },
      "nodeContext" : "cy=slot / side",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int cx=slot % side, cy=slot / side;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int cx=slot % side, cy=slot / side;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 16,
      "startColumnNumber" : 17,
      "endLineNumber" : 16,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 16,
        "startColumnNumber" : 17,
        "endLineNumber" : 16,
        "endColumnNumber" : 24
      },
      "nodeContext" : "side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 24
      },
      "nodeContext" : "cx == side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 40
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 16,
      "startColumnNumber" : 34,
      "endLineNumber" : 16,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 16,
        "startColumnNumber" : 34,
        "endLineNumber" : 16,
        "endColumnNumber" : 40
      },
      "nodeContext" : "side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 16,
        "startColumnNumber" : 28,
        "endLineNumber" : 16,
        "endColumnNumber" : 40
      },
      "nodeContext" : "cy == side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 40
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 16,
      "startColumnNumber" : 45,
      "endLineNumber" : 16,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 16,
        "startColumnNumber" : 45,
        "endLineNumber" : 16,
        "endColumnNumber" : 51
      },
      "nodeContext" : "side % 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 16,
        "startColumnNumber" : 44,
        "endLineNumber" : 16,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(side % 2)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 16,
        "startColumnNumber" : 44,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 16,
        "startColumnNumber" : 11,
        "endLineNumber" : 16,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cx == side / 2 && cy == side / 2 && (side % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 19,
      "startColumnNumber" : 24,
      "endLineNumber" : 19,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 19,
        "startColumnNumber" : 17,
        "endLineNumber" : 19,
        "endColumnNumber" : 28
      },
      "nodeContext" : "slot % side",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 19,
        "startColumnNumber" : 12,
        "endLineNumber" : 19,
        "endColumnNumber" : 28
      },
      "nodeContext" : "cx=slot % side",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 19,
        "startColumnNumber" : 12,
        "endLineNumber" : 19,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cx=slot % side;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 19,
        "startColumnNumber" : 12,
        "endLineNumber" : 19,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cx=slot % side;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 20,
      "startColumnNumber" : 24,
      "endLineNumber" : 20,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 20,
        "startColumnNumber" : 17,
        "endLineNumber" : 20,
        "endColumnNumber" : 28
      },
      "nodeContext" : "slot / side",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 28
      },
      "nodeContext" : "cy=slot / side",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cy=slot / side;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 16,
        "startColumnNumber" : 56,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n  slot=slots;\n  cx=slot % side;\n  cy=slot / side;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 29
      },
      "nodeContext" : "cy=slot / side;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 23,
      "startColumnNumber" : 29,
      "endLineNumber" : 23,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 23,
        "startColumnNumber" : 29,
        "endLineNumber" : 23,
        "endColumnNumber" : 36
      },
      "nodeContext" : "side / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 23,
        "startColumnNumber" : 29,
        "endLineNumber" : 23,
        "endColumnNumber" : 43
      },
      "nodeContext" : "side / 2f - 0.5f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 23,
        "startColumnNumber" : 28,
        "endLineNumber" : 23,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(side / 2f - 0.5f)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 23,
        "startColumnNumber" : 23,
        "endLineNumber" : 23,
        "endColumnNumber" : 44
      },
      "nodeContext" : "cx - (side / 2f - 0.5f)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 23,
        "startColumnNumber" : 15,
        "endLineNumber" : 23,
        "endColumnNumber" : 71
      },
      "nodeContext" : "out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 23,
        "startColumnNumber" : 15,
        "endLineNumber" : 23,
        "endColumnNumber" : 84
      },
      "nodeContext" : "out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 85
      },
      "nodeContext" : "return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 85
      },
      "nodeContext" : "return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "side",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 23,
      "startColumnNumber" : 52,
      "endLineNumber" : 23,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 23,
        "startColumnNumber" : 52,
        "endLineNumber" : 23,
        "endColumnNumber" : 59
      },
      "nodeContext" : "side / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 23,
        "startColumnNumber" : 52,
        "endLineNumber" : 23,
        "endColumnNumber" : 66
      },
      "nodeContext" : "side / 2f - 0.5f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 23,
        "startColumnNumber" : 51,
        "endLineNumber" : 23,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(side / 2f - 0.5f)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 23,
        "startColumnNumber" : 46,
        "endLineNumber" : 23,
        "endColumnNumber" : 67
      },
      "nodeContext" : "cy - (side / 2f - 0.5f)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 23,
        "startColumnNumber" : 15,
        "endLineNumber" : 23,
        "endColumnNumber" : 71
      },
      "nodeContext" : "out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 23,
        "startColumnNumber" : 15,
        "endLineNumber" : 23,
        "endColumnNumber" : 84
      },
      "nodeContext" : "out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 85
      },
      "nodeContext" : "return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 85
      },
      "nodeContext" : "return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 13,
    "startColumnNumber" : 24,
    "endLineNumber" : 13,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 13,
    "startColumnNumber" : 42,
    "endLineNumber" : 13,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 16,
    "startColumnNumber" : 17,
    "endLineNumber" : 16,
    "endColumnNumber" : 21
  }, {
    "charLength" : 4,
    "startLineNumber" : 16,
    "startColumnNumber" : 34,
    "endLineNumber" : 16,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 16,
    "startColumnNumber" : 45,
    "endLineNumber" : 16,
    "endColumnNumber" : 49
  }, {
    "charLength" : 4,
    "startLineNumber" : 19,
    "startColumnNumber" : 24,
    "endLineNumber" : 19,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 20,
    "startColumnNumber" : 24,
    "endLineNumber" : 20,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 23,
    "startColumnNumber" : 29,
    "endLineNumber" : 23,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 23,
    "startColumnNumber" : 52,
    "endLineNumber" : 23,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  } ]
}