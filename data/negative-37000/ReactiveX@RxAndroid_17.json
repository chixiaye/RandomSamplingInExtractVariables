{
  "id" : 17,
  "expression" : "worker",
  "projectName" : "ReactiveX@RxAndroid",
  "commitID" : "6b7cfe2a0acb8903ea10014d2f66386954a37813",
  "filePath" : "/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 110,
      "startColumnNumber" : 53,
      "endLineNumber" : 110,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 60
      },
      "nodeContext" : "when(spyScheduler.createWorker()).thenReturn(worker)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "when(spyScheduler.createWorker()).thenReturn(worker);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1082,
        "startLineNumber" : 102,
        "startColumnNumber" : 82,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Observable.OnSubscribe<Integer> onSubscribe=mock(Observable.OnSubscribe.class);\n  final Handler handler=spy(new Handler());\n  final Scheduler scheduler=new HandlerThreadScheduler(handler);\n  final Worker worker=spy(scheduler.createWorker());\n  final Scheduler spyScheduler=spy(scheduler);\n  when(spyScheduler.createWorker()).thenReturn(worker);\n  final Subscription subscription=Observable.create(onSubscribe).delaySubscription(1,TimeUnit.MINUTES,spyScheduler).subscribe();\n  verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES));\n  verify(handler).postDelayed(Matchers.any(Runnable.class),Matchers.eq(TimeUnit.MINUTES.toMillis(1L)));\n  subscription.unsubscribe();\n  Robolectric.runUiThreadTasksIncludingDelayedTasks();\n  verify(onSubscribe,never()).call(Matchers.any(Subscriber.class));\n  verify(handler).removeCallbacks(Matchers.any(Runnable.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldNotCallOnSubscribeWhenSubscriptionUnsubscribedBeforeDelay(){\n  final Observable.OnSubscribe<Integer> onSubscribe=mock(Observable.OnSubscribe.class);\n  final Handler handler=spy(new Handler());\n  final Scheduler scheduler=new HandlerThreadScheduler(handler);\n  final Worker worker=spy(scheduler.createWorker());\n  final Scheduler spyScheduler=spy(scheduler);\n  when(spyScheduler.createWorker()).thenReturn(worker);\n  final Subscription subscription=Observable.create(onSubscribe).delaySubscription(1,TimeUnit.MINUTES,spyScheduler).subscribe();\n  verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES));\n  verify(handler).postDelayed(Matchers.any(Runnable.class),Matchers.eq(TimeUnit.MINUTES.toMillis(1L)));\n  subscription.unsubscribe();\n  Robolectric.runUiThreadTasksIncludingDelayedTasks();\n  verify(onSubscribe,never()).call(Matchers.any(Subscriber.class));\n  verify(handler).removeCallbacks(Matchers.any(Runnable.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "when(spyScheduler.createWorker()).thenReturn(worker);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "rx.android.schedulers.Worker"
  }, {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 116,
      "startColumnNumber" : 15,
      "endLineNumber" : 116,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 22
      },
      "nodeContext" : "verify(worker)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 63
      },
      "nodeContext" : "verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 64
      },
      "nodeContext" : "verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1082,
        "startLineNumber" : 102,
        "startColumnNumber" : 82,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Observable.OnSubscribe<Integer> onSubscribe=mock(Observable.OnSubscribe.class);\n  final Handler handler=spy(new Handler());\n  final Scheduler scheduler=new HandlerThreadScheduler(handler);\n  final Worker worker=spy(scheduler.createWorker());\n  final Scheduler spyScheduler=spy(scheduler);\n  when(spyScheduler.createWorker()).thenReturn(worker);\n  final Subscription subscription=Observable.create(onSubscribe).delaySubscription(1,TimeUnit.MINUTES,spyScheduler).subscribe();\n  verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES));\n  verify(handler).postDelayed(Matchers.any(Runnable.class),Matchers.eq(TimeUnit.MINUTES.toMillis(1L)));\n  subscription.unsubscribe();\n  Robolectric.runUiThreadTasksIncludingDelayedTasks();\n  verify(onSubscribe,never()).call(Matchers.any(Subscriber.class));\n  verify(handler).removeCallbacks(Matchers.any(Runnable.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldNotCallOnSubscribeWhenSubscriptionUnsubscribedBeforeDelay(){\n  final Observable.OnSubscribe<Integer> onSubscribe=mock(Observable.OnSubscribe.class);\n  final Handler handler=spy(new Handler());\n  final Scheduler scheduler=new HandlerThreadScheduler(handler);\n  final Worker worker=spy(scheduler.createWorker());\n  final Scheduler spyScheduler=spy(scheduler);\n  when(spyScheduler.createWorker()).thenReturn(worker);\n  final Subscription subscription=Observable.create(onSubscribe).delaySubscription(1,TimeUnit.MINUTES,spyScheduler).subscribe();\n  verify(worker).schedule(Matchers.any(Action0.class),Matchers.eq(1L),Matchers.eq(TimeUnit.MINUTES));\n  verify(handler).postDelayed(Matchers.any(Runnable.class),Matchers.eq(TimeUnit.MINUTES.toMillis(1L)));\n  subscription.unsubscribe();\n  Robolectric.runUiThreadTasksIncludingDelayedTasks();\n  verify(onSubscribe,never()).call(Matchers.any(Subscriber.class));\n  verify(handler).removeCallbacks(Matchers.any(Runnable.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 22
      },
      "nodeContext" : "verify(worker)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "rx.android.schedulers.Worker"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 110,
    "startColumnNumber" : 53,
    "endLineNumber" : 110,
    "endColumnNumber" : 59
  }, {
    "charLength" : 6,
    "startLineNumber" : 116,
    "startColumnNumber" : 15,
    "endLineNumber" : 116,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}