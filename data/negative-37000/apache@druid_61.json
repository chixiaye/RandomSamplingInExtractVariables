{
  "id" : 61,
  "expression" : "\"1970-01-01T00:00:00.000Z\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-contrib/distinctcount/src/test/java/org/apache/druid/query/aggregation/distinctcount/DistinctCountGroupByQueryTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"1970-01-01T00:00:00.000Z\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 145,
      "startColumnNumber" : 12,
      "endLineNumber" : 145,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 142,
        "startColumnNumber" : 38,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 142,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2677,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IncrementalIndex index=new OnheapIncrementalIndex.Builder().setIndexSchema(new IncrementalIndexSchema.Builder().withQueryGranularity(Granularities.SECOND).withMetrics(new CountAggregatorFactory(\"cnt\")).build()).setConcurrentEventAdd(true).setMaxRowCount(1000).build();\n  String visitor_id=\"visitor_id\";\n  String client_type=\"client_type\";\n  long timestamp=DateTimes.of(\"2010-01-01\").getMillis();\n  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"0\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 1,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"1\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 2,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"2\",client_type,\"android\")));\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(client_type,client_type)).setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(client_type,OrderByColumnSpec.Direction.DESCENDING)),10)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new DistinctCountAggregatorFactory(\"UV\",visitor_id,null)).build();\n  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);\n  Iterable<ResultRow> results=GroupByQueryRunnerTestHelper.runQuery(factory,factory.createRunner(incrementalIndexSegment),query);\n  List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n  TestHelper.assertExpectedObjects(expectedResults,results,\"distinct-count\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2750,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGroupByWithDistinctCountAgg() throws Exception {\n  IncrementalIndex index=new OnheapIncrementalIndex.Builder().setIndexSchema(new IncrementalIndexSchema.Builder().withQueryGranularity(Granularities.SECOND).withMetrics(new CountAggregatorFactory(\"cnt\")).build()).setConcurrentEventAdd(true).setMaxRowCount(1000).build();\n  String visitor_id=\"visitor_id\";\n  String client_type=\"client_type\";\n  long timestamp=DateTimes.of(\"2010-01-01\").getMillis();\n  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"0\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 1,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"1\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 2,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"2\",client_type,\"android\")));\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(client_type,client_type)).setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(client_type,OrderByColumnSpec.Direction.DESCENDING)),10)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new DistinctCountAggregatorFactory(\"UV\",visitor_id,null)).build();\n  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);\n  Iterable<ResultRow> results=GroupByQueryRunnerTestHelper.runQuery(factory,factory.createRunner(incrementalIndexSegment),query);\n  List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n  TestHelper.assertExpectedObjects(expectedResults,results,\"distinct-count\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 2
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"1970-01-01T00:00:00.000Z\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 152,
      "startColumnNumber" : 12,
      "endLineNumber" : 152,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 142,
        "startColumnNumber" : 38,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 142,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2677,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IncrementalIndex index=new OnheapIncrementalIndex.Builder().setIndexSchema(new IncrementalIndexSchema.Builder().withQueryGranularity(Granularities.SECOND).withMetrics(new CountAggregatorFactory(\"cnt\")).build()).setConcurrentEventAdd(true).setMaxRowCount(1000).build();\n  String visitor_id=\"visitor_id\";\n  String client_type=\"client_type\";\n  long timestamp=DateTimes.of(\"2010-01-01\").getMillis();\n  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"0\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 1,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"1\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 2,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"2\",client_type,\"android\")));\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(client_type,client_type)).setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(client_type,OrderByColumnSpec.Direction.DESCENDING)),10)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new DistinctCountAggregatorFactory(\"UV\",visitor_id,null)).build();\n  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);\n  Iterable<ResultRow> results=GroupByQueryRunnerTestHelper.runQuery(factory,factory.createRunner(incrementalIndexSegment),query);\n  List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n  TestHelper.assertExpectedObjects(expectedResults,results,\"distinct-count\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2750,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGroupByWithDistinctCountAgg() throws Exception {\n  IncrementalIndex index=new OnheapIncrementalIndex.Builder().setIndexSchema(new IncrementalIndexSchema.Builder().withQueryGranularity(Granularities.SECOND).withMetrics(new CountAggregatorFactory(\"cnt\")).build()).setConcurrentEventAdd(true).setMaxRowCount(1000).build();\n  String visitor_id=\"visitor_id\";\n  String client_type=\"client_type\";\n  long timestamp=DateTimes.of(\"2010-01-01\").getMillis();\n  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"0\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 1,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"1\",client_type,\"iphone\")));\n  index.add(new MapBasedInputRow(timestamp + 2,Lists.newArrayList(visitor_id,client_type),ImmutableMap.of(visitor_id,\"2\",client_type,\"android\")));\n  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.DATA_SOURCE).setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(client_type,client_type)).setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(client_type,OrderByColumnSpec.Direction.DESCENDING)),10)).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT,new DistinctCountAggregatorFactory(\"UV\",visitor_id,null)).build();\n  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);\n  Iterable<ResultRow> results=GroupByQueryRunnerTestHelper.runQuery(factory,factory.createRunner(incrementalIndexSegment),query);\n  List<ResultRow> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"iphone\",\"UV\",2L,\"rows\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L));\n  TestHelper.assertExpectedObjects(expectedResults,results,\"distinct-count\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "GroupByQueryRunnerTestHelper.createExpectedRow(query,\"1970-01-01T00:00:00.000Z\",client_type,\"android\",\"UV\",1L,\"rows\",1L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 2
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 145,
    "startColumnNumber" : 12,
    "endLineNumber" : 145,
    "endColumnNumber" : 38
  }, {
    "charLength" : 26,
    "startLineNumber" : 152,
    "startColumnNumber" : 12,
    "endLineNumber" : 152,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}