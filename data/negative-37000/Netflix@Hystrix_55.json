{
  "id" : 55,
  "expression" : "i",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/metric/sample/HystrixUtilizationStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 64,
      "startColumnNumber" : 24,
      "endLineNumber" : 64,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 64,
        "startColumnNumber" : 24,
        "endLineNumber" : 64,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 2; i++) {\n  HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n  cmd.observe();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 58,
        "startColumnNumber" : 53,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final AtomicBoolean threadPoolShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixUtilization utilization){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n      if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n        commandShowsUp.set(true);\n      }\n      if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n        threadPoolShowsUp.set(true);\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n  assertTrue(threadPoolShowsUp.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1990,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testStreamHasData() throws Exception {\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final AtomicBoolean threadPoolShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixUtilization utilization){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n      if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n        commandShowsUp.set(true);\n      }\n      if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n        threadPoolShowsUp.set(true);\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n  assertTrue(threadPoolShowsUp.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 64,
        "startColumnNumber" : 24,
        "endLineNumber" : 64,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 64,
    "startColumnNumber" : 24,
    "endLineNumber" : 64,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}