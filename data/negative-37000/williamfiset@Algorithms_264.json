{
  "id" : 264,
  "expression" : "solver.isBipartite()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "solver.isBipartite()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 201,
      "startColumnNumber" : 54,
      "endLineNumber" : 201,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 201,
        "startColumnNumber" : 53,
        "endLineNumber" : 201,
        "endColumnNumber" : 75
      },
      "nodeContext" : "(solver.isBipartite())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 201,
        "startColumnNumber" : 23,
        "endLineNumber" : 201,
        "endColumnNumber" : 75
      },
      "nodeContext" : "\"This graph is bipartite: \" + (solver.isBipartite())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 76
      },
      "nodeContext" : "System.out.println(\"This graph is bipartite: \" + (solver.isBipartite()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 77
      },
      "nodeContext" : "System.out.println(\"This graph is bipartite: \" + (solver.isBipartite()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 192,
        "startColumnNumber" : 62,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=graph.size();\n  System.out.println(\"Graph has \" + n + \" node(s) and the following edges:\");\n  for (int f=0; f < n; f++)   for (  int t : graph.get(f))   System.out.println(f + \" -> \" + t);\n  BipartiteGraphCheckAdjacencyList solver;\n  solver=new BipartiteGraphCheckAdjacencyList(graph);\n  System.out.println(\"This graph is bipartite: \" + (solver.isBipartite()));\n  System.out.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 192,
        "startColumnNumber" : 2,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void displayGraph(List<List<Integer>> graph){\n  final int n=graph.size();\n  System.out.println(\"Graph has \" + n + \" node(s) and the following edges:\");\n  for (int f=0; f < n; f++)   for (  int t : graph.get(f))   System.out.println(f + \" -> \" + t);\n  BipartiteGraphCheckAdjacencyList solver;\n  solver=new BipartiteGraphCheckAdjacencyList(graph);\n  System.out.println(\"This graph is bipartite: \" + (solver.isBipartite()));\n  System.out.println();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 77
      },
      "nodeContext" : "System.out.println(\"This graph is bipartite: \" + (solver.isBipartite()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 201,
    "startColumnNumber" : 54,
    "endLineNumber" : 201,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}