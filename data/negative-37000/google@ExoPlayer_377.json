{
  "id" : 377,
  "expression" : "atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/PsshAtomUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 157,
      "startColumnNumber" : 8,
      "endLineNumber" : 157,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1204,
        "startLineNumber" : 155,
        "startColumnNumber" : 53,
        "endLineNumber" : 190,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ParsableByteArray atomData=new ParsableByteArray(atom);\n  if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4) {\n    return null;\n  }\n  atomData.setPosition(0);\n  int atomSize=atomData.readInt();\n  if (atomSize != atomData.bytesLeft() + 4) {\n    return null;\n  }\n  int atomType=atomData.readInt();\n  if (atomType != Atom.TYPE_pssh) {\n    return null;\n  }\n  int atomVersion=Atom.parseFullAtomVersion(atomData.readInt());\n  if (atomVersion > 1) {\n    Log.w(TAG,\"Unsupported pssh version: \" + atomVersion);\n    return null;\n  }\n  UUID uuid=new UUID(atomData.readLong(),atomData.readLong());\n  if (atomVersion == 1) {\n    int keyIdCount=atomData.readUnsignedIntToInt();\n    atomData.skipBytes(16 * keyIdCount);\n  }\n  int dataSize=atomData.readUnsignedIntToInt();\n  if (dataSize != atomData.bytesLeft()) {\n    return null;\n  }\n  byte[] data=new byte[dataSize];\n  atomData.readBytes(data,0,dataSize);\n  return new PsshAtom(uuid,atomVersion,data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 146,
        "startColumnNumber" : 2,
        "endLineNumber" : 190,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a PSSH atom. Version 0 and 1 PSSH atoms are supported.\n * @param atom The atom to parse.\n * @return The parsed PSSH atom. Null if the input is not a valid PSSH atom, or if the PSSH atomhas an unsupported version.\n */\n@Nullable private static PsshAtom parsePsshAtom(byte[] atom){\n  ParsableByteArray atomData=new ParsableByteArray(atom);\n  if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4) {\n    return null;\n  }\n  atomData.setPosition(0);\n  int atomSize=atomData.readInt();\n  if (atomSize != atomData.bytesLeft() + 4) {\n    return null;\n  }\n  int atomType=atomData.readInt();\n  if (atomType != Atom.TYPE_pssh) {\n    return null;\n  }\n  int atomVersion=Atom.parseFullAtomVersion(atomData.readInt());\n  if (atomVersion > 1) {\n    Log.w(TAG,\"Unsupported pssh version: \" + atomVersion);\n    return null;\n  }\n  UUID uuid=new UUID(atomData.readLong(),atomData.readLong());\n  if (atomVersion == 1) {\n    int keyIdCount=atomData.readUnsignedIntToInt();\n    atomData.skipBytes(16 * keyIdCount);\n  }\n  int dataSize=atomData.readUnsignedIntToInt();\n  if (dataSize != atomData.bytesLeft()) {\n    return null;\n  }\n  byte[] data=new byte[dataSize];\n  atomData.readBytes(data,0,dataSize);\n  return new PsshAtom(uuid,atomVersion,data);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 + 4) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 11,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 157,
    "startColumnNumber" : 8,
    "endLineNumber" : 157,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}