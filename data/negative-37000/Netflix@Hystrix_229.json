{
  "id" : 229,
  "expression" : "TimeUnit.MILLISECONDS",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingCollapserBatchSizeDistributionStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit.MILLISECONDS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 78,
      "startColumnNumber" : 42,
      "endLineNumber" : 78,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 78,
        "startColumnNumber" : 23,
        "endLineNumber" : 78,
        "endColumnNumber" : 64
      },
      "nodeContext" : "latch.await(10000,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n}\n catch (InterruptedException ex) {\n  fail(\"Interrupted ex\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 51,
        "startColumnNumber" : 60,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey(\"Collapser-Batch-Size-A\");\n  stream=RollingCollapserBatchSizeDistributionStream.getInstance(key,10,100);\n  stream.startCachingStreamValuesIfUnstarted();\n  final CountDownLatch latch=new CountDownLatch(1);\n  stream.observe().skip(10).take(10).subscribe(new Subscriber<CachedValuesHistogram>(){\n    @Override public void onCompleted(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      fail(e.getMessage());\n    }\n    @Override public void onNext(    CachedValuesHistogram distribution){\n      System.out.println(\"OnNext @ \" + System.currentTimeMillis());\n      assertEquals(0,distribution.getTotalCount());\n    }\n  }\n);\n  try {\n    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  }\n catch (  InterruptedException ex) {\n    fail(\"Interrupted ex\");\n  }\n  assertEquals(0,stream.getLatest().getTotalCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEmptyStreamProducesEmptyDistributions(){\n  HystrixCollapserKey key=HystrixCollapserKey.Factory.asKey(\"Collapser-Batch-Size-A\");\n  stream=RollingCollapserBatchSizeDistributionStream.getInstance(key,10,100);\n  stream.startCachingStreamValuesIfUnstarted();\n  final CountDownLatch latch=new CountDownLatch(1);\n  stream.observe().skip(10).take(10).subscribe(new Subscriber<CachedValuesHistogram>(){\n    @Override public void onCompleted(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      fail(e.getMessage());\n    }\n    @Override public void onNext(    CachedValuesHistogram distribution){\n      System.out.println(\"OnNext @ \" + System.currentTimeMillis());\n      assertEquals(0,distribution.getTotalCount());\n    }\n  }\n);\n  try {\n    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  }\n catch (  InterruptedException ex) {\n    fail(\"Interrupted ex\");\n  }\n  assertEquals(0,stream.getLatest().getTotalCount());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 78,
    "startColumnNumber" : 42,
    "endLineNumber" : 78,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}