{
  "id" : 171,
  "expression" : "interval.doOnError(new Consumer<Throwable>(){\n  @Override public void accept(  Throwable t1){\n    System.out.println(\"Subscriber 1 onError: \" + t1);\n  }\n}\n).retry(5)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableRefCountTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "interval.doOnError(new Consumer<Throwable>(){\n  @Override public void accept(  Throwable t1){\n    System.out.println(\"Subscriber 1 onError: \" + t1);\n  }\n}\n).retry(5)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 301,
      "startLineNumber" : 542,
      "startColumnNumber" : 8,
      "endLineNumber" : 549,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 33,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 542,
        "startColumnNumber" : 8,
        "endLineNumber" : 555,
        "endColumnNumber" : 18
      },
      "nodeContext" : "interval.doOnError(new Consumer<Throwable>(){\n  @Override public void accept(  Throwable t1){\n    System.out.println(\"Subscriber 1 onError: \" + t1);\n  }\n}\n).retry(5).subscribe(new Consumer<String>(){\n  @Override public void accept(  String t1){\n    System.out.println(\"Subscriber 1: \" + t1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 542,
        "startColumnNumber" : 8,
        "endLineNumber" : 555,
        "endColumnNumber" : 19
      },
      "nodeContext" : "interval.doOnError(new Consumer<Throwable>(){\n  @Override public void accept(  Throwable t1){\n    System.out.println(\"Subscriber 1 onError: \" + t1);\n  }\n}\n).retry(5).subscribe(new Consumer<String>(){\n  @Override public void accept(  String t1){\n    System.out.println(\"Subscriber 1: \" + t1);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2903,
        "startLineNumber" : 511,
        "startColumnNumber" : 75,
        "endLineNumber" : 576,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger intervalSubscribed=new AtomicInteger();\n  Flowable<String> interval=Flowable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n    }\n  }\n).flatMap(new Function<Long,Publisher<String>>(){\n    @Override public Publisher<String> apply(    Long t1){\n      return Flowable.defer(new Supplier<Publisher<String>>(){\n        @Override public Publisher<String> get(){\n          return Flowable.<String>error(new Exception(\"Some exception\"));\n        }\n      }\n);\n    }\n  }\n).onErrorResumeNext(new Function<Throwable,Publisher<String>>(){\n    @Override public Publisher<String> apply(    Throwable t1){\n      return Flowable.error(t1);\n    }\n  }\n).publish().refCount();\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"Subscriber 1 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"Subscriber 1: \" + t1);\n    }\n  }\n);\n  Thread.sleep(100);\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"Subscriber 2 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"Subscriber 2: \" + t1);\n    }\n  }\n);\n  Thread.sleep(1300);\n  System.out.println(intervalSubscribed.get());\n  assertEquals(6,intervalSubscribed.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3002,
        "startLineNumber" : 510,
        "startColumnNumber" : 4,
        "endLineNumber" : 576,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=10000) public void testUpstreamErrorAllowsRetry() throws InterruptedException {\n  final AtomicInteger intervalSubscribed=new AtomicInteger();\n  Flowable<String> interval=Flowable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      System.out.println(\"Subscribing to interval \" + intervalSubscribed.incrementAndGet());\n    }\n  }\n).flatMap(new Function<Long,Publisher<String>>(){\n    @Override public Publisher<String> apply(    Long t1){\n      return Flowable.defer(new Supplier<Publisher<String>>(){\n        @Override public Publisher<String> get(){\n          return Flowable.<String>error(new Exception(\"Some exception\"));\n        }\n      }\n);\n    }\n  }\n).onErrorResumeNext(new Function<Throwable,Publisher<String>>(){\n    @Override public Publisher<String> apply(    Throwable t1){\n      return Flowable.error(t1);\n    }\n  }\n).publish().refCount();\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"Subscriber 1 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"Subscriber 1: \" + t1);\n    }\n  }\n);\n  Thread.sleep(100);\n  interval.doOnError(new Consumer<Throwable>(){\n    @Override public void accept(    Throwable t1){\n      System.out.println(\"Subscriber 2 onError: \" + t1);\n    }\n  }\n).retry(5).subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      System.out.println(\"Subscriber 2: \" + t1);\n    }\n  }\n);\n  Thread.sleep(1300);\n  System.out.println(intervalSubscribed.get());\n  assertEquals(6,intervalSubscribed.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 321,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 542,
        "startColumnNumber" : 8,
        "endLineNumber" : 555,
        "endColumnNumber" : 18
      },
      "nodeContext" : "interval.doOnError(new Consumer<Throwable>(){\n  @Override public void accept(  Throwable t1){\n    System.out.println(\"Subscriber 1 onError: \" + t1);\n  }\n}\n).retry(5).subscribe(new Consumer<String>(){\n  @Override public void accept(  String t1){\n    System.out.println(\"Subscriber 1: \" + t1);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 11
    },
    "tokenLength" : 17,
    "type" : "io.reactivex.Flowable<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 301,
    "startLineNumber" : 542,
    "startColumnNumber" : 8,
    "endLineNumber" : 549,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}