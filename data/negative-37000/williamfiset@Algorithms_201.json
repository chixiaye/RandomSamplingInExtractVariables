{
  "id" : 201,
  "expression" : "sa[i] >= p",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayFast.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sa[i] >= p",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 44,
      "startColumnNumber" : 34,
      "endLineNumber" : 44,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 44,
        "startColumnNumber" : 30,
        "endLineNumber" : 44,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (sa[i] >= p) sa2[r++]=sa[i] - p;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (i=0; i < N; ++i) if (sa[i] >= p) sa2[r++]=sa[i] - p;\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 42,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (r=0, i=N - p; i < N; ++i)   sa2[r++]=i;\n  for (i=0; i < N; ++i)   if (sa[i] >= p)   sa2[r++]=sa[i] - p;\n  java.util.Arrays.fill(c,0,alphabetSize,0);\n  for (i=0; i < N; ++i)   c[rank[i]]++;\n  for (i=1; i < alphabetSize; ++i)   c[i]+=c[i - 1];\n  for (i=N - 1; i >= 0; --i)   sa[--c[rank[sa2[i]]]]=sa2[i];\n  for (sa2[sa[0]]=r=0, i=1; i < N; ++i) {\n    if (!(rank[sa[i - 1]] == rank[sa[i]] && sa[i - 1] + p < N && sa[i] + p < N && rank[sa[i - 1] + p] == rank[sa[i] + p]))     r++;\n    sa2[sa[i]]=r;\n  }\n  tmp=rank;\n  rank=sa2;\n  sa2=tmp;\n  if (r == N - 1)   break;\n  alphabetSize=r + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (p=1; p < N; p<<=1) {\n  for (r=0, i=N - p; i < N; ++i)   sa2[r++]=i;\n  for (i=0; i < N; ++i)   if (sa[i] >= p)   sa2[r++]=sa[i] - p;\n  java.util.Arrays.fill(c,0,alphabetSize,0);\n  for (i=0; i < N; ++i)   c[rank[i]]++;\n  for (i=1; i < alphabetSize; ++i)   c[i]+=c[i - 1];\n  for (i=N - 1; i >= 0; --i)   sa[--c[rank[sa2[i]]]]=sa2[i];\n  for (sa2[sa[0]]=r=0, i=1; i < N; ++i) {\n    if (!(rank[sa[i - 1]] == rank[sa[i]] && sa[i - 1] + p < N && sa[i] + p < N && rank[sa[i - 1] + p] == rank[sa[i] + p]))     r++;\n    sa2[sa[i]]=r;\n  }\n  tmp=rank;\n  rank=sa2;\n  sa2=tmp;\n  if (r == N - 1)   break;\n  alphabetSize=r + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 238,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 32,
        "startColumnNumber" : 29,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  sa=new int[N];\n  sa2=new int[N];\n  rank=new int[N];\n  c=new int[Math.max(alphabetSize,N)];\n  int i, p, r;\n  for (i=0; i < N; ++i)   c[rank[i]=T[i]]++;\n  for (i=1; i < alphabetSize; ++i)   c[i]+=c[i - 1];\n  for (i=N - 1; i >= 0; --i)   sa[--c[T[i]]]=i;\n  for (p=1; p < N; p<<=1) {\n    for (r=0, i=N - p; i < N; ++i)     sa2[r++]=i;\n    for (i=0; i < N; ++i)     if (sa[i] >= p)     sa2[r++]=sa[i] - p;\n    java.util.Arrays.fill(c,0,alphabetSize,0);\n    for (i=0; i < N; ++i)     c[rank[i]]++;\n    for (i=1; i < alphabetSize; ++i)     c[i]+=c[i - 1];\n    for (i=N - 1; i >= 0; --i)     sa[--c[rank[sa2[i]]]]=sa2[i];\n    for (sa2[sa[0]]=r=0, i=1; i < N; ++i) {\n      if (!(rank[sa[i - 1]] == rank[sa[i]] && sa[i - 1] + p < N && sa[i] + p < N && rank[sa[i - 1] + p] == rank[sa[i] + p]))       r++;\n      sa2[sa[i]]=r;\n    }\n    tmp=rank;\n    rank=sa2;\n    sa2=tmp;\n    if (r == N - 1)     break;\n    alphabetSize=r + 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void construct(){\n  sa=new int[N];\n  sa2=new int[N];\n  rank=new int[N];\n  c=new int[Math.max(alphabetSize,N)];\n  int i, p, r;\n  for (i=0; i < N; ++i)   c[rank[i]=T[i]]++;\n  for (i=1; i < alphabetSize; ++i)   c[i]+=c[i - 1];\n  for (i=N - 1; i >= 0; --i)   sa[--c[T[i]]]=i;\n  for (p=1; p < N; p<<=1) {\n    for (r=0, i=N - p; i < N; ++i)     sa2[r++]=i;\n    for (i=0; i < N; ++i)     if (sa[i] >= p)     sa2[r++]=sa[i] - p;\n    java.util.Arrays.fill(c,0,alphabetSize,0);\n    for (i=0; i < N; ++i)     c[rank[i]]++;\n    for (i=1; i < alphabetSize; ++i)     c[i]+=c[i - 1];\n    for (i=N - 1; i >= 0; --i)     sa[--c[rank[sa2[i]]]]=sa2[i];\n    for (sa2[sa[0]]=r=0, i=1; i < N; ++i) {\n      if (!(rank[sa[i - 1]] == rank[sa[i]] && sa[i - 1] + p < N && sa[i] + p < N && rank[sa[i - 1] + p] == rank[sa[i] + p]))       r++;\n      sa2[sa[i]]=r;\n    }\n    tmp=rank;\n    rank=sa2;\n    sa2=tmp;\n    if (r == N - 1)     break;\n    alphabetSize=r + 1;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 350,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (i=0; i < N; ++i) if (sa[i] >= p) sa2[r++]=sa[i] - p;\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 44,
    "startColumnNumber" : 34,
    "endLineNumber" : 44,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}