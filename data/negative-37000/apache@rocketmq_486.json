{
  "id" : 486,
  "expression" : "SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/service/impl/PushServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 96,
      "startColumnNumber" : 81,
      "endLineNumber" : 96,
      "endColumnNumber" : 121
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 96,
        "startColumnNumber" : 68,
        "endLineNumber" : 96,
        "endColumnNumber" : 122
      },
      "nodeContext" : "channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 96,
        "startColumnNumber" : 50,
        "endLineNumber" : 96,
        "endColumnNumber" : 122
      },
      "nodeContext" : "clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 96,
        "startColumnNumber" : 32,
        "endLineNumber" : 96,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 94,
        "startColumnNumber" : 77,
        "endLineNumber" : 100,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n  Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n  if (clientAttribute != null) {\n    client=clientAttribute.get();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 100,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (remotingChannel instanceof NettyChannelImpl) {\n  Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n  Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n  if (clientAttribute != null) {\n    client=clientAttribute.get();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1963,
        "startLineNumber" : 92,
        "startColumnNumber" : 78,
        "endLineNumber" : 117,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Client client=null;\n  if (remotingChannel instanceof NettyChannelImpl) {\n    Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n    Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n    if (clientAttribute != null) {\n      client=clientAttribute.get();\n    }\n  }\n  if (client != null) {\n    for (    String consumerGroup : client.getGroups()) {\n      Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n      if (subscription.getSubscriptionData(topic) != null) {\n        boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n        if (slowConsumer) {\n          log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n          snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n          continue;\n        }\n        snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n      }\n    }\n  }\n else {\n    log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2017,
        "startLineNumber" : 92,
        "startColumnNumber" : 24,
        "endLineNumber" : 117,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (RemotingChannel remotingChannel : consumerTable) {\n  Client client=null;\n  if (remotingChannel instanceof NettyChannelImpl) {\n    Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n    Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n    if (clientAttribute != null) {\n      client=clientAttribute.get();\n    }\n  }\n  if (client != null) {\n    for (    String consumerGroup : client.getGroups()) {\n      Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n      if (subscription.getSubscriptionData(topic) != null) {\n        boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n        if (slowConsumer) {\n          log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n          snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n          continue;\n        }\n        snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n      }\n    }\n  }\n else {\n    log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2065,
        "startLineNumber" : 91,
        "startColumnNumber" : 47,
        "endLineNumber" : 118,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (  RemotingChannel remotingChannel : consumerTable) {\n    Client client=null;\n    if (remotingChannel instanceof NettyChannelImpl) {\n      Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n      Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n      if (clientAttribute != null) {\n        client=clientAttribute.get();\n      }\n    }\n    if (client != null) {\n      for (      String consumerGroup : client.getGroups()) {\n        Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n        if (subscription.getSubscriptionData(topic) != null) {\n          boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n          if (slowConsumer) {\n            log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n            snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n            continue;\n          }\n          snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n        }\n      }\n    }\n else {\n      log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2243,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (consumerTable != null) {\n  for (  RemotingChannel remotingChannel : consumerTable) {\n    Client client=null;\n    if (remotingChannel instanceof NettyChannelImpl) {\n      Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n      Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n      if (clientAttribute != null) {\n        client=clientAttribute.get();\n      }\n    }\n    if (client != null) {\n      for (      String consumerGroup : client.getGroups()) {\n        Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n        if (subscription.getSubscriptionData(topic) != null) {\n          boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n          if (slowConsumer) {\n            log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n            snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n            continue;\n          }\n          snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n        }\n      }\n    }\n else {\n      log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n    }\n  }\n}\n else {\n  log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3163,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n  PushMessageHeader pushMessageHeader=new PushMessageHeader();\n  pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n  pushMessageHeader.setTopic(topic);\n  pushMessageHeader.setQueueId(queueId);\n  RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n  pushMessage.setBody(message);\n  MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n  Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n  if (consumerTable != null) {\n    for (    RemotingChannel remotingChannel : consumerTable) {\n      Client client=null;\n      if (remotingChannel instanceof NettyChannelImpl) {\n        Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n        Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n        if (clientAttribute != null) {\n          client=clientAttribute.get();\n        }\n      }\n      if (client != null) {\n        for (        String consumerGroup : client.getGroups()) {\n          Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n          if (subscription.getSubscriptionData(topic) != null) {\n            boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n            if (slowConsumer) {\n              log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n              snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n              continue;\n            }\n            snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n          }\n        }\n      }\n else {\n        log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n      }\n    }\n  }\n else {\n    log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3299,
        "startLineNumber" : 81,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n  PushMessageHeader pushMessageHeader=new PushMessageHeader();\n  pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n  pushMessageHeader.setTopic(topic);\n  pushMessageHeader.setQueueId(queueId);\n  RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n  pushMessage.setBody(message);\n  MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n  Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n  if (consumerTable != null) {\n    for (    RemotingChannel remotingChannel : consumerTable) {\n      Client client=null;\n      if (remotingChannel instanceof NettyChannelImpl) {\n        Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n        Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n        if (clientAttribute != null) {\n          client=clientAttribute.get();\n        }\n      }\n      if (client != null) {\n        for (        String consumerGroup : client.getGroups()) {\n          Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n          if (subscription.getSubscriptionData(topic) != null) {\n            boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n            if (slowConsumer) {\n              log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n              snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n              continue;\n            }\n            snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n          }\n        }\n      }\n else {\n        log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n      }\n    }\n  }\n else {\n    log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n  }\n}\n catch (Exception ex) {\n  log.warn(\"Push message to topic: {} queueId: {}\",topic,queueId,ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 252,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3331,
        "startLineNumber" : 80,
        "startColumnNumber" : 33,
        "endLineNumber" : 124,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n    PushMessageHeader pushMessageHeader=new PushMessageHeader();\n    pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n    pushMessageHeader.setTopic(topic);\n    pushMessageHeader.setQueueId(queueId);\n    RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n    pushMessage.setBody(message);\n    MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n    Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n    if (consumerTable != null) {\n      for (      RemotingChannel remotingChannel : consumerTable) {\n        Client client=null;\n        if (remotingChannel instanceof NettyChannelImpl) {\n          Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n          Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n          if (clientAttribute != null) {\n            client=clientAttribute.get();\n          }\n        }\n        if (client != null) {\n          for (          String consumerGroup : client.getGroups()) {\n            Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n            if (subscription.getSubscriptionData(topic) != null) {\n              boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n              if (slowConsumer) {\n                log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n                snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n                continue;\n              }\n              snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n            }\n          }\n        }\n else {\n          log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n        }\n      }\n    }\n else {\n      log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n    }\n  }\n catch (  Exception ex) {\n    log.warn(\"Push message to topic: {} queueId: {}\",topic,queueId,ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3466,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!canceled.get()) {\n  try {\n    SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n    PushMessageHeader pushMessageHeader=new PushMessageHeader();\n    pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n    pushMessageHeader.setTopic(topic);\n    pushMessageHeader.setQueueId(queueId);\n    RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n    pushMessage.setBody(message);\n    MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n    Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n    if (consumerTable != null) {\n      for (      RemotingChannel remotingChannel : consumerTable) {\n        Client client=null;\n        if (remotingChannel instanceof NettyChannelImpl) {\n          Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n          Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n          if (clientAttribute != null) {\n            client=clientAttribute.get();\n          }\n        }\n        if (client != null) {\n          for (          String consumerGroup : client.getGroups()) {\n            Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n            if (subscription.getSubscriptionData(topic) != null) {\n              boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n              if (slowConsumer) {\n                log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n                snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n                continue;\n              }\n              snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n            }\n          }\n        }\n else {\n          log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n        }\n      }\n    }\n else {\n      log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n    }\n  }\n catch (  Exception ex) {\n    log.warn(\"Push message to topic: {} queueId: {}\",topic,queueId,ex);\n  }\n}\n else {\n  log.info(\"Push message to topic: {} queueId: {} canceled!\",topic,queueId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 266,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3490,
        "startLineNumber" : 79,
        "startColumnNumber" : 26,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!canceled.get()) {\n    try {\n      SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n      PushMessageHeader pushMessageHeader=new PushMessageHeader();\n      pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n      pushMessageHeader.setTopic(topic);\n      pushMessageHeader.setQueueId(queueId);\n      RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n      pushMessage.setBody(message);\n      MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n      Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n      if (consumerTable != null) {\n        for (        RemotingChannel remotingChannel : consumerTable) {\n          Client client=null;\n          if (remotingChannel instanceof NettyChannelImpl) {\n            Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n            Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n            if (clientAttribute != null) {\n              client=clientAttribute.get();\n            }\n          }\n          if (client != null) {\n            for (            String consumerGroup : client.getGroups()) {\n              Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n              if (subscription.getSubscriptionData(topic) != null) {\n                boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n                if (slowConsumer) {\n                  log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n                  snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n                  continue;\n                }\n                snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n              }\n            }\n          }\n else {\n            log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n          }\n        }\n      }\n else {\n        log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n      }\n    }\n catch (    Exception ex) {\n      log.warn(\"Push message to topic: {} queueId: {}\",topic,queueId,ex);\n    }\n  }\n else {\n    log.info(\"Push message to topic: {} queueId: {} canceled!\",topic,queueId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  if (!canceled.get()) {\n    try {\n      SendMessageResponseHeader sendMessageResponseHeader=(SendMessageResponseHeader)response.decodeCommandCustomHeader(SendMessageResponseHeader.class);\n      PushMessageHeader pushMessageHeader=new PushMessageHeader();\n      pushMessageHeader.setQueueOffset(sendMessageResponseHeader.getQueueOffset());\n      pushMessageHeader.setTopic(topic);\n      pushMessageHeader.setQueueId(queueId);\n      RemotingCommand pushMessage=RemotingCommand.createRequestCommand(RequestCode.SNODE_PUSH_MESSAGE,pushMessageHeader);\n      pushMessage.setBody(message);\n      MessageQueue messageQueue=new MessageQueue(topic,enodeName,queueId);\n      Set<RemotingChannel> consumerTable=snodeController.getSubscriptionManager().getPushableChannel(messageQueue);\n      if (consumerTable != null) {\n        for (        RemotingChannel remotingChannel : consumerTable) {\n          Client client=null;\n          if (remotingChannel instanceof NettyChannelImpl) {\n            Channel channel=((NettyChannelImpl)remotingChannel).getChannel();\n            Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n            if (clientAttribute != null) {\n              client=clientAttribute.get();\n            }\n          }\n          if (client != null) {\n            for (            String consumerGroup : client.getGroups()) {\n              Subscription subscription=snodeController.getSubscriptionManager().getSubscription(consumerGroup);\n              if (subscription.getSubscriptionData(topic) != null) {\n                boolean slowConsumer=snodeController.getSlowConsumerService().isSlowConsumer(sendMessageResponseHeader.getQueueOffset(),topic,queueId,consumerGroup,enodeName);\n                if (slowConsumer) {\n                  log.warn(\"[SlowConsumer]: {} is slow consumer\",remotingChannel);\n                  snodeController.getSlowConsumerService().slowConsumerResolve(pushMessage,remotingChannel);\n                  continue;\n                }\n                snodeController.getSnodeServer().push(remotingChannel,pushMessage,SnodeConstant.DEFAULT_TIMEOUT_MILLS);\n              }\n            }\n          }\n else {\n            log.error(\"[NOTIFYME] Remoting channel: {} related client is null\",remotingChannel.remoteAddress());\n          }\n        }\n      }\n else {\n        log.info(\"No online registered as push consumer and online for messageQueue: {} \",messageQueue);\n      }\n    }\n catch (    Exception ex) {\n      log.warn(\"Push message to topic: {} queueId: {}\",topic,queueId,ex);\n    }\n  }\n else {\n    log.info(\"Push message to topic: {} queueId: {} canceled!\",topic,queueId);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 96,
        "startColumnNumber" : 32,
        "endLineNumber" : 96,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Attribute<Client> clientAttribute=channel.attr(SnodeConstant.NETTY_CLIENT_ATTRIBUTE_KEY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "org.apache.rocketmq.snode.constant.AttributeKey<org.apache.rocketmq.snode.client.Client>"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 96,
    "startColumnNumber" : 81,
    "endLineNumber" : 96,
    "endColumnNumber" : 121
  } ],
  "layoutRelationDataList" : [ ]
}