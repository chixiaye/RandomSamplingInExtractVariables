{
  "id" : 75,
  "expression" : "partitionSpecs.get(i)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/ddl/AddPartitionsOperation.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "partitionSpecs.get(i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 68,
      "startColumnNumber" : 61,
      "endLineNumber" : 68,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 68,
        "startColumnNumber" : 26,
        "endLineNumber" : 68,
        "endColumnNumber" : 83
      },
      "nodeContext" : "OperationUtils.formatPartitionSpec(partitionSpecs.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 68,
        "startColumnNumber" : 19,
        "endLineNumber" : 68,
        "endColumnNumber" : 83
      },
      "nodeContext" : "spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 437,
        "startLineNumber" : 67,
        "startColumnNumber" : 56,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n  builder.append(String.format(\" PARTITION (%s)\",spec));\n  Map<String,String> properties=catalogPartitions.get(i).getProperties();\n  if (!properties.isEmpty()) {\n    builder.append(String.format(\" WITH (%s)\",OperationUtils.formatProperties(properties)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < partitionSpecs.size(); i++) {\n  String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n  builder.append(String.format(\" PARTITION (%s)\",spec));\n  Map<String,String> properties=catalogPartitions.get(i).getProperties();\n  if (!properties.isEmpty()) {\n    builder.append(String.format(\" WITH (%s)\",OperationUtils.formatProperties(properties)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 60,
        "startColumnNumber" : 36,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder(String.format(\"ALTER TABLE %s ADD\",tableIdentifier.asSummaryString()));\n  if (ifNotExists) {\n    builder.append(\" IF NOT EXISTS\");\n  }\n  for (int i=0; i < partitionSpecs.size(); i++) {\n    String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n    builder.append(String.format(\" PARTITION (%s)\",spec));\n    Map<String,String> properties=catalogPartitions.get(i).getProperties();\n    if (!properties.isEmpty()) {\n      builder.append(String.format(\" WITH (%s)\",OperationUtils.formatProperties(properties)));\n    }\n  }\n  return builder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String asSummaryString(){\n  StringBuilder builder=new StringBuilder(String.format(\"ALTER TABLE %s ADD\",tableIdentifier.asSummaryString()));\n  if (ifNotExists) {\n    builder.append(\" IF NOT EXISTS\");\n  }\n  for (int i=0; i < partitionSpecs.size(); i++) {\n    String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n    builder.append(String.format(\" PARTITION (%s)\",spec));\n    Map<String,String> properties=catalogPartitions.get(i).getProperties();\n    if (!properties.isEmpty()) {\n      builder.append(String.format(\" WITH (%s)\",OperationUtils.formatProperties(properties)));\n    }\n  }\n  return builder.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String spec=OperationUtils.formatPartitionSpec(partitionSpecs.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.flink.table.catalog.CatalogPartitionSpec"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 68,
    "startColumnNumber" : 61,
    "endLineNumber" : 68,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}