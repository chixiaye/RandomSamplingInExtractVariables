{
  "id" : 5,
  "expression" : "!notify",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!notify",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 864,
      "startColumnNumber" : 12,
      "endLineNumber" : 864,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 864,
        "startColumnNumber" : 8,
        "endLineNumber" : 864,
        "endColumnNumber" : 28
      },
      "nodeContext" : "if (!notify) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2755,
        "startLineNumber" : 859,
        "startColumnNumber" : 73,
        "endLineNumber" : 918,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: srcCode=\"+ srcCode+ \", finalCode=\"+ finalCode+ \".\");\n  statistics.originalMode=srcResultCode=srcCode;\n  statistics.finalMode=finalResultCode=finalCode;\n  if (!notify)   return;\n  if (wasNotified.get()) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \")  setResult: notify error -> already has notified!\");\n  }\n  if (null == diffDataCallback) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: notify fail as webCallback is not set, please wait!\");\n    return;\n  }\n  if (this.finalResultCode == SONIC_RESULT_CODE_UNKNOWN) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: notify fail finalResultCode is not set, please wait!\");\n    return;\n  }\n  wasNotified.compareAndSet(false,true);\n  JSONObject json=new JSONObject();\n  try {\n    if (finalResultCode == SONIC_RESULT_CODE_DATA_UPDATE) {\n      JSONObject pendingObject=new JSONObject(pendingDiffData);\n      long timeDelta=System.currentTimeMillis() - pendingObject.optLong(\"local_refresh_time\",0);\n      if (timeDelta > 30 * 1000) {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") setResult: notify fail as receive js call too late, \"+ (timeDelta / 1000.0)+ \" s.\");\n        pendingDiffData=\"\";\n        return;\n      }\n else {\n        if (SonicUtils.shouldLog(Log.DEBUG)) {\n          SonicUtils.log(TAG,Log.DEBUG,\"session(\" + sId + \") setResult: notify receive js call in time: \"+ (timeDelta / 1000.0)+ \" s.\");\n        }\n      }\n      if (timeDelta > 0)       json.put(\"local_refresh_time\",timeDelta);\n      pendingObject.remove(WEB_RESPONSE_LOCAL_REFRESH_TIME);\n      json.put(WEB_RESPONSE_DATA,pendingObject.toString());\n    }\n    json.put(WEB_RESPONSE_CODE,finalResultCode);\n    json.put(WEB_RESPONSE_SRC_CODE,srcResultCode);\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") setResult: notify error -> \"+ e.getMessage());\n  }\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    String logStr=json.toString();\n    if (logStr.length() > 512) {\n      logStr=logStr.substring(0,512);\n    }\n    SonicUtils.log(TAG,Log.DEBUG,\"session(\" + sId + \") setResult: notify now call jsCallback, jsonStr = \"+ logStr);\n  }\n  pendingDiffData=null;\n  diffDataCallback.callback(json.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 852,
        "startColumnNumber" : 4,
        "endLineNumber" : 918,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Record the sonic mode, notify the result to page if necessary.\n * @param srcCode   The original mode.\n * @param finalCode The final mode.\n * @param notify    Whether notify te result to page.\n */\nprotected void setResult(int srcCode,int finalCode,boolean notify){\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: srcCode=\"+ srcCode+ \", finalCode=\"+ finalCode+ \".\");\n  statistics.originalMode=srcResultCode=srcCode;\n  statistics.finalMode=finalResultCode=finalCode;\n  if (!notify)   return;\n  if (wasNotified.get()) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \")  setResult: notify error -> already has notified!\");\n  }\n  if (null == diffDataCallback) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: notify fail as webCallback is not set, please wait!\");\n    return;\n  }\n  if (this.finalResultCode == SONIC_RESULT_CODE_UNKNOWN) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \")  setResult: notify fail finalResultCode is not set, please wait!\");\n    return;\n  }\n  wasNotified.compareAndSet(false,true);\n  JSONObject json=new JSONObject();\n  try {\n    if (finalResultCode == SONIC_RESULT_CODE_DATA_UPDATE) {\n      JSONObject pendingObject=new JSONObject(pendingDiffData);\n      long timeDelta=System.currentTimeMillis() - pendingObject.optLong(\"local_refresh_time\",0);\n      if (timeDelta > 30 * 1000) {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") setResult: notify fail as receive js call too late, \"+ (timeDelta / 1000.0)+ \" s.\");\n        pendingDiffData=\"\";\n        return;\n      }\n else {\n        if (SonicUtils.shouldLog(Log.DEBUG)) {\n          SonicUtils.log(TAG,Log.DEBUG,\"session(\" + sId + \") setResult: notify receive js call in time: \"+ (timeDelta / 1000.0)+ \" s.\");\n        }\n      }\n      if (timeDelta > 0)       json.put(\"local_refresh_time\",timeDelta);\n      pendingObject.remove(WEB_RESPONSE_LOCAL_REFRESH_TIME);\n      json.put(WEB_RESPONSE_DATA,pendingObject.toString());\n    }\n    json.put(WEB_RESPONSE_CODE,finalResultCode);\n    json.put(WEB_RESPONSE_SRC_CODE,srcResultCode);\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") setResult: notify error -> \"+ e.getMessage());\n  }\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    String logStr=json.toString();\n    if (logStr.length() > 512) {\n      logStr=logStr.substring(0,512);\n    }\n    SonicUtils.log(TAG,Log.DEBUG,\"session(\" + sId + \") setResult: notify now call jsCallback, jsonStr = \"+ logStr);\n  }\n  pendingDiffData=null;\n  diffDataCallback.callback(json.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 319,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 864,
        "startColumnNumber" : 8,
        "endLineNumber" : 864,
        "endColumnNumber" : 28
      },
      "nodeContext" : "if (!notify) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 864,
    "startColumnNumber" : 12,
    "endLineNumber" : 864,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}