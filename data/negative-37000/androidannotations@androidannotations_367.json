{
  "id" : 367,
  "expression" : "method.getReturnType().toString()",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/rest/RestProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.getReturnType().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 98,
      "startColumnNumber" : 45,
      "endLineNumber" : 98,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 98,
        "startColumnNumber" : 45,
        "endLineNumber" : 98,
        "endColumnNumber" : 122
      },
      "nodeContext" : "method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 98,
        "startColumnNumber" : 7,
        "endLineNumber" : 98,
        "endColumnNumber" : 122
      },
      "nodeContext" : "method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n  String methodName=method.getSimpleName().toString();\n  JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n  getRestTemplateMethod.annotate(Override.class);\n  getRestTemplateMethod.body()._return(holder.restTemplateField);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 472,
        "startLineNumber" : 97,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (ExecutableElement method : methods) {\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 98,
        "startColumnNumber" : 7,
        "endLineNumber" : 98,
        "endColumnNumber" : 122
      },
      "nodeContext" : "method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 98,
    "startColumnNumber" : 45,
    "endLineNumber" : 98,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}