{
  "id" : 251,
  "expression" : "CONNECTION_TIMEOUT",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/RecoveryTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 87,
      "startColumnNumber" : 39,
      "endLineNumber" : 87,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 86,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 86,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 112,
      "startColumnNumber" : 42,
      "endLineNumber" : 112,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 112,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 112,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 123,
      "startColumnNumber" : 43,
      "endLineNumber" : 123,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 122,
        "startColumnNumber" : 23,
        "endLineNumber" : 123,
        "endColumnNumber" : 62
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 122,
        "startColumnNumber" : 23,
        "endLineNumber" : 123,
        "endColumnNumber" : 62
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 125,
      "startColumnNumber" : 30,
      "endLineNumber" : 125,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 42
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 43
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 42
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 161,
      "startColumnNumber" : 31,
      "endLineNumber" : 161,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 160,
        "startColumnNumber" : 23,
        "endLineNumber" : 161,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 160,
        "startColumnNumber" : 23,
        "endLineNumber" : 161,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 163,
      "startColumnNumber" : 30,
      "endLineNumber" : 163,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 72
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 73
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 163,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 73
      },
      "nodeContext" : "startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "CONNECTION_TIMEOUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 187,
      "startColumnNumber" : 52,
      "endLineNumber" : 187,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 186,
        "startColumnNumber" : 23,
        "endLineNumber" : 187,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4565,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zs);\n  LOG.info(\"starting up the the server, waiting\");\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating nodes\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  Stat stat=new Stat();\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    LOG.info(\"Checking \" + path);\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  startSignal=new CountDownLatch(1);\n  f.startup(zs);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  stat=new Stat();\n  LOG.info(\"Check 2\");\n  for (int i=0; i < 10; i++) {\n    path=\"/\" + i;\n    assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n    for (int j=0; j < 10; j++) {\n      String subpath=path + \"/\" + j;\n      assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n      for (int k=0; k < 20; k++) {\n        String subsubpath=subpath + \"/\" + k;\n        assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n      }\n    }\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n}\n  finally {\n  SyncRequestProcessor.snapCount=oldSnapCount;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 71,
        "startColumnNumber" : 48,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 613,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5667,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecovery() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  int oldSnapCount=SyncRequestProcessor.snapCount;\n  SyncRequestProcessor.snapCount=1000;\n  try {\n    final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n    NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n    f.startup(zs);\n    LOG.info(\"starting up the the server, waiting\");\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n    String path;\n    LOG.info(\"starting creating nodes\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      zk.create(path,(path + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        zk.create(subpath,(subpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          zk.create(subsubpath,(subsubpath + \"!\").getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    Stat stat=new Stat();\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      LOG.info(\"Checking \" + path);\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n    zs=new ZooKeeperServer(tmpDir,tmpDir,3000);\n    f=new NIOServerCnxn.Factory(PORT);\n    startSignal=new CountDownLatch(1);\n    f.startup(zs);\n    assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n    startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n    assertTrue(\"count == 0\",startSignal.getCount() == 0);\n    stat=new Stat();\n    LOG.info(\"Check 2\");\n    for (int i=0; i < 10; i++) {\n      path=\"/\" + i;\n      assertEquals(new String(zk.getData(path,false,stat)),path + \"!\");\n      for (int j=0; j < 10; j++) {\n        String subpath=path + \"/\" + j;\n        assertEquals(new String(zk.getData(subpath,false,stat)),subpath + \"!\");\n        for (int k=0; k < 20; k++) {\n          String subsubpath=subpath + \"/\" + k;\n          assertEquals(new String(zk.getData(subsubpath,false,stat)),subsubpath + \"!\");\n        }\n      }\n    }\n    f.shutdown();\n    assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  }\n  finally {\n    SyncRequestProcessor.snapCount=oldSnapCount;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 186,
        "startColumnNumber" : 23,
        "endLineNumber" : 187,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 87,
    "startColumnNumber" : 39,
    "endLineNumber" : 87,
    "endColumnNumber" : 57
  }, {
    "charLength" : 18,
    "startLineNumber" : 112,
    "startColumnNumber" : 42,
    "endLineNumber" : 112,
    "endColumnNumber" : 60
  }, {
    "charLength" : 18,
    "startLineNumber" : 123,
    "startColumnNumber" : 43,
    "endLineNumber" : 123,
    "endColumnNumber" : 61
  }, {
    "charLength" : 18,
    "startLineNumber" : 125,
    "startColumnNumber" : 30,
    "endLineNumber" : 125,
    "endColumnNumber" : 48
  }, {
    "charLength" : 18,
    "startLineNumber" : 161,
    "startColumnNumber" : 31,
    "endLineNumber" : 161,
    "endColumnNumber" : 49
  }, {
    "charLength" : 18,
    "startLineNumber" : 163,
    "startColumnNumber" : 30,
    "endLineNumber" : 163,
    "endColumnNumber" : 48
  }, {
    "charLength" : 18,
    "startLineNumber" : 187,
    "startColumnNumber" : 52,
    "endLineNumber" : 187,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}