{
  "id" : 95,
  "expression" : "System.currentTimeMillis() <= endTime",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System.currentTimeMillis() <= endTime",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 101,
      "startColumnNumber" : 17,
      "endLineNumber" : 101,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 56
      },
      "nodeContext" : "do {\n  try {\n    Header newHeaders=Header.newInstance();\n    if (headers != null) {\n      newHeaders.addAll(headers);\n    }\n    Query query=Query.newInstance().initParams(paramValues);\n    HttpRestResult<String> result=NACOS_RESTTEMPLATE.get(getUrl(currentServerAddr,path),httpConfig,newHeaders,query,String.class);\n    if (isFail(result)) {\n      LOGGER.error(\"[NACOS ConnectException] currentServerAddr: {}, httpCode: {}\",serverListMgr.getCurrentServerAddr(),result.getCode());\n    }\n else {\n      serverListMgr.updateCurrentServerAddr(currentServerAddr);\n      return result;\n    }\n  }\n catch (  ConnectException connectException) {\n    LOGGER.error(\"[NACOS ConnectException httpGet] currentServerAddr:{}, err : {}\",serverListMgr.getCurrentServerAddr(),connectException.getMessage());\n  }\ncatch (  SocketTimeoutException socketTimeoutException) {\n    LOGGER.error(\"[NACOS SocketTimeoutException httpGet] currentServerAddr:{}， err : {}\",serverListMgr.getCurrentServerAddr(),socketTimeoutException.getMessage());\n  }\ncatch (  Exception ex) {\n    LOGGER.error(\"[NACOS Exception httpGet] currentServerAddr: \" + serverListMgr.getCurrentServerAddr(),ex);\n    throw ex;\n  }\n  if (serverListMgr.getIterator().hasNext()) {\n    currentServerAddr=serverListMgr.getIterator().next();\n  }\n else {\n    maxRetry--;\n    if (maxRetry < 0) {\n      throw new ConnectException(\"[NACOS HTTP-GET] The maximum number of tolerable server reconnection errors has been reached\");\n    }\n    serverListMgr.refreshCurrentServerAddr();\n  }\n}\n while (System.currentTimeMillis() <= endTime);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2753,
        "startLineNumber" : 54,
        "startColumnNumber" : 64,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long endTime=System.currentTimeMillis() + readTimeoutMs;\n  String currentServerAddr=serverListMgr.getCurrentServerAddr();\n  int maxRetry=this.maxRetry;\n  HttpClientConfig httpConfig=HttpClientConfig.builder().setReadTimeOutMillis(Long.valueOf(readTimeoutMs).intValue()).setConTimeOutMillis(ConfigHttpClientManager.getInstance().getConnectTimeoutOrDefault(100)).build();\n  do {\n    try {\n      Header newHeaders=Header.newInstance();\n      if (headers != null) {\n        newHeaders.addAll(headers);\n      }\n      Query query=Query.newInstance().initParams(paramValues);\n      HttpRestResult<String> result=NACOS_RESTTEMPLATE.get(getUrl(currentServerAddr,path),httpConfig,newHeaders,query,String.class);\n      if (isFail(result)) {\n        LOGGER.error(\"[NACOS ConnectException] currentServerAddr: {}, httpCode: {}\",serverListMgr.getCurrentServerAddr(),result.getCode());\n      }\n else {\n        serverListMgr.updateCurrentServerAddr(currentServerAddr);\n        return result;\n      }\n    }\n catch (    ConnectException connectException) {\n      LOGGER.error(\"[NACOS ConnectException httpGet] currentServerAddr:{}, err : {}\",serverListMgr.getCurrentServerAddr(),connectException.getMessage());\n    }\ncatch (    SocketTimeoutException socketTimeoutException) {\n      LOGGER.error(\"[NACOS SocketTimeoutException httpGet] currentServerAddr:{}， err : {}\",serverListMgr.getCurrentServerAddr(),socketTimeoutException.getMessage());\n    }\ncatch (    Exception ex) {\n      LOGGER.error(\"[NACOS Exception httpGet] currentServerAddr: \" + serverListMgr.getCurrentServerAddr(),ex);\n      throw ex;\n    }\n    if (serverListMgr.getIterator().hasNext()) {\n      currentServerAddr=serverListMgr.getIterator().next();\n    }\n else {\n      maxRetry--;\n      if (maxRetry < 0) {\n        throw new ConnectException(\"[NACOS HTTP-GET] The maximum number of tolerable server reconnection errors has been reached\");\n      }\n      serverListMgr.refreshCurrentServerAddr();\n    }\n  }\n while (System.currentTimeMillis() <= endTime);\n  LOGGER.error(\"no available server\");\n  throw new ConnectException(\"no available server\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2944,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public HttpRestResult<String> httpGet(String path,Map<String,String> headers,Map<String,String> paramValues,String encode,long readTimeoutMs) throws Exception {\n  final long endTime=System.currentTimeMillis() + readTimeoutMs;\n  String currentServerAddr=serverListMgr.getCurrentServerAddr();\n  int maxRetry=this.maxRetry;\n  HttpClientConfig httpConfig=HttpClientConfig.builder().setReadTimeOutMillis(Long.valueOf(readTimeoutMs).intValue()).setConTimeOutMillis(ConfigHttpClientManager.getInstance().getConnectTimeoutOrDefault(100)).build();\n  do {\n    try {\n      Header newHeaders=Header.newInstance();\n      if (headers != null) {\n        newHeaders.addAll(headers);\n      }\n      Query query=Query.newInstance().initParams(paramValues);\n      HttpRestResult<String> result=NACOS_RESTTEMPLATE.get(getUrl(currentServerAddr,path),httpConfig,newHeaders,query,String.class);\n      if (isFail(result)) {\n        LOGGER.error(\"[NACOS ConnectException] currentServerAddr: {}, httpCode: {}\",serverListMgr.getCurrentServerAddr(),result.getCode());\n      }\n else {\n        serverListMgr.updateCurrentServerAddr(currentServerAddr);\n        return result;\n      }\n    }\n catch (    ConnectException connectException) {\n      LOGGER.error(\"[NACOS ConnectException httpGet] currentServerAddr:{}, err : {}\",serverListMgr.getCurrentServerAddr(),connectException.getMessage());\n    }\ncatch (    SocketTimeoutException socketTimeoutException) {\n      LOGGER.error(\"[NACOS SocketTimeoutException httpGet] currentServerAddr:{}， err : {}\",serverListMgr.getCurrentServerAddr(),socketTimeoutException.getMessage());\n    }\ncatch (    Exception ex) {\n      LOGGER.error(\"[NACOS Exception httpGet] currentServerAddr: \" + serverListMgr.getCurrentServerAddr(),ex);\n      throw ex;\n    }\n    if (serverListMgr.getIterator().hasNext()) {\n      currentServerAddr=serverListMgr.getIterator().next();\n    }\n else {\n      maxRetry--;\n      if (maxRetry < 0) {\n        throw new ConnectException(\"[NACOS HTTP-GET] The maximum number of tolerable server reconnection errors has been reached\");\n      }\n      serverListMgr.refreshCurrentServerAddr();\n    }\n  }\n while (System.currentTimeMillis() <= endTime);\n  LOGGER.error(\"no available server\");\n  throw new ConnectException(\"no available server\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 271,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 56
      },
      "nodeContext" : "do {\n  try {\n    Header newHeaders=Header.newInstance();\n    if (headers != null) {\n      newHeaders.addAll(headers);\n    }\n    Query query=Query.newInstance().initParams(paramValues);\n    HttpRestResult<String> result=NACOS_RESTTEMPLATE.get(getUrl(currentServerAddr,path),httpConfig,newHeaders,query,String.class);\n    if (isFail(result)) {\n      LOGGER.error(\"[NACOS ConnectException] currentServerAddr: {}, httpCode: {}\",serverListMgr.getCurrentServerAddr(),result.getCode());\n    }\n else {\n      serverListMgr.updateCurrentServerAddr(currentServerAddr);\n      return result;\n    }\n  }\n catch (  ConnectException connectException) {\n    LOGGER.error(\"[NACOS ConnectException httpGet] currentServerAddr:{}, err : {}\",serverListMgr.getCurrentServerAddr(),connectException.getMessage());\n  }\ncatch (  SocketTimeoutException socketTimeoutException) {\n    LOGGER.error(\"[NACOS SocketTimeoutException httpGet] currentServerAddr:{}， err : {}\",serverListMgr.getCurrentServerAddr(),socketTimeoutException.getMessage());\n  }\ncatch (  Exception ex) {\n    LOGGER.error(\"[NACOS Exception httpGet] currentServerAddr: \" + serverListMgr.getCurrentServerAddr(),ex);\n    throw ex;\n  }\n  if (serverListMgr.getIterator().hasNext()) {\n    currentServerAddr=serverListMgr.getIterator().next();\n  }\n else {\n    maxRetry--;\n    if (maxRetry < 0) {\n      throw new ConnectException(\"[NACOS HTTP-GET] The maximum number of tolerable server reconnection errors has been reached\");\n    }\n    serverListMgr.refreshCurrentServerAddr();\n  }\n}\n while (System.currentTimeMillis() <= endTime);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 168,
      "astHeight" : 10
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 101,
    "startColumnNumber" : 17,
    "endLineNumber" : 101,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}