{
  "id" : 504,
  "expression" : "grid.normalFont",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/GridCellRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "grid.normalFont",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 119,
      "startColumnNumber" : 23,
      "endLineNumber" : 119,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 39
      },
      "nodeContext" : "gc.setFont(grid.normalFont)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "gc.setFont(grid.normalFont);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2322,
        "startLineNumber" : 113,
        "startColumnNumber" : 45,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n  text=CommonUtils.getSingleLineString(text);\n  gc.setFont(grid.normalFont);\nswitch (columnAlign) {\ncase IGridContentProvider.ALIGN_CENTER:{\n      Point textSize=gc.textExtent(text);\n      gc.drawString(text,bounds.x + (bounds.width - textSize.x) / 2,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n      break;\n    }\ncase IGridContentProvider.ALIGN_RIGHT:{\n    Point textSize=gc.textExtent(text);\n    boolean useClipping=textSize.x > bounds.width;\n    int imageMargin=0;\n    if (image != null) {\n      imageMargin=imageBounds.width + INSIDE_MARGIN;\n      if (useClipping) {\n        gc.setClipping(bounds.x,bounds.y,bounds.width - imageMargin,bounds.height);\n      }\n    }\n else {\n      if (useClipping) {\n        gc.setClipping(bounds);\n      }\n    }\n    gc.drawString(text,bounds.x + bounds.width - (textSize.x + RIGHT_MARGIN + imageMargin),bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n    if (useClipping) {\n      gc.setClipping((Rectangle)null);\n    }\n    break;\n  }\ndefault:{\n  gc.drawString(text,bounds.x + x,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n  break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2359,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (text != null && !text.isEmpty()) {\n  text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n  text=CommonUtils.getSingleLineString(text);\n  gc.setFont(grid.normalFont);\nswitch (columnAlign) {\ncase IGridContentProvider.ALIGN_CENTER:{\n      Point textSize=gc.textExtent(text);\n      gc.drawString(text,bounds.x + (bounds.width - textSize.x) / 2,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n      break;\n    }\ncase IGridContentProvider.ALIGN_RIGHT:{\n    Point textSize=gc.textExtent(text);\n    boolean useClipping=textSize.x > bounds.width;\n    int imageMargin=0;\n    if (image != null) {\n      imageMargin=imageBounds.width + INSIDE_MARGIN;\n      if (useClipping) {\n        gc.setClipping(bounds.x,bounds.y,bounds.width - imageMargin,bounds.height);\n      }\n    }\n else {\n      if (useClipping) {\n        gc.setClipping(bounds);\n      }\n    }\n    gc.drawString(text,bounds.x + bounds.width - (textSize.x + RIGHT_MARGIN + imageMargin),bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n    if (useClipping) {\n      gc.setClipping((Rectangle)null);\n    }\n    break;\n  }\ndefault:{\n  gc.drawString(text,bounds.x + x,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n  break;\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 210,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4844,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean drawBackground=true;\n  Color back=grid.getCellBackground(col,row,selected);\n  if (back != null) {\n    gc.setBackground(back);\n  }\n else {\n    drawBackground=false;\n  }\n  gc.setForeground(grid.getCellForeground(col,row,selected));\n  if (drawBackground) {\n    gc.fillRectangle(bounds.x,bounds.y,bounds.width,bounds.height);\n  }\n  String text=grid.getCellText(col,row);\n  final int state=grid.getContentProvider().getCellState(col,row,text);\n  int x=LEFT_MARGIN;\n  Image image;\n  Rectangle imageBounds=null;\n{\n    DBPImage cellImage=grid.getCellImage(col,row);\n    if (cellImage != null) {\n      image=DBeaverIcons.getImage(cellImage);\n      imageBounds=image.getBounds();\n    }\n else {\n      image=null;\n    }\n    if (image == null && isLinkState(state)) {\n      image=((state & IGridContentProvider.STATE_LINK) != 0) ? LINK_IMAGE : LINK2_IMAGE;\n      imageBounds=LINK_IMAGE_BOUNDS;\n    }\n  }\n  int columnAlign=grid.getContentProvider().getColumnAlign(col);\n  if (image != null && columnAlign != IGridContentProvider.ALIGN_RIGHT) {\n    int y=bounds.y + (bounds.height - imageBounds.height) / 2;\n    if (columnAlign == IGridContentProvider.ALIGN_CENTER) {\n      x+=(bounds.width - imageBounds.width - RIGHT_MARGIN- LEFT_MARGIN) / 2;\n    }\n    gc.drawImage(image,bounds.x + x,y);\n    x+=imageBounds.width + INSIDE_MARGIN;\n  }\n  int width=bounds.width - x - RIGHT_MARGIN;\n  if (text != null && !text.isEmpty()) {\n    text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n    text=CommonUtils.getSingleLineString(text);\n    gc.setFont(grid.normalFont);\nswitch (columnAlign) {\ncase IGridContentProvider.ALIGN_CENTER:{\n        Point textSize=gc.textExtent(text);\n        gc.drawString(text,bounds.x + (bounds.width - textSize.x) / 2,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n        break;\n      }\ncase IGridContentProvider.ALIGN_RIGHT:{\n      Point textSize=gc.textExtent(text);\n      boolean useClipping=textSize.x > bounds.width;\n      int imageMargin=0;\n      if (image != null) {\n        imageMargin=imageBounds.width + INSIDE_MARGIN;\n        if (useClipping) {\n          gc.setClipping(bounds.x,bounds.y,bounds.width - imageMargin,bounds.height);\n        }\n      }\n else {\n        if (useClipping) {\n          gc.setClipping(bounds);\n        }\n      }\n      gc.drawString(text,bounds.x + bounds.width - (textSize.x + RIGHT_MARGIN + imageMargin),bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n      if (useClipping) {\n        gc.setClipping((Rectangle)null);\n      }\n      break;\n    }\ndefault:{\n    gc.drawString(text,bounds.x + x,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n    break;\n  }\n}\n}\nif (image != null && columnAlign == IGridContentProvider.ALIGN_RIGHT) {\nint y=bounds.y + (bounds.height - imageBounds.height) / 2;\ngc.drawImage(image,bounds.x + bounds.width - imageBounds.width - RIGHT_MARGIN,y);\n}\nif (focus) {\ngc.setForeground(colorLineFocused);\ngc.drawRectangle(bounds.x + 1,bounds.y,bounds.width - 2,bounds.height - 1);\nif (grid.isFocusControl()) {\ngc.drawRectangle(bounds.x + 2,bounds.y + 1,bounds.width - 4,bounds.height - 3);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 569,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4948,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void paint(GC gc,Rectangle bounds,boolean selected,boolean focus,Object col,Object row){\n  boolean drawBackground=true;\n  Color back=grid.getCellBackground(col,row,selected);\n  if (back != null) {\n    gc.setBackground(back);\n  }\n else {\n    drawBackground=false;\n  }\n  gc.setForeground(grid.getCellForeground(col,row,selected));\n  if (drawBackground) {\n    gc.fillRectangle(bounds.x,bounds.y,bounds.width,bounds.height);\n  }\n  String text=grid.getCellText(col,row);\n  final int state=grid.getContentProvider().getCellState(col,row,text);\n  int x=LEFT_MARGIN;\n  Image image;\n  Rectangle imageBounds=null;\n{\n    DBPImage cellImage=grid.getCellImage(col,row);\n    if (cellImage != null) {\n      image=DBeaverIcons.getImage(cellImage);\n      imageBounds=image.getBounds();\n    }\n else {\n      image=null;\n    }\n    if (image == null && isLinkState(state)) {\n      image=((state & IGridContentProvider.STATE_LINK) != 0) ? LINK_IMAGE : LINK2_IMAGE;\n      imageBounds=LINK_IMAGE_BOUNDS;\n    }\n  }\n  int columnAlign=grid.getContentProvider().getColumnAlign(col);\n  if (image != null && columnAlign != IGridContentProvider.ALIGN_RIGHT) {\n    int y=bounds.y + (bounds.height - imageBounds.height) / 2;\n    if (columnAlign == IGridContentProvider.ALIGN_CENTER) {\n      x+=(bounds.width - imageBounds.width - RIGHT_MARGIN- LEFT_MARGIN) / 2;\n    }\n    gc.drawImage(image,bounds.x + x,y);\n    x+=imageBounds.width + INSIDE_MARGIN;\n  }\n  int width=bounds.width - x - RIGHT_MARGIN;\n  if (text != null && !text.isEmpty()) {\n    text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n    text=CommonUtils.getSingleLineString(text);\n    gc.setFont(grid.normalFont);\nswitch (columnAlign) {\ncase IGridContentProvider.ALIGN_CENTER:{\n        Point textSize=gc.textExtent(text);\n        gc.drawString(text,bounds.x + (bounds.width - textSize.x) / 2,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n        break;\n      }\ncase IGridContentProvider.ALIGN_RIGHT:{\n      Point textSize=gc.textExtent(text);\n      boolean useClipping=textSize.x > bounds.width;\n      int imageMargin=0;\n      if (image != null) {\n        imageMargin=imageBounds.width + INSIDE_MARGIN;\n        if (useClipping) {\n          gc.setClipping(bounds.x,bounds.y,bounds.width - imageMargin,bounds.height);\n        }\n      }\n else {\n        if (useClipping) {\n          gc.setClipping(bounds);\n        }\n      }\n      gc.drawString(text,bounds.x + bounds.width - (textSize.x + RIGHT_MARGIN + imageMargin),bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n      if (useClipping) {\n        gc.setClipping((Rectangle)null);\n      }\n      break;\n    }\ndefault:{\n    gc.drawString(text,bounds.x + x,bounds.y + TEXT_TOP_MARGIN + TOP_MARGIN,isTransparent);\n    break;\n  }\n}\n}\nif (image != null && columnAlign == IGridContentProvider.ALIGN_RIGHT) {\nint y=bounds.y + (bounds.height - imageBounds.height) / 2;\ngc.drawImage(image,bounds.x + bounds.width - imageBounds.width - RIGHT_MARGIN,y);\n}\nif (focus) {\ngc.setForeground(colorLineFocused);\ngc.drawRectangle(bounds.x + 1,bounds.y,bounds.width - 2,bounds.height - 1);\nif (grid.isFocusControl()) {\ngc.drawRectangle(bounds.x + 2,bounds.y + 1,bounds.width - 4,bounds.height - 3);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 595,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "gc.setFont(grid.normalFont);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.jkiss.dbeaver.ui.controls.lightgrid.Font"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 119,
    "startColumnNumber" : 23,
    "endLineNumber" : 119,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}