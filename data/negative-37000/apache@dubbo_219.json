{
  "id" : 219,
  "expression" : "getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvoker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 68,
      "startColumnNumber" : 30,
      "endLineNumber" : 68,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 68,
        "startColumnNumber" : 22,
        "endLineNumber" : 68,
        "endColumnNumber" : 77
      },
      "nodeContext" : "forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2292,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  checkInvokers(invokers,invocation);\n  final List<Invoker<T>> selected;\n  final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n  final int timeout=getUrl().getParameter(TIMEOUT_KEY,DEFAULT_TIMEOUT);\n  if (forks <= 0 || forks >= invokers.size()) {\n    selected=invokers;\n  }\n else {\n    selected=new ArrayList<>(forks);\n    while (selected.size() < forks) {\n      Invoker<T> invoker=select(loadbalance,invocation,invokers,selected);\n      if (!selected.contains(invoker)) {\n        selected.add(invoker);\n      }\n    }\n  }\n  RpcContext.getServiceContext().setInvokers((List)selected);\n  final AtomicInteger count=new AtomicInteger();\n  final BlockingQueue<Object> ref=new LinkedBlockingQueue<>();\n  for (  final Invoker<T> invoker : selected) {\n    executor.execute(() -> {\n      try {\n        Result result=invokeWithContext(invoker,invocation);\n        ref.offer(result);\n      }\n catch (      Throwable e) {\n        int value=count.incrementAndGet();\n        if (value >= selected.size()) {\n          ref.offer(e);\n        }\n      }\n    }\n);\n  }\n  try {\n    Object ret=ref.poll(timeout,TimeUnit.MILLISECONDS);\n    if (ret instanceof Throwable) {\n      Throwable e=(Throwable)ret;\n      throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0,\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e.getCause() != null ? e.getCause() : e);\n    }\n    return (Result)ret;\n  }\n catch (  InterruptedException e) {\n    throw new RpcException(\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2450,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  checkInvokers(invokers,invocation);\n  final List<Invoker<T>> selected;\n  final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n  final int timeout=getUrl().getParameter(TIMEOUT_KEY,DEFAULT_TIMEOUT);\n  if (forks <= 0 || forks >= invokers.size()) {\n    selected=invokers;\n  }\n else {\n    selected=new ArrayList<>(forks);\n    while (selected.size() < forks) {\n      Invoker<T> invoker=select(loadbalance,invocation,invokers,selected);\n      if (!selected.contains(invoker)) {\n        selected.add(invoker);\n      }\n    }\n  }\n  RpcContext.getServiceContext().setInvokers((List)selected);\n  final AtomicInteger count=new AtomicInteger();\n  final BlockingQueue<Object> ref=new LinkedBlockingQueue<>();\n  for (  final Invoker<T> invoker : selected) {\n    executor.execute(() -> {\n      try {\n        Result result=invokeWithContext(invoker,invocation);\n        ref.offer(result);\n      }\n catch (      Throwable e) {\n        int value=count.incrementAndGet();\n        if (value >= selected.size()) {\n          ref.offer(e);\n        }\n      }\n    }\n);\n  }\n  try {\n    Object ret=ref.poll(timeout,TimeUnit.MILLISECONDS);\n    if (ret instanceof Throwable) {\n      Throwable e=(Throwable)ret;\n      throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0,\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e.getCause() != null ? e.getCause() : e);\n    }\n    return (Result)ret;\n  }\n catch (  InterruptedException e) {\n    throw new RpcException(\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e);\n  }\n}\n  finally {\n  RpcContext.getClientAttachment().clearAttachments();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2466,
        "startLineNumber" : 64,
        "startColumnNumber" : 128,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    checkInvokers(invokers,invocation);\n    final List<Invoker<T>> selected;\n    final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n    final int timeout=getUrl().getParameter(TIMEOUT_KEY,DEFAULT_TIMEOUT);\n    if (forks <= 0 || forks >= invokers.size()) {\n      selected=invokers;\n    }\n else {\n      selected=new ArrayList<>(forks);\n      while (selected.size() < forks) {\n        Invoker<T> invoker=select(loadbalance,invocation,invokers,selected);\n        if (!selected.contains(invoker)) {\n          selected.add(invoker);\n        }\n      }\n    }\n    RpcContext.getServiceContext().setInvokers((List)selected);\n    final AtomicInteger count=new AtomicInteger();\n    final BlockingQueue<Object> ref=new LinkedBlockingQueue<>();\n    for (    final Invoker<T> invoker : selected) {\n      executor.execute(() -> {\n        try {\n          Result result=invokeWithContext(invoker,invocation);\n          ref.offer(result);\n        }\n catch (        Throwable e) {\n          int value=count.incrementAndGet();\n          if (value >= selected.size()) {\n            ref.offer(e);\n          }\n        }\n      }\n);\n    }\n    try {\n      Object ret=ref.poll(timeout,TimeUnit.MILLISECONDS);\n      if (ret instanceof Throwable) {\n        Throwable e=(Throwable)ret;\n        throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0,\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e.getCause() != null ? e.getCause() : e);\n      }\n      return (Result)ret;\n    }\n catch (    InterruptedException e) {\n      throw new RpcException(\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e);\n    }\n  }\n  finally {\n    RpcContext.getClientAttachment().clearAttachments();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings({\"unchecked\",\"rawtypes\"}) public Result doInvoke(final Invocation invocation,List<Invoker<T>> invokers,LoadBalance loadbalance) throws RpcException {\n  try {\n    checkInvokers(invokers,invocation);\n    final List<Invoker<T>> selected;\n    final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n    final int timeout=getUrl().getParameter(TIMEOUT_KEY,DEFAULT_TIMEOUT);\n    if (forks <= 0 || forks >= invokers.size()) {\n      selected=invokers;\n    }\n else {\n      selected=new ArrayList<>(forks);\n      while (selected.size() < forks) {\n        Invoker<T> invoker=select(loadbalance,invocation,invokers,selected);\n        if (!selected.contains(invoker)) {\n          selected.add(invoker);\n        }\n      }\n    }\n    RpcContext.getServiceContext().setInvokers((List)selected);\n    final AtomicInteger count=new AtomicInteger();\n    final BlockingQueue<Object> ref=new LinkedBlockingQueue<>();\n    for (    final Invoker<T> invoker : selected) {\n      executor.execute(() -> {\n        try {\n          Result result=invokeWithContext(invoker,invocation);\n          ref.offer(result);\n        }\n catch (        Throwable e) {\n          int value=count.incrementAndGet();\n          if (value >= selected.size()) {\n            ref.offer(e);\n          }\n        }\n      }\n);\n    }\n    try {\n      Object ret=ref.poll(timeout,TimeUnit.MILLISECONDS);\n      if (ret instanceof Throwable) {\n        Throwable e=(Throwable)ret;\n        throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0,\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e.getCause() != null ? e.getCause() : e);\n      }\n      return (Result)ret;\n    }\n catch (    InterruptedException e) {\n      throw new RpcException(\"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \"+ e.getMessage(),e);\n    }\n  }\n  finally {\n    RpcContext.getClientAttachment().clearAttachments();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "final int forks=getUrl().getParameter(FORKS_KEY,DEFAULT_FORKS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 68,
    "startColumnNumber" : 30,
    "endLineNumber" : 68,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}