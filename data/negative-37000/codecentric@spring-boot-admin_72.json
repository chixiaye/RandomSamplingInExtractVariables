{
  "id" : 72,
  "expression" : "newEvents",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newEvents",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 97,
      "startColumnNumber" : 8,
      "endLineNumber" : 97,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 32
      },
      "nodeContext" : "newEvents.addAll(events)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "newEvents.addAll(events);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean doAppend(List<ClientApplicationEvent> events){\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "newEvents.addAll(events);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent>"
  }, {
    "nodeContext" : "newEvents",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 99,
      "startColumnNumber" : 12,
      "endLineNumber" : 99,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 28
      },
      "nodeContext" : "newEvents.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newEvents.size() > maxLogSizePerAggregate",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (newEvents.size() > maxLogSizePerAggregate) {\n  log.debug(\"Threshold for {} reached. Compacting events\",id);\n  compact(newEvents);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean doAppend(List<ClientApplicationEvent> events){\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newEvents.size() > maxLogSizePerAggregate",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent>"
  }, {
    "nodeContext" : "newEvents",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 101,
      "startColumnNumber" : 20,
      "endLineNumber" : 101,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 30
      },
      "nodeContext" : "compact(newEvents)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 31
      },
      "nodeContext" : "compact(newEvents);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 99,
        "startColumnNumber" : 55,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.debug(\"Threshold for {} reached. Compacting events\",id);\n  compact(newEvents);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (newEvents.size() > maxLogSizePerAggregate) {\n  log.debug(\"Threshold for {} reached. Compacting events\",id);\n  compact(newEvents);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean doAppend(List<ClientApplicationEvent> events){\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 31
      },
      "nodeContext" : "compact(newEvents);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent>"
  }, {
    "nodeContext" : "newEvents",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 104,
      "startColumnNumber" : 44,
      "endLineNumber" : 104,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 54
      },
      "nodeContext" : "eventLog.replace(id,oldEvents,newEvents)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (eventLog.replace(id,oldEvents,newEvents)) {\n  log.debug(\"Events saved {}\",events);\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean doAppend(List<ClientApplicationEvent> events){\n  if (events.isEmpty()) {\n    return true;\n  }\n  ApplicationId id=events.get(0).getApplication();\n  if (!events.stream().allMatch(event -> event.getApplication().equals(id))) {\n    throw new IllegalArgumentException(\"'events' must only refer to the same application.\");\n  }\n  List<ClientApplicationEvent> oldEvents=eventLog.computeIfAbsent(id,(key) -> new ArrayList<>(maxLogSizePerAggregate + 1));\n  long lastVersion=getLastVersion(oldEvents);\n  if (lastVersion >= events.get(0).getVersion()) {\n    throw createOptimisticLockException(events.get(0),lastVersion);\n  }\n  List<ClientApplicationEvent> newEvents=new ArrayList<>(oldEvents);\n  newEvents.addAll(events);\n  if (newEvents.size() > maxLogSizePerAggregate) {\n    log.debug(\"Threshold for {} reached. Compacting events\",id);\n    compact(newEvents);\n  }\n  if (eventLog.replace(id,oldEvents,newEvents)) {\n    log.debug(\"Events saved {}\",events);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 54
      },
      "nodeContext" : "eventLog.replace(id,oldEvents,newEvents)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 97,
    "startColumnNumber" : 8,
    "endLineNumber" : 97,
    "endColumnNumber" : 17
  }, {
    "charLength" : 9,
    "startLineNumber" : 99,
    "startColumnNumber" : 12,
    "endLineNumber" : 99,
    "endColumnNumber" : 21
  }, {
    "charLength" : 9,
    "startLineNumber" : 101,
    "startColumnNumber" : 20,
    "endLineNumber" : 101,
    "endColumnNumber" : 29
  }, {
    "charLength" : 9,
    "startLineNumber" : 104,
    "startColumnNumber" : 44,
    "endLineNumber" : 104,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}