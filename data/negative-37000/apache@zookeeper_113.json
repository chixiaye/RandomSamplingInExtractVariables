{
  "id" : 113,
  "expression" : "\"#include \\\"\" + f.getName() + \".hh\\\"\\n\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/CppGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"#include \\\"\" + f.getName() + \".hh\\\"\\n\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 69,
      "startColumnNumber" : 21,
      "endLineNumber" : 69,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 57
      },
      "nodeContext" : "hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 58
      },
      "nodeContext" : "hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 67,
        "startColumnNumber" : 63,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JFile f=(JFile)i.next();\n  hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n  JFile f=(JFile)i.next();\n  hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 58
      },
      "nodeContext" : "hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 69,
    "startColumnNumber" : 21,
    "endLineNumber" : 69,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}