{
  "id" : 477,
  "expression" : "((RuleTransition)transition)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/ParserInterpreter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((RuleTransition)transition)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 267,
      "startColumnNumber" : 71,
      "endLineNumber" : 267,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 267,
        "startColumnNumber" : 71,
        "endLineNumber" : 267,
        "endColumnNumber" : 110
      },
      "nodeContext" : "((RuleTransition)transition).precedence",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 267,
        "startColumnNumber" : 5,
        "endLineNumber" : 267,
        "endColumnNumber" : 111
      },
      "nodeContext" : "enterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 267,
        "startColumnNumber" : 5,
        "endLineNumber" : 267,
        "endColumnNumber" : 112
      },
      "nodeContext" : "enterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 266,
        "startColumnNumber" : 44,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  enterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 266,
        "startColumnNumber" : 4,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (ruleStartState.isLeftRecursiveRule) {\n  enterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n}\n else {\n  enterRule(newctx,transition.target.stateNumber,ruleIndex);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 227,
        "startColumnNumber" : 2,
        "endLineNumber" : 295,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (transition.getSerializationType()) {\ncase Transition.EPSILON:  if (p.getStateType() == ATNState.STAR_LOOP_ENTRY && ((StarLoopEntryState)p).isPrecedenceDecision && !(transition.target instanceof LoopEndState)) {\n    InterpreterRuleContext localctx=createInterpreterRuleContext(_parentContextStack.peek().a,_parentContextStack.peek().b,_ctx.getRuleIndex());\n    pushNewRecursionContext(localctx,atn.ruleToStartState[p.ruleIndex].stateNumber,_ctx.getRuleIndex());\n  }\nbreak;\ncase Transition.ATOM:match(((AtomTransition)transition).label);\nbreak;\ncase Transition.RANGE:case Transition.SET:case Transition.NOT_SET:if (!transition.matches(_input.LA(1),Token.MIN_USER_TOKEN_TYPE,65535)) {\nrecoverInline();\n}\nmatchWildcard();\nbreak;\ncase Transition.WILDCARD:matchWildcard();\nbreak;\ncase Transition.RULE:RuleStartState ruleStartState=(RuleStartState)transition.target;\nint ruleIndex=ruleStartState.ruleIndex;\nInterpreterRuleContext newctx=createInterpreterRuleContext(_ctx,p.stateNumber,ruleIndex);\nif (ruleStartState.isLeftRecursiveRule) {\nenterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n}\n else {\nenterRule(newctx,transition.target.stateNumber,ruleIndex);\n}\nbreak;\ncase Transition.PREDICATE:PredicateTransition predicateTransition=(PredicateTransition)transition;\nif (!sempred(_ctx,predicateTransition.ruleIndex,predicateTransition.predIndex)) {\nthrow new FailedPredicateException(this);\n}\nbreak;\ncase Transition.ACTION:ActionTransition actionTransition=(ActionTransition)transition;\naction(_ctx,actionTransition.ruleIndex,actionTransition.actionIndex);\nbreak;\ncase Transition.PRECEDENCE:if (!precpred(_ctx,((PrecedencePredicateTransition)transition).precedence)) {\nthrow new FailedPredicateException(this,String.format(\"precpred(_ctx, %d)\",((PrecedencePredicateTransition)transition).precedence));\n}\nbreak;\ndefault:throw new UnsupportedOperationException(\"Unrecognized ATN transition type.\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 288,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2739,
        "startLineNumber" : 219,
        "startColumnNumber" : 39,
        "endLineNumber" : 298,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int predictedAlt=1;\n  if (p instanceof DecisionState) {\n    predictedAlt=visitDecisionState((DecisionState)p);\n  }\n  Transition transition=p.transition(predictedAlt - 1);\nswitch (transition.getSerializationType()) {\ncase Transition.EPSILON:    if (p.getStateType() == ATNState.STAR_LOOP_ENTRY && ((StarLoopEntryState)p).isPrecedenceDecision && !(transition.target instanceof LoopEndState)) {\n      InterpreterRuleContext localctx=createInterpreterRuleContext(_parentContextStack.peek().a,_parentContextStack.peek().b,_ctx.getRuleIndex());\n      pushNewRecursionContext(localctx,atn.ruleToStartState[p.ruleIndex].stateNumber,_ctx.getRuleIndex());\n    }\n  break;\ncase Transition.ATOM:match(((AtomTransition)transition).label);\nbreak;\ncase Transition.RANGE:case Transition.SET:case Transition.NOT_SET:if (!transition.matches(_input.LA(1),Token.MIN_USER_TOKEN_TYPE,65535)) {\nrecoverInline();\n}\nmatchWildcard();\nbreak;\ncase Transition.WILDCARD:matchWildcard();\nbreak;\ncase Transition.RULE:RuleStartState ruleStartState=(RuleStartState)transition.target;\nint ruleIndex=ruleStartState.ruleIndex;\nInterpreterRuleContext newctx=createInterpreterRuleContext(_ctx,p.stateNumber,ruleIndex);\nif (ruleStartState.isLeftRecursiveRule) {\nenterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n}\n else {\nenterRule(newctx,transition.target.stateNumber,ruleIndex);\n}\nbreak;\ncase Transition.PREDICATE:PredicateTransition predicateTransition=(PredicateTransition)transition;\nif (!sempred(_ctx,predicateTransition.ruleIndex,predicateTransition.predIndex)) {\nthrow new FailedPredicateException(this);\n}\nbreak;\ncase Transition.ACTION:ActionTransition actionTransition=(ActionTransition)transition;\naction(_ctx,actionTransition.ruleIndex,actionTransition.actionIndex);\nbreak;\ncase Transition.PRECEDENCE:if (!precpred(_ctx,((PrecedencePredicateTransition)transition).precedence)) {\nthrow new FailedPredicateException(this,String.format(\"precpred(_ctx, %d)\",((PrecedencePredicateTransition)transition).precedence));\n}\nbreak;\ndefault:throw new UnsupportedOperationException(\"Unrecognized ATN transition type.\");\n}\nsetState(transition.target.stateNumber);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2777,
        "startLineNumber" : 219,
        "startColumnNumber" : 1,
        "endLineNumber" : 298,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void visitState(ATNState p){\n  int predictedAlt=1;\n  if (p instanceof DecisionState) {\n    predictedAlt=visitDecisionState((DecisionState)p);\n  }\n  Transition transition=p.transition(predictedAlt - 1);\nswitch (transition.getSerializationType()) {\ncase Transition.EPSILON:    if (p.getStateType() == ATNState.STAR_LOOP_ENTRY && ((StarLoopEntryState)p).isPrecedenceDecision && !(transition.target instanceof LoopEndState)) {\n      InterpreterRuleContext localctx=createInterpreterRuleContext(_parentContextStack.peek().a,_parentContextStack.peek().b,_ctx.getRuleIndex());\n      pushNewRecursionContext(localctx,atn.ruleToStartState[p.ruleIndex].stateNumber,_ctx.getRuleIndex());\n    }\n  break;\ncase Transition.ATOM:match(((AtomTransition)transition).label);\nbreak;\ncase Transition.RANGE:case Transition.SET:case Transition.NOT_SET:if (!transition.matches(_input.LA(1),Token.MIN_USER_TOKEN_TYPE,65535)) {\nrecoverInline();\n}\nmatchWildcard();\nbreak;\ncase Transition.WILDCARD:matchWildcard();\nbreak;\ncase Transition.RULE:RuleStartState ruleStartState=(RuleStartState)transition.target;\nint ruleIndex=ruleStartState.ruleIndex;\nInterpreterRuleContext newctx=createInterpreterRuleContext(_ctx,p.stateNumber,ruleIndex);\nif (ruleStartState.isLeftRecursiveRule) {\nenterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n}\n else {\nenterRule(newctx,transition.target.stateNumber,ruleIndex);\n}\nbreak;\ncase Transition.PREDICATE:PredicateTransition predicateTransition=(PredicateTransition)transition;\nif (!sempred(_ctx,predicateTransition.ruleIndex,predicateTransition.predIndex)) {\nthrow new FailedPredicateException(this);\n}\nbreak;\ncase Transition.ACTION:ActionTransition actionTransition=(ActionTransition)transition;\naction(_ctx,actionTransition.ruleIndex,actionTransition.actionIndex);\nbreak;\ncase Transition.PRECEDENCE:if (!precpred(_ctx,((PrecedencePredicateTransition)transition).precedence)) {\nthrow new FailedPredicateException(this,String.format(\"precpred(_ctx, %d)\",((PrecedencePredicateTransition)transition).precedence));\n}\nbreak;\ndefault:throw new UnsupportedOperationException(\"Unrecognized ATN transition type.\");\n}\nsetState(transition.target.stateNumber);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 267,
        "startColumnNumber" : 5,
        "endLineNumber" : 267,
        "endColumnNumber" : 112
      },
      "nodeContext" : "enterRecursionRule(newctx,ruleStartState.stateNumber,ruleIndex,((RuleTransition)transition).precedence);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "org.antlr.v4.runtime.atn.RuleTransition"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 267,
    "startColumnNumber" : 71,
    "endLineNumber" : 267,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}