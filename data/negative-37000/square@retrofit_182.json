{
  "id" : 182,
  "expression" : "lowerBound != originalLowerBound[0]",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/Types.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lowerBound != originalLowerBound[0]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 237,
      "startColumnNumber" : 14,
      "endLineNumber" : 237,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 237,
        "startColumnNumber" : 10,
        "endLineNumber" : 239,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (lowerBound != originalLowerBound[0]) {\n  return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 235,
        "startColumnNumber" : 44,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n  if (lowerBound != originalLowerBound[0]) {\n    return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 245,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (originalLowerBound.length == 1) {\n  Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n  if (lowerBound != originalLowerBound[0]) {\n    return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n  }\n}\n else if (originalUpperBound.length == 1) {\n  Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n  if (upperBound != originalUpperBound[0]) {\n    return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 230,
        "startColumnNumber" : 52,
        "endLineNumber" : 248,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 230,
        "startColumnNumber" : 13,
        "endLineNumber" : 250,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 208,
        "startColumnNumber" : 13,
        "endLineNumber" : 250,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 242,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 201,
        "startColumnNumber" : 13,
        "endLineNumber" : 250,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof GenericArrayType) {\n  GenericArrayType original=(GenericArrayType)toResolve;\n  Type componentType=original.getGenericComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n}\n else if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 285,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2535,
        "startLineNumber" : 194,
        "startColumnNumber" : 13,
        "endLineNumber" : 250,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n  Class<?> original=(Class<?>)toResolve;\n  Type componentType=original.getComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n}\n else if (toResolve instanceof GenericArrayType) {\n  GenericArrayType original=(GenericArrayType)toResolve;\n  Type componentType=original.getGenericComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n}\n else if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 342,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2817,
        "startLineNumber" : 187,
        "startColumnNumber" : 6,
        "endLineNumber" : 250,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof TypeVariable) {\n  TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n  toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n  if (toResolve == typeVariable) {\n    return toResolve;\n  }\n}\n else if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n  Class<?> original=(Class<?>)toResolve;\n  Type componentType=original.getComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n}\n else if (toResolve instanceof GenericArrayType) {\n  GenericArrayType original=(GenericArrayType)toResolve;\n  Type componentType=original.getGenericComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n}\n else if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 376,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2831,
        "startLineNumber" : 186,
        "startColumnNumber" : 17,
        "endLineNumber" : 251,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 186,
        "startColumnNumber" : 4,
        "endLineNumber" : 251,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 379,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2955,
        "startLineNumber" : 184,
        "startColumnNumber" : 84,
        "endLineNumber" : 252,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3037,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 252,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Type resolve(Type context,Class<?> contextRawType,Type toResolve){\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : new GenericArrayTypeImpl(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? new ParameterizedTypeImpl(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return new WildcardTypeImpl(new Type[]{upperBound},EMPTY_TYPE_ARRAY);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 237,
        "startColumnNumber" : 10,
        "endLineNumber" : 239,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (lowerBound != originalLowerBound[0]) {\n  return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{lowerBound});\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 237,
    "startColumnNumber" : 14,
    "endLineNumber" : 237,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}