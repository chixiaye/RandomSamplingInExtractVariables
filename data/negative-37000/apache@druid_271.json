{
  "id" : 271,
  "expression" : "expectedException",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/join/MapJoinableFactoryTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedException",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 121,
      "startColumnNumber" : 4,
      "endLineNumber" : 121,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 39
      },
      "nodeContext" : "expectedException.expect(ISE.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 40
      },
      "nodeContext" : "expectedException.expect(ISE.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JoinableFactory anotherNoopJoinableFactory=EasyMock.mock(MapJoinableFactory.class);\n  target=new MapJoinableFactory(ImmutableSet.of(noopJoinableFactory,anotherNoopJoinableFactory),ImmutableMap.of(noopJoinableFactory.getClass(),NoopDataSource.class,anotherNoopJoinableFactory.getClass(),NoopDataSource.class));\n  EasyMock.expect(noopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.expect(anotherNoopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.replay(noopJoinableFactory,anotherNoopJoinableFactory);\n  expectedException.expect(ISE.class);\n  expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource));\n  target.build(noopDataSource,condition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuildExceptionWhenTwoJoinableFactoryForSameDataSource(){\n  JoinableFactory anotherNoopJoinableFactory=EasyMock.mock(MapJoinableFactory.class);\n  target=new MapJoinableFactory(ImmutableSet.of(noopJoinableFactory,anotherNoopJoinableFactory),ImmutableMap.of(noopJoinableFactory.getClass(),NoopDataSource.class,anotherNoopJoinableFactory.getClass(),NoopDataSource.class));\n  EasyMock.expect(noopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.expect(anotherNoopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.replay(noopJoinableFactory,anotherNoopJoinableFactory);\n  expectedException.expect(ISE.class);\n  expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource));\n  target.build(noopDataSource,condition);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 40
      },
      "nodeContext" : "expectedException.expect(ISE.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.segment.join.ExpectedException"
  }, {
    "nodeContext" : "expectedException",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 122,
      "startColumnNumber" : 4,
      "endLineNumber" : 122,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 6
      },
      "nodeContext" : "expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JoinableFactory anotherNoopJoinableFactory=EasyMock.mock(MapJoinableFactory.class);\n  target=new MapJoinableFactory(ImmutableSet.of(noopJoinableFactory,anotherNoopJoinableFactory),ImmutableMap.of(noopJoinableFactory.getClass(),NoopDataSource.class,anotherNoopJoinableFactory.getClass(),NoopDataSource.class));\n  EasyMock.expect(noopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.expect(anotherNoopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.replay(noopJoinableFactory,anotherNoopJoinableFactory);\n  expectedException.expect(ISE.class);\n  expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource));\n  target.build(noopDataSource,condition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuildExceptionWhenTwoJoinableFactoryForSameDataSource(){\n  JoinableFactory anotherNoopJoinableFactory=EasyMock.mock(MapJoinableFactory.class);\n  target=new MapJoinableFactory(ImmutableSet.of(noopJoinableFactory,anotherNoopJoinableFactory),ImmutableMap.of(noopJoinableFactory.getClass(),NoopDataSource.class,anotherNoopJoinableFactory.getClass(),NoopDataSource.class));\n  EasyMock.expect(noopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.expect(anotherNoopJoinableFactory.build(noopDataSource,condition)).andReturn(Optional.of(mockJoinable));\n  EasyMock.replay(noopJoinableFactory,anotherNoopJoinableFactory);\n  expectedException.expect(ISE.class);\n  expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource));\n  target.build(noopDataSource,condition);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 6
      },
      "nodeContext" : "expectedException.expectMessage(StringUtils.format(\"Multiple joinable factories are valid for table[%s]\",noopDataSource))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.segment.join.ExpectedException"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 121,
    "startColumnNumber" : 4,
    "endLineNumber" : 121,
    "endColumnNumber" : 21
  }, {
    "charLength" : 17,
    "startLineNumber" : 122,
    "startColumnNumber" : 4,
    "endLineNumber" : 122,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}