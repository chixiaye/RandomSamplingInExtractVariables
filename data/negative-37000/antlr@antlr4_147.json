{
  "id" : 147,
  "expression" : "new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/automata/RangeBorderCharactersData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 97,
      "startLineNumber" : 45,
      "startColumnNumber" : 9,
      "endLineNumber" : 45,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 45,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 24,
        "startColumnNumber" : 3,
        "endLineNumber" : 46,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int lowerFrom=Character.toLowerCase(from);\n  int upperFrom=Character.toUpperCase(from);\n  int lowerTo=Character.toLowerCase(to);\n  int upperTo=Character.toUpperCase(to);\n  boolean isLowerFrom=lowerFrom == from;\n  boolean isLowerTo=lowerTo == to;\n  boolean mixOfLowerAndUpperCharCase=isLowerFrom && !isLowerTo || !isLowerFrom && isLowerTo;\n  if (reportRangeContainsNotImpliedCharacters && mixOfLowerAndUpperCharCase && from <= 0x7F && to <= 0x7F) {\n    StringBuilder notImpliedCharacters=new StringBuilder();\n    for (int i=from; i < to; i++) {\n      if (!Character.isAlphabetic(i)) {\n        notImpliedCharacters.append((char)i);\n      }\n    }\n    if (notImpliedCharacters.length() > 0) {\n      grammar.tool.errMgr.grammarError(ErrorType.RANGE_PROBABLY_CONTAINS_NOT_IMPLIED_CHARACTERS,grammar.fileName,tree.getToken(),(char)from,(char)to,notImpliedCharacters.toString());\n    }\n  }\n  return new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1226,
        "startLineNumber" : 22,
        "startColumnNumber" : 1,
        "endLineNumber" : 46,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static RangeBorderCharactersData getAndCheckCharactersData(int from,int to,Grammar grammar,CommonTree tree,boolean reportRangeContainsNotImpliedCharacters){\n  int lowerFrom=Character.toLowerCase(from);\n  int upperFrom=Character.toUpperCase(from);\n  int lowerTo=Character.toLowerCase(to);\n  int upperTo=Character.toUpperCase(to);\n  boolean isLowerFrom=lowerFrom == from;\n  boolean isLowerTo=lowerTo == to;\n  boolean mixOfLowerAndUpperCharCase=isLowerFrom && !isLowerTo || !isLowerFrom && isLowerTo;\n  if (reportRangeContainsNotImpliedCharacters && mixOfLowerAndUpperCharCase && from <= 0x7F && to <= 0x7F) {\n    StringBuilder notImpliedCharacters=new StringBuilder();\n    for (int i=from; i < to; i++) {\n      if (!Character.isAlphabetic(i)) {\n        notImpliedCharacters.append((char)i);\n      }\n    }\n    if (notImpliedCharacters.length() > 0) {\n      grammar.tool.errMgr.grammarError(ErrorType.RANGE_PROBABLY_CONTAINS_NOT_IMPLIED_CHARACTERS,grammar.fileName,tree.getToken(),(char)from,(char)to,notImpliedCharacters.toString());\n    }\n  }\n  return new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 45,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return new RangeBorderCharactersData(lowerFrom,upperFrom,lowerTo,upperTo,mixOfLowerAndUpperCharCase);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "org.antlr.v4.automata.RangeBorderCharactersData"
  } ],
  "positionList" : [ {
    "charLength" : 97,
    "startLineNumber" : 45,
    "startColumnNumber" : 9,
    "endLineNumber" : 45,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}