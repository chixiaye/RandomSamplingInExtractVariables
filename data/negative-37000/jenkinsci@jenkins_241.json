{
  "id" : 241,
  "expression" : "nColumns * nRows",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/util/ChartUtil.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nColumns * nRows",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 217,
      "startColumnNumber" : 30,
      "endLineNumber" : 217,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 217,
        "startColumnNumber" : 29,
        "endLineNumber" : 217,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(nColumns * nRows)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 217,
        "startColumnNumber" : 25,
        "endLineNumber" : 217,
        "endColumnNumber" : 45
      },
      "nodeContext" : "sum / (nColumns * nRows)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 217,
        "startColumnNumber" : 15,
        "endLineNumber" : 217,
        "endColumnNumber" : 45
      },
      "nodeContext" : "average=sum / (nColumns * nRows)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double average=sum / (nColumns * nRows);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1941,
        "startLineNumber" : 200,
        "startColumnNumber" : 82,
        "endLineNumber" : 254,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double sum=0, sum2=0;\n  final int nColumns=dataset.getColumnCount();\n  final int nRows=dataset.getRowCount();\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      sum+=n;\n      sum2+=n * n;\n    }\n  }\n  double average=sum / (nColumns * nRows);\n  double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n  double rangeMin=average - stddev * CHEBYSHEV_N;\n  double rangeMax=average + stddev * CHEBYSHEV_N;\n  boolean found=false;\n  double min=0, max=0;\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      if (n < rangeMin || rangeMax < n) {\n        found=true;\n        continue;\n      }\n      min=Math.min(min,n);\n      max=Math.max(max,n);\n    }\n  }\n  if (!found)   return;\n  min=Math.min(0,min);\n  max+=yAxis.getUpperMargin() * (max - min);\n  yAxis.setRange(min,max);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 254,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Adjusts the Y-axis so that abnormally large value won't spoil the whole chart by making everything look virtually 0. <p> The algorithm is based on <a href=\"http://en.wikipedia.org/wiki/Chebyshev%27s_inequality\">Chebyshev's inequality</a>, which states that given any number sequence, nore more than 1/(N^2) values are more than N x stddev away from the average. <p> So the algorithm is to set Y-axis range so that we can see all data points that are within N x stddev of the average. Most of the time, Cebyshev's inequality is very conservative, so it shouldn't do much harm. <p> When the algorithm does kick in, however, we can kick out at most 1 in N^2 data points. (So for example if N=3 then we can \"fix\" the graph as long as we only have less than 1/(3*3)=11.111...% bad data. <p> Also see issue #1246.\n */\npublic static void adjustChebyshev(CategoryDataset dataset,NumberAxis yAxis){\n  double sum=0, sum2=0;\n  final int nColumns=dataset.getColumnCount();\n  final int nRows=dataset.getRowCount();\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      sum+=n;\n      sum2+=n * n;\n    }\n  }\n  double average=sum / (nColumns * nRows);\n  double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n  double rangeMin=average - stddev * CHEBYSHEV_N;\n  double rangeMax=average + stddev * CHEBYSHEV_N;\n  boolean found=false;\n  double min=0, max=0;\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      if (n < rangeMin || rangeMax < n) {\n        found=true;\n        continue;\n      }\n      min=Math.min(min,n);\n      max=Math.max(max,n);\n    }\n  }\n  if (!found)   return;\n  min=Math.min(0,min);\n  max+=yAxis.getUpperMargin() * (max - min);\n  yAxis.setRange(min,max);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double average=sum / (nColumns * nRows);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "nColumns * nRows",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 218,
      "startColumnNumber" : 40,
      "endLineNumber" : 218,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 218,
        "startColumnNumber" : 39,
        "endLineNumber" : 218,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(nColumns * nRows)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 218,
        "startColumnNumber" : 34,
        "endLineNumber" : 218,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sum2 / (nColumns * nRows)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 218,
        "startColumnNumber" : 34,
        "endLineNumber" : 218,
        "endColumnNumber" : 71
      },
      "nodeContext" : "sum2 / (nColumns * nRows) - average * average",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 218,
        "startColumnNumber" : 24,
        "endLineNumber" : 218,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Math.sqrt(sum2 / (nColumns * nRows) - average * average)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 218,
        "startColumnNumber" : 15,
        "endLineNumber" : 218,
        "endColumnNumber" : 72
      },
      "nodeContext" : "stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1941,
        "startLineNumber" : 200,
        "startColumnNumber" : 82,
        "endLineNumber" : 254,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double sum=0, sum2=0;\n  final int nColumns=dataset.getColumnCount();\n  final int nRows=dataset.getRowCount();\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      sum+=n;\n      sum2+=n * n;\n    }\n  }\n  double average=sum / (nColumns * nRows);\n  double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n  double rangeMin=average - stddev * CHEBYSHEV_N;\n  double rangeMax=average + stddev * CHEBYSHEV_N;\n  boolean found=false;\n  double min=0, max=0;\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      if (n < rangeMin || rangeMax < n) {\n        found=true;\n        continue;\n      }\n      min=Math.min(min,n);\n      max=Math.max(max,n);\n    }\n  }\n  if (!found)   return;\n  min=Math.min(0,min);\n  max+=yAxis.getUpperMargin() * (max - min);\n  yAxis.setRange(min,max);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 254,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Adjusts the Y-axis so that abnormally large value won't spoil the whole chart by making everything look virtually 0. <p> The algorithm is based on <a href=\"http://en.wikipedia.org/wiki/Chebyshev%27s_inequality\">Chebyshev's inequality</a>, which states that given any number sequence, nore more than 1/(N^2) values are more than N x stddev away from the average. <p> So the algorithm is to set Y-axis range so that we can see all data points that are within N x stddev of the average. Most of the time, Cebyshev's inequality is very conservative, so it shouldn't do much harm. <p> When the algorithm does kick in, however, we can kick out at most 1 in N^2 data points. (So for example if N=3 then we can \"fix\" the graph as long as we only have less than 1/(3*3)=11.111...% bad data. <p> Also see issue #1246.\n */\npublic static void adjustChebyshev(CategoryDataset dataset,NumberAxis yAxis){\n  double sum=0, sum2=0;\n  final int nColumns=dataset.getColumnCount();\n  final int nRows=dataset.getRowCount();\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      sum+=n;\n      sum2+=n * n;\n    }\n  }\n  double average=sum / (nColumns * nRows);\n  double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n  double rangeMin=average - stddev * CHEBYSHEV_N;\n  double rangeMax=average + stddev * CHEBYSHEV_N;\n  boolean found=false;\n  double min=0, max=0;\n  for (int i=0; i < nRows; i++) {\n    Comparable rowKey=dataset.getRowKey(i);\n    for (int j=0; j < nColumns; j++) {\n      Comparable columnKey=dataset.getColumnKey(j);\n      double n=dataset.getValue(rowKey,columnKey).doubleValue();\n      if (n < rangeMin || rangeMax < n) {\n        found=true;\n        continue;\n      }\n      min=Math.min(min,n);\n      max=Math.max(max,n);\n    }\n  }\n  if (!found)   return;\n  min=Math.min(0,min);\n  max+=yAxis.getUpperMargin() * (max - min);\n  yAxis.setRange(min,max);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "double stddev=Math.sqrt(sum2 / (nColumns * nRows) - average * average);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 217,
    "startColumnNumber" : 30,
    "endLineNumber" : 217,
    "endColumnNumber" : 44
  }, {
    "charLength" : 14,
    "startLineNumber" : 218,
    "startColumnNumber" : 40,
    "endLineNumber" : 218,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}