{
  "id" : 89,
  "expression" : "t",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/PublicApiCreatorApp.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 150,
      "startColumnNumber" : 7,
      "endLineNumber" : 150,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 150,
        "startColumnNumber" : 7,
        "endLineNumber" : 150,
        "endColumnNumber" : 24
      },
      "nodeContext" : "t instanceof Fail",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 150,
        "startColumnNumber" : 7,
        "endLineNumber" : 150,
        "endColumnNumber" : 24
      },
      "nodeContext" : "t instanceof Fail",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 151,
      "startColumnNumber" : 23,
      "endLineNumber" : 151,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 151,
        "startColumnNumber" : 23,
        "endLineNumber" : 151,
        "endColumnNumber" : 37
      },
      "nodeContext" : "t.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 38
      },
      "nodeContext" : "System.err.println(t.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 39
      },
      "nodeContext" : "System.err.println(t.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 150,
        "startColumnNumber" : 26,
        "endLineNumber" : 153,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  System.err.println(t.getMessage());\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 39
      },
      "nodeContext" : "System.err.println(t.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 153,
      "startColumnNumber" : 14,
      "endLineNumber" : 153,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 153,
        "startColumnNumber" : 14,
        "endLineNumber" : 153,
        "endColumnNumber" : 36
      },
      "nodeContext" : "t instanceof Exception",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 153,
        "startColumnNumber" : 14,
        "endLineNumber" : 153,
        "endColumnNumber" : 36
      },
      "nodeContext" : "t instanceof Exception",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 154,
      "startColumnNumber" : 21,
      "endLineNumber" : 154,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 154,
        "startColumnNumber" : 10,
        "endLineNumber" : 154,
        "endColumnNumber" : 22
      },
      "nodeContext" : "(Exception)t",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 23
      },
      "nodeContext" : "throw (Exception)t;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 153,
        "startColumnNumber" : 38,
        "endLineNumber" : 155,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw (Exception)t;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 23
      },
      "nodeContext" : "throw (Exception)t;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 155,
      "startColumnNumber" : 14,
      "endLineNumber" : 155,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 155,
        "startColumnNumber" : 14,
        "endLineNumber" : 155,
        "endColumnNumber" : 32
      },
      "nodeContext" : "t instanceof Error",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 155,
        "startColumnNumber" : 14,
        "endLineNumber" : 155,
        "endColumnNumber" : 32
      },
      "nodeContext" : "t instanceof Error",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 156,
      "startColumnNumber" : 17,
      "endLineNumber" : 156,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 156,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 18
      },
      "nodeContext" : "(Error)t",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 156,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 19
      },
      "nodeContext" : "throw (Error)t;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 155,
        "startColumnNumber" : 34,
        "endLineNumber" : 157,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw (Error)t;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 156,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 19
      },
      "nodeContext" : "throw (Error)t;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 158,
      "startColumnNumber" : 24,
      "endLineNumber" : 158,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 26
      },
      "nodeContext" : "new Exception(t)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 27
      },
      "nodeContext" : "throw new Exception(t);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 157,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw new Exception(t);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 159,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (t instanceof Fail) {\n  System.err.println(t.getMessage());\n  return 1;\n}\n else if (t instanceof Exception) {\n  throw (Exception)t;\n}\n else if (t instanceof Error) {\n  throw (Error)t;\n}\n else {\n  throw new Exception(t);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 160,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  for (  String resourceName : toCopy) {\n    InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n      }\n      writeIntoJar(jar,resourceName,in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 27
      },
      "nodeContext" : "throw new Exception(t);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 150,
    "startColumnNumber" : 7,
    "endLineNumber" : 150,
    "endColumnNumber" : 8
  }, {
    "charLength" : 1,
    "startLineNumber" : 151,
    "startColumnNumber" : 23,
    "endLineNumber" : 151,
    "endColumnNumber" : 24
  }, {
    "charLength" : 1,
    "startLineNumber" : 153,
    "startColumnNumber" : 14,
    "endLineNumber" : 153,
    "endColumnNumber" : 15
  }, {
    "charLength" : 1,
    "startLineNumber" : 154,
    "startColumnNumber" : 21,
    "endLineNumber" : 154,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 155,
    "startColumnNumber" : 14,
    "endLineNumber" : 155,
    "endColumnNumber" : 15
  }, {
    "charLength" : 1,
    "startLineNumber" : 156,
    "startColumnNumber" : 17,
    "endLineNumber" : 156,
    "endColumnNumber" : 18
  }, {
    "charLength" : 1,
    "startLineNumber" : 158,
    "startColumnNumber" : 24,
    "endLineNumber" : 158,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}