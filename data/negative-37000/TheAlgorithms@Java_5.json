{
  "id" : 5,
  "expression" : "i",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Others/removeDuplicateFromString.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 24,
      "endLineNumber" : 37,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 24,
        "endLineNumber" : 37,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (sb.toString().indexOf(s.charAt(i)) == -1) {\n    sb.append(String.valueOf(s.charAt(i)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method produces a string after removing all the duplicate characters from input string and returns it Example: Input String - \"aabbbccccddddd\" Output String - \"abcd\"\n * @param s String from which duplicate characters have to be removed\n * @return string with only unique characters\n */\npublic static String removeDuplicate(String s){\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 24,
        "endLineNumber" : 37,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 38,
      "startColumnNumber" : 47,
      "endLineNumber" : 38,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 38,
        "startColumnNumber" : 38,
        "endLineNumber" : 38,
        "endColumnNumber" : 49
      },
      "nodeContext" : "s.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 38,
        "startColumnNumber" : 16,
        "endLineNumber" : 38,
        "endColumnNumber" : 50
      },
      "nodeContext" : "sb.toString().indexOf(s.charAt(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 38,
        "startColumnNumber" : 16,
        "endLineNumber" : 38,
        "endColumnNumber" : 56
      },
      "nodeContext" : "sb.toString().indexOf(s.charAt(i)) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sb.toString().indexOf(s.charAt(i)) == -1) {\n  sb.append(String.valueOf(s.charAt(i)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 37,
        "startColumnNumber" : 36,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (sb.toString().indexOf(s.charAt(i)) == -1) {\n    sb.append(String.valueOf(s.charAt(i)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (sb.toString().indexOf(s.charAt(i)) == -1) {\n    sb.append(String.valueOf(s.charAt(i)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method produces a string after removing all the duplicate characters from input string and returns it Example: Input String - \"aabbbccccddddd\" Output String - \"abcd\"\n * @param s String from which duplicate characters have to be removed\n * @return string with only unique characters\n */\npublic static String removeDuplicate(String s){\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 38,
        "startColumnNumber" : 16,
        "endLineNumber" : 38,
        "endColumnNumber" : 56
      },
      "nodeContext" : "sb.toString().indexOf(s.charAt(i)) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 39,
      "startColumnNumber" : 50,
      "endLineNumber" : 39,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 39,
        "startColumnNumber" : 41,
        "endLineNumber" : 39,
        "endColumnNumber" : 52
      },
      "nodeContext" : "s.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 39,
        "startColumnNumber" : 26,
        "endLineNumber" : 39,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String.valueOf(s.charAt(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 39,
        "startColumnNumber" : 16,
        "endLineNumber" : 39,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sb.append(String.valueOf(s.charAt(i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 39,
        "startColumnNumber" : 16,
        "endLineNumber" : 39,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sb.append(String.valueOf(s.charAt(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 38,
        "startColumnNumber" : 58,
        "endLineNumber" : 40,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sb.append(String.valueOf(s.charAt(i)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sb.toString().indexOf(s.charAt(i)) == -1) {\n  sb.append(String.valueOf(s.charAt(i)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 37,
        "startColumnNumber" : 36,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (sb.toString().indexOf(s.charAt(i)) == -1) {\n    sb.append(String.valueOf(s.charAt(i)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (sb.toString().indexOf(s.charAt(i)) == -1) {\n    sb.append(String.valueOf(s.charAt(i)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method produces a string after removing all the duplicate characters from input string and returns it Example: Input String - \"aabbbccccddddd\" Output String - \"abcd\"\n * @param s String from which duplicate characters have to be removed\n * @return string with only unique characters\n */\npublic static String removeDuplicate(String s){\n  if (s.isEmpty() || s == null) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(\"\");\n  int n=s.length();\n  for (int i=0; i < n; i++) {\n    if (sb.toString().indexOf(s.charAt(i)) == -1) {\n      sb.append(String.valueOf(s.charAt(i)));\n    }\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 39,
        "startColumnNumber" : 16,
        "endLineNumber" : 39,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sb.append(String.valueOf(s.charAt(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 24,
    "endLineNumber" : 37,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 38,
    "startColumnNumber" : 47,
    "endLineNumber" : 38,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 39,
    "startColumnNumber" : 50,
    "endLineNumber" : 39,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}