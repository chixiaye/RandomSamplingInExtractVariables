{
  "id" : 297,
  "expression" : "logger",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/plugins/PerformanceInterceptor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 163,
      "startColumnNumber" : 16,
      "endLineNumber" : 163,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 163,
        "endColumnNumber" : 50
      },
      "nodeContext" : "logger.error(formatSql.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 163,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.error(formatSql.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 162,
        "startColumnNumber" : 70,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  logger.error(formatSql.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n  logger.error(formatSql.toString());\n}\n else {\n  logger.debug(formatSql.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 161,
        "startColumnNumber" : 33,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    logger.error(formatSql.toString());\n  }\n else {\n    logger.debug(formatSql.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.isWriteInLog()) {\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    logger.error(formatSql.toString());\n  }\n else {\n    logger.debug(formatSql.toString());\n  }\n}\n else {\n  System.err.println(formatSql.toString());\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4221,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  MetaObject stmtMetaObj=SystemMetaObject.forObject(statement);\n  try {\n    statement=(Statement)stmtMetaObj.getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  if (stmtMetaObj.hasGetter(\"delegate\")) {\n    try {\n      statement=(Statement)stmtMetaObj.getValue(\"delegate\");\n    }\n catch (    Exception e) {\n    }\n  }\n  String originalSql=null;\n  String stmtClassName=statement.getClass().getName();\n  if (DruidPooledPreparedStatement.equals(stmtClassName)) {\n    try {\n      if (druidGetSQLMethod == null) {\n        Class<?> clazz=Class.forName(DruidPooledPreparedStatement);\n        druidGetSQLMethod=clazz.getMethod(\"getSql\");\n      }\n      Object stmtSql=druidGetSQLMethod.invoke(statement);\n      if (stmtSql != null && stmtSql instanceof String) {\n        originalSql=(String)stmtSql;\n      }\n    }\n catch (    Exception ignored) {\n    }\n  }\n else   if (T4CPreparedStatement.equals(stmtClassName) || OraclePreparedStatementWrapper.equals(stmtClassName)) {\n    try {\n      if (oracleGetOriginalSqlMethod != null) {\n        Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n        if (stmtSql != null && stmtSql instanceof String) {\n          originalSql=(String)stmtSql;\n        }\n      }\n else {\n        Class<?> clazz=Class.forName(stmtClassName);\n        oracleGetOriginalSqlMethod=getMethodRegular(clazz,\"getOriginalSql\");\n        if (oracleGetOriginalSqlMethod != null) {\n          oracleGetOriginalSqlMethod.setAccessible(true);\n          if (oracleGetOriginalSqlMethod != null) {\n            Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n            if (stmtSql != null && stmtSql instanceof String) {\n              originalSql=(String)stmtSql;\n            }\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (originalSql == null) {\n    originalSql=statement.toString();\n  }\n  int index=originalSql.indexOf(':');\n  if (index > 0) {\n    originalSql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long timing=SystemClock.now() - start;\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  StringBuilder formatSql=new StringBuilder();\n  formatSql.append(\" Time：\").append(timing);\n  formatSql.append(\" ms - ID：\").append(ms.getId());\n  formatSql.append(\"\\n Execute SQL：\").append(SqlUtils.sqlFormat(originalSql,format)).append(\"\\n\");\n  if (this.isWriteInLog()) {\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      logger.error(formatSql.toString());\n    }\n else {\n      logger.debug(formatSql.toString());\n    }\n  }\n else {\n    System.err.println(formatSql.toString());\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 481,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4299,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object intercept(Invocation invocation) throws Throwable {\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  MetaObject stmtMetaObj=SystemMetaObject.forObject(statement);\n  try {\n    statement=(Statement)stmtMetaObj.getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  if (stmtMetaObj.hasGetter(\"delegate\")) {\n    try {\n      statement=(Statement)stmtMetaObj.getValue(\"delegate\");\n    }\n catch (    Exception e) {\n    }\n  }\n  String originalSql=null;\n  String stmtClassName=statement.getClass().getName();\n  if (DruidPooledPreparedStatement.equals(stmtClassName)) {\n    try {\n      if (druidGetSQLMethod == null) {\n        Class<?> clazz=Class.forName(DruidPooledPreparedStatement);\n        druidGetSQLMethod=clazz.getMethod(\"getSql\");\n      }\n      Object stmtSql=druidGetSQLMethod.invoke(statement);\n      if (stmtSql != null && stmtSql instanceof String) {\n        originalSql=(String)stmtSql;\n      }\n    }\n catch (    Exception ignored) {\n    }\n  }\n else   if (T4CPreparedStatement.equals(stmtClassName) || OraclePreparedStatementWrapper.equals(stmtClassName)) {\n    try {\n      if (oracleGetOriginalSqlMethod != null) {\n        Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n        if (stmtSql != null && stmtSql instanceof String) {\n          originalSql=(String)stmtSql;\n        }\n      }\n else {\n        Class<?> clazz=Class.forName(stmtClassName);\n        oracleGetOriginalSqlMethod=getMethodRegular(clazz,\"getOriginalSql\");\n        if (oracleGetOriginalSqlMethod != null) {\n          oracleGetOriginalSqlMethod.setAccessible(true);\n          if (oracleGetOriginalSqlMethod != null) {\n            Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n            if (stmtSql != null && stmtSql instanceof String) {\n              originalSql=(String)stmtSql;\n            }\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (originalSql == null) {\n    originalSql=statement.toString();\n  }\n  int index=originalSql.indexOf(':');\n  if (index > 0) {\n    originalSql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long timing=SystemClock.now() - start;\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  StringBuilder formatSql=new StringBuilder();\n  formatSql.append(\" Time：\").append(timing);\n  formatSql.append(\" ms - ID：\").append(ms.getId());\n  formatSql.append(\"\\n Execute SQL：\").append(SqlUtils.sqlFormat(originalSql,format)).append(\"\\n\");\n  if (this.isWriteInLog()) {\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      logger.error(formatSql.toString());\n    }\n else {\n      logger.debug(formatSql.toString());\n    }\n  }\n else {\n    System.err.println(formatSql.toString());\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 494,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 163,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.error(formatSql.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.Log"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 165,
      "startColumnNumber" : 16,
      "endLineNumber" : 165,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 50
      },
      "nodeContext" : "logger.debug(formatSql.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.debug(formatSql.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 164,
        "startColumnNumber" : 19,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  logger.debug(formatSql.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n  logger.error(formatSql.toString());\n}\n else {\n  logger.debug(formatSql.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 161,
        "startColumnNumber" : 33,
        "endLineNumber" : 167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    logger.error(formatSql.toString());\n  }\n else {\n    logger.debug(formatSql.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.isWriteInLog()) {\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    logger.error(formatSql.toString());\n  }\n else {\n    logger.debug(formatSql.toString());\n  }\n}\n else {\n  System.err.println(formatSql.toString());\n  if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n    throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4221,
        "startLineNumber" : 78,
        "startColumnNumber" : 68,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  MetaObject stmtMetaObj=SystemMetaObject.forObject(statement);\n  try {\n    statement=(Statement)stmtMetaObj.getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  if (stmtMetaObj.hasGetter(\"delegate\")) {\n    try {\n      statement=(Statement)stmtMetaObj.getValue(\"delegate\");\n    }\n catch (    Exception e) {\n    }\n  }\n  String originalSql=null;\n  String stmtClassName=statement.getClass().getName();\n  if (DruidPooledPreparedStatement.equals(stmtClassName)) {\n    try {\n      if (druidGetSQLMethod == null) {\n        Class<?> clazz=Class.forName(DruidPooledPreparedStatement);\n        druidGetSQLMethod=clazz.getMethod(\"getSql\");\n      }\n      Object stmtSql=druidGetSQLMethod.invoke(statement);\n      if (stmtSql != null && stmtSql instanceof String) {\n        originalSql=(String)stmtSql;\n      }\n    }\n catch (    Exception ignored) {\n    }\n  }\n else   if (T4CPreparedStatement.equals(stmtClassName) || OraclePreparedStatementWrapper.equals(stmtClassName)) {\n    try {\n      if (oracleGetOriginalSqlMethod != null) {\n        Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n        if (stmtSql != null && stmtSql instanceof String) {\n          originalSql=(String)stmtSql;\n        }\n      }\n else {\n        Class<?> clazz=Class.forName(stmtClassName);\n        oracleGetOriginalSqlMethod=getMethodRegular(clazz,\"getOriginalSql\");\n        if (oracleGetOriginalSqlMethod != null) {\n          oracleGetOriginalSqlMethod.setAccessible(true);\n          if (oracleGetOriginalSqlMethod != null) {\n            Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n            if (stmtSql != null && stmtSql instanceof String) {\n              originalSql=(String)stmtSql;\n            }\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (originalSql == null) {\n    originalSql=statement.toString();\n  }\n  int index=originalSql.indexOf(':');\n  if (index > 0) {\n    originalSql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long timing=SystemClock.now() - start;\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  StringBuilder formatSql=new StringBuilder();\n  formatSql.append(\" Time：\").append(timing);\n  formatSql.append(\" ms - ID：\").append(ms.getId());\n  formatSql.append(\"\\n Execute SQL：\").append(SqlUtils.sqlFormat(originalSql,format)).append(\"\\n\");\n  if (this.isWriteInLog()) {\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      logger.error(formatSql.toString());\n    }\n else {\n      logger.debug(formatSql.toString());\n    }\n  }\n else {\n    System.err.println(formatSql.toString());\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 481,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4299,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object intercept(Invocation invocation) throws Throwable {\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  MetaObject stmtMetaObj=SystemMetaObject.forObject(statement);\n  try {\n    statement=(Statement)stmtMetaObj.getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  if (stmtMetaObj.hasGetter(\"delegate\")) {\n    try {\n      statement=(Statement)stmtMetaObj.getValue(\"delegate\");\n    }\n catch (    Exception e) {\n    }\n  }\n  String originalSql=null;\n  String stmtClassName=statement.getClass().getName();\n  if (DruidPooledPreparedStatement.equals(stmtClassName)) {\n    try {\n      if (druidGetSQLMethod == null) {\n        Class<?> clazz=Class.forName(DruidPooledPreparedStatement);\n        druidGetSQLMethod=clazz.getMethod(\"getSql\");\n      }\n      Object stmtSql=druidGetSQLMethod.invoke(statement);\n      if (stmtSql != null && stmtSql instanceof String) {\n        originalSql=(String)stmtSql;\n      }\n    }\n catch (    Exception ignored) {\n    }\n  }\n else   if (T4CPreparedStatement.equals(stmtClassName) || OraclePreparedStatementWrapper.equals(stmtClassName)) {\n    try {\n      if (oracleGetOriginalSqlMethod != null) {\n        Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n        if (stmtSql != null && stmtSql instanceof String) {\n          originalSql=(String)stmtSql;\n        }\n      }\n else {\n        Class<?> clazz=Class.forName(stmtClassName);\n        oracleGetOriginalSqlMethod=getMethodRegular(clazz,\"getOriginalSql\");\n        if (oracleGetOriginalSqlMethod != null) {\n          oracleGetOriginalSqlMethod.setAccessible(true);\n          if (oracleGetOriginalSqlMethod != null) {\n            Object stmtSql=oracleGetOriginalSqlMethod.invoke(statement);\n            if (stmtSql != null && stmtSql instanceof String) {\n              originalSql=(String)stmtSql;\n            }\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n    }\n  }\n  if (originalSql == null) {\n    originalSql=statement.toString();\n  }\n  int index=originalSql.indexOf(':');\n  if (index > 0) {\n    originalSql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long timing=SystemClock.now() - start;\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  StringBuilder formatSql=new StringBuilder();\n  formatSql.append(\" Time：\").append(timing);\n  formatSql.append(\" ms - ID：\").append(ms.getId());\n  formatSql.append(\"\\n Execute SQL：\").append(SqlUtils.sqlFormat(originalSql,format)).append(\"\\n\");\n  if (this.isWriteInLog()) {\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      logger.error(formatSql.toString());\n    }\n else {\n      logger.debug(formatSql.toString());\n    }\n  }\n else {\n    System.err.println(formatSql.toString());\n    if (this.getMaxTime() >= 1 && timing > this.getMaxTime()) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 494,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.debug(formatSql.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.Log"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 163,
    "startColumnNumber" : 16,
    "endLineNumber" : 163,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 165,
    "startColumnNumber" : 16,
    "endLineNumber" : 165,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}