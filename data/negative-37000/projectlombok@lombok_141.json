{
  "id" : 141,
  "expression" : "annotation.isExplicit(\"of\")",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotation.isExplicit(\"of\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 97,
      "startColumnNumber" : 7,
      "endLineNumber" : 97,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 34
      },
      "nodeContext" : "!annotation.isExplicit(\"of\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (!annotation.isExplicit(\"of\")) includes=null;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 85,
        "startColumnNumber" : 122,
        "endLineNumber" : 107,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,EqualsAndHashCode.class);\n  EqualsAndHashCode ann=annotation.getInstance();\n  List<String> excludes=List.from(ann.exclude());\n  List<String> includes=List.from(ann.of());\n  JavacNode typeNode=annotationNode.up();\n  checkForBogusFieldNames(typeNode,annotation);\n  Boolean callSuper=ann.callSuper();\n  if (!annotation.isExplicit(\"callSuper\"))   callSuper=null;\n  if (!annotation.isExplicit(\"exclude\"))   excludes=null;\n  if (!annotation.isExplicit(\"of\"))   includes=null;\n  if (excludes != null && includes != null) {\n    excludes=null;\n    annotation.setWarning(\"exclude\",\"exclude and of are mutually exclusive; the 'exclude' parameter will be ignored.\");\n  }\n  FieldAccess fieldAccess=ann.doNotUseGetters() ? FieldAccess.PREFER_FIELD : FieldAccess.GETTER;\n  generateMethods(typeNode,annotationNode,excludes,includes,callSuper,true,fieldAccess);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 107,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<EqualsAndHashCode> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,EqualsAndHashCode.class);\n  EqualsAndHashCode ann=annotation.getInstance();\n  List<String> excludes=List.from(ann.exclude());\n  List<String> includes=List.from(ann.of());\n  JavacNode typeNode=annotationNode.up();\n  checkForBogusFieldNames(typeNode,annotation);\n  Boolean callSuper=ann.callSuper();\n  if (!annotation.isExplicit(\"callSuper\"))   callSuper=null;\n  if (!annotation.isExplicit(\"exclude\"))   excludes=null;\n  if (!annotation.isExplicit(\"of\"))   includes=null;\n  if (excludes != null && includes != null) {\n    excludes=null;\n    annotation.setWarning(\"exclude\",\"exclude and of are mutually exclusive; the 'exclude' parameter will be ignored.\");\n  }\n  FieldAccess fieldAccess=ann.doNotUseGetters() ? FieldAccess.PREFER_FIELD : FieldAccess.GETTER;\n  generateMethods(typeNode,annotationNode,excludes,includes,callSuper,true,fieldAccess);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (!annotation.isExplicit(\"of\")) includes=null;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 97,
    "startColumnNumber" : 7,
    "endLineNumber" : 97,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}