{
  "id" : 326,
  "expression" : "3999",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3999",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 434,
      "startColumnNumber" : 79,
      "endLineNumber" : 434,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 434,
        "startColumnNumber" : 35,
        "endLineNumber" : 434,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new StreamRecord<>(new Tuple2<>(\"key2\",1),3999)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 434,
        "startColumnNumber" : 8,
        "endLineNumber" : 434,
        "endColumnNumber" : 85
      },
      "nodeContext" : "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 434,
        "startColumnNumber" : 8,
        "endLineNumber" : 434,
        "endColumnNumber" : 86
      },
      "nodeContext" : "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3663,
        "startLineNumber" : 393,
        "startColumnNumber" : 73,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int windowSize=3;\n  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>(\"window-contents\",new SumReducer<>(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null);\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);\n  testHarness.setup();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3000));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),20));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),0));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1998));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000));\n  testHarness.processWatermark(new Watermark(999));\n  expectedOutput.add(new Watermark(999));\n  TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());\n  testHarness.processWatermark(new Watermark(1999));\n  expectedOutput.add(new Watermark(1999));\n  TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());\n  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);\n  OperatorSnapshotUtil.writeStateHandle(snapshot,\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 375,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3814,
        "startLineNumber" : 390,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Manually run this to write binary snapshot data. \n */\n@Ignore @Test public void writeReducingEventTimeWindowsSnapshot() throws Exception {\n  final int windowSize=3;\n  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>(\"window-contents\",new SumReducer<>(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null);\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);\n  testHarness.setup();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3000));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),20));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),0));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1998));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1999));\n  testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000));\n  testHarness.processWatermark(new Watermark(999));\n  expectedOutput.add(new Watermark(999));\n  TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());\n  testHarness.processWatermark(new Watermark(1999));\n  expectedOutput.add(new Watermark(1999));\n  TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());\n  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);\n  OperatorSnapshotUtil.writeStateHandle(snapshot,\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 386,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 434,
        "startColumnNumber" : 8,
        "endLineNumber" : 434,
        "endColumnNumber" : 86
      },
      "nodeContext" : "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),3999));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 434,
    "startColumnNumber" : 79,
    "endLineNumber" : 434,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}