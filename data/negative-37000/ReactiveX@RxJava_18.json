{
  "id" : 18,
  "expression" : "wip.decrementAndGet() == 0",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wip.decrementAndGet() == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 378,
      "startColumnNumber" : 24,
      "endLineNumber" : 378,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 378,
        "startColumnNumber" : 20,
        "endLineNumber" : 380,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (wip.decrementAndGet() == 0) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4501,
        "startLineNumber" : 279,
        "startColumnNumber" : 25,
        "endLineNumber" : 381,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (cancelled) {\n    return;\n  }\n  if (!active) {\n    boolean d=done;\n    T v;\n    try {\n      v=queue.poll();\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      s.cancel();\n      actual.onError(e);\n      return;\n    }\n    boolean empty=v == null;\n    if (d && empty) {\n      actual.onComplete();\n      return;\n    }\n    if (!empty) {\n      Publisher<? extends R> p;\n      try {\n        p=mapper.apply(v);\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        s.cancel();\n        actual.onError(e);\n        return;\n      }\n      if (p == null) {\n        s.cancel();\n        actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n        return;\n      }\n      if (sourceMode != QueueSubscription.SYNC) {\n        int c=consumed + 1;\n        if (c == limit) {\n          consumed=0;\n          s.request(c);\n        }\n else {\n          consumed=c;\n        }\n      }\n      if (p instanceof Callable) {\n        @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n        R vr;\n        try {\n          vr=callable.call();\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        if (vr == null) {\n          continue;\n        }\n        if (inner.isUnbounded()) {\n          if (get() == 0 && compareAndSet(0,1)) {\n            actual.onNext(vr);\n            if (!compareAndSet(1,0)) {\n              Throwable e=Exceptions.terminate(error);\n              if (e != Exceptions.TERMINATED) {\n                actual.onError(e);\n              }\n              return;\n            }\n          }\n          continue;\n        }\n else {\n          active=true;\n          inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n        }\n      }\n else {\n        active=true;\n        p.subscribe(inner);\n      }\n    }\n  }\n  if (wip.decrementAndGet() == 0) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 309,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4510,
        "startLineNumber" : 279,
        "startColumnNumber" : 16,
        "endLineNumber" : 381,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (; ; ) {\n  if (cancelled) {\n    return;\n  }\n  if (!active) {\n    boolean d=done;\n    T v;\n    try {\n      v=queue.poll();\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      s.cancel();\n      actual.onError(e);\n      return;\n    }\n    boolean empty=v == null;\n    if (d && empty) {\n      actual.onComplete();\n      return;\n    }\n    if (!empty) {\n      Publisher<? extends R> p;\n      try {\n        p=mapper.apply(v);\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        s.cancel();\n        actual.onError(e);\n        return;\n      }\n      if (p == null) {\n        s.cancel();\n        actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n        return;\n      }\n      if (sourceMode != QueueSubscription.SYNC) {\n        int c=consumed + 1;\n        if (c == limit) {\n          consumed=0;\n          s.request(c);\n        }\n else {\n          consumed=c;\n        }\n      }\n      if (p instanceof Callable) {\n        @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n        R vr;\n        try {\n          vr=callable.call();\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        if (vr == null) {\n          continue;\n        }\n        if (inner.isUnbounded()) {\n          if (get() == 0 && compareAndSet(0,1)) {\n            actual.onNext(vr);\n            if (!compareAndSet(1,0)) {\n              Throwable e=Exceptions.terminate(error);\n              if (e != Exceptions.TERMINATED) {\n                actual.onError(e);\n              }\n              return;\n            }\n          }\n          continue;\n        }\n else {\n          active=true;\n          inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n        }\n      }\n else {\n        active=true;\n        p.subscribe(inner);\n      }\n    }\n  }\n  if (wip.decrementAndGet() == 0) {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 310,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4544,
        "startLineNumber" : 278,
        "startColumnNumber" : 44,
        "endLineNumber" : 382,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (; ; ) {\n    if (cancelled) {\n      return;\n    }\n    if (!active) {\n      boolean d=done;\n      T v;\n      try {\n        v=queue.poll();\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        s.cancel();\n        actual.onError(e);\n        return;\n      }\n      boolean empty=v == null;\n      if (d && empty) {\n        actual.onComplete();\n        return;\n      }\n      if (!empty) {\n        Publisher<? extends R> p;\n        try {\n          p=mapper.apply(v);\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        if (p == null) {\n          s.cancel();\n          actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n          return;\n        }\n        if (sourceMode != QueueSubscription.SYNC) {\n          int c=consumed + 1;\n          if (c == limit) {\n            consumed=0;\n            s.request(c);\n          }\n else {\n            consumed=c;\n          }\n        }\n        if (p instanceof Callable) {\n          @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n          R vr;\n          try {\n            vr=callable.call();\n          }\n catch (          Throwable e) {\n            Exceptions.throwIfFatal(e);\n            s.cancel();\n            actual.onError(e);\n            return;\n          }\n          if (vr == null) {\n            continue;\n          }\n          if (inner.isUnbounded()) {\n            if (get() == 0 && compareAndSet(0,1)) {\n              actual.onNext(vr);\n              if (!compareAndSet(1,0)) {\n                Throwable e=Exceptions.terminate(error);\n                if (e != Exceptions.TERMINATED) {\n                  actual.onError(e);\n                }\n                return;\n              }\n            }\n            continue;\n          }\n else {\n            active=true;\n            inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n          }\n        }\n else {\n          active=true;\n          p.subscribe(inner);\n        }\n      }\n    }\n    if (wip.decrementAndGet() == 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4576,
        "startLineNumber" : 278,
        "startColumnNumber" : 12,
        "endLineNumber" : 382,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (wip.getAndIncrement() == 0) {\n  for (; ; ) {\n    if (cancelled) {\n      return;\n    }\n    if (!active) {\n      boolean d=done;\n      T v;\n      try {\n        v=queue.poll();\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        s.cancel();\n        actual.onError(e);\n        return;\n      }\n      boolean empty=v == null;\n      if (d && empty) {\n        actual.onComplete();\n        return;\n      }\n      if (!empty) {\n        Publisher<? extends R> p;\n        try {\n          p=mapper.apply(v);\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        if (p == null) {\n          s.cancel();\n          actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n          return;\n        }\n        if (sourceMode != QueueSubscription.SYNC) {\n          int c=consumed + 1;\n          if (c == limit) {\n            consumed=0;\n            s.request(c);\n          }\n else {\n            consumed=c;\n          }\n        }\n        if (p instanceof Callable) {\n          @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n          R vr;\n          try {\n            vr=callable.call();\n          }\n catch (          Throwable e) {\n            Exceptions.throwIfFatal(e);\n            s.cancel();\n            actual.onError(e);\n            return;\n          }\n          if (vr == null) {\n            continue;\n          }\n          if (inner.isUnbounded()) {\n            if (get() == 0 && compareAndSet(0,1)) {\n              actual.onNext(vr);\n              if (!compareAndSet(1,0)) {\n                Throwable e=Exceptions.terminate(error);\n                if (e != Exceptions.TERMINATED) {\n                  actual.onError(e);\n                }\n                return;\n              }\n            }\n            continue;\n          }\n else {\n            active=true;\n            inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n          }\n        }\n else {\n          active=true;\n          p.subscribe(inner);\n        }\n      }\n    }\n    if (wip.decrementAndGet() == 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 317,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4602,
        "startLineNumber" : 277,
        "startColumnNumber" : 21,
        "endLineNumber" : 383,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (wip.getAndIncrement() == 0) {\n    for (; ; ) {\n      if (cancelled) {\n        return;\n      }\n      if (!active) {\n        boolean d=done;\n        T v;\n        try {\n          v=queue.poll();\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        boolean empty=v == null;\n        if (d && empty) {\n          actual.onComplete();\n          return;\n        }\n        if (!empty) {\n          Publisher<? extends R> p;\n          try {\n            p=mapper.apply(v);\n          }\n catch (          Throwable e) {\n            Exceptions.throwIfFatal(e);\n            s.cancel();\n            actual.onError(e);\n            return;\n          }\n          if (p == null) {\n            s.cancel();\n            actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n            return;\n          }\n          if (sourceMode != QueueSubscription.SYNC) {\n            int c=consumed + 1;\n            if (c == limit) {\n              consumed=0;\n              s.request(c);\n            }\n else {\n              consumed=c;\n            }\n          }\n          if (p instanceof Callable) {\n            @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n            R vr;\n            try {\n              vr=callable.call();\n            }\n catch (            Throwable e) {\n              Exceptions.throwIfFatal(e);\n              s.cancel();\n              actual.onError(e);\n              return;\n            }\n            if (vr == null) {\n              continue;\n            }\n            if (inner.isUnbounded()) {\n              if (get() == 0 && compareAndSet(0,1)) {\n                actual.onNext(vr);\n                if (!compareAndSet(1,0)) {\n                  Throwable e=Exceptions.terminate(error);\n                  if (e != Exceptions.TERMINATED) {\n                    actual.onError(e);\n                  }\n                  return;\n                }\n              }\n              continue;\n            }\n else {\n              active=true;\n              inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n            }\n          }\n else {\n            active=true;\n            p.subscribe(inner);\n          }\n        }\n      }\n      if (wip.decrementAndGet() == 0) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4634,
        "startLineNumber" : 276,
        "startColumnNumber" : 8,
        "endLineNumber" : 383,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override void drain(){\n  if (wip.getAndIncrement() == 0) {\n    for (; ; ) {\n      if (cancelled) {\n        return;\n      }\n      if (!active) {\n        boolean d=done;\n        T v;\n        try {\n          v=queue.poll();\n        }\n catch (        Throwable e) {\n          Exceptions.throwIfFatal(e);\n          s.cancel();\n          actual.onError(e);\n          return;\n        }\n        boolean empty=v == null;\n        if (d && empty) {\n          actual.onComplete();\n          return;\n        }\n        if (!empty) {\n          Publisher<? extends R> p;\n          try {\n            p=mapper.apply(v);\n          }\n catch (          Throwable e) {\n            Exceptions.throwIfFatal(e);\n            s.cancel();\n            actual.onError(e);\n            return;\n          }\n          if (p == null) {\n            s.cancel();\n            actual.onError(new NullPointerException(\"The mapper returned a null Publisher\"));\n            return;\n          }\n          if (sourceMode != QueueSubscription.SYNC) {\n            int c=consumed + 1;\n            if (c == limit) {\n              consumed=0;\n              s.request(c);\n            }\n else {\n              consumed=c;\n            }\n          }\n          if (p instanceof Callable) {\n            @SuppressWarnings(\"unchecked\") Callable<R> callable=(Callable<R>)p;\n            R vr;\n            try {\n              vr=callable.call();\n            }\n catch (            Throwable e) {\n              Exceptions.throwIfFatal(e);\n              s.cancel();\n              actual.onError(e);\n              return;\n            }\n            if (vr == null) {\n              continue;\n            }\n            if (inner.isUnbounded()) {\n              if (get() == 0 && compareAndSet(0,1)) {\n                actual.onNext(vr);\n                if (!compareAndSet(1,0)) {\n                  Throwable e=Exceptions.terminate(error);\n                  if (e != Exceptions.TERMINATED) {\n                    actual.onError(e);\n                  }\n                  return;\n                }\n              }\n              continue;\n            }\n else {\n              active=true;\n              inner.setSubscription(new WeakScalarSubscription<R>(vr,inner));\n            }\n          }\n else {\n            active=true;\n            p.subscribe(inner);\n          }\n        }\n      }\n      if (wip.decrementAndGet() == 0) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 378,
        "startColumnNumber" : 20,
        "endLineNumber" : 380,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (wip.decrementAndGet() == 0) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 378,
    "startColumnNumber" : 24,
    "endLineNumber" : 378,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}