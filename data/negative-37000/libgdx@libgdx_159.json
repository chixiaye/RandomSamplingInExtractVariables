{
  "id" : 159,
  "expression" : "unicodeFont.getPaddingRight()",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/unicodefont/GlyphPage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "unicodeFont.getPaddingRight()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 149,
      "startColumnNumber" : 34,
      "endLineNumber" : 149,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 149,
        "startColumnNumber" : 34,
        "endLineNumber" : 149,
        "endColumnNumber" : 67
      },
      "nodeContext" : "unicodeFont.getPaddingRight() * 4",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 149,
        "startColumnNumber" : 19,
        "endLineNumber" : 149,
        "endColumnNumber" : 67
      },
      "nodeContext" : "padLeftBytes + unicodeFont.getPaddingRight() * 4",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 149,
        "startColumnNumber" : 7,
        "endLineNumber" : 149,
        "endColumnNumber" : 67
      },
      "nodeContext" : "padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 149,
        "startColumnNumber" : 3,
        "endLineNumber" : 149,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1279,
        "startLineNumber" : 141,
        "startColumnNumber" : 92,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BitmapFontData data=unicodeFont.bitmapFont.getData();\n  BitmapFont.Glyph g=data.getGlyph((char)glyph.getCodePoint());\n  Pixmap fontPixmap=unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap();\n  int fontWidth=fontPixmap.getWidth();\n  int padTop=unicodeFont.getPaddingTop(), padBottom=unicodeFont.getPaddingBottom();\n  int padLeftBytes=unicodeFont.getPaddingLeft() * 4;\n  int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n  int glyphRowBytes=width * 4, fontRowBytes=g.width * 4;\n  ByteBuffer fontPixels=fontPixmap.getPixels();\n  byte[] row=new byte[glyphRowBytes];\n  glyphPixels.position(0);\n  for (int i=0; i < padTop; i++)   glyphPixels.put(row);\n  glyphPixels.position((height - padBottom) * glyphRowBytes);\n  for (int i=0; i < padBottom; i++)   glyphPixels.put(row);\n  glyphPixels.position(padTop * glyphRowBytes);\n  for (int y=0, n=g.height; y < n; y++) {\n    fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4);\n    fontPixels.get(row,padLeftBytes,fontRowBytes);\n    glyphPixels.put(row);\n  }\n  fontPixels.position(0);\n  glyphPixels.position(height * glyphRowBytes);\n  glyphPixels.flip();\n  format=GL11.GL_RGBA;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2633,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) {\n  BitmapFontData data=unicodeFont.bitmapFont.getData();\n  BitmapFont.Glyph g=data.getGlyph((char)glyph.getCodePoint());\n  Pixmap fontPixmap=unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap();\n  int fontWidth=fontPixmap.getWidth();\n  int padTop=unicodeFont.getPaddingTop(), padBottom=unicodeFont.getPaddingBottom();\n  int padLeftBytes=unicodeFont.getPaddingLeft() * 4;\n  int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n  int glyphRowBytes=width * 4, fontRowBytes=g.width * 4;\n  ByteBuffer fontPixels=fontPixmap.getPixels();\n  byte[] row=new byte[glyphRowBytes];\n  glyphPixels.position(0);\n  for (int i=0; i < padTop; i++)   glyphPixels.put(row);\n  glyphPixels.position((height - padBottom) * glyphRowBytes);\n  for (int i=0; i < padBottom; i++)   glyphPixels.put(row);\n  glyphPixels.position(padTop * glyphRowBytes);\n  for (int y=0, n=g.height; y < n; y++) {\n    fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4);\n    fontPixels.get(row,padLeftBytes,fontRowBytes);\n    glyphPixels.put(row);\n  }\n  fontPixels.position(0);\n  glyphPixels.position(height * glyphRowBytes);\n  glyphPixels.flip();\n  format=GL11.GL_RGBA;\n}\n else {\n  if (unicodeFont.getRenderType() == RenderType.Native) {\n    for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); ) {\n      Effect effect=(Effect)iter.next();\n      if (effect instanceof ColorEffect)       scratchGraphics.setColor(((ColorEffect)effect).getColor());\n    }\n    scratchGraphics.setColor(java.awt.Color.white);\n    scratchGraphics.setFont(unicodeFont.getFont());\n    scratchGraphics.drawString(\"\" + (char)glyph.getCodePoint(),0,unicodeFont.getAscent());\n  }\n else   if (unicodeFont.getRenderType() == RenderType.Java) {\n    scratchGraphics.setColor(java.awt.Color.white);\n    for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); )     ((Effect)iter.next()).draw(scratchImage,scratchGraphics,unicodeFont,glyph);\n    glyph.setShape(null);\n  }\n  width=Math.min(width,texture.getWidth());\n  height=Math.min(height,texture.getHeight());\n  WritableRaster raster=scratchImage.getRaster();\n  int[] row=new int[width];\n  for (int y=0; y < height; y++) {\n    raster.getDataElements(0,y,width,1,row);\n    scratchIntBuffer.put(row);\n  }\n  format=GL12.GL_BGRA;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 466,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 134,
        "startColumnNumber" : 88,
        "endLineNumber" : 234,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  scratchGraphics.setComposite(AlphaComposite.Clear);\n  scratchGraphics.fillRect(0,0,MAX_GLYPH_SIZE,MAX_GLYPH_SIZE);\n  scratchGraphics.setComposite(AlphaComposite.SrcOver);\n  ByteBuffer glyphPixels=scratchByteBuffer;\n  int format;\n  if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) {\n    BitmapFontData data=unicodeFont.bitmapFont.getData();\n    BitmapFont.Glyph g=data.getGlyph((char)glyph.getCodePoint());\n    Pixmap fontPixmap=unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap();\n    int fontWidth=fontPixmap.getWidth();\n    int padTop=unicodeFont.getPaddingTop(), padBottom=unicodeFont.getPaddingBottom();\n    int padLeftBytes=unicodeFont.getPaddingLeft() * 4;\n    int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n    int glyphRowBytes=width * 4, fontRowBytes=g.width * 4;\n    ByteBuffer fontPixels=fontPixmap.getPixels();\n    byte[] row=new byte[glyphRowBytes];\n    glyphPixels.position(0);\n    for (int i=0; i < padTop; i++)     glyphPixels.put(row);\n    glyphPixels.position((height - padBottom) * glyphRowBytes);\n    for (int i=0; i < padBottom; i++)     glyphPixels.put(row);\n    glyphPixels.position(padTop * glyphRowBytes);\n    for (int y=0, n=g.height; y < n; y++) {\n      fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4);\n      fontPixels.get(row,padLeftBytes,fontRowBytes);\n      glyphPixels.put(row);\n    }\n    fontPixels.position(0);\n    glyphPixels.position(height * glyphRowBytes);\n    glyphPixels.flip();\n    format=GL11.GL_RGBA;\n  }\n else {\n    if (unicodeFont.getRenderType() == RenderType.Native) {\n      for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); ) {\n        Effect effect=(Effect)iter.next();\n        if (effect instanceof ColorEffect)         scratchGraphics.setColor(((ColorEffect)effect).getColor());\n      }\n      scratchGraphics.setColor(java.awt.Color.white);\n      scratchGraphics.setFont(unicodeFont.getFont());\n      scratchGraphics.drawString(\"\" + (char)glyph.getCodePoint(),0,unicodeFont.getAscent());\n    }\n else     if (unicodeFont.getRenderType() == RenderType.Java) {\n      scratchGraphics.setColor(java.awt.Color.white);\n      for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); )       ((Effect)iter.next()).draw(scratchImage,scratchGraphics,unicodeFont,glyph);\n      glyph.setShape(null);\n    }\n    width=Math.min(width,texture.getWidth());\n    height=Math.min(height,texture.getHeight());\n    WritableRaster raster=scratchImage.getRaster();\n    int[] row=new int[width];\n    for (int y=0; y < height; y++) {\n      raster.getDataElements(0,y,width,1,row);\n      scratchIntBuffer.put(row);\n    }\n    format=GL12.GL_BGRA;\n  }\n  String hash=\"\";\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"SHA-256\");\n    md.update(glyphPixels);\n    BigInteger bigInt=new BigInteger(1,md.digest());\n    hash=bigInt.toString(16);\n  }\n catch (  NoSuchAlgorithmException ex) {\n  }\n  scratchByteBuffer.clear();\n  scratchIntBuffer.clear();\n  try {\n    for (int i=0, n=hashes.size(); i < n; i++) {\n      String other=hashes.get(i);\n      if (other.equals(hash)) {\n        Glyph dupe=pageGlyphs.get(i);\n        glyph.setTexture(dupe.texture,dupe.u,dupe.v,dupe.u2,dupe.v2);\n        return false;\n      }\n    }\n  }\n  finally {\n    hashes.add(hash);\n    pageGlyphs.add(glyph);\n  }\n  Gdx.gl.glTexSubImage2D(texture.glTarget,0,pageX,pageY,width,height,format,GL11.GL_UNSIGNED_BYTE,glyphPixels);\n  float u=pageX / (float)texture.getWidth();\n  float v=pageY / (float)texture.getHeight();\n  float u2=(pageX + width) / (float)texture.getWidth();\n  float v2=(pageY + height) / (float)texture.getHeight();\n  glyph.setTexture(texture,u,v,u2,v2);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 709,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4165,
        "startLineNumber" : 133,
        "startColumnNumber" : 1,
        "endLineNumber" : 234,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Loads a single glyph to the backing texture, if it fits. \n */\nprivate boolean renderGlyph(Glyph glyph,int pageX,int pageY,int width,int height){\n  scratchGraphics.setComposite(AlphaComposite.Clear);\n  scratchGraphics.fillRect(0,0,MAX_GLYPH_SIZE,MAX_GLYPH_SIZE);\n  scratchGraphics.setComposite(AlphaComposite.SrcOver);\n  ByteBuffer glyphPixels=scratchByteBuffer;\n  int format;\n  if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) {\n    BitmapFontData data=unicodeFont.bitmapFont.getData();\n    BitmapFont.Glyph g=data.getGlyph((char)glyph.getCodePoint());\n    Pixmap fontPixmap=unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap();\n    int fontWidth=fontPixmap.getWidth();\n    int padTop=unicodeFont.getPaddingTop(), padBottom=unicodeFont.getPaddingBottom();\n    int padLeftBytes=unicodeFont.getPaddingLeft() * 4;\n    int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n    int glyphRowBytes=width * 4, fontRowBytes=g.width * 4;\n    ByteBuffer fontPixels=fontPixmap.getPixels();\n    byte[] row=new byte[glyphRowBytes];\n    glyphPixels.position(0);\n    for (int i=0; i < padTop; i++)     glyphPixels.put(row);\n    glyphPixels.position((height - padBottom) * glyphRowBytes);\n    for (int i=0; i < padBottom; i++)     glyphPixels.put(row);\n    glyphPixels.position(padTop * glyphRowBytes);\n    for (int y=0, n=g.height; y < n; y++) {\n      fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4);\n      fontPixels.get(row,padLeftBytes,fontRowBytes);\n      glyphPixels.put(row);\n    }\n    fontPixels.position(0);\n    glyphPixels.position(height * glyphRowBytes);\n    glyphPixels.flip();\n    format=GL11.GL_RGBA;\n  }\n else {\n    if (unicodeFont.getRenderType() == RenderType.Native) {\n      for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); ) {\n        Effect effect=(Effect)iter.next();\n        if (effect instanceof ColorEffect)         scratchGraphics.setColor(((ColorEffect)effect).getColor());\n      }\n      scratchGraphics.setColor(java.awt.Color.white);\n      scratchGraphics.setFont(unicodeFont.getFont());\n      scratchGraphics.drawString(\"\" + (char)glyph.getCodePoint(),0,unicodeFont.getAscent());\n    }\n else     if (unicodeFont.getRenderType() == RenderType.Java) {\n      scratchGraphics.setColor(java.awt.Color.white);\n      for (Iterator iter=unicodeFont.getEffects().iterator(); iter.hasNext(); )       ((Effect)iter.next()).draw(scratchImage,scratchGraphics,unicodeFont,glyph);\n      glyph.setShape(null);\n    }\n    width=Math.min(width,texture.getWidth());\n    height=Math.min(height,texture.getHeight());\n    WritableRaster raster=scratchImage.getRaster();\n    int[] row=new int[width];\n    for (int y=0; y < height; y++) {\n      raster.getDataElements(0,y,width,1,row);\n      scratchIntBuffer.put(row);\n    }\n    format=GL12.GL_BGRA;\n  }\n  String hash=\"\";\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"SHA-256\");\n    md.update(glyphPixels);\n    BigInteger bigInt=new BigInteger(1,md.digest());\n    hash=bigInt.toString(16);\n  }\n catch (  NoSuchAlgorithmException ex) {\n  }\n  scratchByteBuffer.clear();\n  scratchIntBuffer.clear();\n  try {\n    for (int i=0, n=hashes.size(); i < n; i++) {\n      String other=hashes.get(i);\n      if (other.equals(hash)) {\n        Glyph dupe=pageGlyphs.get(i);\n        glyph.setTexture(dupe.texture,dupe.u,dupe.v,dupe.u2,dupe.v2);\n        return false;\n      }\n    }\n  }\n  finally {\n    hashes.add(hash);\n    pageGlyphs.add(glyph);\n  }\n  Gdx.gl.glTexSubImage2D(texture.glTarget,0,pageX,pageY,width,height,format,GL11.GL_UNSIGNED_BYTE,glyphPixels);\n  float u=pageX / (float)texture.getWidth();\n  float v=pageY / (float)texture.getHeight();\n  float u2=(pageX + width) / (float)texture.getWidth();\n  float v2=(pageY + height) / (float)texture.getHeight();\n  glyph.setTexture(texture,u,v,u2,v2);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 730,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 149,
        "startColumnNumber" : 3,
        "endLineNumber" : 149,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int padXBytes=padLeftBytes + unicodeFont.getPaddingRight() * 4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 149,
    "startColumnNumber" : 34,
    "endLineNumber" : 149,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}