{
  "id" : 137,
  "expression" : "collector.channelDefs",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/semantics/SemanticPipeline.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "collector.channelDefs",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 113,
      "startColumnNumber" : 24,
      "endLineNumber" : 113,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assignChannelTypes(g,collector.channelDefs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assignChannelTypes(g,collector.channelDefs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2304,
        "startLineNumber" : 54,
        "startColumnNumber" : 23,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (g.ast == null)   return;\n  RuleCollector ruleCollector=new RuleCollector(g);\n  ruleCollector.process(g.ast);\n  int prevErrors=g.tool.errMgr.getNumErrors();\n  BasicSemanticChecks basics=new BasicSemanticChecks(g,ruleCollector);\n  basics.process();\n  if (g.tool.errMgr.getNumErrors() > prevErrors)   return;\n  prevErrors=g.tool.errMgr.getNumErrors();\n  LeftRecursiveRuleTransformer lrtrans=new LeftRecursiveRuleTransformer(g.ast,ruleCollector.rules.values(),g);\n  lrtrans.translateLeftRecursiveRules();\n  if (g.tool.errMgr.getNumErrors() > prevErrors)   return;\n  for (  Rule r : ruleCollector.rules.values()) {\n    g.defineRule(r);\n  }\n  SymbolCollector collector=new SymbolCollector(g);\n  collector.process(g.ast);\n  SymbolChecks symcheck=new SymbolChecks(g,collector);\n  symcheck.process();\n  for (  GrammarAST a : collector.namedActions) {\n    g.defineAction(a);\n  }\n  for (  Rule r : g.rules.values()) {\n    for (int i=1; i <= r.numberOfAlts; i++) {\n      r.alt[i].ast.alt=r.alt[i];\n    }\n  }\n  g.importTokensFromTokensFile();\n  if (g.isLexer()) {\n    assignLexerTokenTypes(g,collector.tokensDefs);\n  }\n else {\n    assignTokenTypes(g,collector.tokensDefs,collector.tokenIDRefs,collector.terminals);\n  }\n  symcheck.checkForModeConflicts(g);\n  symcheck.checkForUnreachableTokens(g);\n  assignChannelTypes(g,collector.channelDefs);\n  symcheck.checkRuleArgs(g,collector.rulerefs);\n  identifyStartRules(collector);\n  symcheck.checkForQualifiedRuleIssues(g,collector.qualifiedRulerefs);\n  if (g.tool.getNumErrors() > 0)   return;\n  AttributeChecks.checkAllAttributeExpressions(g);\n  UseDefAnalyzer.trackTokenRuleRefsInActions(g);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2326,
        "startLineNumber" : 54,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void process(){\n  if (g.ast == null)   return;\n  RuleCollector ruleCollector=new RuleCollector(g);\n  ruleCollector.process(g.ast);\n  int prevErrors=g.tool.errMgr.getNumErrors();\n  BasicSemanticChecks basics=new BasicSemanticChecks(g,ruleCollector);\n  basics.process();\n  if (g.tool.errMgr.getNumErrors() > prevErrors)   return;\n  prevErrors=g.tool.errMgr.getNumErrors();\n  LeftRecursiveRuleTransformer lrtrans=new LeftRecursiveRuleTransformer(g.ast,ruleCollector.rules.values(),g);\n  lrtrans.translateLeftRecursiveRules();\n  if (g.tool.errMgr.getNumErrors() > prevErrors)   return;\n  for (  Rule r : ruleCollector.rules.values()) {\n    g.defineRule(r);\n  }\n  SymbolCollector collector=new SymbolCollector(g);\n  collector.process(g.ast);\n  SymbolChecks symcheck=new SymbolChecks(g,collector);\n  symcheck.process();\n  for (  GrammarAST a : collector.namedActions) {\n    g.defineAction(a);\n  }\n  for (  Rule r : g.rules.values()) {\n    for (int i=1; i <= r.numberOfAlts; i++) {\n      r.alt[i].ast.alt=r.alt[i];\n    }\n  }\n  g.importTokensFromTokensFile();\n  if (g.isLexer()) {\n    assignLexerTokenTypes(g,collector.tokensDefs);\n  }\n else {\n    assignTokenTypes(g,collector.tokensDefs,collector.tokenIDRefs,collector.terminals);\n  }\n  symcheck.checkForModeConflicts(g);\n  symcheck.checkForUnreachableTokens(g);\n  assignChannelTypes(g,collector.channelDefs);\n  symcheck.checkRuleArgs(g,collector.rulerefs);\n  identifyStartRules(collector);\n  symcheck.checkForQualifiedRuleIssues(g,collector.qualifiedRulerefs);\n  if (g.tool.getNumErrors() > 0)   return;\n  AttributeChecks.checkAllAttributeExpressions(g);\n  UseDefAnalyzer.trackTokenRuleRefsInActions(g);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assignChannelTypes(g,collector.channelDefs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.antlr.v4.tool.ast.GrammarAST>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 113,
    "startColumnNumber" : 24,
    "endLineNumber" : 113,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}