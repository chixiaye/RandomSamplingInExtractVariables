{
  "id" : 497,
  "expression" : "spell",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/service-layer/src/test/java/com/iluwatar/servicelayer/magic/MagicServiceImplTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spell",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 138,
      "startColumnNumber" : 9,
      "endLineNumber" : 138,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 138,
        "startColumnNumber" : 9,
        "endLineNumber" : 138,
        "endColumnNumber" : 29
      },
      "nodeContext" : "spell.getSpellbook()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 30
      },
      "nodeContext" : "when(spell.getSpellbook())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 52
      },
      "nodeContext" : "when(spell.getSpellbook()).thenReturn(spellbook)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 53
      },
      "nodeContext" : "when(spell.getSpellbook()).thenReturn(spellbook);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 125,
        "startColumnNumber" : 58,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var wizards=Set.of(mock(Wizard.class),mock(Wizard.class),mock(Wizard.class));\n  final var spellbook=mock(Spellbook.class);\n  when(spellbook.getWizards()).thenReturn(wizards);\n  final var spellbookDao=mock(SpellbookDao.class);\n  final var wizardDao=mock(WizardDao.class);\n  final var spell=mock(Spell.class);\n  when(spell.getSpellbook()).thenReturn(spellbook);\n  final var spellName=\"spellname\";\n  final var spellDao=mock(SpellDao.class);\n  when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n  final var service=new MagicServiceImpl(wizardDao,spellbookDao,spellDao);\n  verifyZeroInteractions(wizardDao,spellbookDao,spellDao,spellbook);\n  final var result=service.findWizardsWithSpell(spellName);\n  verify(spellDao).findByName(eq(spellName));\n  verify(spellbook).getWizards();\n  assertNotNull(result);\n  assertEquals(3,result.size());\n  verifyNoMoreInteractions(wizardDao,spellbookDao,spellDao);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFindWizardsWithSpell() throws Exception {\n  final var wizards=Set.of(mock(Wizard.class),mock(Wizard.class),mock(Wizard.class));\n  final var spellbook=mock(Spellbook.class);\n  when(spellbook.getWizards()).thenReturn(wizards);\n  final var spellbookDao=mock(SpellbookDao.class);\n  final var wizardDao=mock(WizardDao.class);\n  final var spell=mock(Spell.class);\n  when(spell.getSpellbook()).thenReturn(spellbook);\n  final var spellName=\"spellname\";\n  final var spellDao=mock(SpellDao.class);\n  when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n  final var service=new MagicServiceImpl(wizardDao,spellbookDao,spellDao);\n  verifyZeroInteractions(wizardDao,spellbookDao,spellDao,spellbook);\n  final var result=service.findWizardsWithSpell(spellName);\n  verify(spellDao).findByName(eq(spellName));\n  verify(spellbook).getWizards();\n  assertNotNull(result);\n  assertEquals(3,result.size());\n  verifyNoMoreInteractions(wizardDao,spellbookDao,spellDao);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 53
      },
      "nodeContext" : "when(spell.getSpellbook()).thenReturn(spellbook);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "spell",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 142,
      "startColumnNumber" : 56,
      "endLineNumber" : 142,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 62
      },
      "nodeContext" : "when(spellDao.findByName(eq(spellName))).thenReturn(spell)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 63
      },
      "nodeContext" : "when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 125,
        "startColumnNumber" : 58,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var wizards=Set.of(mock(Wizard.class),mock(Wizard.class),mock(Wizard.class));\n  final var spellbook=mock(Spellbook.class);\n  when(spellbook.getWizards()).thenReturn(wizards);\n  final var spellbookDao=mock(SpellbookDao.class);\n  final var wizardDao=mock(WizardDao.class);\n  final var spell=mock(Spell.class);\n  when(spell.getSpellbook()).thenReturn(spellbook);\n  final var spellName=\"spellname\";\n  final var spellDao=mock(SpellDao.class);\n  when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n  final var service=new MagicServiceImpl(wizardDao,spellbookDao,spellDao);\n  verifyZeroInteractions(wizardDao,spellbookDao,spellDao,spellbook);\n  final var result=service.findWizardsWithSpell(spellName);\n  verify(spellDao).findByName(eq(spellName));\n  verify(spellbook).getWizards();\n  assertNotNull(result);\n  assertEquals(3,result.size());\n  verifyNoMoreInteractions(wizardDao,spellbookDao,spellDao);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFindWizardsWithSpell() throws Exception {\n  final var wizards=Set.of(mock(Wizard.class),mock(Wizard.class),mock(Wizard.class));\n  final var spellbook=mock(Spellbook.class);\n  when(spellbook.getWizards()).thenReturn(wizards);\n  final var spellbookDao=mock(SpellbookDao.class);\n  final var wizardDao=mock(WizardDao.class);\n  final var spell=mock(Spell.class);\n  when(spell.getSpellbook()).thenReturn(spellbook);\n  final var spellName=\"spellname\";\n  final var spellDao=mock(SpellDao.class);\n  when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n  final var service=new MagicServiceImpl(wizardDao,spellbookDao,spellDao);\n  verifyZeroInteractions(wizardDao,spellbookDao,spellDao,spellbook);\n  final var result=service.findWizardsWithSpell(spellName);\n  verify(spellDao).findByName(eq(spellName));\n  verify(spellbook).getWizards();\n  assertNotNull(result);\n  assertEquals(3,result.size());\n  verifyNoMoreInteractions(wizardDao,spellbookDao,spellDao);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 63
      },
      "nodeContext" : "when(spellDao.findByName(eq(spellName))).thenReturn(spell);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 138,
    "startColumnNumber" : 9,
    "endLineNumber" : 138,
    "endColumnNumber" : 14
  }, {
    "charLength" : 5,
    "startLineNumber" : 142,
    "startColumnNumber" : 56,
    "endLineNumber" : 142,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}