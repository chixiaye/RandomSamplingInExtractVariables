{
  "id" : 48,
  "expression" : "\"DEFAULT-1\"",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/testing-modules/junit-5/src/test/java/com/baeldung/abstractclass/privatemethod/AbstractPrivateMethodsUnitTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"DEFAULT-1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 38,
      "startColumnNumber" : 43,
      "endLineNumber" : 38,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 38,
        "startColumnNumber" : 32,
        "endLineNumber" : 38,
        "endColumnNumber" : 54
      },
      "nodeContext" : "dateTime + \"DEFAULT-1\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assertions.assertEquals(dateTime + \"DEFAULT-1\",actual)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Assertions.assertEquals(dateTime + \"DEFAULT-1\",actual);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 24,
        "startColumnNumber" : 120,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractPrivateMethods mockClass=PowerMockito.mock(AbstractPrivateMethods.class);\n  String dateTime=LocalDateTime.now().toString();\n  PowerMockito.doCallRealMethod().when(mockClass).defaultImpl();\n  PowerMockito.doReturn(dateTime).when(mockClass,\"getCurrentDateTime\");\n  String actual=mockClass.defaultImpl();\n  Assertions.assertEquals(dateTime + \"DEFAULT-1\",actual);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 23,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void givenNonAbstractMethodAndCallPrivateMethod_whenMockPrivateMethod_thenVerifyBehaviour() throws Exception {\n  AbstractPrivateMethods mockClass=PowerMockito.mock(AbstractPrivateMethods.class);\n  String dateTime=LocalDateTime.now().toString();\n  PowerMockito.doCallRealMethod().when(mockClass).defaultImpl();\n  PowerMockito.doReturn(dateTime).when(mockClass,\"getCurrentDateTime\");\n  String actual=mockClass.defaultImpl();\n  Assertions.assertEquals(dateTime + \"DEFAULT-1\",actual);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Assertions.assertEquals(dateTime + \"DEFAULT-1\",actual);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 38,
    "startColumnNumber" : 43,
    "endLineNumber" : 38,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}