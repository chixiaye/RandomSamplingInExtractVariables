{
  "id" : 277,
  "expression" : "cls.searchMethodByShortId(\"test2(I)I\")",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cls.searchMethodByShortId(\"test2(I)I\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 61,
      "startColumnNumber" : 21,
      "endLineNumber" : 61,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 61,
        "startColumnNumber" : 13,
        "endLineNumber" : 61,
        "endColumnNumber" : 59
      },
      "nodeContext" : "test2=cls.searchMethodByShortId(\"test2(I)I\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 60
      },
      "nodeContext" : "MethodNode test2=cls.searchMethodByShortId(\"test2(I)I\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 52,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ClassNode cls=getClassNode(TestCls.class);\n  CodeWriter codeWriter=cls.getCode();\n  String code=codeWriter.toString();\n  String[] lines=code.split(CodeWriter.NL);\n  MethodNode test1=cls.searchMethodByShortId(\"test1(Z)I\");\n  checkLine(lines,codeWriter,test1,3,\"return 1;\");\n  MethodNode test2=cls.searchMethodByShortId(\"test2(I)I\");\n  checkLine(lines,codeWriter,test2,3,\"return v - 1;\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void test(){\n  ClassNode cls=getClassNode(TestCls.class);\n  CodeWriter codeWriter=cls.getCode();\n  String code=codeWriter.toString();\n  String[] lines=code.split(CodeWriter.NL);\n  MethodNode test1=cls.searchMethodByShortId(\"test1(Z)I\");\n  checkLine(lines,codeWriter,test1,3,\"return 1;\");\n  MethodNode test2=cls.searchMethodByShortId(\"test2(I)I\");\n  checkLine(lines,codeWriter,test2,3,\"return v - 1;\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 60
      },
      "nodeContext" : "MethodNode test2=cls.searchMethodByShortId(\"test2(I)I\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "jadx.core.dex.nodes.MethodNode"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 61,
    "startColumnNumber" : 21,
    "endLineNumber" : 61,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}