{
  "id" : 348,
  "expression" : "Math.log((double)limit)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/SieveOfEratosthenes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.log((double)limit)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 19,
      "startColumnNumber" : 51,
      "endLineNumber" : 19,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 19,
        "startColumnNumber" : 33,
        "endLineNumber" : 19,
        "endColumnNumber" : 75
      },
      "nodeContext" : "1.25506 * limit / Math.log((double)limit)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 19,
        "startColumnNumber" : 32,
        "endLineNumber" : 19,
        "endColumnNumber" : 76
      },
      "nodeContext" : "(1.25506 * limit / Math.log((double)limit))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 19,
        "startColumnNumber" : 26,
        "endLineNumber" : 19,
        "endColumnNumber" : 76
      },
      "nodeContext" : "(int)(1.25506 * limit / Math.log((double)limit))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 19,
        "startColumnNumber" : 14,
        "endLineNumber" : 19,
        "endColumnNumber" : 76
      },
      "nodeContext" : "numPrimes=(int)(1.25506 * limit / Math.log((double)limit))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 77
      },
      "nodeContext" : "final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (limit <= 2)   return new int[0];\n  final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n  int[] primes=new int[numPrimes];\n  int index=0;\n  boolean[] isComposite=new boolean[limit];\n  final int sqrtLimit=(int)Math.sqrt(limit);\n  for (int i=2; i <= sqrtLimit; i++) {\n    if (!isComposite[i]) {\n      primes[index++]=i;\n      for (int j=i * i; j < limit; j+=i)       isComposite[j]=true;\n    }\n  }\n  for (int i=sqrtLimit + 1; i < limit; i++)   if (!isComposite[i])   primes[index++]=i;\n  return java.util.Arrays.copyOf(primes,index);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 13,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int[] sieve(int limit){\n  if (limit <= 2)   return new int[0];\n  final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n  int[] primes=new int[numPrimes];\n  int index=0;\n  boolean[] isComposite=new boolean[limit];\n  final int sqrtLimit=(int)Math.sqrt(limit);\n  for (int i=2; i <= sqrtLimit; i++) {\n    if (!isComposite[i]) {\n      primes[index++]=i;\n      for (int j=i * i; j < limit; j+=i)       isComposite[j]=true;\n    }\n  }\n  for (int i=sqrtLimit + 1; i < limit; i++)   if (!isComposite[i])   primes[index++]=i;\n  return java.util.Arrays.copyOf(primes,index);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 77
      },
      "nodeContext" : "final int numPrimes=(int)(1.25506 * limit / Math.log((double)limit));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 19,
    "startColumnNumber" : 51,
    "endLineNumber" : 19,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}