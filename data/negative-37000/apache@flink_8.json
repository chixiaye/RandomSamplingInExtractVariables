{
  "id" : 8,
  "expression" : "ANY",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/serde/RequiredDistributionJsonDeserializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ANY",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 54,
      "startColumnNumber" : 17,
      "endLineNumber" : 54,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 21
      },
      "nodeContext" : "case ANY:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 955,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (type) {\ncase ANY:  return InputProperty.ANY_DISTRIBUTION;\ncase SINGLETON:return InputProperty.SINGLETON_DISTRIBUTION;\ncase BROADCAST:return InputProperty.BROADCAST_DISTRIBUTION;\ncase UNKNOWN:return InputProperty.UNKNOWN_DISTRIBUTION;\ncase HASH:JsonNode keysNode=jsonNode.get(\"keys\");\nif (keysNode == null) {\nthrow new TableException(\"Hash distribution requires non-empty hash keys.\");\n}\nint[] keys=new int[keysNode.size()];\nfor (int i=0; i < keysNode.size(); ++i) {\nkeys[i]=keysNode.get(i).asInt();\n}\nreturn InputProperty.hashDistribution(keys);\ndefault:throw new TableException(\"Unsupported distribution type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1162,
        "startLineNumber" : 49,
        "startColumnNumber" : 31,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonNode jsonNode=jsonParser.getCodec().readTree(jsonParser);\n  DistributionType type=DistributionType.valueOf(jsonNode.get(\"type\").asText().toUpperCase());\nswitch (type) {\ncase ANY:    return InputProperty.ANY_DISTRIBUTION;\ncase SINGLETON:  return InputProperty.SINGLETON_DISTRIBUTION;\ncase BROADCAST:return InputProperty.BROADCAST_DISTRIBUTION;\ncase UNKNOWN:return InputProperty.UNKNOWN_DISTRIBUTION;\ncase HASH:JsonNode keysNode=jsonNode.get(\"keys\");\nif (keysNode == null) {\nthrow new TableException(\"Hash distribution requires non-empty hash keys.\");\n}\nint[] keys=new int[keysNode.size()];\nfor (int i=0; i < keysNode.size(); ++i) {\nkeys[i]=keysNode.get(i).asInt();\n}\nreturn InputProperty.hashDistribution(keys);\ndefault:throw new TableException(\"Unsupported distribution type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1298,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public RequiredDistribution deserialize(JsonParser jsonParser,DeserializationContext ctx) throws IOException {\n  JsonNode jsonNode=jsonParser.getCodec().readTree(jsonParser);\n  DistributionType type=DistributionType.valueOf(jsonNode.get(\"type\").asText().toUpperCase());\nswitch (type) {\ncase ANY:    return InputProperty.ANY_DISTRIBUTION;\ncase SINGLETON:  return InputProperty.SINGLETON_DISTRIBUTION;\ncase BROADCAST:return InputProperty.BROADCAST_DISTRIBUTION;\ncase UNKNOWN:return InputProperty.UNKNOWN_DISTRIBUTION;\ncase HASH:JsonNode keysNode=jsonNode.get(\"keys\");\nif (keysNode == null) {\nthrow new TableException(\"Hash distribution requires non-empty hash keys.\");\n}\nint[] keys=new int[keysNode.size()];\nfor (int i=0; i < keysNode.size(); ++i) {\nkeys[i]=keysNode.get(i).asInt();\n}\nreturn InputProperty.hashDistribution(keys);\ndefault:throw new TableException(\"Unsupported distribution type: \" + type);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 21
      },
      "nodeContext" : "case ANY:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.table.planner.plan.nodes.exec.InputProperty.DistributionType"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 54,
    "startColumnNumber" : 17,
    "endLineNumber" : 54,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}