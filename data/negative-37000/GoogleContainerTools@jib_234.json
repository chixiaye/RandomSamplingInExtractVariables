{
  "id" : 234,
  "expression" : "isValidJavaClass(mainClass)",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isValidJavaClass(mainClass)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 61,
      "startColumnNumber" : 16,
      "endLineNumber" : 61,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 15,
        "endLineNumber" : 61,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!isValidJavaClass(mainClass)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 61,
        "startColumnNumber" : 11,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!isValidJavaClass(mainClass)) {\n  try {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n catch (  MainClassInferenceException ignored) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (mainClass == null) {\n  mainClass=findMainClassInClassFiles(projectProperties);\n}\n else if (!isValidJavaClass(mainClass)) {\n  try {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n catch (  MainClassInferenceException ignored) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 51,
        "startColumnNumber" : 41,
        "endLineNumber" : 78,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mainClass == null) {\n    mainClass=getMainClassFromJar(projectProperties);\n  }\n  if (mainClass == null) {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n else   if (!isValidJavaClass(mainClass)) {\n    try {\n      mainClass=findMainClassInClassFiles(projectProperties);\n    }\n catch (    MainClassInferenceException ignored) {\n    }\n  }\n  Preconditions.checkNotNull(mainClass);\n  if (!isValidJavaClass(mainClass)) {\n    projectProperties.getLogger().warn(\"'mainClass' is not a valid Java class : \" + mainClass);\n  }\n  return mainClass;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1947,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If  {@code mainClass} is {@code null}, tries to infer main class in this order: <ul> <li>1. Looks in a  {@code jar} plugin provided by {@code projectProperties} ({@code maven-jar-plugin} for maven or {@code jar} task for gradle).<li>2. Searches for a class defined with a main method. </ul> <p>Warns if main class provided by  {@code projectProperties} is not valid, or throws an errorif no valid main class is found.\n * @param mainClass the explicitly configured main class ({@code null} if not configured).\n * @param projectProperties properties containing plugin information and help messages.\n * @return the name of the main class to be used for the container entrypoint.\n * @throws MainClassInferenceException if no valid main class is configured or discovered.\n */\npublic static String resolveMainClass(@Nullable String mainClass,ProjectProperties projectProperties) throws MainClassInferenceException {\n  if (mainClass == null) {\n    mainClass=getMainClassFromJar(projectProperties);\n  }\n  if (mainClass == null) {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n else   if (!isValidJavaClass(mainClass)) {\n    try {\n      mainClass=findMainClassInClassFiles(projectProperties);\n    }\n catch (    MainClassInferenceException ignored) {\n    }\n  }\n  Preconditions.checkNotNull(mainClass);\n  if (!isValidJavaClass(mainClass)) {\n    projectProperties.getLogger().warn(\"'mainClass' is not a valid Java class : \" + mainClass);\n  }\n  return mainClass;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 15,
        "endLineNumber" : 61,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!isValidJavaClass(mainClass)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  }, {
    "nodeContext" : "isValidJavaClass(mainClass)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 73,
      "startColumnNumber" : 9,
      "endLineNumber" : 73,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 36
      },
      "nodeContext" : "!isValidJavaClass(mainClass)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!isValidJavaClass(mainClass)) {\n  projectProperties.getLogger().warn(\"'mainClass' is not a valid Java class : \" + mainClass);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 51,
        "startColumnNumber" : 41,
        "endLineNumber" : 78,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mainClass == null) {\n    mainClass=getMainClassFromJar(projectProperties);\n  }\n  if (mainClass == null) {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n else   if (!isValidJavaClass(mainClass)) {\n    try {\n      mainClass=findMainClassInClassFiles(projectProperties);\n    }\n catch (    MainClassInferenceException ignored) {\n    }\n  }\n  Preconditions.checkNotNull(mainClass);\n  if (!isValidJavaClass(mainClass)) {\n    projectProperties.getLogger().warn(\"'mainClass' is not a valid Java class : \" + mainClass);\n  }\n  return mainClass;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1947,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If  {@code mainClass} is {@code null}, tries to infer main class in this order: <ul> <li>1. Looks in a  {@code jar} plugin provided by {@code projectProperties} ({@code maven-jar-plugin} for maven or {@code jar} task for gradle).<li>2. Searches for a class defined with a main method. </ul> <p>Warns if main class provided by  {@code projectProperties} is not valid, or throws an errorif no valid main class is found.\n * @param mainClass the explicitly configured main class ({@code null} if not configured).\n * @param projectProperties properties containing plugin information and help messages.\n * @return the name of the main class to be used for the container entrypoint.\n * @throws MainClassInferenceException if no valid main class is configured or discovered.\n */\npublic static String resolveMainClass(@Nullable String mainClass,ProjectProperties projectProperties) throws MainClassInferenceException {\n  if (mainClass == null) {\n    mainClass=getMainClassFromJar(projectProperties);\n  }\n  if (mainClass == null) {\n    mainClass=findMainClassInClassFiles(projectProperties);\n  }\n else   if (!isValidJavaClass(mainClass)) {\n    try {\n      mainClass=findMainClassInClassFiles(projectProperties);\n    }\n catch (    MainClassInferenceException ignored) {\n    }\n  }\n  Preconditions.checkNotNull(mainClass);\n  if (!isValidJavaClass(mainClass)) {\n    projectProperties.getLogger().warn(\"'mainClass' is not a valid Java class : \" + mainClass);\n  }\n  return mainClass;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 36
      },
      "nodeContext" : "!isValidJavaClass(mainClass)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 61,
    "startColumnNumber" : 16,
    "endLineNumber" : 61,
    "endColumnNumber" : 43
  }, {
    "charLength" : 27,
    "startLineNumber" : 73,
    "startColumnNumber" : 9,
    "endLineNumber" : 73,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}