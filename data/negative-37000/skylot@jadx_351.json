{
  "id" : 351,
  "expression" : "arg",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInlineVisitor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 114,
      "startColumnNumber" : 8,
      "endLineNumber" : 114,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 24
      },
      "nodeContext" : "arg.isInsnWrap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 114,
        "startColumnNumber" : 7,
        "endLineNumber" : 114,
        "endColumnNumber" : 24
      },
      "nodeContext" : "!arg.isInsnWrap()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 114,
        "startColumnNumber" : 3,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!arg.isInsnWrap()) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 112,
        "startColumnNumber" : 36,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnArg arg=insn.getArg(0);\n  if (!arg.isInsnWrap()) {\n    return false;\n  }\n  return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (insnType == InsnType.ONE_ARG) {\n  InsnArg arg=insn.getArg(0);\n  if (!arg.isInsnWrap()) {\n    return false;\n  }\n  return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 101,
        "startColumnNumber" : 81,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int newVisFlag=AccessFlags.ACC_PUBLIC;\n  InsnType insnType=insn.getType();\n  if (insnType == InsnType.INVOKE) {\n    InvokeNode invoke=(InvokeNode)insn;\n    MethodNode callMthNode=mth.root().deepResolveMethod(invoke.getCallMth());\n    if (callMthNode != null) {\n      FixAccessModifiers.changeVisibility(callMthNode,newVisFlag);\n    }\n    return true;\n  }\n  if (insnType == InsnType.ONE_ARG) {\n    InsnArg arg=insn.getArg(0);\n    if (!arg.isInsnWrap()) {\n      return false;\n    }\n    return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n  }\n  if (insn instanceof IndexInsnNode) {\n    Object indexObj=((IndexInsnNode)insn).getIndex();\n    if (indexObj instanceof FieldInfo) {\n      FieldNode fieldNode=mth.root().deepResolveField(((FieldInfo)indexObj));\n      if (fieldNode != null) {\n        FixAccessModifiers.changeVisibility(fieldNode,newVisFlag);\n      }\n      return true;\n    }\n  }\n  if (Consts.DEBUG) {\n    mth.addAttr(AType.COMMENTS,\"JADX DEBUG: can't inline method, not implemented redirect type: \" + insn);\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean fixVisibilityOfInlineCode(MethodNode mth,InsnNode insn){\n  int newVisFlag=AccessFlags.ACC_PUBLIC;\n  InsnType insnType=insn.getType();\n  if (insnType == InsnType.INVOKE) {\n    InvokeNode invoke=(InvokeNode)insn;\n    MethodNode callMthNode=mth.root().deepResolveMethod(invoke.getCallMth());\n    if (callMthNode != null) {\n      FixAccessModifiers.changeVisibility(callMthNode,newVisFlag);\n    }\n    return true;\n  }\n  if (insnType == InsnType.ONE_ARG) {\n    InsnArg arg=insn.getArg(0);\n    if (!arg.isInsnWrap()) {\n      return false;\n    }\n    return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n  }\n  if (insn instanceof IndexInsnNode) {\n    Object indexObj=((IndexInsnNode)insn).getIndex();\n    if (indexObj instanceof FieldInfo) {\n      FieldNode fieldNode=mth.root().deepResolveField(((FieldInfo)indexObj));\n      if (fieldNode != null) {\n        FixAccessModifiers.changeVisibility(fieldNode,newVisFlag);\n      }\n      return true;\n    }\n  }\n  if (Consts.DEBUG) {\n    mth.addAttr(AType.COMMENTS,\"JADX DEBUG: can't inline method, not implemented redirect type: \" + insn);\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 114,
        "startColumnNumber" : 7,
        "endLineNumber" : 114,
        "endColumnNumber" : 24
      },
      "nodeContext" : "!arg.isInsnWrap()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.instructions.args.InsnArg"
  }, {
    "nodeContext" : "arg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 117,
      "startColumnNumber" : 56,
      "endLineNumber" : 117,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 117,
        "startColumnNumber" : 42,
        "endLineNumber" : 117,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(InsnWrapArg)arg",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 117,
        "startColumnNumber" : 41,
        "endLineNumber" : 117,
        "endColumnNumber" : 60
      },
      "nodeContext" : "((InsnWrapArg)arg)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 117,
        "startColumnNumber" : 41,
        "endLineNumber" : 117,
        "endColumnNumber" : 74
      },
      "nodeContext" : "((InsnWrapArg)arg).getWrapInsn()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 75
      },
      "nodeContext" : "fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 76
      },
      "nodeContext" : "return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 112,
        "startColumnNumber" : 36,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnArg arg=insn.getArg(0);\n  if (!arg.isInsnWrap()) {\n    return false;\n  }\n  return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (insnType == InsnType.ONE_ARG) {\n  InsnArg arg=insn.getArg(0);\n  if (!arg.isInsnWrap()) {\n    return false;\n  }\n  return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 101,
        "startColumnNumber" : 81,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int newVisFlag=AccessFlags.ACC_PUBLIC;\n  InsnType insnType=insn.getType();\n  if (insnType == InsnType.INVOKE) {\n    InvokeNode invoke=(InvokeNode)insn;\n    MethodNode callMthNode=mth.root().deepResolveMethod(invoke.getCallMth());\n    if (callMthNode != null) {\n      FixAccessModifiers.changeVisibility(callMthNode,newVisFlag);\n    }\n    return true;\n  }\n  if (insnType == InsnType.ONE_ARG) {\n    InsnArg arg=insn.getArg(0);\n    if (!arg.isInsnWrap()) {\n      return false;\n    }\n    return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n  }\n  if (insn instanceof IndexInsnNode) {\n    Object indexObj=((IndexInsnNode)insn).getIndex();\n    if (indexObj instanceof FieldInfo) {\n      FieldNode fieldNode=mth.root().deepResolveField(((FieldInfo)indexObj));\n      if (fieldNode != null) {\n        FixAccessModifiers.changeVisibility(fieldNode,newVisFlag);\n      }\n      return true;\n    }\n  }\n  if (Consts.DEBUG) {\n    mth.addAttr(AType.COMMENTS,\"JADX DEBUG: can't inline method, not implemented redirect type: \" + insn);\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean fixVisibilityOfInlineCode(MethodNode mth,InsnNode insn){\n  int newVisFlag=AccessFlags.ACC_PUBLIC;\n  InsnType insnType=insn.getType();\n  if (insnType == InsnType.INVOKE) {\n    InvokeNode invoke=(InvokeNode)insn;\n    MethodNode callMthNode=mth.root().deepResolveMethod(invoke.getCallMth());\n    if (callMthNode != null) {\n      FixAccessModifiers.changeVisibility(callMthNode,newVisFlag);\n    }\n    return true;\n  }\n  if (insnType == InsnType.ONE_ARG) {\n    InsnArg arg=insn.getArg(0);\n    if (!arg.isInsnWrap()) {\n      return false;\n    }\n    return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n  }\n  if (insn instanceof IndexInsnNode) {\n    Object indexObj=((IndexInsnNode)insn).getIndex();\n    if (indexObj instanceof FieldInfo) {\n      FieldNode fieldNode=mth.root().deepResolveField(((FieldInfo)indexObj));\n      if (fieldNode != null) {\n        FixAccessModifiers.changeVisibility(fieldNode,newVisFlag);\n      }\n      return true;\n    }\n  }\n  if (Consts.DEBUG) {\n    mth.addAttr(AType.COMMENTS,\"JADX DEBUG: can't inline method, not implemented redirect type: \" + insn);\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 76
      },
      "nodeContext" : "return fixVisibilityOfInlineCode(mth,((InsnWrapArg)arg).getWrapInsn());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.instructions.args.InsnArg"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 114,
    "startColumnNumber" : 8,
    "endLineNumber" : 114,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 117,
    "startColumnNumber" : 56,
    "endLineNumber" : 117,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}