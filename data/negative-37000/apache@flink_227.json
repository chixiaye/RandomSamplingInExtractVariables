{
  "id" : 227,
  "expression" : "this.checkpointedState",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileMonitoringFunction.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.checkpointedState",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 146,
      "startColumnNumber" : 16,
      "endLineNumber" : 146,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 146,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.checkpointedState == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2181,
        "startLineNumber" : 143,
        "startColumnNumber" : 88,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"file-monitoring-state\",LongSerializer.INSTANCE));\n  if (context.isRestored()) {\n    LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n    List<Long> retrievedStates=new ArrayList<>();\n    for (    Long entry : this.checkpointedState.get()) {\n      retrievedStates.add(entry);\n    }\n    Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n    if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n      throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n    }\n else     if (retrievedStates.size() == 1) {\n      this.globalModificationTime=retrievedStates.get(0);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n      }\n    }\n  }\n else {\n    LOG.info(\"No state to restore for the {}.\",getClass().getSimpleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2279,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initializeState(FunctionInitializationContext context) throws Exception {\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"file-monitoring-state\",LongSerializer.INSTANCE));\n  if (context.isRestored()) {\n    LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n    List<Long> retrievedStates=new ArrayList<>();\n    for (    Long entry : this.checkpointedState.get()) {\n      retrievedStates.add(entry);\n    }\n    Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n    if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n      throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n    }\n else     if (retrievedStates.size() == 1) {\n      this.globalModificationTime=retrievedStates.get(0);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n      }\n    }\n  }\n else {\n    LOG.info(\"No state to restore for the {}.\",getClass().getSimpleName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 146,
        "startColumnNumber" : 16,
        "endLineNumber" : 146,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.checkpointedState == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.state.ListState<java.lang.Long>"
  }, {
    "nodeContext" : "this.checkpointedState",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 159,
      "startColumnNumber" : 30,
      "endLineNumber" : 159,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 159,
        "startColumnNumber" : 30,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "this.checkpointedState.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Long entry : this.checkpointedState.get()) {\n  retrievedStates.add(entry);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1592,
        "startLineNumber" : 155,
        "startColumnNumber" : 34,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n  List<Long> retrievedStates=new ArrayList<>();\n  for (  Long entry : this.checkpointedState.get()) {\n    retrievedStates.add(entry);\n  }\n  Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n  if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n    throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n  }\n else   if (retrievedStates.size() == 1) {\n    this.globalModificationTime=retrievedStates.get(0);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1720,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (context.isRestored()) {\n  LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n  List<Long> retrievedStates=new ArrayList<>();\n  for (  Long entry : this.checkpointedState.get()) {\n    retrievedStates.add(entry);\n  }\n  Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n  if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n    throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n  }\n else   if (retrievedStates.size() == 1) {\n    this.globalModificationTime=retrievedStates.get(0);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n    }\n  }\n}\n else {\n  LOG.info(\"No state to restore for the {}.\",getClass().getSimpleName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2181,
        "startLineNumber" : 143,
        "startColumnNumber" : 88,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"file-monitoring-state\",LongSerializer.INSTANCE));\n  if (context.isRestored()) {\n    LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n    List<Long> retrievedStates=new ArrayList<>();\n    for (    Long entry : this.checkpointedState.get()) {\n      retrievedStates.add(entry);\n    }\n    Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n    if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n      throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n    }\n else     if (retrievedStates.size() == 1) {\n      this.globalModificationTime=retrievedStates.get(0);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n      }\n    }\n  }\n else {\n    LOG.info(\"No state to restore for the {}.\",getClass().getSimpleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2279,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initializeState(FunctionInitializationContext context) throws Exception {\n  Preconditions.checkState(this.checkpointedState == null,\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n  this.checkpointedState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(\"file-monitoring-state\",LongSerializer.INSTANCE));\n  if (context.isRestored()) {\n    LOG.info(\"Restoring state for the {}.\",getClass().getSimpleName());\n    List<Long> retrievedStates=new ArrayList<>();\n    for (    Long entry : this.checkpointedState.get()) {\n      retrievedStates.add(entry);\n    }\n    Preconditions.checkArgument(retrievedStates.size() <= 1,getClass().getSimpleName() + \" retrieved invalid state.\");\n    if (retrievedStates.size() == 1 && globalModificationTime != Long.MIN_VALUE) {\n      throw new IllegalArgumentException(\"The \" + getClass().getSimpleName() + \" has already restored from a previous Flink version.\");\n    }\n else     if (retrievedStates.size() == 1) {\n      this.globalModificationTime=retrievedStates.get(0);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"{} retrieved a global mod time of {}.\",getClass().getSimpleName(),globalModificationTime);\n      }\n    }\n  }\n else {\n    LOG.info(\"No state to restore for the {}.\",getClass().getSimpleName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 159,
        "startColumnNumber" : 30,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "this.checkpointedState.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.state.ListState<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 146,
    "startColumnNumber" : 16,
    "endLineNumber" : 146,
    "endColumnNumber" : 38
  }, {
    "charLength" : 22,
    "startLineNumber" : 159,
    "startColumnNumber" : 30,
    "endLineNumber" : 159,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}