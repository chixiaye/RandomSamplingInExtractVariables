{
  "id" : 46,
  "expression" : "targetBaseClass",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetBaseClass",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 43,
      "startColumnNumber" : 41,
      "endLineNumber" : 43,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 43,
        "endColumnNumber" : 56
      },
      "nodeContext" : "match.getSuperclass() == targetBaseClass",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (match.getSuperclass() == targetBaseClass) {\n  return extractGeneric(match.getGenericSuperclass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 41,
        "startColumnNumber" : 38,
        "endLineNumber" : 53,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (match.getSuperclass() == targetBaseClass) {\n    return extractGeneric(match.getGenericSuperclass());\n  }\n  Type genericInterface=findGenericInterface(match,targetBaseInterface);\n  if (genericInterface != null) {\n    return extractGeneric(genericInterface);\n  }\n  match=match.getSuperclass();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (match != Object.class) {\n  if (match.getSuperclass() == targetBaseClass) {\n    return extractGeneric(match.getGenericSuperclass());\n  }\n  Type genericInterface=findGenericInterface(match,targetBaseInterface);\n  if (genericInterface != null) {\n    return extractGeneric(genericInterface);\n  }\n  match=match.getSuperclass();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 720,
        "startLineNumber" : 38,
        "startColumnNumber" : 88,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> match=rootClass;\n  while (match != Object.class) {\n    if (match.getSuperclass() == targetBaseClass) {\n      return extractGeneric(match.getGenericSuperclass());\n    }\n    Type genericInterface=findGenericInterface(match,targetBaseInterface);\n    if (genericInterface != null) {\n      return extractGeneric(genericInterface);\n    }\n    match=match.getSuperclass();\n  }\n  return Object.class;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2042,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Extract generic type of root class either from the target base class or from target base interface. Examples: <p> 1. Foo implements IFoo[Integer]: genericTypeOf(Foo.class, Object.class, IFoo.class) returns Integer <p> 2. Foo extends BaseFoo[String]: genericTypeOf(Foo.class, BaseFoo.class, IFoo.class) returns String <p> 3. Foo extends BaseFoo; BaseFoo implements IFoo[String]: genericTypeOf(Foo.class, BaseFoo.class, Object.class) returns String <p> Does not support nested generics, only supports single type parameter.\n * @param rootClass - the root class that the search begins from\n * @param targetBaseClass - if one of the classes in the root class' hierarchy extends this base classit will be used for generic type extraction\n * @param targetBaseInterface - if one of the interfaces in the root class' hierarchy implements this interfaceit will be used for generic type extraction\n * @return generic interface if found, Object.class if not found.\n */\npublic static Class<?> genericTypeOf(Class<?> rootClass,Class<?> targetBaseClass,Class<?> targetBaseInterface){\n  Class<?> match=rootClass;\n  while (match != Object.class) {\n    if (match.getSuperclass() == targetBaseClass) {\n      return extractGeneric(match.getGenericSuperclass());\n    }\n    Type genericInterface=findGenericInterface(match,targetBaseInterface);\n    if (genericInterface != null) {\n      return extractGeneric(genericInterface);\n    }\n    match=match.getSuperclass();\n  }\n  return Object.class;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 43,
        "endColumnNumber" : 56
      },
      "nodeContext" : "match.getSuperclass() == targetBaseClass",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 43,
    "startColumnNumber" : 41,
    "endLineNumber" : 43,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}