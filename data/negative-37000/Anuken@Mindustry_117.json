{
  "id" : 117,
  "expression" : "\"A mod with the name '\" + baseName + \"' is already imported.\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/mod/Mods.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"A mod with the name '\" + baseName + \"' is already imported.\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 61,
      "startLineNumber" : 663,
      "startColumnNumber" : 55,
      "endLineNumber" : 663,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 663,
        "startColumnNumber" : 26,
        "endLineNumber" : 663,
        "endColumnNumber" : 117
      },
      "nodeContext" : "new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 663,
        "startColumnNumber" : 20,
        "endLineNumber" : 663,
        "endColumnNumber" : 118
      },
      "nodeContext" : "throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 662,
        "startColumnNumber" : 21,
        "endLineNumber" : 664,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 649,
        "startColumnNumber" : 16,
        "endLineNumber" : 664,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (overwrite && !other.hasSteamID()) {\n  if (other.root instanceof ZipFi) {\n    other.root.delete();\n  }\n  if (other.file.isDirectory()) {\n    other.file.deleteDirectory();\n  }\n else {\n    other.file.delete();\n  }\n  mods.remove(other);\n}\n else {\n  throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 647,
        "startColumnNumber" : 29,
        "endLineNumber" : 665,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (overwrite && !other.hasSteamID()) {\n    if (other.root instanceof ZipFi) {\n      other.root.delete();\n    }\n    if (other.file.isDirectory()) {\n      other.file.deleteDirectory();\n    }\n else {\n      other.file.delete();\n    }\n    mods.remove(other);\n  }\n else {\n    throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 647,
        "startColumnNumber" : 12,
        "endLineNumber" : 665,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (other != null) {\n  if (overwrite && !other.hasSteamID()) {\n    if (other.root instanceof ZipFi) {\n      other.root.delete();\n    }\n    if (other.file.isDirectory()) {\n      other.file.deleteDirectory();\n    }\n else {\n      other.file.delete();\n    }\n    mods.remove(other);\n  }\n else {\n    throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3878,
        "startLineNumber" : 622,
        "startColumnNumber" : 11,
        "endLineNumber" : 715,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Fi zip=sourceFile.isDirectory() ? sourceFile : (rootZip=new ZipFi(sourceFile));\n  if (zip.list().length == 1 && zip.list()[0].isDirectory()) {\n    zip=zip.list()[0];\n  }\n  Fi metaf=zip.child(\"mod.json\").exists() ? zip.child(\"mod.json\") : zip.child(\"mod.hjson\").exists() ? zip.child(\"mod.hjson\") : zip.child(\"plugin.json\").exists() ? zip.child(\"plugin.json\") : zip.child(\"plugin.hjson\");\n  if (!metaf.exists()) {\n    Log.warn(\"Mod @ doesn't have a '[mod/plugin].[h]json' file, skipping.\",sourceFile);\n    throw new IllegalArgumentException(\"Invalid file: No mod.json found.\");\n  }\n  ModMeta meta=json.fromJson(ModMeta.class,Jval.read(metaf.readString()).toString(Jformat.plain));\n  meta.cleanup();\n  String camelized=meta.name.replace(\" \",\"\");\n  String mainClass=meta.main == null ? camelized.toLowerCase() + \".\" + camelized+ \"Mod\" : meta.main;\n  String baseName=meta.name.toLowerCase().replace(\" \",\"-\");\n  var other=mods.find(m -> m.name.equals(baseName));\n  if (other != null) {\n    if (overwrite && !other.hasSteamID()) {\n      if (other.root instanceof ZipFi) {\n        other.root.delete();\n      }\n      if (other.file.isDirectory()) {\n        other.file.deleteDirectory();\n      }\n else {\n        other.file.delete();\n      }\n      mods.remove(other);\n    }\n else {\n      throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n    }\n  }\n  Mod mainMod;\n  Fi mainFile=zip;\n  if (android) {\n    mainFile=mainFile.child(\"classes.dex\");\n  }\n else {\n    String[] path=(mainClass.replace('.','/') + \".class\").split(\"/\");\n    for (    String str : path) {\n      if (!str.isEmpty()) {\n        mainFile=mainFile.child(str);\n      }\n    }\n  }\n  if ((mainFile.exists() || meta.java) && Core.settings.getBool(\"mod-\" + baseName + \"-enabled\",true) && Version.isAtLeast(meta.minGameVersion)&& (meta.getMinMajor() >= 105 || headless)) {\n    if (ios) {\n      throw new IllegalArgumentException(\"Java class mods are not supported on iOS.\");\n    }\n    Class<?> main=platform.loadJar(sourceFile,mainClass);\n    metas.put(main,meta);\n    mainMod=(Mod)main.getDeclaredConstructor().newInstance();\n  }\n else {\n    mainMod=null;\n  }\n  if (mainMod instanceof Plugin) {\n    meta.hidden=true;\n  }\n  if (meta.version != null) {\n    int line=meta.version.indexOf('\\n');\n    if (line != -1) {\n      meta.version=meta.version.substring(0,line);\n    }\n  }\n  if (!headless) {\n    Log.info(\"Loaded mod '@' in @ms\",meta.name,Time.elapsed());\n  }\n  return new LoadedMod(sourceFile,zip,mainMod,meta);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 460,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4047,
        "startLineNumber" : 622,
        "startColumnNumber" : 8,
        "endLineNumber" : 719,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Fi zip=sourceFile.isDirectory() ? sourceFile : (rootZip=new ZipFi(sourceFile));\n  if (zip.list().length == 1 && zip.list()[0].isDirectory()) {\n    zip=zip.list()[0];\n  }\n  Fi metaf=zip.child(\"mod.json\").exists() ? zip.child(\"mod.json\") : zip.child(\"mod.hjson\").exists() ? zip.child(\"mod.hjson\") : zip.child(\"plugin.json\").exists() ? zip.child(\"plugin.json\") : zip.child(\"plugin.hjson\");\n  if (!metaf.exists()) {\n    Log.warn(\"Mod @ doesn't have a '[mod/plugin].[h]json' file, skipping.\",sourceFile);\n    throw new IllegalArgumentException(\"Invalid file: No mod.json found.\");\n  }\n  ModMeta meta=json.fromJson(ModMeta.class,Jval.read(metaf.readString()).toString(Jformat.plain));\n  meta.cleanup();\n  String camelized=meta.name.replace(\" \",\"\");\n  String mainClass=meta.main == null ? camelized.toLowerCase() + \".\" + camelized+ \"Mod\" : meta.main;\n  String baseName=meta.name.toLowerCase().replace(\" \",\"-\");\n  var other=mods.find(m -> m.name.equals(baseName));\n  if (other != null) {\n    if (overwrite && !other.hasSteamID()) {\n      if (other.root instanceof ZipFi) {\n        other.root.delete();\n      }\n      if (other.file.isDirectory()) {\n        other.file.deleteDirectory();\n      }\n else {\n        other.file.delete();\n      }\n      mods.remove(other);\n    }\n else {\n      throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n    }\n  }\n  Mod mainMod;\n  Fi mainFile=zip;\n  if (android) {\n    mainFile=mainFile.child(\"classes.dex\");\n  }\n else {\n    String[] path=(mainClass.replace('.','/') + \".class\").split(\"/\");\n    for (    String str : path) {\n      if (!str.isEmpty()) {\n        mainFile=mainFile.child(str);\n      }\n    }\n  }\n  if ((mainFile.exists() || meta.java) && Core.settings.getBool(\"mod-\" + baseName + \"-enabled\",true) && Version.isAtLeast(meta.minGameVersion)&& (meta.getMinMajor() >= 105 || headless)) {\n    if (ios) {\n      throw new IllegalArgumentException(\"Java class mods are not supported on iOS.\");\n    }\n    Class<?> main=platform.loadJar(sourceFile,mainClass);\n    metas.put(main,meta);\n    mainMod=(Mod)main.getDeclaredConstructor().newInstance();\n  }\n else {\n    mainMod=null;\n  }\n  if (mainMod instanceof Plugin) {\n    meta.hidden=true;\n  }\n  if (meta.version != null) {\n    int line=meta.version.indexOf('\\n');\n    if (line != -1) {\n      meta.version=meta.version.substring(0,line);\n    }\n  }\n  if (!headless) {\n    Log.info(\"Loaded mod '@' in @ms\",meta.name,Time.elapsed());\n  }\n  return new LoadedMod(sourceFile,zip,mainMod,meta);\n}\n catch (Exception e) {\n  if (rootZip != null)   rootZip.delete();\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 477,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 617,
        "startColumnNumber" : 80,
        "endLineNumber" : 720,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Time.mark();\n  ZipFi rootZip=null;\n  try {\n    Fi zip=sourceFile.isDirectory() ? sourceFile : (rootZip=new ZipFi(sourceFile));\n    if (zip.list().length == 1 && zip.list()[0].isDirectory()) {\n      zip=zip.list()[0];\n    }\n    Fi metaf=zip.child(\"mod.json\").exists() ? zip.child(\"mod.json\") : zip.child(\"mod.hjson\").exists() ? zip.child(\"mod.hjson\") : zip.child(\"plugin.json\").exists() ? zip.child(\"plugin.json\") : zip.child(\"plugin.hjson\");\n    if (!metaf.exists()) {\n      Log.warn(\"Mod @ doesn't have a '[mod/plugin].[h]json' file, skipping.\",sourceFile);\n      throw new IllegalArgumentException(\"Invalid file: No mod.json found.\");\n    }\n    ModMeta meta=json.fromJson(ModMeta.class,Jval.read(metaf.readString()).toString(Jformat.plain));\n    meta.cleanup();\n    String camelized=meta.name.replace(\" \",\"\");\n    String mainClass=meta.main == null ? camelized.toLowerCase() + \".\" + camelized+ \"Mod\" : meta.main;\n    String baseName=meta.name.toLowerCase().replace(\" \",\"-\");\n    var other=mods.find(m -> m.name.equals(baseName));\n    if (other != null) {\n      if (overwrite && !other.hasSteamID()) {\n        if (other.root instanceof ZipFi) {\n          other.root.delete();\n        }\n        if (other.file.isDirectory()) {\n          other.file.deleteDirectory();\n        }\n else {\n          other.file.delete();\n        }\n        mods.remove(other);\n      }\n else {\n        throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n      }\n    }\n    Mod mainMod;\n    Fi mainFile=zip;\n    if (android) {\n      mainFile=mainFile.child(\"classes.dex\");\n    }\n else {\n      String[] path=(mainClass.replace('.','/') + \".class\").split(\"/\");\n      for (      String str : path) {\n        if (!str.isEmpty()) {\n          mainFile=mainFile.child(str);\n        }\n      }\n    }\n    if ((mainFile.exists() || meta.java) && Core.settings.getBool(\"mod-\" + baseName + \"-enabled\",true) && Version.isAtLeast(meta.minGameVersion)&& (meta.getMinMajor() >= 105 || headless)) {\n      if (ios) {\n        throw new IllegalArgumentException(\"Java class mods are not supported on iOS.\");\n      }\n      Class<?> main=platform.loadJar(sourceFile,mainClass);\n      metas.put(main,meta);\n      mainMod=(Mod)main.getDeclaredConstructor().newInstance();\n    }\n else {\n      mainMod=null;\n    }\n    if (mainMod instanceof Plugin) {\n      meta.hidden=true;\n    }\n    if (meta.version != null) {\n      int line=meta.version.indexOf('\\n');\n      if (line != -1) {\n        meta.version=meta.version.substring(0,line);\n      }\n    }\n    if (!headless) {\n      Log.info(\"Loaded mod '@' in @ms\",meta.name,Time.elapsed());\n    }\n    return new LoadedMod(sourceFile,zip,mainMod,meta);\n  }\n catch (  Exception e) {\n    if (rootZip != null)     rootZip.delete();\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4311,
        "startLineNumber" : 615,
        "startColumnNumber" : 4,
        "endLineNumber" : 720,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Loads a mod file+meta, but does not add it to the list. Note that directories can be loaded as mods. \n */\nprivate LoadedMod loadMod(Fi sourceFile,boolean overwrite) throws Exception {\n  Time.mark();\n  ZipFi rootZip=null;\n  try {\n    Fi zip=sourceFile.isDirectory() ? sourceFile : (rootZip=new ZipFi(sourceFile));\n    if (zip.list().length == 1 && zip.list()[0].isDirectory()) {\n      zip=zip.list()[0];\n    }\n    Fi metaf=zip.child(\"mod.json\").exists() ? zip.child(\"mod.json\") : zip.child(\"mod.hjson\").exists() ? zip.child(\"mod.hjson\") : zip.child(\"plugin.json\").exists() ? zip.child(\"plugin.json\") : zip.child(\"plugin.hjson\");\n    if (!metaf.exists()) {\n      Log.warn(\"Mod @ doesn't have a '[mod/plugin].[h]json' file, skipping.\",sourceFile);\n      throw new IllegalArgumentException(\"Invalid file: No mod.json found.\");\n    }\n    ModMeta meta=json.fromJson(ModMeta.class,Jval.read(metaf.readString()).toString(Jformat.plain));\n    meta.cleanup();\n    String camelized=meta.name.replace(\" \",\"\");\n    String mainClass=meta.main == null ? camelized.toLowerCase() + \".\" + camelized+ \"Mod\" : meta.main;\n    String baseName=meta.name.toLowerCase().replace(\" \",\"-\");\n    var other=mods.find(m -> m.name.equals(baseName));\n    if (other != null) {\n      if (overwrite && !other.hasSteamID()) {\n        if (other.root instanceof ZipFi) {\n          other.root.delete();\n        }\n        if (other.file.isDirectory()) {\n          other.file.deleteDirectory();\n        }\n else {\n          other.file.delete();\n        }\n        mods.remove(other);\n      }\n else {\n        throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n      }\n    }\n    Mod mainMod;\n    Fi mainFile=zip;\n    if (android) {\n      mainFile=mainFile.child(\"classes.dex\");\n    }\n else {\n      String[] path=(mainClass.replace('.','/') + \".class\").split(\"/\");\n      for (      String str : path) {\n        if (!str.isEmpty()) {\n          mainFile=mainFile.child(str);\n        }\n      }\n    }\n    if ((mainFile.exists() || meta.java) && Core.settings.getBool(\"mod-\" + baseName + \"-enabled\",true) && Version.isAtLeast(meta.minGameVersion)&& (meta.getMinMajor() >= 105 || headless)) {\n      if (ios) {\n        throw new IllegalArgumentException(\"Java class mods are not supported on iOS.\");\n      }\n      Class<?> main=platform.loadJar(sourceFile,mainClass);\n      metas.put(main,meta);\n      mainMod=(Mod)main.getDeclaredConstructor().newInstance();\n    }\n else {\n      mainMod=null;\n    }\n    if (mainMod instanceof Plugin) {\n      meta.hidden=true;\n    }\n    if (meta.version != null) {\n      int line=meta.version.indexOf('\\n');\n      if (line != -1) {\n        meta.version=meta.version.substring(0,line);\n      }\n    }\n    if (!headless) {\n      Log.info(\"Loaded mod '@' in @ms\",meta.name,Time.elapsed());\n    }\n    return new LoadedMod(sourceFile,zip,mainMod,meta);\n  }\n catch (  Exception e) {\n    if (rootZip != null)     rootZip.delete();\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 503,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 663,
        "startColumnNumber" : 20,
        "endLineNumber" : 663,
        "endColumnNumber" : 118
      },
      "nodeContext" : "throw new IllegalArgumentException(\"A mod with the name '\" + baseName + \"' is already imported.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 11,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 61,
    "startLineNumber" : 663,
    "startColumnNumber" : 55,
    "endLineNumber" : 663,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ ]
}