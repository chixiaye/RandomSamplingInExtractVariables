{
  "id" : 213,
  "expression" : "consumerRecordsList",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceTaskTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumerRecordsList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 121,
      "startColumnNumber" : 8,
      "endLineNumber" : 121,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 112
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 113
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPoll(){\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 112
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.kafka.clients.consumer.ConsumerRecord<byte[],byte[]>>"
  }, {
    "nodeContext" : "consumerRecordsList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 123,
      "startColumnNumber" : 8,
      "endLineNumber" : 123,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 112
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 113
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPoll(){\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 112
      },
      "nodeContext" : "consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.kafka.clients.consumer.ConsumerRecord<byte[],byte[]>>"
  }, {
    "nodeContext" : "consumerRecordsList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 126,
      "startColumnNumber" : 97,
      "endLineNumber" : 126,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 126,
        "startColumnNumber" : 38,
        "endLineNumber" : 126,
        "endColumnNumber" : 117
      },
      "nodeContext" : "Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 118
      },
      "nodeContext" : "new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 125,
        "startColumnNumber" : 40,
        "endLineNumber" : 126,
        "endColumnNumber" : 118
      },
      "nodeContext" : "consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 119
      },
      "nodeContext" : "ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPoll(){\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 118
      },
      "nodeContext" : "new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.kafka.clients.consumer.ConsumerRecord<byte[],byte[]>>"
  }, {
    "nodeContext" : "consumerRecordsList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 143,
      "startColumnNumber" : 60,
      "endLineNumber" : 143,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 143,
        "startColumnNumber" : 60,
        "endLineNumber" : 143,
        "endColumnNumber" : 86
      },
      "nodeContext" : "consumerRecordsList.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 143,
        "endColumnNumber" : 86
      },
      "nodeContext" : "consumerRecord=consumerRecordsList.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 143,
        "startColumnNumber" : 12,
        "endLineNumber" : 143,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 141,
        "startColumnNumber" : 55,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SourceRecord sourceRecord=sourceRecords.get(i);\n  ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n  assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n  assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n  assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n  assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n  List<Header> expectedHeaders=new ArrayList<>();\n  consumerRecord.headers().forEach(expectedHeaders::add);\n  List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n  sourceRecord.headers().forEach(taskHeaders::add);\n  compareHeaders(expectedHeaders,taskHeaders);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < sourceRecords.size(); i++) {\n  SourceRecord sourceRecord=sourceRecords.get(i);\n  ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n  assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n  assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n  assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n  assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n  List<Header> expectedHeaders=new ArrayList<>();\n  consumerRecord.headers().forEach(expectedHeaders::add);\n  List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n  sourceRecord.headers().forEach(taskHeaders::add);\n  compareHeaders(expectedHeaders,taskHeaders);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPoll(){\n  byte[] key1=\"abc\".getBytes();\n  byte[] value1=\"fgh\".getBytes();\n  byte[] key2=\"123\".getBytes();\n  byte[] value2=\"456\".getBytes();\n  List<ConsumerRecord<byte[],byte[]>> consumerRecordsList=new ArrayList<>();\n  String topicName=\"test\";\n  String headerKey=\"key\";\n  RecordHeaders headers=new RecordHeaders(new Header[]{new RecordHeader(headerKey,\"value\".getBytes())});\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,0,0,System.currentTimeMillis(),TimestampType.CREATE_TIME,key1.length,value1.length,key1,value1,headers,Optional.empty()));\n  consumerRecordsList.add(new ConsumerRecord<>(topicName,1,1,System.currentTimeMillis(),TimestampType.CREATE_TIME,key2.length,value2.length,key2,value2,headers,Optional.empty()));\n  ConsumerRecords<byte[],byte[]> consumerRecords=new ConsumerRecords<>(Collections.singletonMap(new TopicPartition(topicName,0),consumerRecordsList));\n  @SuppressWarnings(\"unchecked\") KafkaConsumer<byte[],byte[]> consumer=mock(KafkaConsumer.class);\n  when(consumer.poll(any())).thenReturn(consumerRecords);\n  MirrorMetrics metrics=mock(MirrorMetrics.class);\n  String sourceClusterName=\"cluster1\";\n  ReplicationPolicy replicationPolicy=new DefaultReplicationPolicy();\n  MirrorSourceTask mirrorSourceTask=new MirrorSourceTask(consumer,metrics,sourceClusterName,replicationPolicy,50);\n  List<SourceRecord> sourceRecords=mirrorSourceTask.poll();\n  assertEquals(2,sourceRecords.size());\n  for (int i=0; i < sourceRecords.size(); i++) {\n    SourceRecord sourceRecord=sourceRecords.get(i);\n    ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n    assertEquals(consumerRecord.key(),sourceRecord.key(),\"consumerRecord key does not equal sourceRecord key\");\n    assertEquals(consumerRecord.value(),sourceRecord.value(),\"consumerRecord value does not equal sourceRecord value\");\n    assertEquals(replicationPolicy.formatRemoteTopic(sourceClusterName,topicName),sourceRecord.topic(),\"topicName not the same as the current replicationPolicy\");\n    assertEquals(consumerRecord.partition(),sourceRecord.kafkaPartition().intValue(),\"partition assignment not the same as the current replicationPolicy\");\n    List<Header> expectedHeaders=new ArrayList<>();\n    consumerRecord.headers().forEach(expectedHeaders::add);\n    List<org.apache.kafka.connect.header.Header> taskHeaders=new ArrayList<>();\n    sourceRecord.headers().forEach(taskHeaders::add);\n    compareHeaders(expectedHeaders,taskHeaders);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 143,
        "startColumnNumber" : 12,
        "endLineNumber" : 143,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ConsumerRecord<byte[],byte[]> consumerRecord=consumerRecordsList.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.kafka.clients.consumer.ConsumerRecord<byte[],byte[]>>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 121,
    "startColumnNumber" : 8,
    "endLineNumber" : 121,
    "endColumnNumber" : 27
  }, {
    "charLength" : 19,
    "startLineNumber" : 123,
    "startColumnNumber" : 8,
    "endLineNumber" : 123,
    "endColumnNumber" : 27
  }, {
    "charLength" : 19,
    "startLineNumber" : 126,
    "startColumnNumber" : 97,
    "endLineNumber" : 126,
    "endColumnNumber" : 116
  }, {
    "charLength" : 19,
    "startLineNumber" : 143,
    "startColumnNumber" : 60,
    "endLineNumber" : 143,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}