{
  "id" : 371,
  "expression" : "e",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 92,
      "startColumnNumber" : 38,
      "endLineNumber" : 92,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 18,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new TbNodeException(e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 41
      },
      "nodeContext" : "throw new TbNodeException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 90,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.error(\"Failed to parse alarm: [{}]\",msg.getData());\n  throw new TbNodeException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  log.error(\"Failed to parse alarm: [{}]\",msg.getData());\n  throw new TbNodeException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Alarm alarm=mapper.readValue(msg.getData(),Alarm.class);\n  ListenableFuture<Alarm> latest=ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(),alarm.getId());\n  Futures.addCallback(latest,new FutureCallback<Alarm>(){\n    @Override public void onSuccess(    @Nullable Alarm result){\n      if (result != null) {\n        boolean isPresent=false;\n        for (        AlarmStatus alarmStatus : config.getAlarmStatusList()) {\n          if (result.getStatus() == alarmStatus) {\n            isPresent=true;\n            break;\n          }\n        }\n        if (isPresent) {\n          ctx.tellNext(msg,\"True\");\n        }\n else {\n          ctx.tellNext(msg,\"False\");\n        }\n      }\n else {\n        ctx.tellFailure(msg,new TbNodeException(\"No such alarm found.\"));\n      }\n    }\n    @Override public void onFailure(    Throwable t){\n      ctx.tellFailure(msg,t);\n    }\n  }\n,MoreExecutors.directExecutor());\n}\n catch (IOException e) {\n  log.error(\"Failed to parse alarm: [{}]\",msg.getData());\n  throw new TbNodeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1486,
        "startLineNumber" : 58,
        "startColumnNumber" : 71,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Alarm alarm=mapper.readValue(msg.getData(),Alarm.class);\n    ListenableFuture<Alarm> latest=ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(),alarm.getId());\n    Futures.addCallback(latest,new FutureCallback<Alarm>(){\n      @Override public void onSuccess(      @Nullable Alarm result){\n        if (result != null) {\n          boolean isPresent=false;\n          for (          AlarmStatus alarmStatus : config.getAlarmStatusList()) {\n            if (result.getStatus() == alarmStatus) {\n              isPresent=true;\n              break;\n            }\n          }\n          if (isPresent) {\n            ctx.tellNext(msg,\"True\");\n          }\n else {\n            ctx.tellNext(msg,\"False\");\n          }\n        }\n else {\n          ctx.tellFailure(msg,new TbNodeException(\"No such alarm found.\"));\n        }\n      }\n      @Override public void onFailure(      Throwable t){\n        ctx.tellFailure(msg,t);\n      }\n    }\n,MoreExecutors.directExecutor());\n  }\n catch (  IOException e) {\n    log.error(\"Failed to parse alarm: [{}]\",msg.getData());\n    throw new TbNodeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onMsg(TbContext ctx,TbMsg msg) throws TbNodeException {\n  try {\n    Alarm alarm=mapper.readValue(msg.getData(),Alarm.class);\n    ListenableFuture<Alarm> latest=ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(),alarm.getId());\n    Futures.addCallback(latest,new FutureCallback<Alarm>(){\n      @Override public void onSuccess(      @Nullable Alarm result){\n        if (result != null) {\n          boolean isPresent=false;\n          for (          AlarmStatus alarmStatus : config.getAlarmStatusList()) {\n            if (result.getStatus() == alarmStatus) {\n              isPresent=true;\n              break;\n            }\n          }\n          if (isPresent) {\n            ctx.tellNext(msg,\"True\");\n          }\n else {\n            ctx.tellNext(msg,\"False\");\n          }\n        }\n else {\n          ctx.tellFailure(msg,new TbNodeException(\"No such alarm found.\"));\n        }\n      }\n      @Override public void onFailure(      Throwable t){\n        ctx.tellFailure(msg,t);\n      }\n    }\n,MoreExecutors.directExecutor());\n  }\n catch (  IOException e) {\n    log.error(\"Failed to parse alarm: [{}]\",msg.getData());\n    throw new TbNodeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 41
      },
      "nodeContext" : "throw new TbNodeException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 92,
    "startColumnNumber" : 38,
    "endLineNumber" : 92,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}