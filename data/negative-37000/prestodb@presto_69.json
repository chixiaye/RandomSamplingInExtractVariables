{
  "id" : 69,
  "expression" : "i",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-ml/src/main/java/com/facebook/presto/ml/StringClassifierAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 85,
      "startColumnNumber" : 24,
      "endLineNumber" : 85,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 43
      },
      "nodeContext" : "i < numEnumerations",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numEnumerations; i++) {\n  int key=input.readInt();\n  int valueLength=input.readInt();\n  String value=input.readSlice(valueLength).toStringUtf8();\n  builder.put(key,value);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Slice slice=Slices.wrappedBuffer(data);\n  BasicSliceInput input=slice.getInput();\n  int classifierLength=input.readInt();\n  Model classifier=ModelUtils.deserialize(input.readSlice(classifierLength));\n  int numEnumerations=input.readInt();\n  ImmutableMap.Builder<Integer,String> builder=ImmutableMap.builder();\n  for (int i=0; i < numEnumerations; i++) {\n    int key=input.readInt();\n    int valueLength=input.readInt();\n    String value=input.readSlice(valueLength).toStringUtf8();\n    builder.put(key,value);\n  }\n  return new StringClassifierAdapter((Classifier)classifier,builder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static StringClassifierAdapter deserialize(byte[] data){\n  Slice slice=Slices.wrappedBuffer(data);\n  BasicSliceInput input=slice.getInput();\n  int classifierLength=input.readInt();\n  Model classifier=ModelUtils.deserialize(input.readSlice(classifierLength));\n  int numEnumerations=input.readInt();\n  ImmutableMap.Builder<Integer,String> builder=ImmutableMap.builder();\n  for (int i=0; i < numEnumerations; i++) {\n    int key=input.readInt();\n    int valueLength=input.readInt();\n    String value=input.readSlice(valueLength).toStringUtf8();\n    builder.put(key,value);\n  }\n  return new StringClassifierAdapter((Classifier)classifier,builder.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 43
      },
      "nodeContext" : "i < numEnumerations",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 85,
    "startColumnNumber" : 24,
    "endLineNumber" : 85,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}