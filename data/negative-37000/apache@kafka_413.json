{
  "id" : 413,
  "expression" : "ConnectProtocol",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ConnectProtocol",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 308,
      "startColumnNumber" : 68,
      "endLineNumber" : 308,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 308,
        "startColumnNumber" : 68,
        "endLineNumber" : 308,
        "endColumnNumber" : 94
      },
      "nodeContext" : "ConnectProtocol.Assignment",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 308,
        "startColumnNumber" : 68,
        "endLineNumber" : 308,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ConnectProtocol.Assignment.NO_ERROR",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 309,
        "endColumnNumber" : 57
      },
      "nodeContext" : "expectRebalance(Arrays.asList(CONN1),Arrays.asList(TASK1),ConnectProtocol.Assignment.NO_ERROR,1,Arrays.asList(CONN1),Arrays.asList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 309,
        "endColumnNumber" : 58
      },
      "nodeContext" : "expectRebalance(Arrays.asList(CONN1),Arrays.asList(TASK1),ConnectProtocol.Assignment.NO_ERROR,1,Arrays.asList(CONN1),Arrays.asList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2702,
        "startLineNumber" : 283,
        "startColumnNumber" : 49,
        "endLineNumber" : 340,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EasyMock.expect(member.memberId()).andStubReturn(\"member\");\n  EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n  EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n  expectRebalance(1,Arrays.asList(CONN1),Arrays.asList(TASK1));\n  expectPostRebalanceCatchup(SNAPSHOT);\n  Capture<Callback<TargetState>> onFirstStart=newCapture();\n  worker.startConnector(EasyMock.eq(CONN1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),capture(onFirstStart));\n  PowerMock.expectLastCall().andAnswer(() -> {\n    onFirstStart.getValue().onCompletion(null,TargetState.STARTED);\n    return true;\n  }\n);\n  member.wakeup();\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);\n  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);\n  worker.startTask(EasyMock.eq(TASK1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));\n  PowerMock.expectLastCall().andReturn(true);\n  member.poll(EasyMock.anyInt());\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n  expectRebalance(Arrays.asList(CONN1),Arrays.asList(TASK1),ConnectProtocol.Assignment.NO_ERROR,1,Arrays.asList(CONN1),Arrays.asList());\n  Capture<Callback<TargetState>> onSecondStart=newCapture();\n  worker.startConnector(EasyMock.eq(CONN1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),capture(onSecondStart));\n  PowerMock.expectLastCall().andAnswer(() -> {\n    onSecondStart.getValue().onCompletion(null,TargetState.STARTED);\n    return true;\n  }\n);\n  member.wakeup();\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);\n  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);\n  member.poll(EasyMock.anyInt());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  time.sleep(1000L);\n  assertStatistics(0,0,0,Double.POSITIVE_INFINITY);\n  herder.tick();\n  time.sleep(2000L);\n  assertStatistics(3,1,100,2000);\n  herder.tick();\n  time.sleep(3000L);\n  assertStatistics(3,2,100,3000);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2757,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 340,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRebalance() throws Exception {\n  EasyMock.expect(member.memberId()).andStubReturn(\"member\");\n  EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n  EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n  expectRebalance(1,Arrays.asList(CONN1),Arrays.asList(TASK1));\n  expectPostRebalanceCatchup(SNAPSHOT);\n  Capture<Callback<TargetState>> onFirstStart=newCapture();\n  worker.startConnector(EasyMock.eq(CONN1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),capture(onFirstStart));\n  PowerMock.expectLastCall().andAnswer(() -> {\n    onFirstStart.getValue().onCompletion(null,TargetState.STARTED);\n    return true;\n  }\n);\n  member.wakeup();\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);\n  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);\n  worker.startTask(EasyMock.eq(TASK1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));\n  PowerMock.expectLastCall().andReturn(true);\n  member.poll(EasyMock.anyInt());\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n  expectRebalance(Arrays.asList(CONN1),Arrays.asList(TASK1),ConnectProtocol.Assignment.NO_ERROR,1,Arrays.asList(CONN1),Arrays.asList());\n  Capture<Callback<TargetState>> onSecondStart=newCapture();\n  worker.startConnector(EasyMock.eq(CONN1),EasyMock.anyObject(),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),capture(onSecondStart));\n  PowerMock.expectLastCall().andAnswer(() -> {\n    onSecondStart.getValue().onCompletion(null,TargetState.STARTED);\n    return true;\n  }\n);\n  member.wakeup();\n  PowerMock.expectLastCall();\n  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);\n  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);\n  member.poll(EasyMock.anyInt());\n  PowerMock.expectLastCall();\n  PowerMock.replayAll();\n  time.sleep(1000L);\n  assertStatistics(0,0,0,Double.POSITIVE_INFINITY);\n  herder.tick();\n  time.sleep(2000L);\n  assertStatistics(3,1,100,2000);\n  herder.tick();\n  time.sleep(3000L);\n  assertStatistics(3,2,100,3000);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 381,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 308,
        "startColumnNumber" : 68,
        "endLineNumber" : 308,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ConnectProtocol.Assignment.NO_ERROR",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.connect.runtime.distributed.ConnectProtocol"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 308,
    "startColumnNumber" : 68,
    "endLineNumber" : 308,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}