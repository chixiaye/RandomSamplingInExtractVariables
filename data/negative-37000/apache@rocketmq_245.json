{
  "id" : 245,
  "expression" : "opNew.compare(opOld)",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/common/src/main/java/org/apache/rocketmq/common/filter/impl/PolishExpr.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "opNew.compare(opOld)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 65,
      "startColumnNumber" : 49,
      "endLineNumber" : 65,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 65,
        "startColumnNumber" : 49,
        "endLineNumber" : 65,
        "endColumnNumber" : 74
      },
      "nodeContext" : "opNew.compare(opOld) != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 65,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 74
      },
      "nodeContext" : "opOld.isCompareable() && opNew.compare(opOld) != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 65,
        "startColumnNumber" : 20,
        "endLineNumber" : 67,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n  segments.add(operatorStack.pop());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 68,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Operator opOld=operatorStack.peek();\n  if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n    segments.add(operatorStack.pop());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!operatorStack.empty()) {\n  Operator opOld=operatorStack.peek();\n  if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n    segments.add(operatorStack.pop());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 60,
        "startColumnNumber" : 42,
        "endLineNumber" : 70,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Operator opNew=(Operator)token;\n  if (!operatorStack.empty()) {\n    Operator opOld=operatorStack.peek();\n    if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n      segments.add(operatorStack.pop());\n    }\n  }\n  operatorStack.push(opNew);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 60,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (isOperator(token)) {\n  Operator opNew=(Operator)token;\n  if (!operatorStack.empty()) {\n    Operator opOld=operatorStack.peek();\n    if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n      segments.add(operatorStack.pop());\n    }\n  }\n  operatorStack.push(opNew);\n}\n else throw new IllegalArgumentException(\"illegal token \" + token);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 895,
        "startLineNumber" : 52,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (isRightParenthesis(token)) {\n  Operator opNew=null;\n  while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n    segments.add(opNew);\n  }\n  if (null == opNew || LEFTPARENTHESIS != opNew)   throw new IllegalArgumentException(\"mismatched parentheses\");\n}\n else if (isOperator(token)) {\n  Operator opNew=(Operator)token;\n  if (!operatorStack.empty()) {\n    Operator opOld=operatorStack.peek();\n    if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n      segments.add(operatorStack.pop());\n    }\n  }\n  operatorStack.push(opNew);\n}\n else throw new IllegalArgumentException(\"illegal token \" + token);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 49,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (isLeftParenthesis(token)) {\n  operatorStack.push((Operator)token);\n}\n else if (isRightParenthesis(token)) {\n  Operator opNew=null;\n  while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n    segments.add(opNew);\n  }\n  if (null == opNew || LEFTPARENTHESIS != opNew)   throw new IllegalArgumentException(\"mismatched parentheses\");\n}\n else if (isOperator(token)) {\n  Operator opNew=(Operator)token;\n  if (!operatorStack.empty()) {\n    Operator opOld=operatorStack.peek();\n    if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n      segments.add(operatorStack.pop());\n    }\n  }\n  operatorStack.push(opNew);\n}\n else throw new IllegalArgumentException(\"illegal token \" + token);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1082,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 77
      },
      "nodeContext" : "if (isOperand(token)) {\n  segments.add(token);\n}\n else if (isLeftParenthesis(token)) {\n  operatorStack.push((Operator)token);\n}\n else if (isRightParenthesis(token)) {\n  Operator opNew=null;\n  while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n    segments.add(opNew);\n  }\n  if (null == opNew || LEFTPARENTHESIS != opNew)   throw new IllegalArgumentException(\"mismatched parentheses\");\n}\n else if (isOperator(token)) {\n  Operator opNew=(Operator)token;\n  if (!operatorStack.empty()) {\n    Operator opOld=operatorStack.peek();\n    if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n      segments.add(operatorStack.pop());\n    }\n  }\n  operatorStack.push(opNew);\n}\n else throw new IllegalArgumentException(\"illegal token \" + token);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 44,
        "startColumnNumber" : 48,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Op token=tokens.get(i);\n  if (isOperand(token)) {\n    segments.add(token);\n  }\n else   if (isLeftParenthesis(token)) {\n    operatorStack.push((Operator)token);\n  }\n else   if (isRightParenthesis(token)) {\n    Operator opNew=null;\n    while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n      segments.add(opNew);\n    }\n    if (null == opNew || LEFTPARENTHESIS != opNew)     throw new IllegalArgumentException(\"mismatched parentheses\");\n  }\n else   if (isOperator(token)) {\n    Operator opNew=(Operator)token;\n    if (!operatorStack.empty()) {\n      Operator opOld=operatorStack.peek();\n      if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n        segments.add(operatorStack.pop());\n      }\n    }\n    operatorStack.push(opNew);\n  }\n else   throw new IllegalArgumentException(\"illegal token \" + token);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < tokens.size(); i++) {\n  Op token=tokens.get(i);\n  if (isOperand(token)) {\n    segments.add(token);\n  }\n else   if (isLeftParenthesis(token)) {\n    operatorStack.push((Operator)token);\n  }\n else   if (isRightParenthesis(token)) {\n    Operator opNew=null;\n    while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n      segments.add(opNew);\n    }\n    if (null == opNew || LEFTPARENTHESIS != opNew)     throw new IllegalArgumentException(\"mismatched parentheses\");\n  }\n else   if (isOperator(token)) {\n    Operator opNew=(Operator)token;\n    if (!operatorStack.empty()) {\n      Operator opOld=operatorStack.peek();\n      if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n        segments.add(operatorStack.pop());\n      }\n    }\n    operatorStack.push(opNew);\n  }\n else   throw new IllegalArgumentException(\"illegal token \" + token);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 149,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 40,
        "startColumnNumber" : 58,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Op> segments=new ArrayList<Op>();\n  Stack<Operator> operatorStack=new Stack<Operator>();\n  for (int i=0; i < tokens.size(); i++) {\n    Op token=tokens.get(i);\n    if (isOperand(token)) {\n      segments.add(token);\n    }\n else     if (isLeftParenthesis(token)) {\n      operatorStack.push((Operator)token);\n    }\n else     if (isRightParenthesis(token)) {\n      Operator opNew=null;\n      while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n        segments.add(opNew);\n      }\n      if (null == opNew || LEFTPARENTHESIS != opNew)       throw new IllegalArgumentException(\"mismatched parentheses\");\n    }\n else     if (isOperator(token)) {\n      Operator opNew=(Operator)token;\n      if (!operatorStack.empty()) {\n        Operator opOld=operatorStack.peek();\n        if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n          segments.add(operatorStack.pop());\n        }\n      }\n      operatorStack.push(opNew);\n    }\n else     throw new IllegalArgumentException(\"illegal token \" + token);\n  }\n  while (!operatorStack.empty()) {\n    Operator operator=operatorStack.pop();\n    if (LEFTPARENTHESIS == operator || RIGHTPARENTHESIS == operator)     throw new IllegalArgumentException(\"mismatched parentheses \" + operator);\n    segments.add(operator);\n  }\n  return segments;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Shunting-yard algorithm <br/> http://en.wikipedia.org/wiki/Shunting_yard_algorithm\n * @return the compute result of Shunting-yard algorithm\n */\npublic static List<Op> reversePolish(List<Op> tokens){\n  List<Op> segments=new ArrayList<Op>();\n  Stack<Operator> operatorStack=new Stack<Operator>();\n  for (int i=0; i < tokens.size(); i++) {\n    Op token=tokens.get(i);\n    if (isOperand(token)) {\n      segments.add(token);\n    }\n else     if (isLeftParenthesis(token)) {\n      operatorStack.push((Operator)token);\n    }\n else     if (isRightParenthesis(token)) {\n      Operator opNew=null;\n      while (!operatorStack.empty() && LEFTPARENTHESIS != (opNew=operatorStack.pop())) {\n        segments.add(opNew);\n      }\n      if (null == opNew || LEFTPARENTHESIS != opNew)       throw new IllegalArgumentException(\"mismatched parentheses\");\n    }\n else     if (isOperator(token)) {\n      Operator opNew=(Operator)token;\n      if (!operatorStack.empty()) {\n        Operator opOld=operatorStack.peek();\n        if (opOld.isCompareable() && opNew.compare(opOld) != 1) {\n          segments.add(operatorStack.pop());\n        }\n      }\n      operatorStack.push(opNew);\n    }\n else     throw new IllegalArgumentException(\"illegal token \" + token);\n  }\n  while (!operatorStack.empty()) {\n    Operator operator=operatorStack.pop();\n    if (LEFTPARENTHESIS == operator || RIGHTPARENTHESIS == operator)     throw new IllegalArgumentException(\"mismatched parentheses \" + operator);\n    segments.add(operator);\n  }\n  return segments;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 65,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 74
      },
      "nodeContext" : "opOld.isCompareable() && opNew.compare(opOld) != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 65,
    "startColumnNumber" : 49,
    "endLineNumber" : 65,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}