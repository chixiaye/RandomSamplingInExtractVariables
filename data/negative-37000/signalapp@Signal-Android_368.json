{
  "id" : 368,
  "expression" : "\"%s(%s, %s)\"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/lintchecks/src/main/java/org/signal/lint/SignalLogDetector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"%s(%s, %s)\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 94,
      "startColumnNumber" : 35,
      "endLineNumber" : 94,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 94,
        "startColumnNumber" : 21,
        "endLineNumber" : 94,
        "endColumnNumber" : 98
      },
      "nodeContext" : "String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 98
      },
      "nodeContext" : "fixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 99
      },
      "nodeContext" : "fixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 565,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (arguments.size()) {\ncase 2:  UExpression msgOrThrowable=arguments.get(1);\nfixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString());\nbreak;\ncase 3:UExpression msg=arguments.get(1);\nUExpression throwable=arguments.get(2);\nfixSource+=String.format(\"%s(%s, %s, %s)\",methodName,tag,msg.asSourceString(),throwable.asSourceString());\nbreak;\ndefault:throw new IllegalStateException(\"Log overloads should have 2 or 3 arguments\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 70,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 84,
        "startColumnNumber" : 69,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<UExpression> arguments=logCall.getValueArguments();\n  String methodName=logCall.getMethodName();\n  UExpression tag=arguments.get(0);\n  String fixSource=\"org.signal.core.util.logging.Log.\";\nswitch (arguments.size()) {\ncase 2:    UExpression msgOrThrowable=arguments.get(1);\n  fixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString());\nbreak;\ncase 3:UExpression msg=arguments.get(1);\nUExpression throwable=arguments.get(2);\nfixSource+=String.format(\"%s(%s, %s, %s)\",methodName,tag,msg.asSourceString(),throwable.asSourceString());\nbreak;\ndefault:throw new IllegalStateException(\"Log overloads should have 2 or 3 arguments\");\n}\nString logCallSource=logCall.asSourceString();\nLintFix.GroupBuilder fixGrouper=fix().group();\nfixGrouper.add(fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource).build());\nreturn fixGrouper.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1130,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private LintFix quickFixIssueLog(@NotNull UCallExpression logCall){\n  List<UExpression> arguments=logCall.getValueArguments();\n  String methodName=logCall.getMethodName();\n  UExpression tag=arguments.get(0);\n  String fixSource=\"org.signal.core.util.logging.Log.\";\nswitch (arguments.size()) {\ncase 2:    UExpression msgOrThrowable=arguments.get(1);\n  fixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString());\nbreak;\ncase 3:UExpression msg=arguments.get(1);\nUExpression throwable=arguments.get(2);\nfixSource+=String.format(\"%s(%s, %s, %s)\",methodName,tag,msg.asSourceString(),throwable.asSourceString());\nbreak;\ndefault:throw new IllegalStateException(\"Log overloads should have 2 or 3 arguments\");\n}\nString logCallSource=logCall.asSourceString();\nLintFix.GroupBuilder fixGrouper=fix().group();\nfixGrouper.add(fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource).build());\nreturn fixGrouper.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 99
      },
      "nodeContext" : "fixSource+=String.format(\"%s(%s, %s)\",methodName,tag,msgOrThrowable.asSourceString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 94,
    "startColumnNumber" : 35,
    "endLineNumber" : 94,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}