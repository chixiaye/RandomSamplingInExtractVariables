{
  "id" : 94,
  "expression" : "new IndexInsnNode(InsnType.IGET,igetFld,1)",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IndexInsnNode(InsnType.IGET,igetFld,1)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 444,
      "startColumnNumber" : 24,
      "endLineNumber" : 444,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 444,
        "startColumnNumber" : 13,
        "endLineNumber" : 444,
        "endColumnNumber" : 68
      },
      "nodeContext" : "igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 444,
        "endColumnNumber" : 69
      },
      "nodeContext" : "InsnNode igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15642,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 582,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getOpcode()) {\ncase Opcodes.NOP:case Opcodes.PACKED_SWITCH_PAYLOAD:case Opcodes.SPARSE_SWITCH_PAYLOAD:case Opcodes.FILL_ARRAY_DATA_PAYLOAD:  return new InsnNode(InsnType.NOP,0);\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:return new InsnNode(InsnType.NOP,0);\ncase Opcodes.CONST:case Opcodes.CONST_4:case Opcodes.CONST_16:case Opcodes.CONST_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.lit(insn,ArgType.NARROW));\ncase Opcodes.CONST_WIDE:case Opcodes.CONST_WIDE_16:case Opcodes.CONST_WIDE_32:case Opcodes.CONST_WIDE_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.lit(insn,ArgType.WIDE));\ncase Opcodes.CONST_STRING:case Opcodes.CONST_STRING_JUMBO:InsnNode constStrInsn=new ConstStringNode(dex.getString(insn.getIndex()));\nconstStrInsn.setResult(InsnArg.reg(insn,0,ArgType.STRING));\nreturn constStrInsn;\ncase Opcodes.CONST_CLASS:InsnNode constClsInsn=new ConstClassNode(dex.getType(insn.getIndex()));\nconstClsInsn.setResult(InsnArg.reg(insn,0,ArgType.CLASS));\nreturn constClsInsn;\ncase Opcodes.MOVE:case Opcodes.MOVE_16:case Opcodes.MOVE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.reg(insn,1,ArgType.NARROW));\ncase Opcodes.MOVE_WIDE:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_WIDE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.reg(insn,1,ArgType.WIDE));\ncase Opcodes.MOVE_OBJECT:case Opcodes.MOVE_OBJECT_16:case Opcodes.MOVE_OBJECT_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT),InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.ADD_INT:case Opcodes.ADD_INT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.ADD_DOUBLE:case Opcodes.ADD_DOUBLE_2ADDR:return arith(insn,ArithOp.ADD,ArgType.DOUBLE);\ncase Opcodes.ADD_FLOAT:case Opcodes.ADD_FLOAT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.FLOAT);\ncase Opcodes.ADD_LONG:case Opcodes.ADD_LONG_2ADDR:return arith(insn,ArithOp.ADD,ArgType.LONG);\ncase Opcodes.ADD_INT_LIT8:case Opcodes.ADD_INT_LIT16:return arithLit(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.SUB_INT:case Opcodes.SUB_INT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.INT);\ncase Opcodes.RSUB_INT_LIT8:case Opcodes.RSUB_INT:return new ArithNode(ArithOp.SUB,InsnArg.reg(insn,0,ArgType.INT),InsnArg.lit(insn,ArgType.INT),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.SUB_LONG:case Opcodes.SUB_LONG_2ADDR:return arith(insn,ArithOp.SUB,ArgType.LONG);\ncase Opcodes.SUB_FLOAT:case Opcodes.SUB_FLOAT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.FLOAT);\ncase Opcodes.SUB_DOUBLE:case Opcodes.SUB_DOUBLE_2ADDR:return arith(insn,ArithOp.SUB,ArgType.DOUBLE);\ncase Opcodes.MUL_INT:case Opcodes.MUL_INT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.MUL_DOUBLE:case Opcodes.MUL_DOUBLE_2ADDR:return arith(insn,ArithOp.MUL,ArgType.DOUBLE);\ncase Opcodes.MUL_FLOAT:case Opcodes.MUL_FLOAT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.FLOAT);\ncase Opcodes.MUL_LONG:case Opcodes.MUL_LONG_2ADDR:return arith(insn,ArithOp.MUL,ArgType.LONG);\ncase Opcodes.MUL_INT_LIT8:case Opcodes.MUL_INT_LIT16:return arithLit(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.DIV_INT:case Opcodes.DIV_INT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT:case Opcodes.REM_INT_2ADDR:return arith(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.REM_LONG:case Opcodes.REM_LONG_2ADDR:return arith(insn,ArithOp.REM,ArgType.LONG);\ncase Opcodes.REM_FLOAT:case Opcodes.REM_FLOAT_2ADDR:return arith(insn,ArithOp.REM,ArgType.FLOAT);\ncase Opcodes.REM_DOUBLE:case Opcodes.REM_DOUBLE_2ADDR:return arith(insn,ArithOp.REM,ArgType.DOUBLE);\ncase Opcodes.DIV_DOUBLE:case Opcodes.DIV_DOUBLE_2ADDR:return arith(insn,ArithOp.DIV,ArgType.DOUBLE);\ncase Opcodes.DIV_FLOAT:case Opcodes.DIV_FLOAT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.FLOAT);\ncase Opcodes.DIV_LONG:case Opcodes.DIV_LONG_2ADDR:return arith(insn,ArithOp.DIV,ArgType.LONG);\ncase Opcodes.DIV_INT_LIT8:case Opcodes.DIV_INT_LIT16:return arithLit(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT_LIT8:case Opcodes.REM_INT_LIT16:return arithLit(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.AND_INT:case Opcodes.AND_INT_2ADDR:return arith(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.AND_INT_LIT8:case Opcodes.AND_INT_LIT16:return arithLit(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.XOR_INT_LIT8:case Opcodes.XOR_INT_LIT16:return arithLit(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.AND_LONG:case Opcodes.AND_LONG_2ADDR:return arith(insn,ArithOp.AND,ArgType.LONG);\ncase Opcodes.OR_INT:case Opcodes.OR_INT_2ADDR:return arith(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.OR_INT_LIT8:case Opcodes.OR_INT_LIT16:return arithLit(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.XOR_INT:case Opcodes.XOR_INT_2ADDR:return arith(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.OR_LONG:case Opcodes.OR_LONG_2ADDR:return arith(insn,ArithOp.OR,ArgType.LONG);\ncase Opcodes.XOR_LONG:case Opcodes.XOR_LONG_2ADDR:return arith(insn,ArithOp.XOR,ArgType.LONG);\ncase Opcodes.USHR_INT:case Opcodes.USHR_INT_2ADDR:return arith(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.USHR_LONG:case Opcodes.USHR_LONG_2ADDR:return arith(insn,ArithOp.USHR,ArgType.LONG);\ncase Opcodes.SHL_INT:case Opcodes.SHL_INT_2ADDR:return arith(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHL_LONG:case Opcodes.SHL_LONG_2ADDR:return arith(insn,ArithOp.SHL,ArgType.LONG);\ncase Opcodes.SHR_INT:case Opcodes.SHR_INT_2ADDR:return arith(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.SHR_LONG:case Opcodes.SHR_LONG_2ADDR:return arith(insn,ArithOp.SHR,ArgType.LONG);\ncase Opcodes.SHL_INT_LIT8:return arithLit(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHR_INT_LIT8:return arithLit(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.USHR_INT_LIT8:return arithLit(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.NEG_INT:return neg(insn,ArgType.INT);\ncase Opcodes.NEG_LONG:return neg(insn,ArgType.LONG);\ncase Opcodes.NEG_FLOAT:return neg(insn,ArgType.FLOAT);\ncase Opcodes.NEG_DOUBLE:return neg(insn,ArgType.DOUBLE);\ncase Opcodes.NOT_INT:return not(insn,ArgType.INT);\ncase Opcodes.NOT_LONG:return not(insn,ArgType.LONG);\ncase Opcodes.INT_TO_BYTE:return cast(insn,ArgType.INT,ArgType.BYTE);\ncase Opcodes.INT_TO_CHAR:return cast(insn,ArgType.INT,ArgType.CHAR);\ncase Opcodes.INT_TO_SHORT:return cast(insn,ArgType.INT,ArgType.SHORT);\ncase Opcodes.INT_TO_FLOAT:return cast(insn,ArgType.INT,ArgType.FLOAT);\ncase Opcodes.INT_TO_DOUBLE:return cast(insn,ArgType.INT,ArgType.DOUBLE);\ncase Opcodes.INT_TO_LONG:return cast(insn,ArgType.INT,ArgType.LONG);\ncase Opcodes.FLOAT_TO_INT:return cast(insn,ArgType.FLOAT,ArgType.INT);\ncase Opcodes.FLOAT_TO_DOUBLE:return cast(insn,ArgType.FLOAT,ArgType.DOUBLE);\ncase Opcodes.FLOAT_TO_LONG:return cast(insn,ArgType.FLOAT,ArgType.LONG);\ncase Opcodes.DOUBLE_TO_INT:return cast(insn,ArgType.DOUBLE,ArgType.INT);\ncase Opcodes.DOUBLE_TO_FLOAT:return cast(insn,ArgType.DOUBLE,ArgType.FLOAT);\ncase Opcodes.DOUBLE_TO_LONG:return cast(insn,ArgType.DOUBLE,ArgType.LONG);\ncase Opcodes.LONG_TO_INT:return cast(insn,ArgType.LONG,ArgType.INT);\ncase Opcodes.LONG_TO_FLOAT:return cast(insn,ArgType.LONG,ArgType.FLOAT);\ncase Opcodes.LONG_TO_DOUBLE:return cast(insn,ArgType.LONG,ArgType.DOUBLE);\ncase Opcodes.IF_EQ:case Opcodes.IF_EQZ:return new IfNode(insn,IfOp.EQ);\ncase Opcodes.IF_NE:case Opcodes.IF_NEZ:return new IfNode(insn,IfOp.NE);\ncase Opcodes.IF_GT:case Opcodes.IF_GTZ:return new IfNode(insn,IfOp.GT);\ncase Opcodes.IF_GE:case Opcodes.IF_GEZ:return new IfNode(insn,IfOp.GE);\ncase Opcodes.IF_LT:case Opcodes.IF_LTZ:return new IfNode(insn,IfOp.LT);\ncase Opcodes.IF_LE:case Opcodes.IF_LEZ:return new IfNode(insn,IfOp.LE);\ncase Opcodes.CMP_LONG:return cmp(insn,InsnType.CMP_L,ArgType.LONG);\ncase Opcodes.CMPL_FLOAT:return cmp(insn,InsnType.CMP_L,ArgType.FLOAT);\ncase Opcodes.CMPL_DOUBLE:return cmp(insn,InsnType.CMP_L,ArgType.DOUBLE);\ncase Opcodes.CMPG_FLOAT:return cmp(insn,InsnType.CMP_G,ArgType.FLOAT);\ncase Opcodes.CMPG_DOUBLE:return cmp(insn,InsnType.CMP_G,ArgType.DOUBLE);\ncase Opcodes.GOTO:case Opcodes.GOTO_16:case Opcodes.GOTO_32:return new GotoNode(insn.getTarget());\ncase Opcodes.THROW:return insn(InsnType.THROW,null,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.MOVE_EXCEPTION:return insn(InsnType.MOVE_EXCEPTION,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.RETURN_VOID:return new InsnNode(InsnType.RETURN,0);\ncase Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:return insn(InsnType.RETURN,null,InsnArg.reg(insn,0,method.getReturnType()));\ncase Opcodes.INSTANCE_OF:InsnNode instInsn=new IndexInsnNode(InsnType.INSTANCE_OF,dex.getType(insn.getIndex()),1);\ninstInsn.setResult(InsnArg.reg(insn,0,ArgType.BOOLEAN));\ninstInsn.addArg(InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\nreturn instInsn;\ncase Opcodes.CHECK_CAST:ArgType castType=dex.getType(insn.getIndex());\nInsnNode checkCastInsn=new IndexInsnNode(InsnType.CHECK_CAST,castType,1);\ncheckCastInsn.setResult(InsnArg.reg(insn,0,castType));\ncheckCastInsn.addArg(InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\nreturn checkCastInsn;\ncase Opcodes.IGET:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:FieldInfo igetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1);\nigetInsn.setResult(InsnArg.reg(insn,0,igetFld.getType()));\nigetInsn.addArg(InsnArg.reg(insn,1,igetFld.getDeclClass().getType()));\nreturn igetInsn;\ncase Opcodes.IPUT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:FieldInfo iputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode iputInsn=new IndexInsnNode(InsnType.IPUT,iputFld,2);\niputInsn.addArg(InsnArg.reg(insn,0,iputFld.getType()));\niputInsn.addArg(InsnArg.reg(insn,1,iputFld.getDeclClass().getType()));\nreturn iputInsn;\ncase Opcodes.SGET:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:FieldInfo sgetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sgetInsn=new IndexInsnNode(InsnType.SGET,sgetFld,0);\nsgetInsn.setResult(InsnArg.reg(insn,0,sgetFld.getType()));\nreturn sgetInsn;\ncase Opcodes.SPUT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:FieldInfo sputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sputInsn=new IndexInsnNode(InsnType.SPUT,sputFld,1);\nsputInsn.addArg(InsnArg.reg(insn,0,sputFld.getType()));\nreturn sputInsn;\ncase Opcodes.ARRAY_LENGTH:InsnNode arrLenInsn=new InsnNode(InsnType.ARRAY_LENGTH,1);\narrLenInsn.setResult(InsnArg.reg(insn,0,ArgType.INT));\narrLenInsn.addArg(InsnArg.reg(insn,1,ArgType.array(ArgType.UNKNOWN)));\nreturn arrLenInsn;\ncase Opcodes.AGET:return arrayGet(insn,ArgType.NARROW);\ncase Opcodes.AGET_BOOLEAN:return arrayGet(insn,ArgType.BOOLEAN);\ncase Opcodes.AGET_BYTE:return arrayGet(insn,ArgType.BYTE);\ncase Opcodes.AGET_CHAR:return arrayGet(insn,ArgType.CHAR);\ncase Opcodes.AGET_SHORT:return arrayGet(insn,ArgType.SHORT);\ncase Opcodes.AGET_WIDE:return arrayGet(insn,ArgType.WIDE);\ncase Opcodes.AGET_OBJECT:return arrayGet(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.APUT:return arrayPut(insn,ArgType.NARROW);\ncase Opcodes.APUT_BOOLEAN:return arrayPut(insn,ArgType.BOOLEAN);\ncase Opcodes.APUT_BYTE:return arrayPut(insn,ArgType.BYTE);\ncase Opcodes.APUT_CHAR:return arrayPut(insn,ArgType.CHAR);\ncase Opcodes.APUT_SHORT:return arrayPut(insn,ArgType.SHORT);\ncase Opcodes.APUT_WIDE:return arrayPut(insn,ArgType.WIDE);\ncase Opcodes.APUT_OBJECT:return arrayPut(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.INVOKE_STATIC:return invoke(insn,offset,InvokeType.STATIC,false);\ncase Opcodes.INVOKE_STATIC_RANGE:return invoke(insn,offset,InvokeType.STATIC,true);\ncase Opcodes.INVOKE_DIRECT:return invoke(insn,offset,InvokeType.DIRECT,false);\ncase Opcodes.INVOKE_INTERFACE:return invoke(insn,offset,InvokeType.INTERFACE,false);\ncase Opcodes.INVOKE_SUPER:return invoke(insn,offset,InvokeType.SUPER,false);\ncase Opcodes.INVOKE_VIRTUAL:return invoke(insn,offset,InvokeType.VIRTUAL,false);\ncase Opcodes.INVOKE_DIRECT_RANGE:return invoke(insn,offset,InvokeType.DIRECT,true);\ncase Opcodes.INVOKE_INTERFACE_RANGE:return invoke(insn,offset,InvokeType.INTERFACE,true);\ncase Opcodes.INVOKE_SUPER_RANGE:return invoke(insn,offset,InvokeType.SUPER,true);\ncase Opcodes.INVOKE_VIRTUAL_RANGE:return invoke(insn,offset,InvokeType.VIRTUAL,true);\ncase Opcodes.NEW_INSTANCE:return insn(InsnType.NEW_INSTANCE,InsnArg.reg(insn,0,dex.getType(insn.getIndex())));\ncase Opcodes.NEW_ARRAY:ArgType arrType=dex.getType(insn.getIndex());\nreturn new NewArrayNode(arrType,InsnArg.reg(insn,0,arrType),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.FILL_ARRAY_DATA:return fillArray(insn);\ncase Opcodes.FILLED_NEW_ARRAY:return filledNewArray(insn,offset,false);\ncase Opcodes.FILLED_NEW_ARRAY_RANGE:return filledNewArray(insn,offset,true);\ncase Opcodes.PACKED_SWITCH:return decodeSwitch(insn,offset,true);\ncase Opcodes.SPARSE_SWITCH:return decodeSwitch(insn,offset,false);\ncase Opcodes.MONITOR_ENTER:return insn(InsnType.MONITOR_ENTER,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.MONITOR_EXIT:return insn(InsnType.MONITOR_EXIT,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ndefault:throw new DecodeException(\"Unknown instruction: '\" + OpcodeInfo.getName(insn.getOpcode()) + '\\'');\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 2497,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 15649,
        "startLineNumber" : 86,
        "startColumnNumber" : 85,
        "endLineNumber" : 583,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getOpcode()) {\ncase Opcodes.NOP:case Opcodes.PACKED_SWITCH_PAYLOAD:case Opcodes.SPARSE_SWITCH_PAYLOAD:case Opcodes.FILL_ARRAY_DATA_PAYLOAD:    return new InsnNode(InsnType.NOP,0);\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:  return new InsnNode(InsnType.NOP,0);\ncase Opcodes.CONST:case Opcodes.CONST_4:case Opcodes.CONST_16:case Opcodes.CONST_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.lit(insn,ArgType.NARROW));\ncase Opcodes.CONST_WIDE:case Opcodes.CONST_WIDE_16:case Opcodes.CONST_WIDE_32:case Opcodes.CONST_WIDE_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.lit(insn,ArgType.WIDE));\ncase Opcodes.CONST_STRING:case Opcodes.CONST_STRING_JUMBO:InsnNode constStrInsn=new ConstStringNode(dex.getString(insn.getIndex()));\nconstStrInsn.setResult(InsnArg.reg(insn,0,ArgType.STRING));\nreturn constStrInsn;\ncase Opcodes.CONST_CLASS:InsnNode constClsInsn=new ConstClassNode(dex.getType(insn.getIndex()));\nconstClsInsn.setResult(InsnArg.reg(insn,0,ArgType.CLASS));\nreturn constClsInsn;\ncase Opcodes.MOVE:case Opcodes.MOVE_16:case Opcodes.MOVE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.reg(insn,1,ArgType.NARROW));\ncase Opcodes.MOVE_WIDE:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_WIDE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.reg(insn,1,ArgType.WIDE));\ncase Opcodes.MOVE_OBJECT:case Opcodes.MOVE_OBJECT_16:case Opcodes.MOVE_OBJECT_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT),InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.ADD_INT:case Opcodes.ADD_INT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.ADD_DOUBLE:case Opcodes.ADD_DOUBLE_2ADDR:return arith(insn,ArithOp.ADD,ArgType.DOUBLE);\ncase Opcodes.ADD_FLOAT:case Opcodes.ADD_FLOAT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.FLOAT);\ncase Opcodes.ADD_LONG:case Opcodes.ADD_LONG_2ADDR:return arith(insn,ArithOp.ADD,ArgType.LONG);\ncase Opcodes.ADD_INT_LIT8:case Opcodes.ADD_INT_LIT16:return arithLit(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.SUB_INT:case Opcodes.SUB_INT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.INT);\ncase Opcodes.RSUB_INT_LIT8:case Opcodes.RSUB_INT:return new ArithNode(ArithOp.SUB,InsnArg.reg(insn,0,ArgType.INT),InsnArg.lit(insn,ArgType.INT),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.SUB_LONG:case Opcodes.SUB_LONG_2ADDR:return arith(insn,ArithOp.SUB,ArgType.LONG);\ncase Opcodes.SUB_FLOAT:case Opcodes.SUB_FLOAT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.FLOAT);\ncase Opcodes.SUB_DOUBLE:case Opcodes.SUB_DOUBLE_2ADDR:return arith(insn,ArithOp.SUB,ArgType.DOUBLE);\ncase Opcodes.MUL_INT:case Opcodes.MUL_INT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.MUL_DOUBLE:case Opcodes.MUL_DOUBLE_2ADDR:return arith(insn,ArithOp.MUL,ArgType.DOUBLE);\ncase Opcodes.MUL_FLOAT:case Opcodes.MUL_FLOAT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.FLOAT);\ncase Opcodes.MUL_LONG:case Opcodes.MUL_LONG_2ADDR:return arith(insn,ArithOp.MUL,ArgType.LONG);\ncase Opcodes.MUL_INT_LIT8:case Opcodes.MUL_INT_LIT16:return arithLit(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.DIV_INT:case Opcodes.DIV_INT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT:case Opcodes.REM_INT_2ADDR:return arith(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.REM_LONG:case Opcodes.REM_LONG_2ADDR:return arith(insn,ArithOp.REM,ArgType.LONG);\ncase Opcodes.REM_FLOAT:case Opcodes.REM_FLOAT_2ADDR:return arith(insn,ArithOp.REM,ArgType.FLOAT);\ncase Opcodes.REM_DOUBLE:case Opcodes.REM_DOUBLE_2ADDR:return arith(insn,ArithOp.REM,ArgType.DOUBLE);\ncase Opcodes.DIV_DOUBLE:case Opcodes.DIV_DOUBLE_2ADDR:return arith(insn,ArithOp.DIV,ArgType.DOUBLE);\ncase Opcodes.DIV_FLOAT:case Opcodes.DIV_FLOAT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.FLOAT);\ncase Opcodes.DIV_LONG:case Opcodes.DIV_LONG_2ADDR:return arith(insn,ArithOp.DIV,ArgType.LONG);\ncase Opcodes.DIV_INT_LIT8:case Opcodes.DIV_INT_LIT16:return arithLit(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT_LIT8:case Opcodes.REM_INT_LIT16:return arithLit(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.AND_INT:case Opcodes.AND_INT_2ADDR:return arith(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.AND_INT_LIT8:case Opcodes.AND_INT_LIT16:return arithLit(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.XOR_INT_LIT8:case Opcodes.XOR_INT_LIT16:return arithLit(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.AND_LONG:case Opcodes.AND_LONG_2ADDR:return arith(insn,ArithOp.AND,ArgType.LONG);\ncase Opcodes.OR_INT:case Opcodes.OR_INT_2ADDR:return arith(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.OR_INT_LIT8:case Opcodes.OR_INT_LIT16:return arithLit(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.XOR_INT:case Opcodes.XOR_INT_2ADDR:return arith(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.OR_LONG:case Opcodes.OR_LONG_2ADDR:return arith(insn,ArithOp.OR,ArgType.LONG);\ncase Opcodes.XOR_LONG:case Opcodes.XOR_LONG_2ADDR:return arith(insn,ArithOp.XOR,ArgType.LONG);\ncase Opcodes.USHR_INT:case Opcodes.USHR_INT_2ADDR:return arith(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.USHR_LONG:case Opcodes.USHR_LONG_2ADDR:return arith(insn,ArithOp.USHR,ArgType.LONG);\ncase Opcodes.SHL_INT:case Opcodes.SHL_INT_2ADDR:return arith(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHL_LONG:case Opcodes.SHL_LONG_2ADDR:return arith(insn,ArithOp.SHL,ArgType.LONG);\ncase Opcodes.SHR_INT:case Opcodes.SHR_INT_2ADDR:return arith(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.SHR_LONG:case Opcodes.SHR_LONG_2ADDR:return arith(insn,ArithOp.SHR,ArgType.LONG);\ncase Opcodes.SHL_INT_LIT8:return arithLit(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHR_INT_LIT8:return arithLit(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.USHR_INT_LIT8:return arithLit(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.NEG_INT:return neg(insn,ArgType.INT);\ncase Opcodes.NEG_LONG:return neg(insn,ArgType.LONG);\ncase Opcodes.NEG_FLOAT:return neg(insn,ArgType.FLOAT);\ncase Opcodes.NEG_DOUBLE:return neg(insn,ArgType.DOUBLE);\ncase Opcodes.NOT_INT:return not(insn,ArgType.INT);\ncase Opcodes.NOT_LONG:return not(insn,ArgType.LONG);\ncase Opcodes.INT_TO_BYTE:return cast(insn,ArgType.INT,ArgType.BYTE);\ncase Opcodes.INT_TO_CHAR:return cast(insn,ArgType.INT,ArgType.CHAR);\ncase Opcodes.INT_TO_SHORT:return cast(insn,ArgType.INT,ArgType.SHORT);\ncase Opcodes.INT_TO_FLOAT:return cast(insn,ArgType.INT,ArgType.FLOAT);\ncase Opcodes.INT_TO_DOUBLE:return cast(insn,ArgType.INT,ArgType.DOUBLE);\ncase Opcodes.INT_TO_LONG:return cast(insn,ArgType.INT,ArgType.LONG);\ncase Opcodes.FLOAT_TO_INT:return cast(insn,ArgType.FLOAT,ArgType.INT);\ncase Opcodes.FLOAT_TO_DOUBLE:return cast(insn,ArgType.FLOAT,ArgType.DOUBLE);\ncase Opcodes.FLOAT_TO_LONG:return cast(insn,ArgType.FLOAT,ArgType.LONG);\ncase Opcodes.DOUBLE_TO_INT:return cast(insn,ArgType.DOUBLE,ArgType.INT);\ncase Opcodes.DOUBLE_TO_FLOAT:return cast(insn,ArgType.DOUBLE,ArgType.FLOAT);\ncase Opcodes.DOUBLE_TO_LONG:return cast(insn,ArgType.DOUBLE,ArgType.LONG);\ncase Opcodes.LONG_TO_INT:return cast(insn,ArgType.LONG,ArgType.INT);\ncase Opcodes.LONG_TO_FLOAT:return cast(insn,ArgType.LONG,ArgType.FLOAT);\ncase Opcodes.LONG_TO_DOUBLE:return cast(insn,ArgType.LONG,ArgType.DOUBLE);\ncase Opcodes.IF_EQ:case Opcodes.IF_EQZ:return new IfNode(insn,IfOp.EQ);\ncase Opcodes.IF_NE:case Opcodes.IF_NEZ:return new IfNode(insn,IfOp.NE);\ncase Opcodes.IF_GT:case Opcodes.IF_GTZ:return new IfNode(insn,IfOp.GT);\ncase Opcodes.IF_GE:case Opcodes.IF_GEZ:return new IfNode(insn,IfOp.GE);\ncase Opcodes.IF_LT:case Opcodes.IF_LTZ:return new IfNode(insn,IfOp.LT);\ncase Opcodes.IF_LE:case Opcodes.IF_LEZ:return new IfNode(insn,IfOp.LE);\ncase Opcodes.CMP_LONG:return cmp(insn,InsnType.CMP_L,ArgType.LONG);\ncase Opcodes.CMPL_FLOAT:return cmp(insn,InsnType.CMP_L,ArgType.FLOAT);\ncase Opcodes.CMPL_DOUBLE:return cmp(insn,InsnType.CMP_L,ArgType.DOUBLE);\ncase Opcodes.CMPG_FLOAT:return cmp(insn,InsnType.CMP_G,ArgType.FLOAT);\ncase Opcodes.CMPG_DOUBLE:return cmp(insn,InsnType.CMP_G,ArgType.DOUBLE);\ncase Opcodes.GOTO:case Opcodes.GOTO_16:case Opcodes.GOTO_32:return new GotoNode(insn.getTarget());\ncase Opcodes.THROW:return insn(InsnType.THROW,null,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.MOVE_EXCEPTION:return insn(InsnType.MOVE_EXCEPTION,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.RETURN_VOID:return new InsnNode(InsnType.RETURN,0);\ncase Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:return insn(InsnType.RETURN,null,InsnArg.reg(insn,0,method.getReturnType()));\ncase Opcodes.INSTANCE_OF:InsnNode instInsn=new IndexInsnNode(InsnType.INSTANCE_OF,dex.getType(insn.getIndex()),1);\ninstInsn.setResult(InsnArg.reg(insn,0,ArgType.BOOLEAN));\ninstInsn.addArg(InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\nreturn instInsn;\ncase Opcodes.CHECK_CAST:ArgType castType=dex.getType(insn.getIndex());\nInsnNode checkCastInsn=new IndexInsnNode(InsnType.CHECK_CAST,castType,1);\ncheckCastInsn.setResult(InsnArg.reg(insn,0,castType));\ncheckCastInsn.addArg(InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\nreturn checkCastInsn;\ncase Opcodes.IGET:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:FieldInfo igetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1);\nigetInsn.setResult(InsnArg.reg(insn,0,igetFld.getType()));\nigetInsn.addArg(InsnArg.reg(insn,1,igetFld.getDeclClass().getType()));\nreturn igetInsn;\ncase Opcodes.IPUT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:FieldInfo iputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode iputInsn=new IndexInsnNode(InsnType.IPUT,iputFld,2);\niputInsn.addArg(InsnArg.reg(insn,0,iputFld.getType()));\niputInsn.addArg(InsnArg.reg(insn,1,iputFld.getDeclClass().getType()));\nreturn iputInsn;\ncase Opcodes.SGET:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:FieldInfo sgetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sgetInsn=new IndexInsnNode(InsnType.SGET,sgetFld,0);\nsgetInsn.setResult(InsnArg.reg(insn,0,sgetFld.getType()));\nreturn sgetInsn;\ncase Opcodes.SPUT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:FieldInfo sputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sputInsn=new IndexInsnNode(InsnType.SPUT,sputFld,1);\nsputInsn.addArg(InsnArg.reg(insn,0,sputFld.getType()));\nreturn sputInsn;\ncase Opcodes.ARRAY_LENGTH:InsnNode arrLenInsn=new InsnNode(InsnType.ARRAY_LENGTH,1);\narrLenInsn.setResult(InsnArg.reg(insn,0,ArgType.INT));\narrLenInsn.addArg(InsnArg.reg(insn,1,ArgType.array(ArgType.UNKNOWN)));\nreturn arrLenInsn;\ncase Opcodes.AGET:return arrayGet(insn,ArgType.NARROW);\ncase Opcodes.AGET_BOOLEAN:return arrayGet(insn,ArgType.BOOLEAN);\ncase Opcodes.AGET_BYTE:return arrayGet(insn,ArgType.BYTE);\ncase Opcodes.AGET_CHAR:return arrayGet(insn,ArgType.CHAR);\ncase Opcodes.AGET_SHORT:return arrayGet(insn,ArgType.SHORT);\ncase Opcodes.AGET_WIDE:return arrayGet(insn,ArgType.WIDE);\ncase Opcodes.AGET_OBJECT:return arrayGet(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.APUT:return arrayPut(insn,ArgType.NARROW);\ncase Opcodes.APUT_BOOLEAN:return arrayPut(insn,ArgType.BOOLEAN);\ncase Opcodes.APUT_BYTE:return arrayPut(insn,ArgType.BYTE);\ncase Opcodes.APUT_CHAR:return arrayPut(insn,ArgType.CHAR);\ncase Opcodes.APUT_SHORT:return arrayPut(insn,ArgType.SHORT);\ncase Opcodes.APUT_WIDE:return arrayPut(insn,ArgType.WIDE);\ncase Opcodes.APUT_OBJECT:return arrayPut(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.INVOKE_STATIC:return invoke(insn,offset,InvokeType.STATIC,false);\ncase Opcodes.INVOKE_STATIC_RANGE:return invoke(insn,offset,InvokeType.STATIC,true);\ncase Opcodes.INVOKE_DIRECT:return invoke(insn,offset,InvokeType.DIRECT,false);\ncase Opcodes.INVOKE_INTERFACE:return invoke(insn,offset,InvokeType.INTERFACE,false);\ncase Opcodes.INVOKE_SUPER:return invoke(insn,offset,InvokeType.SUPER,false);\ncase Opcodes.INVOKE_VIRTUAL:return invoke(insn,offset,InvokeType.VIRTUAL,false);\ncase Opcodes.INVOKE_DIRECT_RANGE:return invoke(insn,offset,InvokeType.DIRECT,true);\ncase Opcodes.INVOKE_INTERFACE_RANGE:return invoke(insn,offset,InvokeType.INTERFACE,true);\ncase Opcodes.INVOKE_SUPER_RANGE:return invoke(insn,offset,InvokeType.SUPER,true);\ncase Opcodes.INVOKE_VIRTUAL_RANGE:return invoke(insn,offset,InvokeType.VIRTUAL,true);\ncase Opcodes.NEW_INSTANCE:return insn(InsnType.NEW_INSTANCE,InsnArg.reg(insn,0,dex.getType(insn.getIndex())));\ncase Opcodes.NEW_ARRAY:ArgType arrType=dex.getType(insn.getIndex());\nreturn new NewArrayNode(arrType,InsnArg.reg(insn,0,arrType),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.FILL_ARRAY_DATA:return fillArray(insn);\ncase Opcodes.FILLED_NEW_ARRAY:return filledNewArray(insn,offset,false);\ncase Opcodes.FILLED_NEW_ARRAY_RANGE:return filledNewArray(insn,offset,true);\ncase Opcodes.PACKED_SWITCH:return decodeSwitch(insn,offset,true);\ncase Opcodes.SPARSE_SWITCH:return decodeSwitch(insn,offset,false);\ncase Opcodes.MONITOR_ENTER:return insn(InsnType.MONITOR_ENTER,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.MONITOR_EXIT:return insn(InsnType.MONITOR_EXIT,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ndefault:throw new DecodeException(\"Unknown instruction: '\" + OpcodeInfo.getName(insn.getOpcode()) + '\\'');\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2498,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 15743,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 583,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@NotNull private InsnNode decode(DecodedInstruction insn,int offset) throws DecodeException {\nswitch (insn.getOpcode()) {\ncase Opcodes.NOP:case Opcodes.PACKED_SWITCH_PAYLOAD:case Opcodes.SPARSE_SWITCH_PAYLOAD:case Opcodes.FILL_ARRAY_DATA_PAYLOAD:    return new InsnNode(InsnType.NOP,0);\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:  return new InsnNode(InsnType.NOP,0);\ncase Opcodes.CONST:case Opcodes.CONST_4:case Opcodes.CONST_16:case Opcodes.CONST_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.lit(insn,ArgType.NARROW));\ncase Opcodes.CONST_WIDE:case Opcodes.CONST_WIDE_16:case Opcodes.CONST_WIDE_32:case Opcodes.CONST_WIDE_HIGH16:return insn(InsnType.CONST,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.lit(insn,ArgType.WIDE));\ncase Opcodes.CONST_STRING:case Opcodes.CONST_STRING_JUMBO:InsnNode constStrInsn=new ConstStringNode(dex.getString(insn.getIndex()));\nconstStrInsn.setResult(InsnArg.reg(insn,0,ArgType.STRING));\nreturn constStrInsn;\ncase Opcodes.CONST_CLASS:InsnNode constClsInsn=new ConstClassNode(dex.getType(insn.getIndex()));\nconstClsInsn.setResult(InsnArg.reg(insn,0,ArgType.CLASS));\nreturn constClsInsn;\ncase Opcodes.MOVE:case Opcodes.MOVE_16:case Opcodes.MOVE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.NARROW),InsnArg.reg(insn,1,ArgType.NARROW));\ncase Opcodes.MOVE_WIDE:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_WIDE_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.WIDE),InsnArg.reg(insn,1,ArgType.WIDE));\ncase Opcodes.MOVE_OBJECT:case Opcodes.MOVE_OBJECT_16:case Opcodes.MOVE_OBJECT_FROM16:return insn(InsnType.MOVE,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT),InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.ADD_INT:case Opcodes.ADD_INT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.ADD_DOUBLE:case Opcodes.ADD_DOUBLE_2ADDR:return arith(insn,ArithOp.ADD,ArgType.DOUBLE);\ncase Opcodes.ADD_FLOAT:case Opcodes.ADD_FLOAT_2ADDR:return arith(insn,ArithOp.ADD,ArgType.FLOAT);\ncase Opcodes.ADD_LONG:case Opcodes.ADD_LONG_2ADDR:return arith(insn,ArithOp.ADD,ArgType.LONG);\ncase Opcodes.ADD_INT_LIT8:case Opcodes.ADD_INT_LIT16:return arithLit(insn,ArithOp.ADD,ArgType.INT);\ncase Opcodes.SUB_INT:case Opcodes.SUB_INT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.INT);\ncase Opcodes.RSUB_INT_LIT8:case Opcodes.RSUB_INT:return new ArithNode(ArithOp.SUB,InsnArg.reg(insn,0,ArgType.INT),InsnArg.lit(insn,ArgType.INT),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.SUB_LONG:case Opcodes.SUB_LONG_2ADDR:return arith(insn,ArithOp.SUB,ArgType.LONG);\ncase Opcodes.SUB_FLOAT:case Opcodes.SUB_FLOAT_2ADDR:return arith(insn,ArithOp.SUB,ArgType.FLOAT);\ncase Opcodes.SUB_DOUBLE:case Opcodes.SUB_DOUBLE_2ADDR:return arith(insn,ArithOp.SUB,ArgType.DOUBLE);\ncase Opcodes.MUL_INT:case Opcodes.MUL_INT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.MUL_DOUBLE:case Opcodes.MUL_DOUBLE_2ADDR:return arith(insn,ArithOp.MUL,ArgType.DOUBLE);\ncase Opcodes.MUL_FLOAT:case Opcodes.MUL_FLOAT_2ADDR:return arith(insn,ArithOp.MUL,ArgType.FLOAT);\ncase Opcodes.MUL_LONG:case Opcodes.MUL_LONG_2ADDR:return arith(insn,ArithOp.MUL,ArgType.LONG);\ncase Opcodes.MUL_INT_LIT8:case Opcodes.MUL_INT_LIT16:return arithLit(insn,ArithOp.MUL,ArgType.INT);\ncase Opcodes.DIV_INT:case Opcodes.DIV_INT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT:case Opcodes.REM_INT_2ADDR:return arith(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.REM_LONG:case Opcodes.REM_LONG_2ADDR:return arith(insn,ArithOp.REM,ArgType.LONG);\ncase Opcodes.REM_FLOAT:case Opcodes.REM_FLOAT_2ADDR:return arith(insn,ArithOp.REM,ArgType.FLOAT);\ncase Opcodes.REM_DOUBLE:case Opcodes.REM_DOUBLE_2ADDR:return arith(insn,ArithOp.REM,ArgType.DOUBLE);\ncase Opcodes.DIV_DOUBLE:case Opcodes.DIV_DOUBLE_2ADDR:return arith(insn,ArithOp.DIV,ArgType.DOUBLE);\ncase Opcodes.DIV_FLOAT:case Opcodes.DIV_FLOAT_2ADDR:return arith(insn,ArithOp.DIV,ArgType.FLOAT);\ncase Opcodes.DIV_LONG:case Opcodes.DIV_LONG_2ADDR:return arith(insn,ArithOp.DIV,ArgType.LONG);\ncase Opcodes.DIV_INT_LIT8:case Opcodes.DIV_INT_LIT16:return arithLit(insn,ArithOp.DIV,ArgType.INT);\ncase Opcodes.REM_INT_LIT8:case Opcodes.REM_INT_LIT16:return arithLit(insn,ArithOp.REM,ArgType.INT);\ncase Opcodes.AND_INT:case Opcodes.AND_INT_2ADDR:return arith(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.AND_INT_LIT8:case Opcodes.AND_INT_LIT16:return arithLit(insn,ArithOp.AND,ArgType.INT);\ncase Opcodes.XOR_INT_LIT8:case Opcodes.XOR_INT_LIT16:return arithLit(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.AND_LONG:case Opcodes.AND_LONG_2ADDR:return arith(insn,ArithOp.AND,ArgType.LONG);\ncase Opcodes.OR_INT:case Opcodes.OR_INT_2ADDR:return arith(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.OR_INT_LIT8:case Opcodes.OR_INT_LIT16:return arithLit(insn,ArithOp.OR,ArgType.INT);\ncase Opcodes.XOR_INT:case Opcodes.XOR_INT_2ADDR:return arith(insn,ArithOp.XOR,ArgType.INT);\ncase Opcodes.OR_LONG:case Opcodes.OR_LONG_2ADDR:return arith(insn,ArithOp.OR,ArgType.LONG);\ncase Opcodes.XOR_LONG:case Opcodes.XOR_LONG_2ADDR:return arith(insn,ArithOp.XOR,ArgType.LONG);\ncase Opcodes.USHR_INT:case Opcodes.USHR_INT_2ADDR:return arith(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.USHR_LONG:case Opcodes.USHR_LONG_2ADDR:return arith(insn,ArithOp.USHR,ArgType.LONG);\ncase Opcodes.SHL_INT:case Opcodes.SHL_INT_2ADDR:return arith(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHL_LONG:case Opcodes.SHL_LONG_2ADDR:return arith(insn,ArithOp.SHL,ArgType.LONG);\ncase Opcodes.SHR_INT:case Opcodes.SHR_INT_2ADDR:return arith(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.SHR_LONG:case Opcodes.SHR_LONG_2ADDR:return arith(insn,ArithOp.SHR,ArgType.LONG);\ncase Opcodes.SHL_INT_LIT8:return arithLit(insn,ArithOp.SHL,ArgType.INT);\ncase Opcodes.SHR_INT_LIT8:return arithLit(insn,ArithOp.SHR,ArgType.INT);\ncase Opcodes.USHR_INT_LIT8:return arithLit(insn,ArithOp.USHR,ArgType.INT);\ncase Opcodes.NEG_INT:return neg(insn,ArgType.INT);\ncase Opcodes.NEG_LONG:return neg(insn,ArgType.LONG);\ncase Opcodes.NEG_FLOAT:return neg(insn,ArgType.FLOAT);\ncase Opcodes.NEG_DOUBLE:return neg(insn,ArgType.DOUBLE);\ncase Opcodes.NOT_INT:return not(insn,ArgType.INT);\ncase Opcodes.NOT_LONG:return not(insn,ArgType.LONG);\ncase Opcodes.INT_TO_BYTE:return cast(insn,ArgType.INT,ArgType.BYTE);\ncase Opcodes.INT_TO_CHAR:return cast(insn,ArgType.INT,ArgType.CHAR);\ncase Opcodes.INT_TO_SHORT:return cast(insn,ArgType.INT,ArgType.SHORT);\ncase Opcodes.INT_TO_FLOAT:return cast(insn,ArgType.INT,ArgType.FLOAT);\ncase Opcodes.INT_TO_DOUBLE:return cast(insn,ArgType.INT,ArgType.DOUBLE);\ncase Opcodes.INT_TO_LONG:return cast(insn,ArgType.INT,ArgType.LONG);\ncase Opcodes.FLOAT_TO_INT:return cast(insn,ArgType.FLOAT,ArgType.INT);\ncase Opcodes.FLOAT_TO_DOUBLE:return cast(insn,ArgType.FLOAT,ArgType.DOUBLE);\ncase Opcodes.FLOAT_TO_LONG:return cast(insn,ArgType.FLOAT,ArgType.LONG);\ncase Opcodes.DOUBLE_TO_INT:return cast(insn,ArgType.DOUBLE,ArgType.INT);\ncase Opcodes.DOUBLE_TO_FLOAT:return cast(insn,ArgType.DOUBLE,ArgType.FLOAT);\ncase Opcodes.DOUBLE_TO_LONG:return cast(insn,ArgType.DOUBLE,ArgType.LONG);\ncase Opcodes.LONG_TO_INT:return cast(insn,ArgType.LONG,ArgType.INT);\ncase Opcodes.LONG_TO_FLOAT:return cast(insn,ArgType.LONG,ArgType.FLOAT);\ncase Opcodes.LONG_TO_DOUBLE:return cast(insn,ArgType.LONG,ArgType.DOUBLE);\ncase Opcodes.IF_EQ:case Opcodes.IF_EQZ:return new IfNode(insn,IfOp.EQ);\ncase Opcodes.IF_NE:case Opcodes.IF_NEZ:return new IfNode(insn,IfOp.NE);\ncase Opcodes.IF_GT:case Opcodes.IF_GTZ:return new IfNode(insn,IfOp.GT);\ncase Opcodes.IF_GE:case Opcodes.IF_GEZ:return new IfNode(insn,IfOp.GE);\ncase Opcodes.IF_LT:case Opcodes.IF_LTZ:return new IfNode(insn,IfOp.LT);\ncase Opcodes.IF_LE:case Opcodes.IF_LEZ:return new IfNode(insn,IfOp.LE);\ncase Opcodes.CMP_LONG:return cmp(insn,InsnType.CMP_L,ArgType.LONG);\ncase Opcodes.CMPL_FLOAT:return cmp(insn,InsnType.CMP_L,ArgType.FLOAT);\ncase Opcodes.CMPL_DOUBLE:return cmp(insn,InsnType.CMP_L,ArgType.DOUBLE);\ncase Opcodes.CMPG_FLOAT:return cmp(insn,InsnType.CMP_G,ArgType.FLOAT);\ncase Opcodes.CMPG_DOUBLE:return cmp(insn,InsnType.CMP_G,ArgType.DOUBLE);\ncase Opcodes.GOTO:case Opcodes.GOTO_16:case Opcodes.GOTO_32:return new GotoNode(insn.getTarget());\ncase Opcodes.THROW:return insn(InsnType.THROW,null,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.MOVE_EXCEPTION:return insn(InsnType.MOVE_EXCEPTION,InsnArg.reg(insn,0,ArgType.unknown(PrimitiveType.OBJECT)));\ncase Opcodes.RETURN_VOID:return new InsnNode(InsnType.RETURN,0);\ncase Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:return insn(InsnType.RETURN,null,InsnArg.reg(insn,0,method.getReturnType()));\ncase Opcodes.INSTANCE_OF:InsnNode instInsn=new IndexInsnNode(InsnType.INSTANCE_OF,dex.getType(insn.getIndex()),1);\ninstInsn.setResult(InsnArg.reg(insn,0,ArgType.BOOLEAN));\ninstInsn.addArg(InsnArg.reg(insn,1,ArgType.UNKNOWN_OBJECT));\nreturn instInsn;\ncase Opcodes.CHECK_CAST:ArgType castType=dex.getType(insn.getIndex());\nInsnNode checkCastInsn=new IndexInsnNode(InsnType.CHECK_CAST,castType,1);\ncheckCastInsn.setResult(InsnArg.reg(insn,0,castType));\ncheckCastInsn.addArg(InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\nreturn checkCastInsn;\ncase Opcodes.IGET:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:FieldInfo igetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1);\nigetInsn.setResult(InsnArg.reg(insn,0,igetFld.getType()));\nigetInsn.addArg(InsnArg.reg(insn,1,igetFld.getDeclClass().getType()));\nreturn igetInsn;\ncase Opcodes.IPUT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:FieldInfo iputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode iputInsn=new IndexInsnNode(InsnType.IPUT,iputFld,2);\niputInsn.addArg(InsnArg.reg(insn,0,iputFld.getType()));\niputInsn.addArg(InsnArg.reg(insn,1,iputFld.getDeclClass().getType()));\nreturn iputInsn;\ncase Opcodes.SGET:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:FieldInfo sgetFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sgetInsn=new IndexInsnNode(InsnType.SGET,sgetFld,0);\nsgetInsn.setResult(InsnArg.reg(insn,0,sgetFld.getType()));\nreturn sgetInsn;\ncase Opcodes.SPUT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:FieldInfo sputFld=FieldInfo.fromDex(dex,insn.getIndex());\nInsnNode sputInsn=new IndexInsnNode(InsnType.SPUT,sputFld,1);\nsputInsn.addArg(InsnArg.reg(insn,0,sputFld.getType()));\nreturn sputInsn;\ncase Opcodes.ARRAY_LENGTH:InsnNode arrLenInsn=new InsnNode(InsnType.ARRAY_LENGTH,1);\narrLenInsn.setResult(InsnArg.reg(insn,0,ArgType.INT));\narrLenInsn.addArg(InsnArg.reg(insn,1,ArgType.array(ArgType.UNKNOWN)));\nreturn arrLenInsn;\ncase Opcodes.AGET:return arrayGet(insn,ArgType.NARROW);\ncase Opcodes.AGET_BOOLEAN:return arrayGet(insn,ArgType.BOOLEAN);\ncase Opcodes.AGET_BYTE:return arrayGet(insn,ArgType.BYTE);\ncase Opcodes.AGET_CHAR:return arrayGet(insn,ArgType.CHAR);\ncase Opcodes.AGET_SHORT:return arrayGet(insn,ArgType.SHORT);\ncase Opcodes.AGET_WIDE:return arrayGet(insn,ArgType.WIDE);\ncase Opcodes.AGET_OBJECT:return arrayGet(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.APUT:return arrayPut(insn,ArgType.NARROW);\ncase Opcodes.APUT_BOOLEAN:return arrayPut(insn,ArgType.BOOLEAN);\ncase Opcodes.APUT_BYTE:return arrayPut(insn,ArgType.BYTE);\ncase Opcodes.APUT_CHAR:return arrayPut(insn,ArgType.CHAR);\ncase Opcodes.APUT_SHORT:return arrayPut(insn,ArgType.SHORT);\ncase Opcodes.APUT_WIDE:return arrayPut(insn,ArgType.WIDE);\ncase Opcodes.APUT_OBJECT:return arrayPut(insn,ArgType.UNKNOWN_OBJECT);\ncase Opcodes.INVOKE_STATIC:return invoke(insn,offset,InvokeType.STATIC,false);\ncase Opcodes.INVOKE_STATIC_RANGE:return invoke(insn,offset,InvokeType.STATIC,true);\ncase Opcodes.INVOKE_DIRECT:return invoke(insn,offset,InvokeType.DIRECT,false);\ncase Opcodes.INVOKE_INTERFACE:return invoke(insn,offset,InvokeType.INTERFACE,false);\ncase Opcodes.INVOKE_SUPER:return invoke(insn,offset,InvokeType.SUPER,false);\ncase Opcodes.INVOKE_VIRTUAL:return invoke(insn,offset,InvokeType.VIRTUAL,false);\ncase Opcodes.INVOKE_DIRECT_RANGE:return invoke(insn,offset,InvokeType.DIRECT,true);\ncase Opcodes.INVOKE_INTERFACE_RANGE:return invoke(insn,offset,InvokeType.INTERFACE,true);\ncase Opcodes.INVOKE_SUPER_RANGE:return invoke(insn,offset,InvokeType.SUPER,true);\ncase Opcodes.INVOKE_VIRTUAL_RANGE:return invoke(insn,offset,InvokeType.VIRTUAL,true);\ncase Opcodes.NEW_INSTANCE:return insn(InsnType.NEW_INSTANCE,InsnArg.reg(insn,0,dex.getType(insn.getIndex())));\ncase Opcodes.NEW_ARRAY:ArgType arrType=dex.getType(insn.getIndex());\nreturn new NewArrayNode(arrType,InsnArg.reg(insn,0,arrType),InsnArg.reg(insn,1,ArgType.INT));\ncase Opcodes.FILL_ARRAY_DATA:return fillArray(insn);\ncase Opcodes.FILLED_NEW_ARRAY:return filledNewArray(insn,offset,false);\ncase Opcodes.FILLED_NEW_ARRAY_RANGE:return filledNewArray(insn,offset,true);\ncase Opcodes.PACKED_SWITCH:return decodeSwitch(insn,offset,true);\ncase Opcodes.SPARSE_SWITCH:return decodeSwitch(insn,offset,false);\ncase Opcodes.MONITOR_ENTER:return insn(InsnType.MONITOR_ENTER,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ncase Opcodes.MONITOR_EXIT:return insn(InsnType.MONITOR_EXIT,null,InsnArg.reg(insn,0,ArgType.UNKNOWN_OBJECT));\ndefault:throw new DecodeException(\"Unknown instruction: '\" + OpcodeInfo.getName(insn.getOpcode()) + '\\'');\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2514,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 444,
        "endColumnNumber" : 69
      },
      "nodeContext" : "InsnNode igetInsn=new IndexInsnNode(InsnType.IGET,igetFld,1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "jadx.core.dex.instructions.IndexInsnNode"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 444,
    "startColumnNumber" : 24,
    "endLineNumber" : 444,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}