{
  "id" : 178,
  "expression" : "float.class",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/NumberCodec.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "float.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 118,
      "startColumnNumber" : 25,
      "endLineNumber" : 118,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 36
      },
      "nodeContext" : "clazz == float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 61
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clazz == float.class || clazz == Float.class) {\n  String val=lexer.numberString();\n  lexer.nextToken(JSONToken.COMMA);\n  return (T)Float.valueOf(Float.parseFloat(val));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1096,
        "startLineNumber" : 111,
        "startColumnNumber" : 44,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (clazz == double.class || clazz == Double.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Double.valueOf(Double.parseDouble(val));\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Float.valueOf(Float.parseFloat(val));\n  }\n  long val=lexer.longValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)Short.valueOf((short)val);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)Byte.valueOf((byte)val);\n  }\n  if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n    return (T)Integer.valueOf((int)val);\n  }\n  return (T)Long.valueOf(val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token == JSONToken.LITERAL_INT) {\n  if (clazz == double.class || clazz == Double.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Double.valueOf(Double.parseDouble(val));\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Float.valueOf(Float.parseFloat(val));\n  }\n  long val=lexer.longValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)Short.valueOf((short)val);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)Byte.valueOf((byte)val);\n  }\n  if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n    return (T)Integer.valueOf((int)val);\n  }\n  return (T)Long.valueOf(val);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 108,
        "startColumnNumber" : 84,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 461,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 118,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 61
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Float>"
  }, {
    "nodeContext" : "float.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 148,
      "startColumnNumber" : 25,
      "endLineNumber" : 148,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 36
      },
      "nodeContext" : "clazz == float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 60
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clazz == float.class || clazz == Float.class) {\n  String val=lexer.numberString();\n  lexer.nextToken(JSONToken.COMMA);\n  return (T)Float.valueOf(Float.parseFloat(val));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 141,
        "startColumnNumber" : 46,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (clazz == double.class || clazz == Double.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Double.valueOf(Double.parseDouble(val));\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Float.valueOf(Float.parseFloat(val));\n  }\n  BigDecimal val=lexer.decimalValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)Short.valueOf(val.shortValue());\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)Byte.valueOf(val.byteValue());\n  }\n  return (T)val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 981,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token == JSONToken.LITERAL_FLOAT) {\n  if (clazz == double.class || clazz == Double.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Double.valueOf(Double.parseDouble(val));\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    String val=lexer.numberString();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)Float.valueOf(Float.parseFloat(val));\n  }\n  BigDecimal val=lexer.decimalValue();\n  lexer.nextToken(JSONToken.COMMA);\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)Short.valueOf(val.shortValue());\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)Byte.valueOf(val.byteValue());\n  }\n  return (T)val;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 108,
        "startColumnNumber" : 84,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 461,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 60
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Float>"
  }, {
    "nodeContext" : "float.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 178,
      "startColumnNumber" : 21,
      "endLineNumber" : 178,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 178,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 32
      },
      "nodeContext" : "clazz == float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 178,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 180,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (clazz == float.class || clazz == Float.class) {\n  return (T)TypeUtils.castToFloat(value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 108,
        "startColumnNumber" : 84,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.LITERAL_INT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    long val=lexer.longValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf((short)val);\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf((byte)val);\n    }\n    if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n      return (T)Integer.valueOf((int)val);\n    }\n    return (T)Long.valueOf(val);\n  }\n  if (token == JSONToken.LITERAL_FLOAT) {\n    if (clazz == double.class || clazz == Double.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Double.valueOf(Double.parseDouble(val));\n    }\n    if (clazz == float.class || clazz == Float.class) {\n      String val=lexer.numberString();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)Float.valueOf(Float.parseFloat(val));\n    }\n    BigDecimal val=lexer.decimalValue();\n    lexer.nextToken(JSONToken.COMMA);\n    if (clazz == short.class || clazz == Short.class) {\n      return (T)Short.valueOf(val.shortValue());\n    }\n    if (clazz == byte.class || clazz == Byte.class) {\n      return (T)Byte.valueOf(val.byteValue());\n    }\n    return (T)val;\n  }\n  Object value=parser.parse();\n  if (value == null) {\n    return null;\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)TypeUtils.castToDouble(value);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)TypeUtils.castToFloat(value);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)TypeUtils.castToShort(value);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)TypeUtils.castToByte(value);\n  }\n  return (T)TypeUtils.castToBigDecimal(value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 461,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 178,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clazz == float.class || clazz == Float.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Float>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 118,
    "startColumnNumber" : 25,
    "endLineNumber" : 118,
    "endColumnNumber" : 36
  }, {
    "charLength" : 11,
    "startLineNumber" : 148,
    "startColumnNumber" : 25,
    "endLineNumber" : 148,
    "endColumnNumber" : 36
  }, {
    "charLength" : 11,
    "startLineNumber" : 178,
    "startColumnNumber" : 21,
    "endLineNumber" : 178,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}