{
  "id" : 454,
  "expression" : "inOrder",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableBufferTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 8,
      "endLineNumber" : 80,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 86
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 87
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 87
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  }, {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 81,
      "startColumnNumber" : 8,
      "endLineNumber" : 81,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 87
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  }, {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 82,
      "startColumnNumber" : 8,
      "endLineNumber" : 82,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  }, {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 83,
      "startColumnNumber" : 8,
      "endLineNumber" : 83,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 49
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 89
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 90
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 90
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  }, {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 84,
      "startColumnNumber" : 8,
      "endLineNumber" : 84,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 49
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 87
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  }, {
    "nodeContext" : "inOrder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 85,
      "startColumnNumber" : 8,
      "endLineNumber" : 85,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 49
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 62
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onComplete()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onComplete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipAndCountOverlappingBuffers(){\n  Flowable<String> source=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      observer.onNext(\"one\");\n      observer.onNext(\"two\");\n      observer.onNext(\"three\");\n      observer.onNext(\"four\");\n      observer.onNext(\"five\");\n    }\n  }\n);\n  Flowable<List<String>> buffered=source.buffer(3,1);\n  buffered.subscribe(observer);\n  InOrder inOrder=Mockito.inOrder(observer);\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"one\",\"two\",\"three\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"two\",\"three\",\"four\"));\n  inOrder.verify(observer,Mockito.times(1)).onNext(list(\"three\",\"four\",\"five\"));\n  inOrder.verify(observer,Mockito.never()).onNext(Mockito.anyListOf(String.class));\n  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));\n  inOrder.verify(observer,Mockito.never()).onComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "inOrder.verify(observer,Mockito.never()).onComplete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.InOrder"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 8,
    "endLineNumber" : 80,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 81,
    "startColumnNumber" : 8,
    "endLineNumber" : 81,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 82,
    "startColumnNumber" : 8,
    "endLineNumber" : 82,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 83,
    "startColumnNumber" : 8,
    "endLineNumber" : 83,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 84,
    "startColumnNumber" : 8,
    "endLineNumber" : 84,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 85,
    "startColumnNumber" : 8,
    "endLineNumber" : 85,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}