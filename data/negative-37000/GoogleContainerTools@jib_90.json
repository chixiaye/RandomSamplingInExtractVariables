{
  "id" : 90,
  "expression" : "mockHttpResponse",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/http/ConnectionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mockHttpResponse",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 127,
      "startColumnNumber" : 55,
      "endLineNumber" : 127,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 105,
        "startColumnNumber" : 74,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void setUpMocksAndFakes(Integer httpTimeout) throws IOException {\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.http.HttpResponse"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 127,
    "startColumnNumber" : 55,
    "endLineNumber" : 127,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}