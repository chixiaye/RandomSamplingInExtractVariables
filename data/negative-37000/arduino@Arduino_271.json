{
  "id" : 271,
  "expression" : "10",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/helpers/StringReplacer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 35,
      "startColumnNumber" : 24,
      "endLineNumber" : 35,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 35,
        "startColumnNumber" : 20,
        "endLineNumber" : 35,
        "endColumnNumber" : 26
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < 10; i++) {\n  res=StringReplacer.replaceFromMapping(src,dict);\n  if (!recursive)   break;\n  if (res.equals(src))   break;\n  src=res;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 31,
        "startColumnNumber" : 76,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String res;\n  for (int i=0; i < 10; i++) {\n    res=StringReplacer.replaceFromMapping(src,dict);\n    if (!recursive)     break;\n    if (res.equals(src))     break;\n    src=res;\n  }\n  return quotedSplit(src,\"\\\"'\",false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String[] formatAndSplit(String src,Map<String,String> dict,boolean recursive) throws Exception {\n  String res;\n  for (int i=0; i < 10; i++) {\n    res=StringReplacer.replaceFromMapping(src,dict);\n    if (!recursive)     break;\n    if (res.equals(src))     break;\n    src=res;\n  }\n  return quotedSplit(src,\"\\\"'\",false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 35,
        "startColumnNumber" : 20,
        "endLineNumber" : 35,
        "endColumnNumber" : 26
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 35,
    "startColumnNumber" : 24,
    "endLineNumber" : 35,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}