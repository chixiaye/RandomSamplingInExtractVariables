{
  "id" : 362,
  "expression" : "(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentLineSegmentIntersection.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 61,
      "startColumnNumber" : 32,
      "endLineNumber" : 61,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 17,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 13,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 61,
    "startColumnNumber" : 32,
    "endLineNumber" : 61,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}