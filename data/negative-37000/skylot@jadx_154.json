{
  "id" : 154,
  "expression" : "list1",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-samples/src/main/java/jadx/samples/TestCF3.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "list1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 225,
      "startColumnNumber" : 32,
      "endLineNumber" : 225,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 225,
        "startColumnNumber" : 15,
        "endLineNumber" : 225,
        "endColumnNumber" : 38
      },
      "nodeContext" : "testReturnInLoop(list1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 225,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(testReturnInLoop(list1),\"a\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 225,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(testReturnInLoop(list1),\"a\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 211,
        "startColumnNumber" : 43,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  setEnabled(false);\n  testSwitchInLoop();\n  assertTrue(enabled);\n  setEnabled(false);\n  testIfInLoop();\n  assertTrue(enabled);\n  assertTrue(testNestedLoops(new ArrayList<>(Arrays.asList(\"a1\",\"a2\")),new ArrayList<>(Arrays.asList(\"a1\",\"b2\"))));\n  List<String> list1=Arrays.asList(null,\"a\",\"b\");\n  assertEquals(testReturnInLoop(list1),\"a\");\n  assertEquals(testReturnInLoop2(list1),\"a\");\n  assertEquals(testComplexIfInLoop(false),0);\n  assertEquals(testComplexIfInLoop(true),10);\n  assertEquals(testComplexIfInLoop2(2),2);\n  assertEquals(testComplexIfInLoop2(6),10);\n  assertEquals(testComplexIfInLoop3(2),2);\n  assertEquals(testComplexIfInLoop3(6),6);\n  assertEquals(testComplexIfInLoop3(8),24);\n  assertEquals(testLoops(new int[]{1,2,3,4,5,6},2),19);\n  assertTrue(testInline() > 20);\n  assertTrue(testInline2());\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1222,
        "startLineNumber" : 210,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public boolean testRun() throws Exception {\n  setEnabled(false);\n  testSwitchInLoop();\n  assertTrue(enabled);\n  setEnabled(false);\n  testIfInLoop();\n  assertTrue(enabled);\n  assertTrue(testNestedLoops(new ArrayList<>(Arrays.asList(\"a1\",\"a2\")),new ArrayList<>(Arrays.asList(\"a1\",\"b2\"))));\n  List<String> list1=Arrays.asList(null,\"a\",\"b\");\n  assertEquals(testReturnInLoop(list1),\"a\");\n  assertEquals(testReturnInLoop2(list1),\"a\");\n  assertEquals(testComplexIfInLoop(false),0);\n  assertEquals(testComplexIfInLoop(true),10);\n  assertEquals(testComplexIfInLoop2(2),2);\n  assertEquals(testComplexIfInLoop2(6),10);\n  assertEquals(testComplexIfInLoop3(2),2);\n  assertEquals(testComplexIfInLoop3(6),6);\n  assertEquals(testComplexIfInLoop3(8),24);\n  assertEquals(testLoops(new int[]{1,2,3,4,5,6},2),19);\n  assertTrue(testInline() > 20);\n  assertTrue(testInline2());\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 225,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(testReturnInLoop(list1),\"a\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "list1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 226,
      "startColumnNumber" : 33,
      "endLineNumber" : 226,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 226,
        "startColumnNumber" : 15,
        "endLineNumber" : 226,
        "endColumnNumber" : 39
      },
      "nodeContext" : "testReturnInLoop2(list1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(testReturnInLoop2(list1),\"a\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(testReturnInLoop2(list1),\"a\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 211,
        "startColumnNumber" : 43,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  setEnabled(false);\n  testSwitchInLoop();\n  assertTrue(enabled);\n  setEnabled(false);\n  testIfInLoop();\n  assertTrue(enabled);\n  assertTrue(testNestedLoops(new ArrayList<>(Arrays.asList(\"a1\",\"a2\")),new ArrayList<>(Arrays.asList(\"a1\",\"b2\"))));\n  List<String> list1=Arrays.asList(null,\"a\",\"b\");\n  assertEquals(testReturnInLoop(list1),\"a\");\n  assertEquals(testReturnInLoop2(list1),\"a\");\n  assertEquals(testComplexIfInLoop(false),0);\n  assertEquals(testComplexIfInLoop(true),10);\n  assertEquals(testComplexIfInLoop2(2),2);\n  assertEquals(testComplexIfInLoop2(6),10);\n  assertEquals(testComplexIfInLoop3(2),2);\n  assertEquals(testComplexIfInLoop3(6),6);\n  assertEquals(testComplexIfInLoop3(8),24);\n  assertEquals(testLoops(new int[]{1,2,3,4,5,6},2),19);\n  assertTrue(testInline() > 20);\n  assertTrue(testInline2());\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1222,
        "startLineNumber" : 210,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public boolean testRun() throws Exception {\n  setEnabled(false);\n  testSwitchInLoop();\n  assertTrue(enabled);\n  setEnabled(false);\n  testIfInLoop();\n  assertTrue(enabled);\n  assertTrue(testNestedLoops(new ArrayList<>(Arrays.asList(\"a1\",\"a2\")),new ArrayList<>(Arrays.asList(\"a1\",\"b2\"))));\n  List<String> list1=Arrays.asList(null,\"a\",\"b\");\n  assertEquals(testReturnInLoop(list1),\"a\");\n  assertEquals(testReturnInLoop2(list1),\"a\");\n  assertEquals(testComplexIfInLoop(false),0);\n  assertEquals(testComplexIfInLoop(true),10);\n  assertEquals(testComplexIfInLoop2(2),2);\n  assertEquals(testComplexIfInLoop2(6),10);\n  assertEquals(testComplexIfInLoop3(2),2);\n  assertEquals(testComplexIfInLoop3(6),6);\n  assertEquals(testComplexIfInLoop3(8),24);\n  assertEquals(testLoops(new int[]{1,2,3,4,5,6},2),19);\n  assertTrue(testInline() > 20);\n  assertTrue(testInline2());\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(testReturnInLoop2(list1),\"a\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 225,
    "startColumnNumber" : 32,
    "endLineNumber" : 225,
    "endColumnNumber" : 37
  }, {
    "charLength" : 5,
    "startLineNumber" : 226,
    "startColumnNumber" : 33,
    "endLineNumber" : 226,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}