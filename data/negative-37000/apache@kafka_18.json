{
  "id" : 18,
  "expression" : "\"num-entries-active-mem-table\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"num-entries-active-mem-table\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 866,
      "startColumnNumber" : 12,
      "endLineNumber" : 866,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 865,
        "startColumnNumber" : 68,
        "endLineNumber" : 870,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 865,
        "startColumnNumber" : 53,
        "endLineNumber" : 870,
        "endColumnNumber" : 10
      },
      "nodeContext" : "metrics.metric(new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 865,
        "startColumnNumber" : 21,
        "endLineNumber" : 870,
        "endColumnNumber" : 10
      },
      "nodeContext" : "numberOfEntriesActiveMemTable=metrics.metric(new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME)))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 865,
        "startColumnNumber" : 8,
        "endLineNumber" : 870,
        "endColumnNumber" : 11
      },
      "nodeContext" : "final Metric numberOfEntriesActiveMemTable=metrics.metric(new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1708,
        "startLineNumber" : 843,
        "startColumnNumber" : 90,
        "endLineNumber" : 873,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TaskId taskId=new TaskId(0,0);\n  final Metrics metrics=new Metrics(new MetricConfig().recordLevel(RecordingLevel.INFO));\n  final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(metrics,\"test-application\",StreamsConfig.METRICS_LATEST,time);\n  context=EasyMock.niceMock(InternalMockProcessorContext.class);\n  EasyMock.expect(context.metrics()).andStubReturn(streamsMetrics);\n  EasyMock.expect(context.taskId()).andStubReturn(taskId);\n  EasyMock.expect(context.appConfigs()).andStubReturn(new StreamsConfig(StreamsTestUtils.getStreamsConfig()).originals());\n  EasyMock.expect(context.stateDir()).andStubReturn(dir);\n  final MonotonicProcessorRecordContext processorRecordContext=new MonotonicProcessorRecordContext(\"test\",0);\n  EasyMock.expect(context.recordMetadata()).andStubReturn(Optional.of(processorRecordContext));\n  EasyMock.replay(context);\n  rocksDBStore.init((StateStoreContext)context,rocksDBStore);\n  final byte[] key=\"hello\".getBytes();\n  final byte[] value=\"world\".getBytes();\n  rocksDBStore.put(Bytes.wrap(key),value);\n  final Metric numberOfEntriesActiveMemTable=metrics.metric(new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME)));\n  assertThat(numberOfEntriesActiveMemTable,notNullValue());\n  assertThat((BigInteger)numberOfEntriesActiveMemTable.metricValue(),greaterThan(BigInteger.valueOf(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1804,
        "startLineNumber" : 842,
        "startColumnNumber" : 4,
        "endLineNumber" : 873,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldVerifyThatMetricsRecordedFromPropertiesGetMeasurementsFromRocksDB(){\n  final TaskId taskId=new TaskId(0,0);\n  final Metrics metrics=new Metrics(new MetricConfig().recordLevel(RecordingLevel.INFO));\n  final StreamsMetricsImpl streamsMetrics=new StreamsMetricsImpl(metrics,\"test-application\",StreamsConfig.METRICS_LATEST,time);\n  context=EasyMock.niceMock(InternalMockProcessorContext.class);\n  EasyMock.expect(context.metrics()).andStubReturn(streamsMetrics);\n  EasyMock.expect(context.taskId()).andStubReturn(taskId);\n  EasyMock.expect(context.appConfigs()).andStubReturn(new StreamsConfig(StreamsTestUtils.getStreamsConfig()).originals());\n  EasyMock.expect(context.stateDir()).andStubReturn(dir);\n  final MonotonicProcessorRecordContext processorRecordContext=new MonotonicProcessorRecordContext(\"test\",0);\n  EasyMock.expect(context.recordMetadata()).andStubReturn(Optional.of(processorRecordContext));\n  EasyMock.replay(context);\n  rocksDBStore.init((StateStoreContext)context,rocksDBStore);\n  final byte[] key=\"hello\".getBytes();\n  final byte[] value=\"world\".getBytes();\n  rocksDBStore.put(Bytes.wrap(key),value);\n  final Metric numberOfEntriesActiveMemTable=metrics.metric(new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME)));\n  assertThat(numberOfEntriesActiveMemTable,notNullValue());\n  assertThat((BigInteger)numberOfEntriesActiveMemTable.metricValue(),greaterThan(BigInteger.valueOf(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 865,
        "startColumnNumber" : 68,
        "endLineNumber" : 870,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new MetricName(\"num-entries-active-mem-table\",StreamsMetricsImpl.STATE_STORE_LEVEL_GROUP,\"description is not verified\",streamsMetrics.storeLevelTagMap(taskId.toString(),METRICS_SCOPE,DB_NAME))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 866,
    "startColumnNumber" : 12,
    "endLineNumber" : 866,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}