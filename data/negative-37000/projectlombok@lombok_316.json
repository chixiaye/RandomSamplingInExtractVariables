{
  "id" : 316,
  "expression" : "(JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleVal.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 91,
      "startLineNumber" : 103,
      "startColumnNumber" : 13,
      "endLineNumber" : 103,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 105
      },
      "nodeContext" : "((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 110
      },
      "nodeContext" : "((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 103,
        "startColumnNumber" : 5,
        "endLineNumber" : 103,
        "endColumnNumber" : 110
      },
      "nodeContext" : "type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 103,
        "startColumnNumber" : 5,
        "endLineNumber" : 103,
        "endColumnNumber" : 111
      },
      "nodeContext" : "type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 101,
        "startColumnNumber" : 43,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JavacResolution resolver=new JavacResolution(localNode.getContext());\n  type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rhsOfEnhancedForLoop.type == null) {\n  JavacResolution resolver=new JavacResolution(localNode.getContext());\n  type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n}\n else {\n  type=rhsOfEnhancedForLoop.type;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 107,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (rhsOfEnhancedForLoop.type == null) {\n    JavacResolution resolver=new JavacResolution(localNode.getContext());\n    type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n  }\n else {\n    type=rhsOfEnhancedForLoop.type;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 595,
        "startLineNumber" : 93,
        "startColumnNumber" : 3,
        "endLineNumber" : 107,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (rhsOfEnhancedForLoop == null) {\n  if (local.init.type == null) {\n    JavacResolution resolver=new JavacResolution(localNode.getContext());\n    type=((JCExpression)resolver.resolveMethodMember(localNode).get(local.init)).type;\n  }\n else {\n    type=local.init.type;\n  }\n}\n else {\n  if (rhsOfEnhancedForLoop.type == null) {\n    JavacResolution resolver=new JavacResolution(localNode.getContext());\n    type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n  }\n else {\n    type=rhsOfEnhancedForLoop.type;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (rhsOfEnhancedForLoop == null) {\n    if (local.init.type == null) {\n      JavacResolution resolver=new JavacResolution(localNode.getContext());\n      type=((JCExpression)resolver.resolveMethodMember(localNode).get(local.init)).type;\n    }\n else {\n      type=local.init.type;\n    }\n  }\n else {\n    if (rhsOfEnhancedForLoop.type == null) {\n      JavacResolution resolver=new JavacResolution(localNode.getContext());\n      type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n    }\n else {\n      type=rhsOfEnhancedForLoop.type;\n    }\n  }\n  try {\n    JCExpression replacement;\n    if (rhsOfEnhancedForLoop != null) {\n      Type componentType=JavacResolution.ifTypeIsIterableToComponent(type,localNode.getAst());\n      if (componentType == null)       replacement=JavacResolution.createJavaLangObject(localNode.getAst());\n else       replacement=JavacResolution.typeToJCTree(componentType,localNode.getAst(),false);\n    }\n else {\n      replacement=JavacResolution.typeToJCTree(type,localNode.getAst(),false);\n    }\n    if (replacement != null) {\n      local.vartype=replacement;\n    }\n else {\n      local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    }\n    localNode.getAst().setChanged();\n  }\n catch (  JavacResolution.TypeNotConvertibleException e) {\n    localNode.addError(\"Cannot use 'val' here because initializer expression does not have a representable type: \" + e.getMessage());\n    local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1764,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (rhsOfEnhancedForLoop == null) {\n    if (local.init.type == null) {\n      JavacResolution resolver=new JavacResolution(localNode.getContext());\n      type=((JCExpression)resolver.resolveMethodMember(localNode).get(local.init)).type;\n    }\n else {\n      type=local.init.type;\n    }\n  }\n else {\n    if (rhsOfEnhancedForLoop.type == null) {\n      JavacResolution resolver=new JavacResolution(localNode.getContext());\n      type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n    }\n else {\n      type=rhsOfEnhancedForLoop.type;\n    }\n  }\n  try {\n    JCExpression replacement;\n    if (rhsOfEnhancedForLoop != null) {\n      Type componentType=JavacResolution.ifTypeIsIterableToComponent(type,localNode.getAst());\n      if (componentType == null)       replacement=JavacResolution.createJavaLangObject(localNode.getAst());\n else       replacement=JavacResolution.typeToJCTree(componentType,localNode.getAst(),false);\n    }\n else {\n      replacement=JavacResolution.typeToJCTree(type,localNode.getAst(),false);\n    }\n    if (replacement != null) {\n      local.vartype=replacement;\n    }\n else {\n      local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    }\n    localNode.getAst().setChanged();\n  }\n catch (  JavacResolution.TypeNotConvertibleException e) {\n    localNode.addError(\"Cannot use 'val' here because initializer expression does not have a representable type: \" + e.getMessage());\n    local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n  }\n}\n catch (RuntimeException e) {\n  local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n  throw e;\n}\n finally {\n  recursiveSetGeneratedBy(local.vartype,source);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 242,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3447,
        "startLineNumber" : 49,
        "startColumnNumber" : 77,
        "endLineNumber" : 136,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (local.vartype == null || (!local.vartype.toString().equals(\"val\") && !local.vartype.toString().equals(\"lombok.val\")))   return;\n  JCTree source=local.vartype;\n  if (!typeMatches(val.class,localNode,local.vartype))   return;\n  JCTree parentRaw=localNode.directUp().get();\n  if (parentRaw instanceof JCForLoop) {\n    localNode.addError(\"'val' is not allowed in old-style for loops\");\n    return;\n  }\n  JCExpression rhsOfEnhancedForLoop=null;\n  if (local.init == null) {\n    if (parentRaw instanceof JCEnhancedForLoop) {\n      JCEnhancedForLoop efl=(JCEnhancedForLoop)parentRaw;\n      if (efl.var == local)       rhsOfEnhancedForLoop=efl.expr;\n    }\n  }\n  if (rhsOfEnhancedForLoop == null && local.init == null) {\n    localNode.addError(\"'val' on a local variable requires an initializer expression\");\n    return;\n  }\n  if (local.init instanceof JCNewArray && ((JCNewArray)local.init).elemtype == null) {\n    localNode.addError(\"'val' is not compatible with array initializer expressions. Use the full form (new int[] { ... } instead of just { ... })\");\n    return;\n  }\n  if (localNode.shouldDeleteLombokAnnotations())   JavacHandlerUtil.deleteImportFromCompilationUnit(localNode,\"lombok.val\");\n  local.mods.flags|=Flags.FINAL;\n  if (!localNode.shouldDeleteLombokAnnotations()) {\n    JCAnnotation valAnnotation=recursiveSetGeneratedBy(localNode.getTreeMaker().Annotation(local.vartype,List.<JCExpression>nil()),source);\n    local.mods.annotations=local.mods.annotations == null ? List.of(valAnnotation) : local.mods.annotations.append(valAnnotation);\n  }\n  local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n  Type type;\n  try {\n    if (rhsOfEnhancedForLoop == null) {\n      if (local.init.type == null) {\n        JavacResolution resolver=new JavacResolution(localNode.getContext());\n        type=((JCExpression)resolver.resolveMethodMember(localNode).get(local.init)).type;\n      }\n else {\n        type=local.init.type;\n      }\n    }\n else {\n      if (rhsOfEnhancedForLoop.type == null) {\n        JavacResolution resolver=new JavacResolution(localNode.getContext());\n        type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n      }\n else {\n        type=rhsOfEnhancedForLoop.type;\n      }\n    }\n    try {\n      JCExpression replacement;\n      if (rhsOfEnhancedForLoop != null) {\n        Type componentType=JavacResolution.ifTypeIsIterableToComponent(type,localNode.getAst());\n        if (componentType == null)         replacement=JavacResolution.createJavaLangObject(localNode.getAst());\n else         replacement=JavacResolution.typeToJCTree(componentType,localNode.getAst(),false);\n      }\n else {\n        replacement=JavacResolution.typeToJCTree(type,localNode.getAst(),false);\n      }\n      if (replacement != null) {\n        local.vartype=replacement;\n      }\n else {\n        local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n      }\n      localNode.getAst().setChanged();\n    }\n catch (    JavacResolution.TypeNotConvertibleException e) {\n      localNode.addError(\"Cannot use 'val' here because initializer expression does not have a representable type: \" + e.getMessage());\n      local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    }\n  }\n catch (  RuntimeException e) {\n    local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    throw e;\n  }\n finally {\n    recursiveSetGeneratedBy(local.vartype,source);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 486,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 49,
        "startColumnNumber" : 1,
        "endLineNumber" : 136,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void visitLocal(JavacNode localNode,JCVariableDecl local){\n  if (local.vartype == null || (!local.vartype.toString().equals(\"val\") && !local.vartype.toString().equals(\"lombok.val\")))   return;\n  JCTree source=local.vartype;\n  if (!typeMatches(val.class,localNode,local.vartype))   return;\n  JCTree parentRaw=localNode.directUp().get();\n  if (parentRaw instanceof JCForLoop) {\n    localNode.addError(\"'val' is not allowed in old-style for loops\");\n    return;\n  }\n  JCExpression rhsOfEnhancedForLoop=null;\n  if (local.init == null) {\n    if (parentRaw instanceof JCEnhancedForLoop) {\n      JCEnhancedForLoop efl=(JCEnhancedForLoop)parentRaw;\n      if (efl.var == local)       rhsOfEnhancedForLoop=efl.expr;\n    }\n  }\n  if (rhsOfEnhancedForLoop == null && local.init == null) {\n    localNode.addError(\"'val' on a local variable requires an initializer expression\");\n    return;\n  }\n  if (local.init instanceof JCNewArray && ((JCNewArray)local.init).elemtype == null) {\n    localNode.addError(\"'val' is not compatible with array initializer expressions. Use the full form (new int[] { ... } instead of just { ... })\");\n    return;\n  }\n  if (localNode.shouldDeleteLombokAnnotations())   JavacHandlerUtil.deleteImportFromCompilationUnit(localNode,\"lombok.val\");\n  local.mods.flags|=Flags.FINAL;\n  if (!localNode.shouldDeleteLombokAnnotations()) {\n    JCAnnotation valAnnotation=recursiveSetGeneratedBy(localNode.getTreeMaker().Annotation(local.vartype,List.<JCExpression>nil()),source);\n    local.mods.annotations=local.mods.annotations == null ? List.of(valAnnotation) : local.mods.annotations.append(valAnnotation);\n  }\n  local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n  Type type;\n  try {\n    if (rhsOfEnhancedForLoop == null) {\n      if (local.init.type == null) {\n        JavacResolution resolver=new JavacResolution(localNode.getContext());\n        type=((JCExpression)resolver.resolveMethodMember(localNode).get(local.init)).type;\n      }\n else {\n        type=local.init.type;\n      }\n    }\n else {\n      if (rhsOfEnhancedForLoop.type == null) {\n        JavacResolution resolver=new JavacResolution(localNode.getContext());\n        type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n      }\n else {\n        type=rhsOfEnhancedForLoop.type;\n      }\n    }\n    try {\n      JCExpression replacement;\n      if (rhsOfEnhancedForLoop != null) {\n        Type componentType=JavacResolution.ifTypeIsIterableToComponent(type,localNode.getAst());\n        if (componentType == null)         replacement=JavacResolution.createJavaLangObject(localNode.getAst());\n else         replacement=JavacResolution.typeToJCTree(componentType,localNode.getAst(),false);\n      }\n else {\n        replacement=JavacResolution.typeToJCTree(type,localNode.getAst(),false);\n      }\n      if (replacement != null) {\n        local.vartype=replacement;\n      }\n else {\n        local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n      }\n      localNode.getAst().setChanged();\n    }\n catch (    JavacResolution.TypeNotConvertibleException e) {\n      localNode.addError(\"Cannot use 'val' here because initializer expression does not have a representable type: \" + e.getMessage());\n      local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    }\n  }\n catch (  RuntimeException e) {\n    local.vartype=JavacResolution.createJavaLangObject(localNode.getAst());\n    throw e;\n  }\n finally {\n    recursiveSetGeneratedBy(local.vartype,source);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 103,
        "startColumnNumber" : 5,
        "endLineNumber" : 103,
        "endColumnNumber" : 111
      },
      "nodeContext" : "type=((JCExpression)resolver.resolveMethodMember(localNode.directUp()).get(rhsOfEnhancedForLoop)).type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 7,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 91,
    "startLineNumber" : 103,
    "startColumnNumber" : 13,
    "endLineNumber" : 103,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}