{
  "id" : 275,
  "expression" : "RUNNING_AND_PENDING",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RUNNING_AND_PENDING",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 179,
      "startColumnNumber" : 13,
      "endLineNumber" : 179,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 33
      },
      "nodeContext" : "case RUNNING_AND_PENDING:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 166,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (mJobState) {\ncase IDLE:  when=Math.max(mJobStartTime + mMinimumJobIntervalMs,now);\nshouldEnqueue=true;\nmJobSubmitTime=now;\nmJobState=JobState.QUEUED;\nbreak;\ncase QUEUED:break;\ncase RUNNING:mJobState=JobState.RUNNING_AND_PENDING;\nbreak;\ncase RUNNING_AND_PENDING:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 162,
        "startColumnNumber" : 24,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!shouldProcess(mEncodedImage,mStatus)) {\n    return false;\n  }\nswitch (mJobState) {\ncase IDLE:    when=Math.max(mJobStartTime + mMinimumJobIntervalMs,now);\n  shouldEnqueue=true;\nmJobSubmitTime=now;\nmJobState=JobState.QUEUED;\nbreak;\ncase QUEUED:break;\ncase RUNNING:mJobState=JobState.RUNNING_AND_PENDING;\nbreak;\ncase RUNNING_AND_PENDING:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (this) {\n  if (!shouldProcess(mEncodedImage,mStatus)) {\n    return false;\n  }\nswitch (mJobState) {\ncase IDLE:    when=Math.max(mJobStartTime + mMinimumJobIntervalMs,now);\n  shouldEnqueue=true;\nmJobSubmitTime=now;\nmJobState=JobState.QUEUED;\nbreak;\ncase QUEUED:break;\ncase RUNNING:mJobState=JobState.RUNNING_AND_PENDING;\nbreak;\ncase RUNNING_AND_PENDING:break;\n}\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 158,
        "startColumnNumber" : 31,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long now=SystemClock.uptimeMillis();\n  long when=0;\n  boolean shouldEnqueue=false;\nsynchronized (this) {\n    if (!shouldProcess(mEncodedImage,mStatus)) {\n      return false;\n    }\nswitch (mJobState) {\ncase IDLE:      when=Math.max(mJobStartTime + mMinimumJobIntervalMs,now);\n    shouldEnqueue=true;\n  mJobSubmitTime=now;\nmJobState=JobState.QUEUED;\nbreak;\ncase QUEUED:break;\ncase RUNNING:mJobState=JobState.RUNNING_AND_PENDING;\nbreak;\ncase RUNNING_AND_PENDING:break;\n}\n}\nif (shouldEnqueue) {\nenqueueJob(when - now);\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 146,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Schedules the currently set job (if any). <p>This method can be called multiple times. It is guaranteed that each job set will be executed no more than once. It is guaranteed that the last job set will be executed, unless the job was cleared first. <p>The job will be scheduled no sooner than <code>minimumJobIntervalMs</code> milliseconds since the last job started.\n * @return true if the job was scheduled, false if there was no valid job to be scheduled\n */\npublic boolean scheduleJob(){\n  long now=SystemClock.uptimeMillis();\n  long when=0;\n  boolean shouldEnqueue=false;\nsynchronized (this) {\n    if (!shouldProcess(mEncodedImage,mStatus)) {\n      return false;\n    }\nswitch (mJobState) {\ncase IDLE:      when=Math.max(mJobStartTime + mMinimumJobIntervalMs,now);\n    shouldEnqueue=true;\n  mJobSubmitTime=now;\nmJobState=JobState.QUEUED;\nbreak;\ncase QUEUED:break;\ncase RUNNING:mJobState=JobState.RUNNING_AND_PENDING;\nbreak;\ncase RUNNING_AND_PENDING:break;\n}\n}\nif (shouldEnqueue) {\nenqueueJob(when - now);\n}\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 33
      },
      "nodeContext" : "case RUNNING_AND_PENDING:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.facebook.imagepipeline.producers.JobScheduler.JobState"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 179,
    "startColumnNumber" : 13,
    "endLineNumber" : 179,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}