{
  "id" : 360,
  "expression" : "\"failed to connect web socket\"",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/devmode/GrpcDevConsoleRecorder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"failed to connect web socket\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 42,
      "startColumnNumber" : 34,
      "endLineNumber" : 42,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 42,
        "startColumnNumber" : 24,
        "endLineNumber" : 42,
        "endColumnNumber" : 84
      },
      "nodeContext" : "log.error(\"failed to connect web socket\",webSocket.cause())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 42,
        "startColumnNumber" : 24,
        "endLineNumber" : 42,
        "endColumnNumber" : 85
      },
      "nodeContext" : "log.error(\"failed to connect web socket\",webSocket.cause());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 41,
        "startColumnNumber" : 44,
        "endLineNumber" : 43,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  log.error(\"failed to connect web socket\",webSocket.cause());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1948,
        "startLineNumber" : 41,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (webSocket.failed()) {\n  log.error(\"failed to connect web socket\",webSocket.cause());\n}\n else {\n  ServerWebSocket serverWebSocket=webSocket.result();\n  Integer socketId=GrpcWebSocketProxy.addWebSocket(message -> serverWebSocket.writeTextMessage(message).onFailure(e -> log.info(\"failed to send back message to the gRPC Dev Console WebSocket\",e)),runnable -> {\n    if (!serverWebSocket.isClosed()) {\n      serverWebSocket.close(new Handler<AsyncResult<Void>>(){\n        @Override public void handle(        AsyncResult<Void> event){\n          runnable.run();\n        }\n      }\n);\n    }\n else {\n      runnable.run();\n    }\n  }\n);\n  if (socketId == null) {\n    log.error(\"No gRPC dev console WebSocketListener\");\n    serverWebSocket.close();\n    return;\n  }\n  serverWebSocket.closeHandler(ignored -> GrpcWebSocketProxy.closeWebSocket(socketId));\n  serverWebSocket.handler(new Handler<Buffer>(){\n    @Override public void handle(    Buffer event){\n      GrpcWebSocketProxy.addMessage(socketId,event.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 150,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1988,
        "startLineNumber" : 40,
        "startColumnNumber" : 59,
        "endLineNumber" : 75,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (webSocket.failed()) {\n    log.error(\"failed to connect web socket\",webSocket.cause());\n  }\n else {\n    ServerWebSocket serverWebSocket=webSocket.result();\n    Integer socketId=GrpcWebSocketProxy.addWebSocket(message -> serverWebSocket.writeTextMessage(message).onFailure(e -> log.info(\"failed to send back message to the gRPC Dev Console WebSocket\",e)),runnable -> {\n      if (!serverWebSocket.isClosed()) {\n        serverWebSocket.close(new Handler<AsyncResult<Void>>(){\n          @Override public void handle(          AsyncResult<Void> event){\n            runnable.run();\n          }\n        }\n);\n      }\n else {\n        runnable.run();\n      }\n    }\n);\n    if (socketId == null) {\n      log.error(\"No gRPC dev console WebSocketListener\");\n      serverWebSocket.close();\n      return;\n    }\n    serverWebSocket.closeHandler(ignored -> GrpcWebSocketProxy.closeWebSocket(socketId));\n    serverWebSocket.handler(new Handler<Buffer>(){\n      @Override public void handle(      Buffer event){\n        GrpcWebSocketProxy.addMessage(socketId,event.toString());\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2001,
        "startLineNumber" : 40,
        "startColumnNumber" : 46,
        "endLineNumber" : 75,
        "endColumnNumber" : 17
      },
      "nodeContext" : "webSocket -> {\n  if (webSocket.failed()) {\n    log.error(\"failed to connect web socket\",webSocket.cause());\n  }\n else {\n    ServerWebSocket serverWebSocket=webSocket.result();\n    Integer socketId=GrpcWebSocketProxy.addWebSocket(message -> serverWebSocket.writeTextMessage(message).onFailure(e -> log.info(\"failed to send back message to the gRPC Dev Console WebSocket\",e)),runnable -> {\n      if (!serverWebSocket.isClosed()) {\n        serverWebSocket.close(new Handler<AsyncResult<Void>>(){\n          @Override public void handle(          AsyncResult<Void> event){\n            runnable.run();\n          }\n        }\n);\n      }\n else {\n        runnable.run();\n      }\n    }\n);\n    if (socketId == null) {\n      log.error(\"No gRPC dev console WebSocketListener\");\n      serverWebSocket.close();\n      return;\n    }\n    serverWebSocket.closeHandler(ignored -> GrpcWebSocketProxy.closeWebSocket(socketId));\n    serverWebSocket.handler(new Handler<Buffer>(){\n      @Override public void handle(      Buffer event){\n        GrpcWebSocketProxy.addMessage(socketId,event.toString());\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 154,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 42,
        "startColumnNumber" : 24,
        "endLineNumber" : 42,
        "endColumnNumber" : 85
      },
      "nodeContext" : "log.error(\"failed to connect web socket\",webSocket.cause());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 42,
    "startColumnNumber" : 34,
    "endLineNumber" : 42,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}