{
  "id" : 44,
  "expression" : "json.getString(\"value\")",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/ByteArrayFieldTest_2.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "json.getString(\"value\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 18,
      "startColumnNumber" : 86,
      "endLineNumber" : 18,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 110
      },
      "nodeContext" : "Assert.assertEquals(TestUtils.encodeToBase64String(entity.getValue(),false),json.getString(\"value\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(TestUtils.encodeToBase64String(entity.getValue(),false),json.getString(\"value\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 22,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Entity entity=new Entity(\"中华人民共和国\");\n  String text=JSON.toJSONString(entity);\n  JSONObject json=JSON.parseObject(text);\n  Assert.assertEquals(TestUtils.encodeToBase64String(entity.getValue(),false),json.getString(\"value\"));\n  Entity entity2=JSON.parseObject(text,Entity.class);\n  Assert.assertEquals(\"中华人民共和国\",new String(entity2.getValue(),\"UTF-8\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 22,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  Entity entity=new Entity(\"中华人民共和国\");\n  String text=JSON.toJSONString(entity);\n  JSONObject json=JSON.parseObject(text);\n  Assert.assertEquals(TestUtils.encodeToBase64String(entity.getValue(),false),json.getString(\"value\"));\n  Entity entity2=JSON.parseObject(text,Entity.class);\n  Assert.assertEquals(\"中华人民共和国\",new String(entity2.getValue(),\"UTF-8\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(TestUtils.encodeToBase64String(entity.getValue(),false),json.getString(\"value\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 18,
    "startColumnNumber" : 86,
    "endLineNumber" : 18,
    "endColumnNumber" : 109
  } ],
  "layoutRelationDataList" : [ ]
}