{
  "id" : 475,
  "expression" : "varianceBlue <= allowedComponentVariance",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/tests/javatests/com/google/android/material/testutils/TestUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "varianceBlue <= allowedComponentVariance",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 119,
      "startColumnNumber" : 22,
      "endLineNumber" : 119,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 21,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(varianceBlue <= allowedComponentVariance)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 116,
        "startColumnNumber" : 14,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 115,
        "startColumnNumber" : 18,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 115,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 64
      },
      "nodeContext" : "boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1783,
        "startLineNumber" : 104,
        "startColumnNumber" : 65,
        "endLineNumber" : 151,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int sourceAlpha=Color.alpha(rowPixels[column]);\n  int sourceRed=Color.red(rowPixels[column]);\n  int sourceGreen=Color.green(rowPixels[column]);\n  int sourceBlue=Color.blue(rowPixels[column]);\n  int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n  int varianceRed=Math.abs(sourceRed - expectedRed);\n  int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n  int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n  boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n  if (!isColorMatch) {\n    String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n    if (throwExceptionIfFails) {\n      throw new RuntimeException(mismatchDescription);\n    }\n else {\n      Assert.fail(mismatchDescription);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int column=firstCol; column <= lastCol; column++) {\n  int sourceAlpha=Color.alpha(rowPixels[column]);\n  int sourceRed=Color.red(rowPixels[column]);\n  int sourceGreen=Color.green(rowPixels[column]);\n  int sourceBlue=Color.blue(rowPixels[column]);\n  int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n  int varianceRed=Math.abs(sourceRed - expectedRed);\n  int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n  int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n  boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n  if (!isColorMatch) {\n    String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n    if (throwExceptionIfFails) {\n      throw new RuntimeException(mismatchDescription);\n    }\n else {\n      Assert.fail(mismatchDescription);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1940,
        "startLineNumber" : 101,
        "startColumnNumber" : 54,
        "endLineNumber" : 152,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n  for (int column=firstCol; column <= lastCol; column++) {\n    int sourceAlpha=Color.alpha(rowPixels[column]);\n    int sourceRed=Color.red(rowPixels[column]);\n    int sourceGreen=Color.green(rowPixels[column]);\n    int sourceBlue=Color.blue(rowPixels[column]);\n    int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n    int varianceRed=Math.abs(sourceRed - expectedRed);\n    int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n    int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n    boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n    if (!isColorMatch) {\n      String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n      if (throwExceptionIfFails) {\n        throw new RuntimeException(mismatchDescription);\n      }\n else {\n        Assert.fail(mismatchDescription);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1988,
        "startLineNumber" : 101,
        "startColumnNumber" : 6,
        "endLineNumber" : 152,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int row=firstRow; row <= lastRow; row++) {\n  bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n  for (int column=firstCol; column <= lastCol; column++) {\n    int sourceAlpha=Color.alpha(rowPixels[column]);\n    int sourceRed=Color.red(rowPixels[column]);\n    int sourceGreen=Color.green(rowPixels[column]);\n    int sourceBlue=Color.blue(rowPixels[column]);\n    int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n    int varianceRed=Math.abs(sourceRed - expectedRed);\n    int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n    int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n    boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n    if (!isColorMatch) {\n      String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n      if (throwExceptionIfFails) {\n        throw new RuntimeException(mismatchDescription);\n      }\n else {\n        Assert.fail(mismatchDescription);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2556,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] rowPixels=new int[drawableWidth];\n  final int firstRow=checkArea != null ? checkArea.top : 0;\n  final int lastRow=checkArea != null ? checkArea.bottom : drawableHeight - 1;\n  final int firstCol=checkArea != null ? checkArea.left : 0;\n  final int lastCol=checkArea != null ? checkArea.right : drawableWidth - 1;\n  final int expectedAlpha=Color.alpha(color);\n  final int expectedRed=Color.red(color);\n  final int expectedGreen=Color.green(color);\n  final int expectedBlue=Color.blue(color);\n  for (int row=firstRow; row <= lastRow; row++) {\n    bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n    for (int column=firstCol; column <= lastCol; column++) {\n      int sourceAlpha=Color.alpha(rowPixels[column]);\n      int sourceRed=Color.red(rowPixels[column]);\n      int sourceGreen=Color.green(rowPixels[column]);\n      int sourceBlue=Color.blue(rowPixels[column]);\n      int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n      int varianceRed=Math.abs(sourceRed - expectedRed);\n      int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n      int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n      boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n      if (!isColorMatch) {\n        String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n        if (throwExceptionIfFails) {\n          throw new RuntimeException(mismatchDescription);\n        }\n else {\n          Assert.fail(mismatchDescription);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2600,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  int[] rowPixels=new int[drawableWidth];\n  final int firstRow=checkArea != null ? checkArea.top : 0;\n  final int lastRow=checkArea != null ? checkArea.bottom : drawableHeight - 1;\n  final int firstCol=checkArea != null ? checkArea.left : 0;\n  final int lastCol=checkArea != null ? checkArea.right : drawableWidth - 1;\n  final int expectedAlpha=Color.alpha(color);\n  final int expectedRed=Color.red(color);\n  final int expectedGreen=Color.green(color);\n  final int expectedBlue=Color.blue(color);\n  for (int row=firstRow; row <= lastRow; row++) {\n    bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n    for (int column=firstCol; column <= lastCol; column++) {\n      int sourceAlpha=Color.alpha(rowPixels[column]);\n      int sourceRed=Color.red(rowPixels[column]);\n      int sourceGreen=Color.green(rowPixels[column]);\n      int sourceBlue=Color.blue(rowPixels[column]);\n      int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n      int varianceRed=Math.abs(sourceRed - expectedRed);\n      int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n      int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n      boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n      if (!isColorMatch) {\n        String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n        if (throwExceptionIfFails) {\n          throw new RuntimeException(mismatchDescription);\n        }\n else {\n          Assert.fail(mismatchDescription);\n        }\n      }\n    }\n  }\n}\n  finally {\n  bitmap.recycle();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 74,
        "startColumnNumber" : 37,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Bitmap bitmap=Bitmap.createBitmap(drawableWidth,drawableHeight,Bitmap.Config.ARGB_8888);\n  Canvas canvas=new Canvas(bitmap);\n  if (callSetBounds) {\n    drawable.setBounds(0,0,drawableWidth,drawableHeight);\n  }\n  drawable.draw(canvas);\n  try {\n    int[] rowPixels=new int[drawableWidth];\n    final int firstRow=checkArea != null ? checkArea.top : 0;\n    final int lastRow=checkArea != null ? checkArea.bottom : drawableHeight - 1;\n    final int firstCol=checkArea != null ? checkArea.left : 0;\n    final int lastCol=checkArea != null ? checkArea.right : drawableWidth - 1;\n    final int expectedAlpha=Color.alpha(color);\n    final int expectedRed=Color.red(color);\n    final int expectedGreen=Color.green(color);\n    final int expectedBlue=Color.blue(color);\n    for (int row=firstRow; row <= lastRow; row++) {\n      bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n      for (int column=firstCol; column <= lastCol; column++) {\n        int sourceAlpha=Color.alpha(rowPixels[column]);\n        int sourceRed=Color.red(rowPixels[column]);\n        int sourceGreen=Color.green(rowPixels[column]);\n        int sourceBlue=Color.blue(rowPixels[column]);\n        int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n        int varianceRed=Math.abs(sourceRed - expectedRed);\n        int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n        int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n        boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n        if (!isColorMatch) {\n          String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n          if (throwExceptionIfFails) {\n            throw new RuntimeException(mismatchDescription);\n          }\n else {\n            Assert.fail(mismatchDescription);\n          }\n        }\n      }\n    }\n  }\n  finally {\n    bitmap.recycle();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 333,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3390,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void assertAllPixelsOfColor(String failMessagePrefix,@NonNull Drawable drawable,int drawableWidth,int drawableHeight,boolean callSetBounds,@ColorInt int color,Rect checkArea,int allowedComponentVariance,boolean throwExceptionIfFails){\n  Bitmap bitmap=Bitmap.createBitmap(drawableWidth,drawableHeight,Bitmap.Config.ARGB_8888);\n  Canvas canvas=new Canvas(bitmap);\n  if (callSetBounds) {\n    drawable.setBounds(0,0,drawableWidth,drawableHeight);\n  }\n  drawable.draw(canvas);\n  try {\n    int[] rowPixels=new int[drawableWidth];\n    final int firstRow=checkArea != null ? checkArea.top : 0;\n    final int lastRow=checkArea != null ? checkArea.bottom : drawableHeight - 1;\n    final int firstCol=checkArea != null ? checkArea.left : 0;\n    final int lastCol=checkArea != null ? checkArea.right : drawableWidth - 1;\n    final int expectedAlpha=Color.alpha(color);\n    final int expectedRed=Color.red(color);\n    final int expectedGreen=Color.green(color);\n    final int expectedBlue=Color.blue(color);\n    for (int row=firstRow; row <= lastRow; row++) {\n      bitmap.getPixels(rowPixels,0,drawableWidth,0,row,drawableWidth,1);\n      for (int column=firstCol; column <= lastCol; column++) {\n        int sourceAlpha=Color.alpha(rowPixels[column]);\n        int sourceRed=Color.red(rowPixels[column]);\n        int sourceGreen=Color.green(rowPixels[column]);\n        int sourceBlue=Color.blue(rowPixels[column]);\n        int varianceAlpha=Math.abs(sourceAlpha - expectedAlpha);\n        int varianceRed=Math.abs(sourceRed - expectedRed);\n        int varianceGreen=Math.abs(sourceGreen - expectedGreen);\n        int varianceBlue=Math.abs(sourceBlue - expectedBlue);\n        boolean isColorMatch=(varianceAlpha <= allowedComponentVariance) && (varianceRed <= allowedComponentVariance) && (varianceGreen <= allowedComponentVariance)&& (varianceBlue <= allowedComponentVariance);\n        if (!isColorMatch) {\n          String mismatchDescription=failMessagePrefix + \": expected all drawable colors to be [\" + expectedAlpha+ \",\"+ expectedRed+ \",\"+ expectedGreen+ \",\"+ expectedBlue+ \"] but at position (\"+ row+ \",\"+ column+ \") found [\"+ sourceAlpha+ \",\"+ sourceRed+ \",\"+ sourceGreen+ \",\"+ sourceBlue+ \"]\";\n          if (throwExceptionIfFails) {\n            throw new RuntimeException(mismatchDescription);\n          }\n else {\n            Assert.fail(mismatchDescription);\n          }\n        }\n      }\n    }\n  }\n  finally {\n    bitmap.recycle();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 21,
        "endLineNumber" : 119,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(varianceBlue <= allowedComponentVariance)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 119,
    "startColumnNumber" : 22,
    "endLineNumber" : 119,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}