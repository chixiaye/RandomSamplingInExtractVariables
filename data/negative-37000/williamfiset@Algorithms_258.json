{
  "id" : 258,
  "expression" : "e.u",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/Boruvkas.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e.u",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 88,
      "startColumnNumber" : 12,
      "endLineNumber" : 88,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 22
      },
      "nodeContext" : "e.u == e.v",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (e.u == e.v) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 86,
        "startColumnNumber" : 45,
        "endLineNumber" : 103,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Edge e=graph[i];\n  if (e.u == e.v)   continue;\n  int uc=uf.id[e.u], vc=uf.id[e.v];\n  if (uc == vc)   continue;\n  if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n    stop=false;\n    cheapest[vc]=i;\n  }\n  if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n    stop=false;\n    cheapest[uc]=i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 697,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < graph.length; i++) {\n  Edge e=graph[i];\n  if (e.u == e.v)   continue;\n  int uc=uf.id[e.u], vc=uf.id[e.v];\n  if (uc == vc)   continue;\n  if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n    stop=false;\n    cheapest[vc]=i;\n  }\n  if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n    stop=false;\n    cheapest[uc]=i;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 80,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; mst.size() != n - 1; ) {\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 67,
        "startColumnNumber" : 23,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void solve(){\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (e.u == e.v) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "e.u",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 89,
      "startColumnNumber" : 23,
      "endLineNumber" : 89,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 89,
        "startColumnNumber" : 17,
        "endLineNumber" : 89,
        "endColumnNumber" : 27
      },
      "nodeContext" : "uf.id[e.u]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 27
      },
      "nodeContext" : "uc=uf.id[e.u]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int uc=uf.id[e.u], vc=uf.id[e.v];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 86,
        "startColumnNumber" : 45,
        "endLineNumber" : 103,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Edge e=graph[i];\n  if (e.u == e.v)   continue;\n  int uc=uf.id[e.u], vc=uf.id[e.v];\n  if (uc == vc)   continue;\n  if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n    stop=false;\n    cheapest[vc]=i;\n  }\n  if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n    stop=false;\n    cheapest[uc]=i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 697,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < graph.length; i++) {\n  Edge e=graph[i];\n  if (e.u == e.v)   continue;\n  int uc=uf.id[e.u], vc=uf.id[e.v];\n  if (uc == vc)   continue;\n  if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n    stop=false;\n    cheapest[vc]=i;\n  }\n  if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n    stop=false;\n    cheapest[uc]=i;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 80,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; mst.size() != n - 1; ) {\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 67,
        "startColumnNumber" : 23,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void solve(){\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int uc=uf.id[e.u], vc=uf.id[e.v];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "e.u",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 111,
      "startColumnNumber" : 25,
      "endLineNumber" : 111,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 34
      },
      "nodeContext" : "uf.connected(e.u,e.v)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 45
      },
      "nodeContext" : "if (uf.connected(e.u,e.v)) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 107,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (cheapest[i] == -1)   continue;\n  Edge e=graph[cheapest[i]];\n  if (uf.connected(e.u,e.v))   continue;\n  mst.add(e);\n  minCostSum+=e.cost;\n  uf.union(e.u,e.v);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (cheapest[i] == -1)   continue;\n  Edge e=graph[cheapest[i]];\n  if (uf.connected(e.u,e.v))   continue;\n  mst.add(e);\n  minCostSum+=e.cost;\n  uf.union(e.u,e.v);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 80,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; mst.size() != n - 1; ) {\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 67,
        "startColumnNumber" : 23,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void solve(){\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 45
      },
      "nodeContext" : "if (uf.connected(e.u,e.v)) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "e.u",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 115,
      "startColumnNumber" : 17,
      "endLineNumber" : 115,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 26
      },
      "nodeContext" : "uf.union(e.u,e.v)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 27
      },
      "nodeContext" : "uf.union(e.u,e.v);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 107,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (cheapest[i] == -1)   continue;\n  Edge e=graph[cheapest[i]];\n  if (uf.connected(e.u,e.v))   continue;\n  mst.add(e);\n  minCostSum+=e.cost;\n  uf.union(e.u,e.v);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (cheapest[i] == -1)   continue;\n  Edge e=graph[cheapest[i]];\n  if (uf.connected(e.u,e.v))   continue;\n  mst.add(e);\n  minCostSum+=e.cost;\n  uf.union(e.u,e.v);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 80,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; mst.size() != n - 1; ) {\n  Arrays.fill(cheapest,-1);\n  boolean stop=true;\n  for (int i=0; i < graph.length; i++) {\n    Edge e=graph[i];\n    if (e.u == e.v)     continue;\n    int uc=uf.id[e.u], vc=uf.id[e.v];\n    if (uc == vc)     continue;\n    if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n      stop=false;\n      cheapest[vc]=i;\n    }\n    if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n      stop=false;\n      cheapest[uc]=i;\n    }\n  }\n  if (stop)   break;\n  for (int i=0; i < n; i++) {\n    if (cheapest[i] == -1)     continue;\n    Edge e=graph[cheapest[i]];\n    if (uf.connected(e.u,e.v))     continue;\n    mst.add(e);\n    minCostSum+=e.cost;\n    uf.union(e.u,e.v);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 67,
        "startColumnNumber" : 23,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void solve(){\n  if (solved)   return;\n  mst=new ArrayList<>();\n  UnionFind uf=new UnionFind(n);\n  int[] cheapest=new int[n];\n  Arrays.fill(cheapest,-1);\n  for (; mst.size() != n - 1; ) {\n    Arrays.fill(cheapest,-1);\n    boolean stop=true;\n    for (int i=0; i < graph.length; i++) {\n      Edge e=graph[i];\n      if (e.u == e.v)       continue;\n      int uc=uf.id[e.u], vc=uf.id[e.v];\n      if (uc == vc)       continue;\n      if (cheapest[vc] == -1 || e.cost < graph[cheapest[vc]].cost) {\n        stop=false;\n        cheapest[vc]=i;\n      }\n      if (cheapest[uc] == -1 || e.cost < graph[cheapest[uc]].cost) {\n        stop=false;\n        cheapest[uc]=i;\n      }\n    }\n    if (stop)     break;\n    for (int i=0; i < n; i++) {\n      if (cheapest[i] == -1)       continue;\n      Edge e=graph[cheapest[i]];\n      if (uf.connected(e.u,e.v))       continue;\n      mst.add(e);\n      minCostSum+=e.cost;\n      uf.union(e.u,e.v);\n    }\n  }\n  mstExists=(mst.size() == n - 1);\n  solved=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 27
      },
      "nodeContext" : "uf.union(e.u,e.v);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 88,
    "startColumnNumber" : 12,
    "endLineNumber" : 88,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 89,
    "startColumnNumber" : 23,
    "endLineNumber" : 89,
    "endColumnNumber" : 26
  }, {
    "charLength" : 3,
    "startLineNumber" : 111,
    "startColumnNumber" : 25,
    "endLineNumber" : 111,
    "endColumnNumber" : 28
  }, {
    "charLength" : 3,
    "startLineNumber" : 115,
    "startColumnNumber" : 17,
    "endLineNumber" : 115,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}