{
  "id" : 13,
  "expression" : "Collectors.toList()",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/mesh/MetricsServiceE2E.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collectors.toList()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 92,
      "startColumnNumber" : 96,
      "endLineNumber" : 92,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 92,
        "startColumnNumber" : 19,
        "endLineNumber" : 92,
        "endColumnNumber" : 116
      },
      "nodeContext" : "services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 116
      },
      "nodeContext" : "services=services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 117
      },
      "nodeContext" : "services=services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2158,
        "startLineNumber" : 89,
        "startColumnNumber" : 33,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Service> services=graphql.services(new ServicesQuery().start(startTime).end(now()));\n  services=services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList());\n  LOGGER.info(\"services: {}\",services);\n  load(\"expected/metricsservice/services.yml\").as(ServicesMatcher.class).verify(services);\n  for (  final Service service : services) {\n    if (service.getLabel().contains(\"egressgateway\")) {\n      continue;\n    }\n    final Instances instances=graphql.instances(new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now()));\n    LOGGER.info(\"instances: {}\",instances);\n    String instancesFile=\"expected/metricsservice/instances-\" + service.getLabel() + \".yml\";\n    instancesFile=instancesFile.replaceAll(\"::\",\"-\");\n    if (!exists(instancesFile)) {\n      instancesFile=\"expected/metricsservice/instances.yml\";\n    }\n    load(instancesFile).as(InstancesMatcher.class).verify(instances);\n    for (    Instance instance : instances.getInstances()) {\n      for (      String metricsName : ALL_ENVOY_LINER_METRICS) {\n        LOGGER.info(\"verifying service instance: {}\",instance);\n        final ReadMetrics instanceMetrics=graphql.readMetrics(new ReadMetricsQuery().stepByMinute().metricsName(metricsName).serviceName(service.getLabel()).instanceName(instance.getLabel()));\n        LOGGER.info(\"{}: {}\",metricsName,instanceMetrics);\n        final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher=new AtLeastOneOfMetricsMatcher();\n        final MetricsValueMatcher greaterThanZero=new MetricsValueMatcher();\n        greaterThanZero.setValue(\"gt 0\");\n        instanceRespTimeMatcher.setValue(greaterThanZero);\n        instanceRespTimeMatcher.verify(instanceMetrics.getValues());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2206,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@RetryableTest void test() throws Exception {\n  List<Service> services=graphql.services(new ServicesQuery().start(startTime).end(now()));\n  services=services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList());\n  LOGGER.info(\"services: {}\",services);\n  load(\"expected/metricsservice/services.yml\").as(ServicesMatcher.class).verify(services);\n  for (  final Service service : services) {\n    if (service.getLabel().contains(\"egressgateway\")) {\n      continue;\n    }\n    final Instances instances=graphql.instances(new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now()));\n    LOGGER.info(\"instances: {}\",instances);\n    String instancesFile=\"expected/metricsservice/instances-\" + service.getLabel() + \".yml\";\n    instancesFile=instancesFile.replaceAll(\"::\",\"-\");\n    if (!exists(instancesFile)) {\n      instancesFile=\"expected/metricsservice/instances.yml\";\n    }\n    load(instancesFile).as(InstancesMatcher.class).verify(instances);\n    for (    Instance instance : instances.getInstances()) {\n      for (      String metricsName : ALL_ENVOY_LINER_METRICS) {\n        LOGGER.info(\"verifying service instance: {}\",instance);\n        final ReadMetrics instanceMetrics=graphql.readMetrics(new ReadMetricsQuery().stepByMinute().metricsName(metricsName).serviceName(service.getLabel()).instanceName(instance.getLabel()));\n        LOGGER.info(\"{}: {}\",metricsName,instanceMetrics);\n        final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher=new AtLeastOneOfMetricsMatcher();\n        final MetricsValueMatcher greaterThanZero=new MetricsValueMatcher();\n        greaterThanZero.setValue(\"gt 0\");\n        instanceRespTimeMatcher.setValue(greaterThanZero);\n        instanceRespTimeMatcher.verify(instanceMetrics.getValues());\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 117
      },
      "nodeContext" : "services=services.stream().filter(s -> s.getLabel().startsWith(\"istio-dp::\")).collect(Collectors.toList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "java.util.stream.Collector<org.apache.skywalking.e2e.service.Service,,java.util.List<org.apache.skywalking.e2e.service.Service>>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 92,
    "startColumnNumber" : 96,
    "endLineNumber" : 92,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ ]
}