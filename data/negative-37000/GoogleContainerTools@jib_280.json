{
  "id" : 280,
  "expression" : "classesOutputDirectories",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurations.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "classesOutputDirectories",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 64,
      "startColumnNumber" : 39,
      "endLineNumber" : 64,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (File classesOutputDirectory : classesOutputDirectories) {\n  if (Files.notExists(classesOutputDirectory.toPath())) {\n    gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n    continue;\n  }\n  try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n    classFileStream.forEach(classesFiles::add);\n  }\n }\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3089,
        "startLineNumber" : 50,
        "startColumnNumber" : 96,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3699,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Resolves the source files configuration for a Gradle  {@link Project}.\n * @param project the Gradle {@link Project}\n * @param gradleJibLogger the build logger for providing feedback about the resolution\n * @param extraDirectory path to the directory for the extra files layer\n * @return a {@link JavaLayerConfigurations} for the layers for the Gradle {@link Project}\n * @throws IOException if an I/O exception occurred during resolution\n */\nstatic JavaLayerConfigurations getForProject(Project project,GradleJibLogger gradleJibLogger,Path extraDirectory) throws IOException {\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (File classesOutputDirectory : classesOutputDirectories) {\n  if (Files.notExists(classesOutputDirectory.toPath())) {\n    gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n    continue;\n  }\n  try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n    classFileStream.forEach(classesFiles::add);\n  }\n }\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.gradle.FileCollection"
  }, {
    "nodeContext" : "classesOutputDirectories",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 90,
      "startColumnNumber" : 30,
      "endLineNumber" : 90,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 90,
        "startColumnNumber" : 15,
        "endLineNumber" : 90,
        "endColumnNumber" : 55
      },
      "nodeContext" : "allFiles.minus(classesOutputDirectories)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 55
      },
      "nodeContext" : "allFiles=allFiles.minus(classesOutputDirectories)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 56
      },
      "nodeContext" : "allFiles=allFiles.minus(classesOutputDirectories);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3089,
        "startLineNumber" : 50,
        "startColumnNumber" : 96,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3699,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Resolves the source files configuration for a Gradle  {@link Project}.\n * @param project the Gradle {@link Project}\n * @param gradleJibLogger the build logger for providing feedback about the resolution\n * @param extraDirectory path to the directory for the extra files layer\n * @return a {@link JavaLayerConfigurations} for the layers for the Gradle {@link Project}\n * @throws IOException if an I/O exception occurred during resolution\n */\nstatic JavaLayerConfigurations getForProject(Project project,GradleJibLogger gradleJibLogger,Path extraDirectory) throws IOException {\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 56
      },
      "nodeContext" : "allFiles=allFiles.minus(classesOutputDirectories);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.gradle.FileCollection"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 64,
    "startColumnNumber" : 39,
    "endLineNumber" : 64,
    "endColumnNumber" : 63
  }, {
    "charLength" : 24,
    "startLineNumber" : 90,
    "startColumnNumber" : 30,
    "endLineNumber" : 90,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}