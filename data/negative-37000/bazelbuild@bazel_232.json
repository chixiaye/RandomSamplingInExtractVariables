{
  "id" : 232,
  "expression" : "-1",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/java_tools/buildjar/java/com/google/devtools/build/buildjar/genclass/GenClass.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 156,
      "startColumnNumber" : 46,
      "endLineNumber" : 156,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 156,
        "startColumnNumber" : 41,
        "endLineNumber" : 156,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 156,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=className.indexOf('$'); i != -1; i=className.indexOf('$',i + 1)) {\n  if (prefixes.contains(className.substring(0,i))) {\n    return true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 152,
        "startColumnNumber" : 91,
        "endLineNumber" : 162,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (prefixes.contains(className)) {\n    return true;\n  }\n  for (int i=className.indexOf('$'); i != -1; i=className.indexOf('$',i + 1)) {\n    if (prefixes.contains(className.substring(0,i))) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 162,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * We want to include inner classes for generated source files, but a class whose name contains '$' isn't necessarily an inner class. Check whether any prefix of the class name that ends with '$' matches one of the top-level class names.\n */\nprivate static boolean prefixesContains(ImmutableSet<String> prefixes,String className){\n  if (prefixes.contains(className)) {\n    return true;\n  }\n  for (int i=className.indexOf('$'); i != -1; i=className.indexOf('$',i + 1)) {\n    if (prefixes.contains(className.substring(0,i))) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 156,
        "startColumnNumber" : 41,
        "endLineNumber" : 156,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 156,
    "startColumnNumber" : 46,
    "endLineNumber" : 156,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}