{
  "id" : 57,
  "expression" : "10",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 77,
      "startColumnNumber" : 12,
      "endLineNumber" : 77,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 14
      },
      "nodeContext" : "E=10",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 33
      },
      "nodeContext" : "int E=10, V=9, start=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 75,
        "startColumnNumber" : 41,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int E=10, V=9, start=0;\n  List<Edge>[] graph=createGraph(V);\n  addEdge(graph,0,1,1);\n  addEdge(graph,1,2,1);\n  addEdge(graph,2,4,1);\n  addEdge(graph,4,3,-3);\n  addEdge(graph,3,2,1);\n  addEdge(graph,1,5,4);\n  addEdge(graph,1,6,4);\n  addEdge(graph,5,6,5);\n  addEdge(graph,6,7,4);\n  addEdge(graph,5,7,3);\n  double[] d=bellmanFord(graph,V,start);\n  for (int i=0; i < V; i++)   System.out.printf(\"The cost to get from node %d to %d is %.2f\\n\",start,i,d[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int E=10, V=9, start=0;\n  List<Edge>[] graph=createGraph(V);\n  addEdge(graph,0,1,1);\n  addEdge(graph,1,2,1);\n  addEdge(graph,2,4,1);\n  addEdge(graph,4,3,-3);\n  addEdge(graph,3,2,1);\n  addEdge(graph,1,5,4);\n  addEdge(graph,1,6,4);\n  addEdge(graph,5,6,5);\n  addEdge(graph,6,7,4);\n  addEdge(graph,5,7,3);\n  double[] d=bellmanFord(graph,V,start);\n  for (int i=0; i < V; i++)   System.out.printf(\"The cost to get from node %d to %d is %.2f\\n\",start,i,d[i]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 33
      },
      "nodeContext" : "int E=10, V=9, start=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 77,
    "startColumnNumber" : 12,
    "endLineNumber" : 77,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}