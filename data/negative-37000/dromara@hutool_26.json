{
  "id" : 26,
  "expression" : "TMIN",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/codec/PunyCode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TMIN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 80,
      "startColumnNumber" : 11,
      "endLineNumber" : 80,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 15
      },
      "nodeContext" : "t=TMIN",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 16
      },
      "nodeContext" : "t=TMIN;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 81,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  t=TMIN;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 79,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (k <= bias) {\n  t=TMIN;\n}\n else if (k >= bias + TMAX) {\n  t=TMAX;\n}\n else {\n  t=k - bias;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 77,
        "startColumnNumber" : 37,
        "endLineNumber" : 92,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  int t;\n  if (k <= bias) {\n    t=TMIN;\n  }\n else   if (k >= bias + TMAX) {\n    t=TMAX;\n  }\n else {\n    t=k - bias;\n  }\n  if (q < t) {\n    break;\n  }\n  output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n  q=(q - t) / (BASE - t);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 77,
        "startColumnNumber" : 5,
        "endLineNumber" : 92,
        "endColumnNumber" : 6
      },
      "nodeContext" : "for (int k=BASE; ; k+=BASE) {\n  int t;\n  if (k <= bias) {\n    t=TMIN;\n  }\n else   if (k >= bias + TMAX) {\n    t=TMAX;\n  }\n else {\n    t=k - bias;\n  }\n  if (q < t) {\n    break;\n  }\n  output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n  q=(q - t) / (BASE - t);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int q=delta;\n  for (int k=BASE; ; k+=BASE) {\n    int t;\n    if (k <= bias) {\n      t=TMIN;\n    }\n else     if (k >= bias + TMAX) {\n      t=TMAX;\n    }\n else {\n      t=k - bias;\n    }\n    if (q < t) {\n      break;\n    }\n    output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n    q=(q - t) / (BASE - t);\n  }\n  output.append((char)digit2codepoint(q));\n  bias=adapt(delta,h + 1,h == b);\n  delta=0;\n  h++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (c == n) {\n  int q=delta;\n  for (int k=BASE; ; k+=BASE) {\n    int t;\n    if (k <= bias) {\n      t=TMIN;\n    }\n else     if (k >= bias + TMAX) {\n      t=TMAX;\n    }\n else {\n      t=k - bias;\n    }\n    if (q < t) {\n      break;\n    }\n    output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n    q=(q - t) / (BASE - t);\n  }\n  output.append((char)digit2codepoint(q));\n  bias=adapt(delta,h + 1,h == b);\n  delta=0;\n  h++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 67,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int c=input.charAt(j);\n  if (c < n) {\n    delta++;\n    if (0 == delta) {\n      throw new UtilException(\"OVERFLOW\");\n    }\n  }\n  if (c == n) {\n    int q=delta;\n    for (int k=BASE; ; k+=BASE) {\n      int t;\n      if (k <= bias) {\n        t=TMIN;\n      }\n else       if (k >= bias + TMAX) {\n        t=TMAX;\n      }\n else {\n        t=k - bias;\n      }\n      if (q < t) {\n        break;\n      }\n      output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n      q=(q - t) / (BASE - t);\n    }\n    output.append((char)digit2codepoint(q));\n    bias=adapt(delta,h + 1,h == b);\n    delta=0;\n    h++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 67,
        "startColumnNumber" : 3,
        "endLineNumber" : 98,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int j=0; j < input.length(); j++) {\n  int c=input.charAt(j);\n  if (c < n) {\n    delta++;\n    if (0 == delta) {\n      throw new UtilException(\"OVERFLOW\");\n    }\n  }\n  if (c == n) {\n    int q=delta;\n    for (int k=BASE; ; k+=BASE) {\n      int t;\n      if (k <= bias) {\n        t=TMIN;\n      }\n else       if (k >= bias + TMAX) {\n        t=TMAX;\n      }\n else {\n        t=k - bias;\n      }\n      if (q < t) {\n        break;\n      }\n      output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n      q=(q - t) / (BASE - t);\n    }\n    output.append((char)digit2codepoint(q));\n    bias=adapt(delta,h + 1,h == b);\n    delta=0;\n    h++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 156,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 53,
        "startColumnNumber" : 29,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int m=Integer.MAX_VALUE;\n  for (int i=0; i < input.length(); i++) {\n    int c=input.charAt(i);\n    if (c >= n && c < m) {\n      m=c;\n    }\n  }\n  if (m - n > (Integer.MAX_VALUE - delta) / (h + 1)) {\n    throw new UtilException(\"OVERFLOW\");\n  }\n  delta=delta + (m - n) * (h + 1);\n  n=m;\n  for (int j=0; j < input.length(); j++) {\n    int c=input.charAt(j);\n    if (c < n) {\n      delta++;\n      if (0 == delta) {\n        throw new UtilException(\"OVERFLOW\");\n      }\n    }\n    if (c == n) {\n      int q=delta;\n      for (int k=BASE; ; k+=BASE) {\n        int t;\n        if (k <= bias) {\n          t=TMIN;\n        }\n else         if (k >= bias + TMAX) {\n          t=TMAX;\n        }\n else {\n          t=k - bias;\n        }\n        if (q < t) {\n          break;\n        }\n        output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n        q=(q - t) / (BASE - t);\n      }\n      output.append((char)digit2codepoint(q));\n      bias=adapt(delta,h + 1,h == b);\n      delta=0;\n      h++;\n    }\n  }\n  delta++;\n  n++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1141,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (h < input.length()) {\n  int m=Integer.MAX_VALUE;\n  for (int i=0; i < input.length(); i++) {\n    int c=input.charAt(i);\n    if (c >= n && c < m) {\n      m=c;\n    }\n  }\n  if (m - n > (Integer.MAX_VALUE - delta) / (h + 1)) {\n    throw new UtilException(\"OVERFLOW\");\n  }\n  delta=delta + (m - n) * (h + 1);\n  n=m;\n  for (int j=0; j < input.length(); j++) {\n    int c=input.charAt(j);\n    if (c < n) {\n      delta++;\n      if (0 == delta) {\n        throw new UtilException(\"OVERFLOW\");\n      }\n    }\n    if (c == n) {\n      int q=delta;\n      for (int k=BASE; ; k+=BASE) {\n        int t;\n        if (k <= bias) {\n          t=TMIN;\n        }\n else         if (k >= bias + TMAX) {\n          t=TMAX;\n        }\n else {\n          t=k - bias;\n        }\n        if (q < t) {\n          break;\n        }\n        output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n        q=(q - t) / (BASE - t);\n      }\n      output.append((char)digit2codepoint(q));\n      bias=adapt(delta,h + 1,h == b);\n      delta=0;\n      h++;\n    }\n  }\n  delta++;\n  n++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 251,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 32,
        "startColumnNumber" : 64,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int n=INITIAL_N;\n  int delta=0;\n  int bias=INITIAL_BIAS;\n  StringBuilder output=new StringBuilder();\n  int length=input.length();\n  int b=0;\n  char c;\n  for (int i=0; i < length; i++) {\n    c=input.charAt(i);\n    if (isBasic(c)) {\n      output.append(c);\n      b++;\n    }\n  }\n  if (b > 0) {\n    output.append(DELIMITER);\n  }\n  int h=b;\n  while (h < input.length()) {\n    int m=Integer.MAX_VALUE;\n    for (int i=0; i < input.length(); i++) {\n      int c=input.charAt(i);\n      if (c >= n && c < m) {\n        m=c;\n      }\n    }\n    if (m - n > (Integer.MAX_VALUE - delta) / (h + 1)) {\n      throw new UtilException(\"OVERFLOW\");\n    }\n    delta=delta + (m - n) * (h + 1);\n    n=m;\n    for (int j=0; j < input.length(); j++) {\n      int c=input.charAt(j);\n      if (c < n) {\n        delta++;\n        if (0 == delta) {\n          throw new UtilException(\"OVERFLOW\");\n        }\n      }\n      if (c == n) {\n        int q=delta;\n        for (int k=BASE; ; k+=BASE) {\n          int t;\n          if (k <= bias) {\n            t=TMIN;\n          }\n else           if (k >= bias + TMAX) {\n            t=TMAX;\n          }\n else {\n            t=k - bias;\n          }\n          if (q < t) {\n            break;\n          }\n          output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n          q=(q - t) / (BASE - t);\n        }\n        output.append((char)digit2codepoint(q));\n        bias=adapt(delta,h + 1,h == b);\n        delta=0;\n        h++;\n      }\n    }\n    delta++;\n    n++;\n  }\n  return output.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 25,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Punycodes a unicode string.\n * @param input Unicode string.\n * @return Punycoded string.\n * @throws UtilException 计算异常\n */\npublic static String encode(String input) throws UtilException {\n  int n=INITIAL_N;\n  int delta=0;\n  int bias=INITIAL_BIAS;\n  StringBuilder output=new StringBuilder();\n  int length=input.length();\n  int b=0;\n  char c;\n  for (int i=0; i < length; i++) {\n    c=input.charAt(i);\n    if (isBasic(c)) {\n      output.append(c);\n      b++;\n    }\n  }\n  if (b > 0) {\n    output.append(DELIMITER);\n  }\n  int h=b;\n  while (h < input.length()) {\n    int m=Integer.MAX_VALUE;\n    for (int i=0; i < input.length(); i++) {\n      int c=input.charAt(i);\n      if (c >= n && c < m) {\n        m=c;\n      }\n    }\n    if (m - n > (Integer.MAX_VALUE - delta) / (h + 1)) {\n      throw new UtilException(\"OVERFLOW\");\n    }\n    delta=delta + (m - n) * (h + 1);\n    n=m;\n    for (int j=0; j < input.length(); j++) {\n      int c=input.charAt(j);\n      if (c < n) {\n        delta++;\n        if (0 == delta) {\n          throw new UtilException(\"OVERFLOW\");\n        }\n      }\n      if (c == n) {\n        int q=delta;\n        for (int k=BASE; ; k+=BASE) {\n          int t;\n          if (k <= bias) {\n            t=TMIN;\n          }\n else           if (k >= bias + TMAX) {\n            t=TMAX;\n          }\n else {\n            t=k - bias;\n          }\n          if (q < t) {\n            break;\n          }\n          output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));\n          q=(q - t) / (BASE - t);\n        }\n        output.append((char)digit2codepoint(q));\n        bias=adapt(delta,h + 1,h == b);\n        delta=0;\n        h++;\n      }\n    }\n    delta++;\n    n++;\n  }\n  return output.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 80,
        "endColumnNumber" : 16
      },
      "nodeContext" : "t=TMIN;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 80,
    "startColumnNumber" : 11,
    "endLineNumber" : 80,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}