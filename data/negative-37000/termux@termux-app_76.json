{
  "id" : 76,
  "expression" : "mInitialTextSelection",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/view/TerminalView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mInitialTextSelection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 475,
      "startColumnNumber" : 24,
      "endLineNumber" : 475,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 475,
        "startColumnNumber" : 20,
        "endLineNumber" : 475,
        "endColumnNumber" : 53
      },
      "nodeContext" : "if (mInitialTextSelection) break;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2282,
        "startLineNumber" : 463,
        "startColumnNumber" : 12,
        "endLineNumber" : 509,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (action) {\ncase MotionEvent.ACTION_UP:  mInitialTextSelection=false;\nbreak;\ncase MotionEvent.ACTION_DOWN:int distanceFromSel1=Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\nint distanceFromSel2=Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\nmIsDraggingLeftSelection=distanceFromSel1 <= distanceFromSel2;\nmSelectionDownX=ev.getX();\nmSelectionDownY=ev.getY();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInitialTextSelection) break;\nfloat deltaX=ev.getX() - mSelectionDownX;\nfloat deltaY=ev.getY() - mSelectionDownY;\nint deltaCols=(int)Math.ceil(deltaX / mRenderer.mFontWidth);\nint deltaRows=(int)Math.ceil(deltaY / mRenderer.mFontLineSpacing);\nmSelectionDownX+=deltaCols * mRenderer.mFontWidth;\nmSelectionDownY+=deltaRows * mRenderer.mFontLineSpacing;\nif (mIsDraggingLeftSelection) {\nmSelX1+=deltaCols;\nmSelY1+=deltaRows;\n}\n else {\nmSelX2+=deltaCols;\nmSelY2+=deltaRows;\n}\nmSelX1=Math.min(mEmulator.mColumns,Math.max(0,mSelX1));\nmSelX2=Math.min(mEmulator.mColumns,Math.max(0,mSelX2));\nif (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\nmIsDraggingLeftSelection=!mIsDraggingLeftSelection;\nint tmpX1=mSelX1, tmpY1=mSelY1;\nmSelX1=mSelX2;\nmSelY1=mSelY2;\nmSelX2=tmpX1;\nmSelY2=tmpY1;\n}\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\ninvalidate();\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2523,
        "startLineNumber" : 459,
        "startColumnNumber" : 30,
        "endLineNumber" : 512,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int cy=(int)(ev.getY() / mRenderer.mFontLineSpacing) + mTopRow;\n  int cx=(int)(ev.getX() / mRenderer.mFontWidth);\nswitch (action) {\ncase MotionEvent.ACTION_UP:    mInitialTextSelection=false;\n  break;\ncase MotionEvent.ACTION_DOWN:int distanceFromSel1=Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\nint distanceFromSel2=Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\nmIsDraggingLeftSelection=distanceFromSel1 <= distanceFromSel2;\nmSelectionDownX=ev.getX();\nmSelectionDownY=ev.getY();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInitialTextSelection) break;\nfloat deltaX=ev.getX() - mSelectionDownX;\nfloat deltaY=ev.getY() - mSelectionDownY;\nint deltaCols=(int)Math.ceil(deltaX / mRenderer.mFontWidth);\nint deltaRows=(int)Math.ceil(deltaY / mRenderer.mFontLineSpacing);\nmSelectionDownX+=deltaCols * mRenderer.mFontWidth;\nmSelectionDownY+=deltaRows * mRenderer.mFontLineSpacing;\nif (mIsDraggingLeftSelection) {\nmSelX1+=deltaCols;\nmSelY1+=deltaRows;\n}\n else {\nmSelX2+=deltaCols;\nmSelY2+=deltaRows;\n}\nmSelX1=Math.min(mEmulator.mColumns,Math.max(0,mSelX1));\nmSelX2=Math.min(mEmulator.mColumns,Math.max(0,mSelX2));\nif (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\nmIsDraggingLeftSelection=!mIsDraggingLeftSelection;\nint tmpX1=mSelX1, tmpY1=mSelY1;\nmSelX1=mSelX2;\nmSelY1=mSelY2;\nmSelX2=tmpX1;\nmSelY2=tmpY1;\n}\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\ninvalidate();\nbreak;\ndefault:break;\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3890,
        "startLineNumber" : 459,
        "startColumnNumber" : 8,
        "endLineNumber" : 535,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mIsSelectingText) {\n  int cy=(int)(ev.getY() / mRenderer.mFontLineSpacing) + mTopRow;\n  int cx=(int)(ev.getX() / mRenderer.mFontWidth);\nswitch (action) {\ncase MotionEvent.ACTION_UP:    mInitialTextSelection=false;\n  break;\ncase MotionEvent.ACTION_DOWN:int distanceFromSel1=Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\nint distanceFromSel2=Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\nmIsDraggingLeftSelection=distanceFromSel1 <= distanceFromSel2;\nmSelectionDownX=ev.getX();\nmSelectionDownY=ev.getY();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInitialTextSelection) break;\nfloat deltaX=ev.getX() - mSelectionDownX;\nfloat deltaY=ev.getY() - mSelectionDownY;\nint deltaCols=(int)Math.ceil(deltaX / mRenderer.mFontWidth);\nint deltaRows=(int)Math.ceil(deltaY / mRenderer.mFontLineSpacing);\nmSelectionDownX+=deltaCols * mRenderer.mFontWidth;\nmSelectionDownY+=deltaRows * mRenderer.mFontLineSpacing;\nif (mIsDraggingLeftSelection) {\nmSelX1+=deltaCols;\nmSelY1+=deltaRows;\n}\n else {\nmSelX2+=deltaCols;\nmSelY2+=deltaRows;\n}\nmSelX1=Math.min(mEmulator.mColumns,Math.max(0,mSelX1));\nmSelX2=Math.min(mEmulator.mColumns,Math.max(0,mSelX2));\nif (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\nmIsDraggingLeftSelection=!mIsDraggingLeftSelection;\nint tmpX1=mSelX1, tmpY1=mSelY1;\nmSelX1=mSelX2;\nmSelY1=mSelY2;\nmSelX2=tmpX1;\nmSelY2=tmpY1;\n}\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\ninvalidate();\nbreak;\ndefault:break;\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n else if (ev.isFromSource(InputDevice.SOURCE_MOUSE)) {\nif (ev.isButtonPressed(MotionEvent.BUTTON_SECONDARY)) {\nif (action == MotionEvent.ACTION_DOWN) showContextMenu();\nreturn true;\n}\n else if (ev.isButtonPressed(MotionEvent.BUTTON_TERTIARY)) {\nClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);\nClipData clipData=clipboard.getPrimaryClip();\nif (clipData != null) {\nCharSequence paste=clipData.getItemAt(0).coerceToText(getContext());\nif (!TextUtils.isEmpty(paste)) mEmulator.paste(paste.toString());\n}\n}\n else if (mEmulator.isMouseTrackingActive()) {\nswitch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_UP:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON,ev.getAction() == MotionEvent.ACTION_DOWN);\nbreak;\ncase MotionEvent.ACTION_MOVE:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON_MOVED,true);\nbreak;\n}\nreturn true;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 425,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4061,
        "startLineNumber" : 455,
        "startColumnNumber" : 48,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mEmulator == null)   return true;\n  final int action=ev.getAction();\n  if (mIsSelectingText) {\n    int cy=(int)(ev.getY() / mRenderer.mFontLineSpacing) + mTopRow;\n    int cx=(int)(ev.getX() / mRenderer.mFontWidth);\nswitch (action) {\ncase MotionEvent.ACTION_UP:      mInitialTextSelection=false;\n    break;\ncase MotionEvent.ACTION_DOWN:  int distanceFromSel1=Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\nint distanceFromSel2=Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\nmIsDraggingLeftSelection=distanceFromSel1 <= distanceFromSel2;\nmSelectionDownX=ev.getX();\nmSelectionDownY=ev.getY();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInitialTextSelection) break;\nfloat deltaX=ev.getX() - mSelectionDownX;\nfloat deltaY=ev.getY() - mSelectionDownY;\nint deltaCols=(int)Math.ceil(deltaX / mRenderer.mFontWidth);\nint deltaRows=(int)Math.ceil(deltaY / mRenderer.mFontLineSpacing);\nmSelectionDownX+=deltaCols * mRenderer.mFontWidth;\nmSelectionDownY+=deltaRows * mRenderer.mFontLineSpacing;\nif (mIsDraggingLeftSelection) {\nmSelX1+=deltaCols;\nmSelY1+=deltaRows;\n}\n else {\nmSelX2+=deltaCols;\nmSelY2+=deltaRows;\n}\nmSelX1=Math.min(mEmulator.mColumns,Math.max(0,mSelX1));\nmSelX2=Math.min(mEmulator.mColumns,Math.max(0,mSelX2));\nif (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\nmIsDraggingLeftSelection=!mIsDraggingLeftSelection;\nint tmpX1=mSelX1, tmpY1=mSelY1;\nmSelX1=mSelX2;\nmSelY1=mSelY2;\nmSelX2=tmpX1;\nmSelY2=tmpY1;\n}\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\ninvalidate();\nbreak;\ndefault:break;\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n else if (ev.isFromSource(InputDevice.SOURCE_MOUSE)) {\nif (ev.isButtonPressed(MotionEvent.BUTTON_SECONDARY)) {\nif (action == MotionEvent.ACTION_DOWN) showContextMenu();\nreturn true;\n}\n else if (ev.isButtonPressed(MotionEvent.BUTTON_TERTIARY)) {\nClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);\nClipData clipData=clipboard.getPrimaryClip();\nif (clipData != null) {\nCharSequence paste=clipData.getItemAt(0).coerceToText(getContext());\nif (!TextUtils.isEmpty(paste)) mEmulator.paste(paste.toString());\n}\n}\n else if (mEmulator.isMouseTrackingActive()) {\nswitch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_UP:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON,ev.getAction() == MotionEvent.ACTION_DOWN);\nbreak;\ncase MotionEvent.ACTION_MOVE:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON_MOVED,true);\nbreak;\n}\nreturn true;\n}\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 447,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4186,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressLint(\"ClickableViewAccessibility\") @Override @TargetApi(23) public boolean onTouchEvent(MotionEvent ev){\n  if (mEmulator == null)   return true;\n  final int action=ev.getAction();\n  if (mIsSelectingText) {\n    int cy=(int)(ev.getY() / mRenderer.mFontLineSpacing) + mTopRow;\n    int cx=(int)(ev.getX() / mRenderer.mFontWidth);\nswitch (action) {\ncase MotionEvent.ACTION_UP:      mInitialTextSelection=false;\n    break;\ncase MotionEvent.ACTION_DOWN:  int distanceFromSel1=Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\nint distanceFromSel2=Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\nmIsDraggingLeftSelection=distanceFromSel1 <= distanceFromSel2;\nmSelectionDownX=ev.getX();\nmSelectionDownY=ev.getY();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInitialTextSelection) break;\nfloat deltaX=ev.getX() - mSelectionDownX;\nfloat deltaY=ev.getY() - mSelectionDownY;\nint deltaCols=(int)Math.ceil(deltaX / mRenderer.mFontWidth);\nint deltaRows=(int)Math.ceil(deltaY / mRenderer.mFontLineSpacing);\nmSelectionDownX+=deltaCols * mRenderer.mFontWidth;\nmSelectionDownY+=deltaRows * mRenderer.mFontLineSpacing;\nif (mIsDraggingLeftSelection) {\nmSelX1+=deltaCols;\nmSelY1+=deltaRows;\n}\n else {\nmSelX2+=deltaCols;\nmSelY2+=deltaRows;\n}\nmSelX1=Math.min(mEmulator.mColumns,Math.max(0,mSelX1));\nmSelX2=Math.min(mEmulator.mColumns,Math.max(0,mSelX2));\nif (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\nmIsDraggingLeftSelection=!mIsDraggingLeftSelection;\nint tmpX1=mSelX1, tmpY1=mSelY1;\nmSelX1=mSelX2;\nmSelY1=mSelY2;\nmSelX2=tmpX1;\nmSelY2=tmpY1;\n}\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\ninvalidate();\nbreak;\ndefault:break;\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n else if (ev.isFromSource(InputDevice.SOURCE_MOUSE)) {\nif (ev.isButtonPressed(MotionEvent.BUTTON_SECONDARY)) {\nif (action == MotionEvent.ACTION_DOWN) showContextMenu();\nreturn true;\n}\n else if (ev.isButtonPressed(MotionEvent.BUTTON_TERTIARY)) {\nClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);\nClipData clipData=clipboard.getPrimaryClip();\nif (clipData != null) {\nCharSequence paste=clipData.getItemAt(0).coerceToText(getContext());\nif (!TextUtils.isEmpty(paste)) mEmulator.paste(paste.toString());\n}\n}\n else if (mEmulator.isMouseTrackingActive()) {\nswitch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_UP:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON,ev.getAction() == MotionEvent.ACTION_DOWN);\nbreak;\ncase MotionEvent.ACTION_MOVE:sendMouseEventCode(ev,TerminalEmulator.MOUSE_LEFT_BUTTON_MOVED,true);\nbreak;\n}\nreturn true;\n}\n}\nmGestureRecognizer.onTouchEvent(ev);\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 463,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 475,
        "startColumnNumber" : 20,
        "endLineNumber" : 475,
        "endColumnNumber" : 53
      },
      "nodeContext" : "if (mInitialTextSelection) break;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 475,
    "startColumnNumber" : 24,
    "endLineNumber" : 475,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}