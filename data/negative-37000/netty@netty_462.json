{
  "id" : 462,
  "expression" : "array.count()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "array.count()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 392,
      "startColumnNumber" : 22,
      "endLineNumber" : 392,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 392,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cnt=array.count()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 392,
        "startColumnNumber" : 12,
        "endLineNumber" : 392,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int cnt=array.count();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 507,
        "startLineNumber" : 389,
        "startColumnNumber" : 39,
        "endLineNumber" : 400,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  IovArray array=registration().cleanIovArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    return socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n  return socket.sendToAddresses(array.memoryAddress(0),cnt,remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 538,
        "startLineNumber" : 389,
        "startColumnNumber" : 8,
        "endLineNumber" : 400,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.nioBufferCount() > 1) {\n  IovArray array=registration().cleanIovArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    return socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n  return socket.sendToAddresses(array.memoryAddress(0),cnt,remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 378,
        "startColumnNumber" : 31,
        "endLineNumber" : 408,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assert !(fastOpen && remoteAddress == null) : \"fastOpen requires a remote address\";\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      return socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n    return socket.sendToAddress(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n  }\n  if (data.nioBufferCount() > 1) {\n    IovArray array=registration().cleanIovArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      return socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n    return socket.sendToAddresses(array.memoryAddress(0),cnt,remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n  }\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    return socket.write(nioData,nioData.position(),nioData.limit());\n  }\n  return socket.sendTo(nioData,nioData.position(),nioData.limit(),remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 373,
        "startColumnNumber" : 4,
        "endLineNumber" : 408,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Write bytes to the socket, with or without a remote address. Used for datagram and TCP client fast open writes.\n */\nfinal long doWriteOrSendBytes(ByteBuf data,InetSocketAddress remoteAddress,boolean fastOpen) throws IOException {\n  assert !(fastOpen && remoteAddress == null) : \"fastOpen requires a remote address\";\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      return socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n    return socket.sendToAddress(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n  }\n  if (data.nioBufferCount() > 1) {\n    IovArray array=registration().cleanIovArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      return socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n    return socket.sendToAddresses(array.memoryAddress(0),cnt,remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n  }\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    return socket.write(nioData,nioData.position(),nioData.limit());\n  }\n  return socket.sendTo(nioData,nioData.position(),nioData.limit(),remoteAddress.getAddress(),remoteAddress.getPort(),fastOpen);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 190,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 392,
        "startColumnNumber" : 12,
        "endLineNumber" : 392,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int cnt=array.count();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 392,
    "startColumnNumber" : 22,
    "endLineNumber" : 392,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}