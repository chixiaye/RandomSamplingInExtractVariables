{
  "id" : 372,
  "expression" : "other.getComponentType()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core/src/main/java/org/springframework/core/ResolvableType.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "other.getComponentType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 290,
      "startColumnNumber" : 66,
      "endLineNumber" : 290,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 290,
        "startColumnNumber" : 30,
        "endLineNumber" : 290,
        "endColumnNumber" : 91
      },
      "nodeContext" : "getComponentType().isAssignableFrom(other.getComponentType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 290,
        "startColumnNumber" : 11,
        "endLineNumber" : 290,
        "endColumnNumber" : 91
      },
      "nodeContext" : "other.isArray() && getComponentType().isAssignableFrom(other.getComponentType())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 290,
        "startColumnNumber" : 10,
        "endLineNumber" : 290,
        "endColumnNumber" : 92
      },
      "nodeContext" : "(other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 290,
        "startColumnNumber" : 3,
        "endLineNumber" : 290,
        "endColumnNumber" : 93
      },
      "nodeContext" : "return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 289,
        "startColumnNumber" : 17,
        "endLineNumber" : 291,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 289,
        "startColumnNumber" : 2,
        "endLineNumber" : 291,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (isArray()) {\n  return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2876,
        "startLineNumber" : 280,
        "startColumnNumber" : 97,
        "endLineNumber" : 370,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(other,\"ResolvableType must not be null\");\n  if (this == NONE || other == NONE) {\n    return false;\n  }\n  if (isArray()) {\n    return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n  }\n  if (matchedBefore != null && matchedBefore.get(this.type) == other.type) {\n    return true;\n  }\n  WildcardBounds ourBounds=WildcardBounds.get(this);\n  WildcardBounds typeBounds=WildcardBounds.get(other);\n  if (typeBounds != null) {\n    return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()));\n  }\n  if (ourBounds != null) {\n    return ourBounds.isAssignableFrom(other);\n  }\n  boolean exactMatch=(matchedBefore != null);\n  boolean checkGenerics=true;\n  Class<?> ourResolved=null;\n  if (this.type instanceof TypeVariable) {\n    TypeVariable<?> variable=(TypeVariable<?>)this.type;\n    if (this.variableResolver != null) {\n      ResolvableType resolved=this.variableResolver.resolveVariable(variable);\n      if (resolved != null) {\n        ourResolved=resolved.resolve();\n      }\n    }\n    if (ourResolved == null) {\n      if (other.variableResolver != null) {\n        ResolvableType resolved=other.variableResolver.resolveVariable(variable);\n        if (resolved != null) {\n          ourResolved=resolved.resolve();\n          checkGenerics=false;\n        }\n      }\n    }\n    if (ourResolved == null) {\n      exactMatch=false;\n    }\n  }\n  if (ourResolved == null) {\n    ourResolved=resolve(Object.class);\n  }\n  Class<?> otherResolved=other.toClass();\n  if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved,otherResolved)) {\n    return false;\n  }\n  if (checkGenerics) {\n    ResolvableType[] ourGenerics=getGenerics();\n    ResolvableType[] typeGenerics=other.as(ourResolved).getGenerics();\n    if (ourGenerics.length != typeGenerics.length) {\n      return false;\n    }\n    if (matchedBefore == null) {\n      matchedBefore=new IdentityHashMap<>(1);\n    }\n    matchedBefore.put(this.type,other.type);\n    for (int i=0; i < ourGenerics.length; i++) {\n      if (!ourGenerics[i].isAssignableFrom(typeGenerics[i],matchedBefore)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 352,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2972,
        "startLineNumber" : 280,
        "startColumnNumber" : 1,
        "endLineNumber" : 370,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private boolean isAssignableFrom(ResolvableType other,@Nullable Map<Type,Type> matchedBefore){\n  Assert.notNull(other,\"ResolvableType must not be null\");\n  if (this == NONE || other == NONE) {\n    return false;\n  }\n  if (isArray()) {\n    return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n  }\n  if (matchedBefore != null && matchedBefore.get(this.type) == other.type) {\n    return true;\n  }\n  WildcardBounds ourBounds=WildcardBounds.get(this);\n  WildcardBounds typeBounds=WildcardBounds.get(other);\n  if (typeBounds != null) {\n    return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()));\n  }\n  if (ourBounds != null) {\n    return ourBounds.isAssignableFrom(other);\n  }\n  boolean exactMatch=(matchedBefore != null);\n  boolean checkGenerics=true;\n  Class<?> ourResolved=null;\n  if (this.type instanceof TypeVariable) {\n    TypeVariable<?> variable=(TypeVariable<?>)this.type;\n    if (this.variableResolver != null) {\n      ResolvableType resolved=this.variableResolver.resolveVariable(variable);\n      if (resolved != null) {\n        ourResolved=resolved.resolve();\n      }\n    }\n    if (ourResolved == null) {\n      if (other.variableResolver != null) {\n        ResolvableType resolved=other.variableResolver.resolveVariable(variable);\n        if (resolved != null) {\n          ourResolved=resolved.resolve();\n          checkGenerics=false;\n        }\n      }\n    }\n    if (ourResolved == null) {\n      exactMatch=false;\n    }\n  }\n  if (ourResolved == null) {\n    ourResolved=resolve(Object.class);\n  }\n  Class<?> otherResolved=other.toClass();\n  if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved,otherResolved)) {\n    return false;\n  }\n  if (checkGenerics) {\n    ResolvableType[] ourGenerics=getGenerics();\n    ResolvableType[] typeGenerics=other.as(ourResolved).getGenerics();\n    if (ourGenerics.length != typeGenerics.length) {\n      return false;\n    }\n    if (matchedBefore == null) {\n      matchedBefore=new IdentityHashMap<>(1);\n    }\n    matchedBefore.put(this.type,other.type);\n    for (int i=0; i < ourGenerics.length; i++) {\n      if (!ourGenerics[i].isAssignableFrom(typeGenerics[i],matchedBefore)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 290,
        "startColumnNumber" : 3,
        "endLineNumber" : 290,
        "endColumnNumber" : 93
      },
      "nodeContext" : "return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.springframework.core.ResolvableType"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 290,
    "startColumnNumber" : 66,
    "endLineNumber" : 290,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}