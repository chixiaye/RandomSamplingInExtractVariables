{
  "id" : 72,
  "expression" : "true",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/algorithms/diff/DexSectionDiffAlgorithm.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 260,
      "startColumnNumber" : 85,
      "endLineNumber" : 260,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 260,
        "startColumnNumber" : 52,
        "endLineNumber" : 260,
        "endColumnNumber" : 90
      },
      "nodeContext" : "collectSectionItems(this.oldDex,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 90
      },
      "nodeContext" : "this.adjustedOldIndexedItemsWithOrigOrder=collectSectionItems(this.oldDex,true)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 91
      },
      "nodeContext" : "this.adjustedOldIndexedItemsWithOrigOrder=collectSectionItems(this.oldDex,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 257,
        "startColumnNumber" : 26,
        "endLineNumber" : 372,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.patchOperationList.clear();\n  this.adjustedOldIndexedItemsWithOrigOrder=collectSectionItems(this.oldDex,true);\n  this.oldItemCount=this.adjustedOldIndexedItemsWithOrigOrder.length;\n  AbstractMap.SimpleEntry<Integer,T>[] adjustedOldIndexedItems=new AbstractMap.SimpleEntry[this.oldItemCount];\n  System.arraycopy(this.adjustedOldIndexedItemsWithOrigOrder,0,adjustedOldIndexedItems,0,this.oldItemCount);\n  Arrays.sort(adjustedOldIndexedItems,this.comparatorForItemDiff);\n  AbstractMap.SimpleEntry<Integer,T>[] adjustedNewIndexedItems=collectSectionItems(this.newDex,false);\n  this.newItemCount=adjustedNewIndexedItems.length;\n  Arrays.sort(adjustedNewIndexedItems,this.comparatorForItemDiff);\n  int oldCursor=0;\n  int newCursor=0;\n  while (oldCursor < this.oldItemCount || newCursor < this.newItemCount) {\n    if (oldCursor >= this.oldItemCount) {\n      while (newCursor < this.newItemCount) {\n        AbstractMap.SimpleEntry<Integer,T> newIndexedItem=adjustedNewIndexedItems[newCursor++];\n        this.patchOperationList.add(new PatchOperation<>(PatchOperation.OP_ADD,newIndexedItem.getKey(),newIndexedItem.getValue()));\n      }\n    }\n else     if (newCursor >= newItemCount) {\n      while (oldCursor < oldItemCount) {\n        AbstractMap.SimpleEntry<Integer,T> oldIndexedItem=adjustedOldIndexedItems[oldCursor++];\n        int deletedIndex=oldIndexedItem.getKey();\n        int deletedOffset=getItemOffsetOrIndex(deletedIndex,oldIndexedItem.getValue());\n        this.patchOperationList.add(new PatchOperation<T>(PatchOperation.OP_DEL,deletedIndex));\n        markDeletedIndexOrOffset(this.oldToPatchedIndexMap,deletedIndex,deletedOffset);\n      }\n    }\n else {\n      AbstractMap.SimpleEntry<Integer,T> oldIndexedItem=adjustedOldIndexedItems[oldCursor];\n      AbstractMap.SimpleEntry<Integer,T> newIndexedItem=adjustedNewIndexedItems[newCursor];\n      int cmpRes=oldIndexedItem.getValue().compareTo(newIndexedItem.getValue());\n      if (cmpRes < 0) {\n        int deletedIndex=oldIndexedItem.getKey();\n        int deletedOffset=getItemOffsetOrIndex(deletedIndex,oldIndexedItem.getValue());\n        this.patchOperationList.add(new PatchOperation<T>(PatchOperation.OP_DEL,deletedIndex));\n        markDeletedIndexOrOffset(this.oldToPatchedIndexMap,deletedIndex,deletedOffset);\n        ++oldCursor;\n      }\n else       if (cmpRes > 0) {\n        this.patchOperationList.add(new PatchOperation<>(PatchOperation.OP_ADD,newIndexedItem.getKey(),newIndexedItem.getValue()));\n        ++newCursor;\n      }\n else {\n        int oldIndex=oldIndexedItem.getKey();\n        int newIndex=newIndexedItem.getKey();\n        int oldOffset=getItemOffsetOrIndex(oldIndexedItem.getKey(),oldIndexedItem.getValue());\n        int newOffset=getItemOffsetOrIndex(newIndexedItem.getKey(),newIndexedItem.getValue());\n        if (oldIndex != newIndex) {\n          this.oldIndexToNewIndexMap.put(oldIndex,newIndex);\n        }\n        if (oldOffset != newOffset) {\n          this.oldOffsetToNewOffsetMap.put(oldOffset,newOffset);\n        }\n        ++oldCursor;\n        ++newCursor;\n      }\n    }\n  }\n  Collections.sort(this.patchOperationList,comparatorForPatchOperationOpt);\n  Iterator<PatchOperation<T>> patchOperationIt=this.patchOperationList.iterator();\n  PatchOperation<T> prevPatchOperation=null;\n  while (patchOperationIt.hasNext()) {\n    PatchOperation<T> patchOperation=patchOperationIt.next();\n    if (prevPatchOperation != null && prevPatchOperation.op == PatchOperation.OP_DEL && patchOperation.op == PatchOperation.OP_ADD) {\n      if (prevPatchOperation.index == patchOperation.index) {\n        prevPatchOperation.op=PatchOperation.OP_REPLACE;\n        prevPatchOperation.newItem=patchOperation.newItem;\n        patchOperationIt.remove();\n        prevPatchOperation=null;\n      }\n else {\n        prevPatchOperation=patchOperation;\n      }\n    }\n else {\n      prevPatchOperation=patchOperation;\n    }\n  }\n  patchOperationIt=this.patchOperationList.iterator();\n  while (patchOperationIt.hasNext()) {\n    PatchOperation<T> patchOperation=patchOperationIt.next();\nswitch (patchOperation.op) {\ncase PatchOperation.OP_DEL:{\n        indexToDelOperationMap.put(patchOperation.index,patchOperation);\n        break;\n      }\ncase PatchOperation.OP_ADD:{\n      indexToAddOperationMap.put(patchOperation.index,patchOperation);\n      break;\n    }\ncase PatchOperation.OP_REPLACE:{\n    indexToReplaceOperationMap.put(patchOperation.index,patchOperation);\n    break;\n  }\ndefault:{\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 624,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5995,
        "startLineNumber" : 257,
        "startColumnNumber" : 4,
        "endLineNumber" : 372,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void execute(){\n  this.patchOperationList.clear();\n  this.adjustedOldIndexedItemsWithOrigOrder=collectSectionItems(this.oldDex,true);\n  this.oldItemCount=this.adjustedOldIndexedItemsWithOrigOrder.length;\n  AbstractMap.SimpleEntry<Integer,T>[] adjustedOldIndexedItems=new AbstractMap.SimpleEntry[this.oldItemCount];\n  System.arraycopy(this.adjustedOldIndexedItemsWithOrigOrder,0,adjustedOldIndexedItems,0,this.oldItemCount);\n  Arrays.sort(adjustedOldIndexedItems,this.comparatorForItemDiff);\n  AbstractMap.SimpleEntry<Integer,T>[] adjustedNewIndexedItems=collectSectionItems(this.newDex,false);\n  this.newItemCount=adjustedNewIndexedItems.length;\n  Arrays.sort(adjustedNewIndexedItems,this.comparatorForItemDiff);\n  int oldCursor=0;\n  int newCursor=0;\n  while (oldCursor < this.oldItemCount || newCursor < this.newItemCount) {\n    if (oldCursor >= this.oldItemCount) {\n      while (newCursor < this.newItemCount) {\n        AbstractMap.SimpleEntry<Integer,T> newIndexedItem=adjustedNewIndexedItems[newCursor++];\n        this.patchOperationList.add(new PatchOperation<>(PatchOperation.OP_ADD,newIndexedItem.getKey(),newIndexedItem.getValue()));\n      }\n    }\n else     if (newCursor >= newItemCount) {\n      while (oldCursor < oldItemCount) {\n        AbstractMap.SimpleEntry<Integer,T> oldIndexedItem=adjustedOldIndexedItems[oldCursor++];\n        int deletedIndex=oldIndexedItem.getKey();\n        int deletedOffset=getItemOffsetOrIndex(deletedIndex,oldIndexedItem.getValue());\n        this.patchOperationList.add(new PatchOperation<T>(PatchOperation.OP_DEL,deletedIndex));\n        markDeletedIndexOrOffset(this.oldToPatchedIndexMap,deletedIndex,deletedOffset);\n      }\n    }\n else {\n      AbstractMap.SimpleEntry<Integer,T> oldIndexedItem=adjustedOldIndexedItems[oldCursor];\n      AbstractMap.SimpleEntry<Integer,T> newIndexedItem=adjustedNewIndexedItems[newCursor];\n      int cmpRes=oldIndexedItem.getValue().compareTo(newIndexedItem.getValue());\n      if (cmpRes < 0) {\n        int deletedIndex=oldIndexedItem.getKey();\n        int deletedOffset=getItemOffsetOrIndex(deletedIndex,oldIndexedItem.getValue());\n        this.patchOperationList.add(new PatchOperation<T>(PatchOperation.OP_DEL,deletedIndex));\n        markDeletedIndexOrOffset(this.oldToPatchedIndexMap,deletedIndex,deletedOffset);\n        ++oldCursor;\n      }\n else       if (cmpRes > 0) {\n        this.patchOperationList.add(new PatchOperation<>(PatchOperation.OP_ADD,newIndexedItem.getKey(),newIndexedItem.getValue()));\n        ++newCursor;\n      }\n else {\n        int oldIndex=oldIndexedItem.getKey();\n        int newIndex=newIndexedItem.getKey();\n        int oldOffset=getItemOffsetOrIndex(oldIndexedItem.getKey(),oldIndexedItem.getValue());\n        int newOffset=getItemOffsetOrIndex(newIndexedItem.getKey(),newIndexedItem.getValue());\n        if (oldIndex != newIndex) {\n          this.oldIndexToNewIndexMap.put(oldIndex,newIndex);\n        }\n        if (oldOffset != newOffset) {\n          this.oldOffsetToNewOffsetMap.put(oldOffset,newOffset);\n        }\n        ++oldCursor;\n        ++newCursor;\n      }\n    }\n  }\n  Collections.sort(this.patchOperationList,comparatorForPatchOperationOpt);\n  Iterator<PatchOperation<T>> patchOperationIt=this.patchOperationList.iterator();\n  PatchOperation<T> prevPatchOperation=null;\n  while (patchOperationIt.hasNext()) {\n    PatchOperation<T> patchOperation=patchOperationIt.next();\n    if (prevPatchOperation != null && prevPatchOperation.op == PatchOperation.OP_DEL && patchOperation.op == PatchOperation.OP_ADD) {\n      if (prevPatchOperation.index == patchOperation.index) {\n        prevPatchOperation.op=PatchOperation.OP_REPLACE;\n        prevPatchOperation.newItem=patchOperation.newItem;\n        patchOperationIt.remove();\n        prevPatchOperation=null;\n      }\n else {\n        prevPatchOperation=patchOperation;\n      }\n    }\n else {\n      prevPatchOperation=patchOperation;\n    }\n  }\n  patchOperationIt=this.patchOperationList.iterator();\n  while (patchOperationIt.hasNext()) {\n    PatchOperation<T> patchOperation=patchOperationIt.next();\nswitch (patchOperation.op) {\ncase PatchOperation.OP_DEL:{\n        indexToDelOperationMap.put(patchOperation.index,patchOperation);\n        break;\n      }\ncase PatchOperation.OP_ADD:{\n      indexToAddOperationMap.put(patchOperation.index,patchOperation);\n      break;\n    }\ncase PatchOperation.OP_REPLACE:{\n    indexToReplaceOperationMap.put(patchOperation.index,patchOperation);\n    break;\n  }\ndefault:{\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 628,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 91
      },
      "nodeContext" : "this.adjustedOldIndexedItemsWithOrigOrder=collectSectionItems(this.oldDex,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 260,
    "startColumnNumber" : 85,
    "endLineNumber" : 260,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}