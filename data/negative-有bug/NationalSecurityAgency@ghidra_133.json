{
  "id" : 133,
  "expression" : "file.read(bytes,bytesOffset,numToRead)",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/PDB/src/main/java/ghidra/app/util/bin/format/pdb2/pdbreader/msf/MsfFileReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "file.read(bytes,bytesOffset,numToRead)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 105,
      "startColumnNumber" : 17,
      "endLineNumber" : 105,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 6,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 57
      },
      "nodeContext" : "numBytesRead=file.read(bytes,bytesOffset,numToRead)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 58
      },
      "nodeContext" : "numBytesRead=file.read(bytes,bytesOffset,numToRead);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 82,
        "startColumnNumber" : 22,
        "endLineNumber" : 110,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (numToRead < 1) {\n    throw new IOException(\"Must request at least one byte in MSF read\");\n  }\n  if (offset < 0 || offset >= msf.getPageSize()) {\n    throw new IOException(String.format(\"Offset must be in range [0, %d) in for MSF read\",msf.getPageSize()));\n  }\n  long fileOffset=offset + page * (long)msf.getPageSize();\n  if (AbstractMsf.floorDivisionWithLog2Divisor(offset + numToRead,msf.getLog2PageSize()) > msf.getNumPages()) {\n    throw new IOException(\"Invalid MSF configuration\");\n  }\n  int numBytesRead=0;\n  file.seek(fileOffset);\n  numBytesRead=file.read(bytes,bytesOffset,numToRead);\n  if (numBytesRead != numToRead) {\n    throw new IOException(\"Could not read required bytes from MSF\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 110,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Reads bytes from the  {@link AbstractMsf} into a byte[].\n * @param page The page number within which to start the read.\n * @param offset The byte offset within the page to start the read.\n * @param numToRead The total number of bytes to read.\n * @param bytes The byte[] into which the data is to be written.\n * @param bytesOffset The starting offset within the bytes array in which to start writing.\n * @throws IOException On file seek or read, invalid parameters, bad file configuration, orinability to read required bytes.\n */\nvoid read(int page,int offset,int numToRead,byte[] bytes,int bytesOffset) throws IOException {\n  if (numToRead < 1) {\n    throw new IOException(\"Must request at least one byte in MSF read\");\n  }\n  if (offset < 0 || offset >= msf.getPageSize()) {\n    throw new IOException(String.format(\"Offset must be in range [0, %d) in for MSF read\",msf.getPageSize()));\n  }\n  long fileOffset=offset + page * (long)msf.getPageSize();\n  if (AbstractMsf.floorDivisionWithLog2Divisor(offset + numToRead,msf.getLog2PageSize()) > msf.getNumPages()) {\n    throw new IOException(\"Invalid MSF configuration\");\n  }\n  int numBytesRead=0;\n  file.seek(fileOffset);\n  numBytesRead=file.read(bytes,bytesOffset,numToRead);\n  if (numBytesRead != numToRead) {\n    throw new IOException(\"Could not read required bytes from MSF\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 58
      },
      "nodeContext" : "numBytesRead=file.read(bytes,bytesOffset,numToRead);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 105,
    "startColumnNumber" : 17,
    "endLineNumber" : 105,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}