{
  "id" : 504,
  "expression" : "q2",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonReferenceTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "q2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 156,
      "startColumnNumber" : 8,
      "endLineNumber" : 156,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 18
      },
      "nodeContext" : "q2.add(b2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 19
      },
      "nodeContext" : "q2.add(b2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4471,
        "startLineNumber" : 133,
        "startColumnNumber" : 58,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4535,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadAll() throws InterruptedException {\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 19
      },
      "nodeContext" : "q2.add(b2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.redisson.api.RQueue<org.redisson.api.RBucket<java.lang.String>>"
  }, {
    "nodeContext" : "q2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 157,
      "startColumnNumber" : 31,
      "endLineNumber" : 157,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 157,
        "startColumnNumber" : 31,
        "endLineNumber" : 157,
        "endColumnNumber" : 43
      },
      "nodeContext" : "q2.readAll()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 157,
        "startColumnNumber" : 31,
        "endLineNumber" : 157,
        "endColumnNumber" : 50
      },
      "nodeContext" : "q2.readAll().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 157,
        "startColumnNumber" : 31,
        "endLineNumber" : 157,
        "endColumnNumber" : 56
      },
      "nodeContext" : "q2.readAll().get(0).get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(b2.get(),q2.readAll().get(0).get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(b2.get(),q2.readAll().get(0).get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4471,
        "startLineNumber" : 133,
        "startColumnNumber" : 58,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4535,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadAll() throws InterruptedException {\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(b2.get(),q2.readAll().get(0).get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.redisson.api.RQueue<org.redisson.api.RBucket<java.lang.String>>"
  }, {
    "nodeContext" : "q2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 159,
      "startColumnNumber" : 69,
      "endLineNumber" : 159,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 159,
        "endColumnNumber" : 72
      },
      "nodeContext" : "redisson.getDelayedQueue(q2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 159,
        "startColumnNumber" : 39,
        "endLineNumber" : 159,
        "endColumnNumber" : 72
      },
      "nodeContext" : "q3=redisson.getDelayedQueue(q2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 73
      },
      "nodeContext" : "RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4471,
        "startLineNumber" : 133,
        "startColumnNumber" : 58,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4535,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadAll() throws InterruptedException {\n  RSetCache<RBucket<String>> b1=redisson.getSetCache(\"set\");\n  RBucket<String> b2=redisson.getBucket(\"bucket\");\n  b1.add(b2,1,TimeUnit.MINUTES);\n  b2.set(\"test1\");\n  assertEquals(b2.get(),b1.readAll().iterator().next().get());\n  assertEquals(2,redisson.getKeys().count());\n  RMapCache<String,RSetCache<RBucket<String>>> b3=redisson.getMapCache(\"map\");\n  b3.put(\"1\",b1);\n  assertEquals(b2.get(),b3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),b3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),b3.readAllValues().iterator().next().iterator().next().get());\n  RMapCache<RBucket<String>,RSetCache<RBucket<String>>> b4=redisson.getMapCache(\"map1\");\n  b4.put(b2,b1);\n  assertEquals(b2.get(),b4.readAllKeySet().iterator().next().get());\n  RPriorityQueue<RBucket<String>> q1=redisson.getPriorityQueue(\"q1\");\n  q1.add(b2);\n  assertEquals(b2.get(),q1.readAll().get(0).get());\n  RQueue<RBucket<String>> q2=redisson.getQueue(\"q2\");\n  q2.add(b2);\n  assertEquals(b2.get(),q2.readAll().get(0).get());\n  RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n  q3.offer(b2,10,TimeUnit.MINUTES);\n  assertEquals(b2.get(),q3.readAll().get(0).get());\n  RList<RBucket<String>> l1=redisson.getList(\"l1\");\n  l1.add(b2);\n  assertEquals(b2.get(),l1.readAll().get(0).get());\n  RList<RBucket<String>> sl1=l1.subList(0,0);\n  assertEquals(b2.get(),sl1.readAll().get(0).get());\n  RLocalCachedMap<String,RBucket<String>> m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  m1.put(\"1\",b2);\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  m1=redisson.getLocalCachedMap(\"m1\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m1.readAllMap().get(\"1\").get());\n  assertEquals(b2.get(),m1.readAllEntrySet().iterator().next().getValue().get());\n  assertEquals(b2.get(),m1.readAllValues().iterator().next().get());\n  RLocalCachedMap<RBucket<String>,RBucket<String>> m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  m2.put(b2,b2);\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  m2=redisson.getLocalCachedMap(\"m2\",LocalCachedMapOptions.defaults());\n  assertEquals(b2.get(),m2.readAllKeySet().iterator().next().get());\n  RMap<String,RSetCache<RBucket<String>>> m3=redisson.getMap(\"m3\");\n  m3.put(\"1\",b1);\n  assertEquals(b2.get(),m3.readAllMap().get(\"1\").iterator().next().get());\n  assertEquals(b2.get(),m3.readAllEntrySet().iterator().next().getValue().iterator().next().get());\n  assertEquals(b2.get(),m3.readAllValues().iterator().next().iterator().next().get());\n  RMap<RBucket<String>,RSetCache<RBucket<String>>> m4=redisson.getMap(\"m4\");\n  m4.put(b2,b1);\n  assertEquals(b2.get(),m4.readAllKeySet().iterator().next().get());\n  RGeo<RBucket<String>> g1=redisson.getGeo(\"g1\");\n  g1.add(13.361389,38.115556,b2);\n  assertEquals(b2.get(),g1.readAll().iterator().next().get());\n  RScoredSortedSet<RBucket<String>> s1=redisson.getScoredSortedSet(\"s1\");\n  s1.add(0.0,b2);\n  assertEquals(b2.get(),s1.readAll().iterator().next().get());\n  RListMultimap<String,RBucket<String>> mm1=redisson.getListMultimap(\"mm1\");\n  mm1.put(\"1\",b2);\n  assertEquals(b2.get(),mm1.get(\"1\").readAll().get(0).get());\n  RListMultimap<RBucket<String>,RBucket<String>> mm2=redisson.getListMultimap(\"mm2\");\n  mm2.put(b2,b2);\n  assertEquals(b2.get(),mm2.get(b2).readAll().get(0).get());\n  RSetMultimap<String,RBucket<String>> mm3=redisson.getSetMultimap(\"mm3\");\n  mm3.put(\"1\",b2);\n  assertEquals(b2.get(),mm3.get(\"1\").readAll().iterator().next().get());\n  RSetMultimap<RBucket<String>,RBucket<String>> mm4=redisson.getSetMultimap(\"mm4\");\n  mm4.put(b2,b2);\n  assertEquals(b2.get(),mm4.get(b2).readAll().iterator().next().get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 73
      },
      "nodeContext" : "RDelayedQueue<RBucket<String>> q3=redisson.getDelayedQueue(q2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.redisson.api.RQueue<org.redisson.api.RBucket<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 156,
    "startColumnNumber" : 8,
    "endLineNumber" : 156,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 157,
    "startColumnNumber" : 31,
    "endLineNumber" : 157,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 159,
    "startColumnNumber" : 69,
    "endLineNumber" : 159,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}