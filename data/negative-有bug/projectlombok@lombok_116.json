{
  "id" : 116,
  "expression" : "names",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleDelegate.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "names",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 250,
      "startColumnNumber" : 2,
      "endLineNumber" : 250,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 250,
        "endColumnNumber" : 34
      },
      "nodeContext" : "names.removeAll(usedInMethodSig)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 250,
        "endColumnNumber" : 35
      },
      "nodeContext" : "names.removeAll(usedInMethodSig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 219,
        "startColumnNumber" : 104,
        "endLineNumber" : 257,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (sig.elem.getTypeParameters().isEmpty())   return;\n  Set<String> usedInOurType=new HashSet<String>();\n  JavacNode enclosingType=annotation;\n  while (enclosingType != null) {\n    if (enclosingType.getKind() == Kind.TYPE) {\n      List<JCTypeParameter> typarams=((JCClassDecl)enclosingType.get()).typarams;\n      if (typarams != null)       for (      JCTypeParameter param : typarams) {\n        if (param.name != null)         usedInOurType.add(param.name.toString());\n      }\n    }\n    enclosingType=enclosingType.up();\n  }\n  Set<String> usedInMethodSig=new HashSet<String>();\n  for (  TypeParameterElement param : sig.elem.getTypeParameters()) {\n    usedInMethodSig.add(param.getSimpleName().toString());\n  }\n  usedInMethodSig.retainAll(usedInOurType);\n  if (usedInMethodSig.isEmpty())   return;\n  FindTypeVarScanner scanner=new FindTypeVarScanner();\n  sig.elem.asType().accept(scanner,null);\n  Set<String> names=new HashSet<String>(scanner.getTypeVariables());\n  names.removeAll(usedInMethodSig);\n  if (!names.isEmpty()) {\n    CantMakeDelegates cmd=new CantMakeDelegates();\n    cmd.conflicted=usedInMethodSig;\n    throw cmd;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 212,
        "startColumnNumber" : 1,
        "endLineNumber" : 257,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * There's a rare but problematic case if a delegate method has its own type variables, and the delegated type does too, and the method uses both. If for example the delegated type has  {@code <E>}, and the method has  {@code <T>}, but in our class we have a  {@code <T>} at the class level, then we have two differenttype variables both named  {@code T}. We detect this situation and error out asking the programmer to rename their type variable.\n * @throws CantMakeDelegates If there's a conflict. Conflict list is in ex.conflicted.\n */\nprivate void checkConflictOfTypeVarNames(MethodSig sig,JavacNode annotation) throws CantMakeDelegates {\n  if (sig.elem.getTypeParameters().isEmpty())   return;\n  Set<String> usedInOurType=new HashSet<String>();\n  JavacNode enclosingType=annotation;\n  while (enclosingType != null) {\n    if (enclosingType.getKind() == Kind.TYPE) {\n      List<JCTypeParameter> typarams=((JCClassDecl)enclosingType.get()).typarams;\n      if (typarams != null)       for (      JCTypeParameter param : typarams) {\n        if (param.name != null)         usedInOurType.add(param.name.toString());\n      }\n    }\n    enclosingType=enclosingType.up();\n  }\n  Set<String> usedInMethodSig=new HashSet<String>();\n  for (  TypeParameterElement param : sig.elem.getTypeParameters()) {\n    usedInMethodSig.add(param.getSimpleName().toString());\n  }\n  usedInMethodSig.retainAll(usedInOurType);\n  if (usedInMethodSig.isEmpty())   return;\n  FindTypeVarScanner scanner=new FindTypeVarScanner();\n  sig.elem.asType().accept(scanner,null);\n  Set<String> names=new HashSet<String>(scanner.getTypeVariables());\n  names.removeAll(usedInMethodSig);\n  if (!names.isEmpty()) {\n    CantMakeDelegates cmd=new CantMakeDelegates();\n    cmd.conflicted=usedInMethodSig;\n    throw cmd;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 250,
        "endColumnNumber" : 35
      },
      "nodeContext" : "names.removeAll(usedInMethodSig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "names",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 251,
      "startColumnNumber" : 7,
      "endLineNumber" : 251,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 251,
        "startColumnNumber" : 7,
        "endLineNumber" : 251,
        "endColumnNumber" : 22
      },
      "nodeContext" : "names.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 251,
        "startColumnNumber" : 6,
        "endLineNumber" : 251,
        "endColumnNumber" : 22
      },
      "nodeContext" : "!names.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 251,
        "startColumnNumber" : 2,
        "endLineNumber" : 256,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!names.isEmpty()) {\n  CantMakeDelegates cmd=new CantMakeDelegates();\n  cmd.conflicted=usedInMethodSig;\n  throw cmd;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 219,
        "startColumnNumber" : 104,
        "endLineNumber" : 257,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (sig.elem.getTypeParameters().isEmpty())   return;\n  Set<String> usedInOurType=new HashSet<String>();\n  JavacNode enclosingType=annotation;\n  while (enclosingType != null) {\n    if (enclosingType.getKind() == Kind.TYPE) {\n      List<JCTypeParameter> typarams=((JCClassDecl)enclosingType.get()).typarams;\n      if (typarams != null)       for (      JCTypeParameter param : typarams) {\n        if (param.name != null)         usedInOurType.add(param.name.toString());\n      }\n    }\n    enclosingType=enclosingType.up();\n  }\n  Set<String> usedInMethodSig=new HashSet<String>();\n  for (  TypeParameterElement param : sig.elem.getTypeParameters()) {\n    usedInMethodSig.add(param.getSimpleName().toString());\n  }\n  usedInMethodSig.retainAll(usedInOurType);\n  if (usedInMethodSig.isEmpty())   return;\n  FindTypeVarScanner scanner=new FindTypeVarScanner();\n  sig.elem.asType().accept(scanner,null);\n  Set<String> names=new HashSet<String>(scanner.getTypeVariables());\n  names.removeAll(usedInMethodSig);\n  if (!names.isEmpty()) {\n    CantMakeDelegates cmd=new CantMakeDelegates();\n    cmd.conflicted=usedInMethodSig;\n    throw cmd;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2295,
        "startLineNumber" : 212,
        "startColumnNumber" : 1,
        "endLineNumber" : 257,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * There's a rare but problematic case if a delegate method has its own type variables, and the delegated type does too, and the method uses both. If for example the delegated type has  {@code <E>}, and the method has  {@code <T>}, but in our class we have a  {@code <T>} at the class level, then we have two differenttype variables both named  {@code T}. We detect this situation and error out asking the programmer to rename their type variable.\n * @throws CantMakeDelegates If there's a conflict. Conflict list is in ex.conflicted.\n */\nprivate void checkConflictOfTypeVarNames(MethodSig sig,JavacNode annotation) throws CantMakeDelegates {\n  if (sig.elem.getTypeParameters().isEmpty())   return;\n  Set<String> usedInOurType=new HashSet<String>();\n  JavacNode enclosingType=annotation;\n  while (enclosingType != null) {\n    if (enclosingType.getKind() == Kind.TYPE) {\n      List<JCTypeParameter> typarams=((JCClassDecl)enclosingType.get()).typarams;\n      if (typarams != null)       for (      JCTypeParameter param : typarams) {\n        if (param.name != null)         usedInOurType.add(param.name.toString());\n      }\n    }\n    enclosingType=enclosingType.up();\n  }\n  Set<String> usedInMethodSig=new HashSet<String>();\n  for (  TypeParameterElement param : sig.elem.getTypeParameters()) {\n    usedInMethodSig.add(param.getSimpleName().toString());\n  }\n  usedInMethodSig.retainAll(usedInOurType);\n  if (usedInMethodSig.isEmpty())   return;\n  FindTypeVarScanner scanner=new FindTypeVarScanner();\n  sig.elem.asType().accept(scanner,null);\n  Set<String> names=new HashSet<String>(scanner.getTypeVariables());\n  names.removeAll(usedInMethodSig);\n  if (!names.isEmpty()) {\n    CantMakeDelegates cmd=new CantMakeDelegates();\n    cmd.conflicted=usedInMethodSig;\n    throw cmd;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 251,
        "startColumnNumber" : 6,
        "endLineNumber" : 251,
        "endColumnNumber" : 22
      },
      "nodeContext" : "!names.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 250,
    "startColumnNumber" : 2,
    "endLineNumber" : 250,
    "endColumnNumber" : 7
  }, {
    "charLength" : 5,
    "startLineNumber" : 251,
    "startColumnNumber" : 7,
    "endLineNumber" : 251,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}