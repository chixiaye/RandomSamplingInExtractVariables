{
  "id" : 500,
  "expression" : "deltaX == 0",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/common/detector/MonochromeRectangleDetector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "deltaX == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 114,
      "startColumnNumber" : 10,
      "endLineNumber" : 114,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (deltaX == 0) {\n  range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n}\n else {\n  range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 112,
        "startColumnNumber" : 35,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] range;\n  if (deltaX == 0) {\n    range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n  }\n else {\n    range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n  }\n  if (range == null) {\n    if (lastRange == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    if (deltaX == 0) {\n      int lastY=y - deltaY;\n      if (lastRange[0] < centerX) {\n        if (lastRange[1] > centerX) {\n          return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n        }\n        return new ResultPoint(lastRange[0],lastY);\n      }\n else {\n        return new ResultPoint(lastRange[1],lastY);\n      }\n    }\n else {\n      int lastX=x - deltaX;\n      if (lastRange[0] < centerY) {\n        if (lastRange[1] > centerY) {\n          return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n        }\n        return new ResultPoint(lastX,lastRange[0]);\n      }\n else {\n        return new ResultPoint(lastX,lastRange[1]);\n      }\n    }\n  }\n  lastRange=range;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n  int[] range;\n  if (deltaX == 0) {\n    range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n  }\n else {\n    range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n  }\n  if (range == null) {\n    if (lastRange == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    if (deltaX == 0) {\n      int lastY=y - deltaY;\n      if (lastRange[0] < centerX) {\n        if (lastRange[1] > centerX) {\n          return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n        }\n        return new ResultPoint(lastRange[0],lastY);\n      }\n else {\n        return new ResultPoint(lastRange[1],lastY);\n      }\n    }\n else {\n      int lastX=x - deltaX;\n      if (lastRange[0] < centerY) {\n        if (lastRange[1] > centerY) {\n          return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n        }\n        return new ResultPoint(lastX,lastRange[0]);\n      }\n else {\n        return new ResultPoint(lastX,lastRange[1]);\n      }\n    }\n  }\n  lastRange=range;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 193,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1597,
        "startLineNumber" : 108,
        "startColumnNumber" : 85,
        "endLineNumber" : 152,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] lastRange=null;\n  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n    int[] range;\n    if (deltaX == 0) {\n      range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n    }\n else {\n      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n    }\n    if (range == null) {\n      if (lastRange == null) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n      if (deltaX == 0) {\n        int lastY=y - deltaY;\n        if (lastRange[0] < centerX) {\n          if (lastRange[1] > centerX) {\n            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n          }\n          return new ResultPoint(lastRange[0],lastY);\n        }\n else {\n          return new ResultPoint(lastRange[1],lastY);\n        }\n      }\n else {\n        int lastX=x - deltaX;\n        if (lastRange[0] < centerY) {\n          if (lastRange[1] > centerY) {\n            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n          }\n          return new ResultPoint(lastX,lastRange[0]);\n        }\n else {\n          return new ResultPoint(lastX,lastRange[1]);\n        }\n      }\n    }\n    lastRange=range;\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3048,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Attempts to locate a corner of the barcode by scanning up, down, left or right from a center point which should be within the barcode.\n * @param centerX center's x component (horizontal)\n * @param deltaX same as deltaY but change in x per step instead\n * @param left minimum value of x\n * @param right maximum value of x\n * @param centerY center's y component (vertical)\n * @param deltaY change in y per step. If scanning up this is negative; down, positive;left or right, 0\n * @param top minimum value of y to search through (meaningless when di == 0)\n * @param bottom maximum value of y\n * @param maxWhiteRun maximum run of white pixels that can still be considered to be withinthe barcode\n * @return a {@link com.google.zxing.ResultPoint} encapsulating the corner that was found\n * @throws NotFoundException if such a point cannot be found\n */\nprivate ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {\n  int[] lastRange=null;\n  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n    int[] range;\n    if (deltaX == 0) {\n      range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n    }\n else {\n      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n    }\n    if (range == null) {\n      if (lastRange == null) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n      if (deltaX == 0) {\n        int lastY=y - deltaY;\n        if (lastRange[0] < centerX) {\n          if (lastRange[1] > centerX) {\n            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n          }\n          return new ResultPoint(lastRange[0],lastY);\n        }\n else {\n          return new ResultPoint(lastRange[1],lastY);\n        }\n      }\n else {\n        int lastX=x - deltaX;\n        if (lastRange[0] < centerY) {\n          if (lastRange[1] > centerY) {\n            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n          }\n          return new ResultPoint(lastX,lastRange[0]);\n        }\n else {\n          return new ResultPoint(lastX,lastRange[1]);\n        }\n      }\n    }\n    lastRange=range;\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 120,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (deltaX == 0) {\n  range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n}\n else {\n  range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "deltaX == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 126,
      "startColumnNumber" : 12,
      "endLineNumber" : 126,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (deltaX == 0) {\n  int lastY=y - deltaY;\n  if (lastRange[0] < centerX) {\n    if (lastRange[1] > centerX) {\n      return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n    }\n    return new ResultPoint(lastRange[0],lastY);\n  }\n else {\n    return new ResultPoint(lastRange[1],lastY);\n  }\n}\n else {\n  int lastX=x - deltaX;\n  if (lastRange[0] < centerY) {\n    if (lastRange[1] > centerY) {\n      return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n    }\n    return new ResultPoint(lastX,lastRange[0]);\n  }\n else {\n    return new ResultPoint(lastX,lastRange[1]);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 121,
        "startColumnNumber" : 25,
        "endLineNumber" : 148,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (lastRange == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (deltaX == 0) {\n    int lastY=y - deltaY;\n    if (lastRange[0] < centerX) {\n      if (lastRange[1] > centerX) {\n        return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n      }\n      return new ResultPoint(lastRange[0],lastY);\n    }\n else {\n      return new ResultPoint(lastRange[1],lastY);\n    }\n  }\n else {\n    int lastX=x - deltaX;\n    if (lastRange[0] < centerY) {\n      if (lastRange[1] > centerY) {\n        return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n      }\n      return new ResultPoint(lastX,lastRange[0]);\n    }\n else {\n      return new ResultPoint(lastX,lastRange[1]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 121,
        "startColumnNumber" : 6,
        "endLineNumber" : 148,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (range == null) {\n  if (lastRange == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (deltaX == 0) {\n    int lastY=y - deltaY;\n    if (lastRange[0] < centerX) {\n      if (lastRange[1] > centerX) {\n        return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n      }\n      return new ResultPoint(lastRange[0],lastY);\n    }\n else {\n      return new ResultPoint(lastRange[1],lastY);\n    }\n  }\n else {\n    int lastX=x - deltaX;\n    if (lastRange[0] < centerY) {\n      if (lastRange[1] > centerY) {\n        return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n      }\n      return new ResultPoint(lastX,lastRange[0]);\n    }\n else {\n      return new ResultPoint(lastX,lastRange[1]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 112,
        "startColumnNumber" : 35,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] range;\n  if (deltaX == 0) {\n    range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n  }\n else {\n    range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n  }\n  if (range == null) {\n    if (lastRange == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    if (deltaX == 0) {\n      int lastY=y - deltaY;\n      if (lastRange[0] < centerX) {\n        if (lastRange[1] > centerX) {\n          return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n        }\n        return new ResultPoint(lastRange[0],lastY);\n      }\n else {\n        return new ResultPoint(lastRange[1],lastY);\n      }\n    }\n else {\n      int lastX=x - deltaX;\n      if (lastRange[0] < centerY) {\n        if (lastRange[1] > centerY) {\n          return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n        }\n        return new ResultPoint(lastX,lastRange[0]);\n      }\n else {\n        return new ResultPoint(lastX,lastRange[1]);\n      }\n    }\n  }\n  lastRange=range;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n  int[] range;\n  if (deltaX == 0) {\n    range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n  }\n else {\n    range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n  }\n  if (range == null) {\n    if (lastRange == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    if (deltaX == 0) {\n      int lastY=y - deltaY;\n      if (lastRange[0] < centerX) {\n        if (lastRange[1] > centerX) {\n          return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n        }\n        return new ResultPoint(lastRange[0],lastY);\n      }\n else {\n        return new ResultPoint(lastRange[1],lastY);\n      }\n    }\n else {\n      int lastX=x - deltaX;\n      if (lastRange[0] < centerY) {\n        if (lastRange[1] > centerY) {\n          return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n        }\n        return new ResultPoint(lastX,lastRange[0]);\n      }\n else {\n        return new ResultPoint(lastX,lastRange[1]);\n      }\n    }\n  }\n  lastRange=range;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 193,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1597,
        "startLineNumber" : 108,
        "startColumnNumber" : 85,
        "endLineNumber" : 152,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] lastRange=null;\n  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n    int[] range;\n    if (deltaX == 0) {\n      range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n    }\n else {\n      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n    }\n    if (range == null) {\n      if (lastRange == null) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n      if (deltaX == 0) {\n        int lastY=y - deltaY;\n        if (lastRange[0] < centerX) {\n          if (lastRange[1] > centerX) {\n            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n          }\n          return new ResultPoint(lastRange[0],lastY);\n        }\n else {\n          return new ResultPoint(lastRange[1],lastY);\n        }\n      }\n else {\n        int lastX=x - deltaX;\n        if (lastRange[0] < centerY) {\n          if (lastRange[1] > centerY) {\n            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n          }\n          return new ResultPoint(lastX,lastRange[0]);\n        }\n else {\n          return new ResultPoint(lastX,lastRange[1]);\n        }\n      }\n    }\n    lastRange=range;\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3048,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Attempts to locate a corner of the barcode by scanning up, down, left or right from a center point which should be within the barcode.\n * @param centerX center's x component (horizontal)\n * @param deltaX same as deltaY but change in x per step instead\n * @param left minimum value of x\n * @param right maximum value of x\n * @param centerY center's y component (vertical)\n * @param deltaY change in y per step. If scanning up this is negative; down, positive;left or right, 0\n * @param top minimum value of y to search through (meaningless when di == 0)\n * @param bottom maximum value of y\n * @param maxWhiteRun maximum run of white pixels that can still be considered to be withinthe barcode\n * @return a {@link com.google.zxing.ResultPoint} encapsulating the corner that was found\n * @throws NotFoundException if such a point cannot be found\n */\nprivate ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {\n  int[] lastRange=null;\n  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {\n    int[] range;\n    if (deltaX == 0) {\n      range=blackWhiteRange(y,maxWhiteRun,left,right,true);\n    }\n else {\n      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);\n    }\n    if (range == null) {\n      if (lastRange == null) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n      if (deltaX == 0) {\n        int lastY=y - deltaY;\n        if (lastRange[0] < centerX) {\n          if (lastRange[1] > centerX) {\n            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n          }\n          return new ResultPoint(lastRange[0],lastY);\n        }\n else {\n          return new ResultPoint(lastRange[1],lastY);\n        }\n      }\n else {\n        int lastX=x - deltaX;\n        if (lastRange[0] < centerY) {\n          if (lastRange[1] > centerY) {\n            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n          }\n          return new ResultPoint(lastX,lastRange[0]);\n        }\n else {\n          return new ResultPoint(lastX,lastRange[1]);\n        }\n      }\n    }\n    lastRange=range;\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (deltaX == 0) {\n  int lastY=y - deltaY;\n  if (lastRange[0] < centerX) {\n    if (lastRange[1] > centerX) {\n      return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);\n    }\n    return new ResultPoint(lastRange[0],lastY);\n  }\n else {\n    return new ResultPoint(lastRange[1],lastY);\n  }\n}\n else {\n  int lastX=x - deltaX;\n  if (lastRange[0] < centerY) {\n    if (lastRange[1] > centerY) {\n      return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);\n    }\n    return new ResultPoint(lastX,lastRange[0]);\n  }\n else {\n    return new ResultPoint(lastX,lastRange[1]);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 114,
    "startColumnNumber" : 10,
    "endLineNumber" : 114,
    "endColumnNumber" : 21
  }, {
    "charLength" : 11,
    "startLineNumber" : 126,
    "startColumnNumber" : 12,
    "endLineNumber" : 126,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}