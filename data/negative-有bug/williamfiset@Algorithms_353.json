{
  "id" : 353,
  "expression" : "start",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 54,
      "startColumnNumber" : 9,
      "endLineNumber" : 54,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 15
      },
      "nodeContext" : "dist[start]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 19
      },
      "nodeContext" : "dist[start]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 20
      },
      "nodeContext" : "dist[start]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 48,
        "startColumnNumber" : 75,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  double[] dist=new double[V];\n  java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0;\n  for (int i=0; i < V - 1; i++)   for (  List<Edge> edges : graph)   for (  Edge edge : edges)   if (dist[edge.from] + edge.cost < dist[edge.to])   dist[edge.to]=dist[edge.from] + edge.cost;\n  for (int i=0; i < V - 1; i++)   for (  List<Edge> edges : graph)   for (  Edge edge : edges)   if (dist[edge.from] + edge.cost < dist[edge.to])   dist[edge.to]=Double.NEGATIVE_INFINITY;\n  return dist;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1586,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * An implementation of the Bellman-Ford algorithm. The algorithm finds the shortest path between a starting node and all other nodes in the graph. The algorithm also detects negative cycles. If a node is part of a negative cycle then the minimum cost for that node is set to Double.NEGATIVE_INFINITY.\n * @param graph - An adjacency list containing directed edges forming the graph\n * @param V - The number of vertices in the graph.\n * @param start - The id of the starting node\n */\npublic static double[] bellmanFord(List<Edge>[] graph,int V,int start){\n  double[] dist=new double[V];\n  java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0;\n  for (int i=0; i < V - 1; i++)   for (  List<Edge> edges : graph)   for (  Edge edge : edges)   if (dist[edge.from] + edge.cost < dist[edge.to])   dist[edge.to]=dist[edge.from] + edge.cost;\n  for (int i=0; i < V - 1; i++)   for (  List<Edge> edges : graph)   for (  Edge edge : edges)   if (dist[edge.from] + edge.cost < dist[edge.to])   dist[edge.to]=Double.NEGATIVE_INFINITY;\n  return dist;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 20
      },
      "nodeContext" : "dist[start]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 54,
    "startColumnNumber" : 9,
    "endLineNumber" : 54,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}