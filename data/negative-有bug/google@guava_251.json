{
  "id" : 251,
  "expression" : "getTesters()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-testlib/src/com/google/common/collect/testing/PerCollectionSizeTestSuiteBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getTesters()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 62,
      "startColumnNumber" : 52,
      "endLineNumber" : 62,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 62,
        "startColumnNumber" : 42,
        "endLineNumber" : 62,
        "endColumnNumber" : 64
      },
      "nodeContext" : "testers=getTesters()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 65
      },
      "nodeContext" : "List<Class<? extends AbstractTester>> testers=getTesters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 56,
        "startColumnNumber" : 37,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkCanCreate();\n  String name=getName();\n  Set<Feature<?>> features=Helpers.copyToSet(getFeatures());\n  List<Class<? extends AbstractTester>> testers=getTesters();\n  logger.fine(\" Testing: \" + name);\n  Set<Feature<?>> sizesToTest=Helpers.<Feature<?>>copyToSet(CollectionSize.values());\n  sizesToTest.retainAll(features);\n  features.removeAll(sizesToTest);\n  FeatureUtil.addImpliedFeatures(sizesToTest);\n  sizesToTest.retainAll(Arrays.asList(CollectionSize.ZERO,CollectionSize.ONE,CollectionSize.SEVERAL));\n  logger.fine(\"   Sizes: \" + formatFeatureSet(sizesToTest));\n  if (sizesToTest.isEmpty()) {\n    throw new IllegalStateException(name + \": no CollectionSizes specified (check the argument to \" + \"FeatureSpecificTestSuiteBuilder.withFeatures().)\");\n  }\n  TestSuite suite=new TestSuite(name);\n  for (  Feature<?> collectionSize : sizesToTest) {\n    String oneSizeName=Platform.format(\"%s [collection size: %s]\",name,collectionSize.toString().toLowerCase());\n    OneSizeGenerator<T,E> oneSizeGenerator=new OneSizeGenerator<>(getSubjectGenerator(),(CollectionSize)collectionSize);\n    Set<Feature<?>> oneSizeFeatures=Helpers.copyToSet(features);\n    oneSizeFeatures.add(collectionSize);\n    Set<Method> oneSizeSuppressedTests=getSuppressedTests();\n    OneSizeTestSuiteBuilder<T,E> oneSizeBuilder=new OneSizeTestSuiteBuilder<T,E>(testers).named(oneSizeName).usingGenerator(oneSizeGenerator).withFeatures(oneSizeFeatures).withSetUp(getSetUp()).withTearDown(getTearDown()).suppressing(oneSizeSuppressedTests);\n    TestSuite oneSizeSuite=oneSizeBuilder.createTestSuite();\n    suite.addTest(oneSizeSuite);\n    for (    TestSuite derivedSuite : createDerivedSuites(oneSizeBuilder)) {\n      oneSizeSuite.addTest(derivedSuite);\n    }\n  }\n  return suite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2302,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a runnable JUnit test suite based on the criteria already given. \n */\n@Override public TestSuite createTestSuite(){\n  checkCanCreate();\n  String name=getName();\n  Set<Feature<?>> features=Helpers.copyToSet(getFeatures());\n  List<Class<? extends AbstractTester>> testers=getTesters();\n  logger.fine(\" Testing: \" + name);\n  Set<Feature<?>> sizesToTest=Helpers.<Feature<?>>copyToSet(CollectionSize.values());\n  sizesToTest.retainAll(features);\n  features.removeAll(sizesToTest);\n  FeatureUtil.addImpliedFeatures(sizesToTest);\n  sizesToTest.retainAll(Arrays.asList(CollectionSize.ZERO,CollectionSize.ONE,CollectionSize.SEVERAL));\n  logger.fine(\"   Sizes: \" + formatFeatureSet(sizesToTest));\n  if (sizesToTest.isEmpty()) {\n    throw new IllegalStateException(name + \": no CollectionSizes specified (check the argument to \" + \"FeatureSpecificTestSuiteBuilder.withFeatures().)\");\n  }\n  TestSuite suite=new TestSuite(name);\n  for (  Feature<?> collectionSize : sizesToTest) {\n    String oneSizeName=Platform.format(\"%s [collection size: %s]\",name,collectionSize.toString().toLowerCase());\n    OneSizeGenerator<T,E> oneSizeGenerator=new OneSizeGenerator<>(getSubjectGenerator(),(CollectionSize)collectionSize);\n    Set<Feature<?>> oneSizeFeatures=Helpers.copyToSet(features);\n    oneSizeFeatures.add(collectionSize);\n    Set<Method> oneSizeSuppressedTests=getSuppressedTests();\n    OneSizeTestSuiteBuilder<T,E> oneSizeBuilder=new OneSizeTestSuiteBuilder<T,E>(testers).named(oneSizeName).usingGenerator(oneSizeGenerator).withFeatures(oneSizeFeatures).withSetUp(getSetUp()).withTearDown(getTearDown()).suppressing(oneSizeSuppressedTests);\n    TestSuite oneSizeSuite=oneSizeBuilder.createTestSuite();\n    suite.addTest(oneSizeSuite);\n    for (    TestSuite derivedSuite : createDerivedSuites(oneSizeBuilder)) {\n      oneSizeSuite.addTest(derivedSuite);\n    }\n  }\n  return suite;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 65
      },
      "nodeContext" : "List<Class<? extends AbstractTester>> testers=getTesters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Class<? extends com.google.common.collect.testing.AbstractTester>>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 62,
    "startColumnNumber" : 52,
    "endLineNumber" : 62,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}