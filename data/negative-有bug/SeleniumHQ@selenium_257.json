{
  "id" : 257,
  "expression" : "Arrays.asList(value)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/Keys.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Arrays.asList(value)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 157,
      "startColumnNumber" : 17,
      "endLineNumber" : 157,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 157,
        "startColumnNumber" : 11,
        "endLineNumber" : 157,
        "endColumnNumber" : 38
      },
      "nodeContext" : "chord(Arrays.asList(value))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 39
      },
      "nodeContext" : "return chord(Arrays.asList(value));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 156,
        "startColumnNumber" : 52,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return chord(Arrays.asList(value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simulate pressing many keys at once in a \"chord\".  Takes a sequence of Keys.XXXX or strings; appends each of the values to a string, and adds the chord termination key (Keys.NULL) and returns the resultant string. Note: When the low-level webdriver key handlers see Keys.NULL, active modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n * @param value characters to send\n * @return String representation of the char sequence\n */\npublic static String chord(CharSequence... value){\n  return chord(Arrays.asList(value));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 19,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 39
      },
      "nodeContext" : "return chord(Arrays.asList(value));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.List<java.lang.CharSequence>"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 157,
    "startColumnNumber" : 17,
    "endLineNumber" : 157,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}