{
  "id" : 267,
  "expression" : "testRealm().users().search(\"user-with-one-configured-otp\").get(0)",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/MultiFactorAuthenticationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "testRealm().users().search(\"user-with-one-configured-otp\").get(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 235,
      "startColumnNumber" : 38,
      "endLineNumber" : 235,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 235,
        "startColumnNumber" : 38,
        "endLineNumber" : 235,
        "endColumnNumber" : 111
      },
      "nodeContext" : "testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 112
      },
      "nodeContext" : "events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 77
      },
      "nodeContext" : "events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 91
      },
      "nodeContext" : "events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 92
      },
      "nodeContext" : "events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  loginUsernameOnlyPage.open();\n  loginUsernameOnlyPage.login(\"user-with-one-configured-otp\");\n  passwordPage.assertCurrent();\n  passwordPage.assertTryAnotherWayLinkAvailability(true);\n  passwordPage.clickTryAnotherWayLink();\n  selectAuthenticatorPage.assertCurrent();\n  Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n  selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION);\n  loginTotpPage.assertCurrent();\n  loginTotpPage.assertTryAnotherWayLinkAvailability(true);\n  loginTotpPage.clickTryAnotherWayLink();\n  selectAuthenticatorPage.assertCurrent();\n  Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n  selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.PASSWORD);\n  passwordPage.assertCurrent();\n  passwordPage.login(\"password\");\n  Assert.assertFalse(passwordPage.isCurrent());\n  Assert.assertFalse(loginPage.isCurrent());\n  events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1992,
        "startLineNumber" : 208,
        "startColumnNumber" : 8,
        "endLineNumber" : 239,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  loginUsernameOnlyPage.open();\n  loginUsernameOnlyPage.login(\"user-with-one-configured-otp\");\n  passwordPage.assertCurrent();\n  passwordPage.assertTryAnotherWayLinkAvailability(true);\n  passwordPage.clickTryAnotherWayLink();\n  selectAuthenticatorPage.assertCurrent();\n  Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n  selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION);\n  loginTotpPage.assertCurrent();\n  loginTotpPage.assertTryAnotherWayLinkAvailability(true);\n  loginTotpPage.clickTryAnotherWayLink();\n  selectAuthenticatorPage.assertCurrent();\n  Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n  selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.PASSWORD);\n  passwordPage.assertCurrent();\n  passwordPage.login(\"password\");\n  Assert.assertFalse(passwordPage.isCurrent());\n  Assert.assertFalse(loginPage.isCurrent());\n  events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent();\n}\n  finally {\n  BrowserFlowTest.revertFlows(testRealm(),\"browser - alternative mechanisms\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3393,
        "startLineNumber" : 189,
        "startColumnNumber" : 63,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String newFlowAlias=\"browser - alternative mechanisms\";\n  testingClient.server(\"test\").run(session -> FlowUtil.inCurrentRealm(session).copyBrowserFlow(newFlowAlias));\n  testingClient.server(\"test\").run(session -> FlowUtil.inCurrentRealm(session).selectFlow(newFlowAlias).inForms(forms -> forms.clear().addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.REQUIRED,UsernameFormFactory.PROVIDER_ID).addSubFlowExecution(AuthenticationExecutionModel.Requirement.REQUIRED,reqSubFlow -> reqSubFlow.addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.ALTERNATIVE,PasswordFormFactory.PROVIDER_ID).addSubFlowExecution(\"otp subflow\",AuthenticationFlow.BASIC_FLOW,AuthenticationExecutionModel.Requirement.ALTERNATIVE,altSubFlow -> altSubFlow.addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.REQUIRED,OTPFormAuthenticatorFactory.PROVIDER_ID)))).defineAsBrowserFlow());\n  try {\n    loginUsernameOnlyPage.open();\n    loginUsernameOnlyPage.login(\"user-with-one-configured-otp\");\n    passwordPage.assertCurrent();\n    passwordPage.assertTryAnotherWayLinkAvailability(true);\n    passwordPage.clickTryAnotherWayLink();\n    selectAuthenticatorPage.assertCurrent();\n    Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n    selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION);\n    loginTotpPage.assertCurrent();\n    loginTotpPage.assertTryAnotherWayLinkAvailability(true);\n    loginTotpPage.clickTryAnotherWayLink();\n    selectAuthenticatorPage.assertCurrent();\n    Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n    selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.PASSWORD);\n    passwordPage.assertCurrent();\n    passwordPage.login(\"password\");\n    Assert.assertFalse(passwordPage.isCurrent());\n    Assert.assertFalse(loginPage.isCurrent());\n    events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent();\n  }\n  finally {\n    BrowserFlowTest.revertFlows(testRealm(),\"browser - alternative mechanisms\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAlternativeMechanismsInDifferentSubflows(){\n  final String newFlowAlias=\"browser - alternative mechanisms\";\n  testingClient.server(\"test\").run(session -> FlowUtil.inCurrentRealm(session).copyBrowserFlow(newFlowAlias));\n  testingClient.server(\"test\").run(session -> FlowUtil.inCurrentRealm(session).selectFlow(newFlowAlias).inForms(forms -> forms.clear().addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.REQUIRED,UsernameFormFactory.PROVIDER_ID).addSubFlowExecution(AuthenticationExecutionModel.Requirement.REQUIRED,reqSubFlow -> reqSubFlow.addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.ALTERNATIVE,PasswordFormFactory.PROVIDER_ID).addSubFlowExecution(\"otp subflow\",AuthenticationFlow.BASIC_FLOW,AuthenticationExecutionModel.Requirement.ALTERNATIVE,altSubFlow -> altSubFlow.addAuthenticatorExecution(AuthenticationExecutionModel.Requirement.REQUIRED,OTPFormAuthenticatorFactory.PROVIDER_ID)))).defineAsBrowserFlow());\n  try {\n    loginUsernameOnlyPage.open();\n    loginUsernameOnlyPage.login(\"user-with-one-configured-otp\");\n    passwordPage.assertCurrent();\n    passwordPage.assertTryAnotherWayLinkAvailability(true);\n    passwordPage.clickTryAnotherWayLink();\n    selectAuthenticatorPage.assertCurrent();\n    Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n    selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION);\n    loginTotpPage.assertCurrent();\n    loginTotpPage.assertTryAnotherWayLinkAvailability(true);\n    loginTotpPage.clickTryAnotherWayLink();\n    selectAuthenticatorPage.assertCurrent();\n    Assert.assertEquals(Arrays.asList(SelectAuthenticatorPage.PASSWORD,SelectAuthenticatorPage.AUTHENTICATOR_APPLICATION),selectAuthenticatorPage.getAvailableLoginMethods());\n    selectAuthenticatorPage.selectLoginMethod(SelectAuthenticatorPage.PASSWORD);\n    passwordPage.assertCurrent();\n    passwordPage.login(\"password\");\n    Assert.assertFalse(passwordPage.isCurrent());\n    Assert.assertFalse(loginPage.isCurrent());\n    events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId()).detail(Details.USERNAME,\"user-with-one-configured-otp\").assertEvent();\n  }\n  finally {\n    BrowserFlowTest.revertFlows(testRealm(),\"browser - alternative mechanisms\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 262,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 112
      },
      "nodeContext" : "events.expectLogin().user(testRealm().users().search(\"user-with-one-configured-otp\").get(0).getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "org.keycloak.representations.idm.UserRepresentation"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 235,
    "startColumnNumber" : 38,
    "endLineNumber" : 235,
    "endColumnNumber" : 103
  } ],
  "layoutRelationDataList" : [ ]
}