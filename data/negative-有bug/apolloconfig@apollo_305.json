{
  "id" : 305,
  "expression" : "!namespaceBelongsToAppId(appId,namespace)",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!namespaceBelongsToAppId(appId,namespace)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 79,
      "startColumnNumber" : 8,
      "endLineNumber" : 79,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!namespaceBelongsToAppId(appId,namespace)) {\n  Release publicRelease=this.findPublicConfig(appId,clusterName,namespace,dataCenter);\n  if (!Objects.isNull(publicRelease)) {\n    releases.add(publicRelease);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2235,
        "startLineNumber" : 60,
        "startColumnNumber" : 83,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String originalNamespace=namespace;\n  namespace=namespaceUtil.filterNamespaceName(namespace);\n  List<Release> releases=Lists.newLinkedList();\n  String appClusterNameLoaded=clusterName;\n  if (!ConfigConsts.NO_APPID_PLACEHOLDER.equalsIgnoreCase(appId)) {\n    Release currentAppRelease=loadConfig(appId,clusterName,namespace,dataCenter);\n    if (currentAppRelease != null) {\n      releases.add(currentAppRelease);\n      appClusterNameLoaded=currentAppRelease.getClusterName();\n    }\n  }\n  if (!namespaceBelongsToAppId(appId,namespace)) {\n    Release publicRelease=this.findPublicConfig(appId,clusterName,namespace,dataCenter);\n    if (!Objects.isNull(publicRelease)) {\n      releases.add(publicRelease);\n    }\n  }\n  if (releases.isEmpty()) {\n    response.sendError(HttpServletResponse.SC_NOT_FOUND,String.format(\"Could not load configurations with appId: %s, clusterName: %s, namespace: %s\",appId,clusterName,originalNamespace));\n    Cat.logEvent(\"Apollo.Config.NotFound\",assembleKey(appId,clusterName,originalNamespace,dataCenter));\n    return null;\n  }\n  String mergedReleaseKey=FluentIterable.from(releases).transform(input -> String.valueOf(input.getReleaseKey())).join(STRING_JOINER);\n  if (mergedReleaseKey.equals(clientSideReleaseKey)) {\n    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n    Cat.logEvent(\"Apollo.Config.NotModified\",assembleKey(appId,appClusterNameLoaded,originalNamespace,dataCenter));\n    return null;\n  }\n  ApolloConfig apolloConfig=new ApolloConfig(appId,appClusterNameLoaded,originalNamespace,mergedReleaseKey);\n  apolloConfig.setConfigurations(mergeReleaseConfigurations(releases));\n  Cat.logEvent(\"Apollo.Config.Found\",assembleKey(appId,appClusterNameLoaded,originalNamespace,dataCenter));\n  return apolloConfig;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@RequestMapping(value=\"/{appId}/{clusterName}/{namespace:.+}\",method=RequestMethod.GET) public ApolloConfig queryConfig(@PathVariable String appId,@PathVariable String clusterName,@PathVariable String namespace,@RequestParam(value=\"dataCenter\",required=false) String dataCenter,@RequestParam(value=\"releaseKey\",defaultValue=\"-1\") String clientSideReleaseKey,@RequestParam(value=\"ip\",required=false) String clientIp,HttpServletResponse response) throws IOException {\n  String originalNamespace=namespace;\n  namespace=namespaceUtil.filterNamespaceName(namespace);\n  List<Release> releases=Lists.newLinkedList();\n  String appClusterNameLoaded=clusterName;\n  if (!ConfigConsts.NO_APPID_PLACEHOLDER.equalsIgnoreCase(appId)) {\n    Release currentAppRelease=loadConfig(appId,clusterName,namespace,dataCenter);\n    if (currentAppRelease != null) {\n      releases.add(currentAppRelease);\n      appClusterNameLoaded=currentAppRelease.getClusterName();\n    }\n  }\n  if (!namespaceBelongsToAppId(appId,namespace)) {\n    Release publicRelease=this.findPublicConfig(appId,clusterName,namespace,dataCenter);\n    if (!Objects.isNull(publicRelease)) {\n      releases.add(publicRelease);\n    }\n  }\n  if (releases.isEmpty()) {\n    response.sendError(HttpServletResponse.SC_NOT_FOUND,String.format(\"Could not load configurations with appId: %s, clusterName: %s, namespace: %s\",appId,clusterName,originalNamespace));\n    Cat.logEvent(\"Apollo.Config.NotFound\",assembleKey(appId,clusterName,originalNamespace,dataCenter));\n    return null;\n  }\n  String mergedReleaseKey=FluentIterable.from(releases).transform(input -> String.valueOf(input.getReleaseKey())).join(STRING_JOINER);\n  if (mergedReleaseKey.equals(clientSideReleaseKey)) {\n    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n    Cat.logEvent(\"Apollo.Config.NotModified\",assembleKey(appId,appClusterNameLoaded,originalNamespace,dataCenter));\n    return null;\n  }\n  ApolloConfig apolloConfig=new ApolloConfig(appId,appClusterNameLoaded,originalNamespace,mergedReleaseKey);\n  apolloConfig.setConfigurations(mergeReleaseConfigurations(releases));\n  Cat.logEvent(\"Apollo.Config.Found\",assembleKey(appId,appClusterNameLoaded,originalNamespace,dataCenter));\n  return apolloConfig;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 286,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!namespaceBelongsToAppId(appId,namespace)) {\n  Release publicRelease=this.findPublicConfig(appId,clusterName,namespace,dataCenter);\n  if (!Objects.isNull(publicRelease)) {\n    releases.add(publicRelease);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 79,
    "startColumnNumber" : 8,
    "endLineNumber" : 79,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}