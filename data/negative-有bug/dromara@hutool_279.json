{
  "id" : 279,
  "expression" : "grandParentAnnotation.grandParentValue()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/test/java/cn/hutool/core/annotation/GenericSynthesizedAggregateAnnotationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "grandParentAnnotation.grandParentValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 107,
      "startColumnNumber" : 46,
      "endLineNumber" : 107,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(\"Child's GrandParent!\",grandParentAnnotation.grandParentValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(\"Child's GrandParent!\",grandParentAnnotation.grandParentValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3370,
        "startLineNumber" : 71,
        "startColumnNumber" : 39,
        "endLineNumber" : 110,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final ChildAnnotation rootAnnotation=AnnotatedClass.class.getAnnotation(ChildAnnotation.class);\n  GenericSynthesizedAggregateAnnotation syntheticMetaAnnotation=new GenericSynthesizedAggregateAnnotation(rootAnnotation);\n  final ChildAnnotation childAnnotation=syntheticMetaAnnotation.synthesize(ChildAnnotation.class);\n  SynthesizedAnnotation childSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(ChildAnnotation.class);\n  Assert.assertNotNull(childSyntheticAnnotation);\n  Assert.assertTrue(childSyntheticAnnotation.hasAttribute(\"childValue\",String.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),childSyntheticAnnotation.getRoot());\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),childSyntheticAnnotation.getAnnotation());\n  Assert.assertTrue(syntheticMetaAnnotation.isAnnotationPresent(ChildAnnotation.class));\n  Assert.assertNotNull(childAnnotation);\n  Assert.assertEquals(\"Child!\",childAnnotation.childValue());\n  Assert.assertEquals(\"Child!\",childAnnotation.childValueAlias());\n  Assert.assertEquals(childAnnotation.grandParentType(),Integer.class);\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(childAnnotation));\n  final ParentAnnotation parentAnnotation=syntheticMetaAnnotation.synthesize(ParentAnnotation.class);\n  SynthesizedAnnotation parentSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(ParentAnnotation.class);\n  Assert.assertNotNull(parentSyntheticAnnotation);\n  Assert.assertTrue(parentSyntheticAnnotation.hasAttribute(\"parentValue\",String.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),parentSyntheticAnnotation.getRoot());\n  Assert.assertEquals(ChildAnnotation.class.getAnnotation(ParentAnnotation.class),parentSyntheticAnnotation.getAnnotation());\n  Assert.assertNotNull(parentAnnotation);\n  Assert.assertEquals(\"Child's Parent!\",parentAnnotation.parentValue());\n  Assert.assertEquals(\"java.lang.Void\",parentAnnotation.grandParentType());\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(parentAnnotation));\n  final GrandParentAnnotation grandParentAnnotation=syntheticMetaAnnotation.synthesize(GrandParentAnnotation.class);\n  SynthesizedAnnotation grandParentSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(GrandParentAnnotation.class);\n  Assert.assertNotNull(grandParentSyntheticAnnotation);\n  Assert.assertTrue(grandParentSyntheticAnnotation.hasAttribute(\"grandParentType\",Class.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),grandParentSyntheticAnnotation.getRoot());\n  Assert.assertEquals(ChildAnnotation.class.getAnnotation(GrandParentAnnotation.class),grandParentSyntheticAnnotation.getAnnotation());\n  Assert.assertTrue(syntheticMetaAnnotation.isAnnotationPresent(GrandParentAnnotation.class));\n  Assert.assertNotNull(grandParentAnnotation);\n  Assert.assertEquals(\"Child's GrandParent!\",grandParentAnnotation.grandParentValue());\n  Assert.assertEquals(grandParentAnnotation.grandParentType(),Integer.class);\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(grandParentAnnotation));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3416,
        "startLineNumber" : 70,
        "startColumnNumber" : 1,
        "endLineNumber" : 110,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void syntheticAnnotationTest(){\n  final ChildAnnotation rootAnnotation=AnnotatedClass.class.getAnnotation(ChildAnnotation.class);\n  GenericSynthesizedAggregateAnnotation syntheticMetaAnnotation=new GenericSynthesizedAggregateAnnotation(rootAnnotation);\n  final ChildAnnotation childAnnotation=syntheticMetaAnnotation.synthesize(ChildAnnotation.class);\n  SynthesizedAnnotation childSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(ChildAnnotation.class);\n  Assert.assertNotNull(childSyntheticAnnotation);\n  Assert.assertTrue(childSyntheticAnnotation.hasAttribute(\"childValue\",String.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),childSyntheticAnnotation.getRoot());\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),childSyntheticAnnotation.getAnnotation());\n  Assert.assertTrue(syntheticMetaAnnotation.isAnnotationPresent(ChildAnnotation.class));\n  Assert.assertNotNull(childAnnotation);\n  Assert.assertEquals(\"Child!\",childAnnotation.childValue());\n  Assert.assertEquals(\"Child!\",childAnnotation.childValueAlias());\n  Assert.assertEquals(childAnnotation.grandParentType(),Integer.class);\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(childAnnotation));\n  final ParentAnnotation parentAnnotation=syntheticMetaAnnotation.synthesize(ParentAnnotation.class);\n  SynthesizedAnnotation parentSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(ParentAnnotation.class);\n  Assert.assertNotNull(parentSyntheticAnnotation);\n  Assert.assertTrue(parentSyntheticAnnotation.hasAttribute(\"parentValue\",String.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),parentSyntheticAnnotation.getRoot());\n  Assert.assertEquals(ChildAnnotation.class.getAnnotation(ParentAnnotation.class),parentSyntheticAnnotation.getAnnotation());\n  Assert.assertNotNull(parentAnnotation);\n  Assert.assertEquals(\"Child's Parent!\",parentAnnotation.parentValue());\n  Assert.assertEquals(\"java.lang.Void\",parentAnnotation.grandParentType());\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(parentAnnotation));\n  final GrandParentAnnotation grandParentAnnotation=syntheticMetaAnnotation.synthesize(GrandParentAnnotation.class);\n  SynthesizedAnnotation grandParentSyntheticAnnotation=syntheticMetaAnnotation.getSynthesizedAnnotation(GrandParentAnnotation.class);\n  Assert.assertNotNull(grandParentSyntheticAnnotation);\n  Assert.assertTrue(grandParentSyntheticAnnotation.hasAttribute(\"grandParentType\",Class.class));\n  Assert.assertEquals(AnnotatedClass.class.getAnnotation(ChildAnnotation.class),grandParentSyntheticAnnotation.getRoot());\n  Assert.assertEquals(ChildAnnotation.class.getAnnotation(GrandParentAnnotation.class),grandParentSyntheticAnnotation.getAnnotation());\n  Assert.assertTrue(syntheticMetaAnnotation.isAnnotationPresent(GrandParentAnnotation.class));\n  Assert.assertNotNull(grandParentAnnotation);\n  Assert.assertEquals(\"Child's GrandParent!\",grandParentAnnotation.grandParentValue());\n  Assert.assertEquals(grandParentAnnotation.grandParentType(),Integer.class);\n  Assert.assertThrows(IllegalArgumentException.class,() -> new GenericSynthesizedAggregateAnnotation(grandParentAnnotation));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 368,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(\"Child's GrandParent!\",grandParentAnnotation.grandParentValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 107,
    "startColumnNumber" : 46,
    "endLineNumber" : 107,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}