{
  "id" : 208,
  "expression" : "messageFoundList.iterator()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "messageFoundList.iterator()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 70,
      "startColumnNumber" : 63,
      "endLineNumber" : 70,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 70,
        "startColumnNumber" : 45,
        "endLineNumber" : 70,
        "endColumnNumber" : 90
      },
      "nodeContext" : "messageIterator=messageFoundList.iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 70,
        "startColumnNumber" : 24,
        "endLineNumber" : 70,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 66,
        "startColumnNumber" : 27,
        "endLineNumber" : 85,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n  Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n  while (messageIterator.hasNext()) {\n    MessageExt curMessageExt=messageIterator.next();\n    Message curMessage=convertToMessage(curMessageExt);\n    try {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n    }\n catch (    Throwable t) {\n      this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n      messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1561,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (messageFoundList.isEmpty()) {\n  streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n}\n else {\n  streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n  Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n  while (messageIterator.hasNext()) {\n    MessageExt curMessageExt=messageIterator.next();\n    Message curMessage=convertToMessage(curMessageExt);\n    try {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n    }\n catch (    Throwable t) {\n      this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n      messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2335,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (status) {\ncase FOUND:  if (messageFoundList.isEmpty()) {\n    streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n  }\n else {\n    streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n    Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n    while (messageIterator.hasNext()) {\n      MessageExt curMessageExt=messageIterator.next();\n      Message curMessage=convertToMessage(curMessageExt);\n      try {\n        streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n      }\n catch (      Throwable t) {\n        this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n        messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n        return;\n      }\n    }\n  }\nbreak;\ncase POLLING_FULL:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS,\"polling full\")).build());\nbreak;\ncase NO_NEW_MSG:case POLLING_NOT_FOUND:default:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no new message\")).build());\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2361,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (status) {\ncase FOUND:    if (messageFoundList.isEmpty()) {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n    }\n else {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n      Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n      while (messageIterator.hasNext()) {\n        MessageExt curMessageExt=messageIterator.next();\n        Message curMessage=convertToMessage(curMessageExt);\n        try {\n          streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n        }\n catch (        Throwable t) {\n          this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n          messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n          return;\n        }\n      }\n    }\n  break;\ncase POLLING_FULL:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS,\"polling full\")).build());\nbreak;\ncase NO_NEW_MSG:case POLLING_NOT_FOUND:default:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no new message\")).build());\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2608,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (status) {\ncase FOUND:    if (messageFoundList.isEmpty()) {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n    }\n else {\n      streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n      Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n      while (messageIterator.hasNext()) {\n        MessageExt curMessageExt=messageIterator.next();\n        Message curMessage=convertToMessage(curMessageExt);\n        try {\n          streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n        }\n catch (        Throwable t) {\n          this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n          messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n          return;\n        }\n      }\n    }\n  break;\ncase POLLING_FULL:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS,\"polling full\")).build());\nbreak;\ncase NO_NEW_MSG:case POLLING_NOT_FOUND:default:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no new message\")).build());\nbreak;\n}\n}\n catch (Throwable t) {\nwriteResponseWithErrorIgnore(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(t)).build());\n}\n finally {\nonComplete();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 56,
        "startColumnNumber" : 103,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PopStatus status=popResult.getPopStatus();\n  List<MessageExt> messageFoundList=popResult.getMsgFoundList();\n  try {\nswitch (status) {\ncase FOUND:      if (messageFoundList.isEmpty()) {\n        streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n      }\n else {\n        streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n        Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n        while (messageIterator.hasNext()) {\n          MessageExt curMessageExt=messageIterator.next();\n          Message curMessage=convertToMessage(curMessageExt);\n          try {\n            streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n          }\n catch (          Throwable t) {\n            this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n            messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n            return;\n          }\n        }\n      }\n    break;\ncase POLLING_FULL:  streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS,\"polling full\")).build());\nbreak;\ncase NO_NEW_MSG:case POLLING_NOT_FOUND:default:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no new message\")).build());\nbreak;\n}\n}\n catch (Throwable t) {\nwriteResponseWithErrorIgnore(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(t)).build());\n}\n finally {\nonComplete();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void writeAndComplete(ProxyContext ctx,ReceiveMessageRequest request,PopResult popResult){\n  PopStatus status=popResult.getPopStatus();\n  List<MessageExt> messageFoundList=popResult.getMsgFoundList();\n  try {\nswitch (status) {\ncase FOUND:      if (messageFoundList.isEmpty()) {\n        streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no match message\")).build());\n      }\n else {\n        streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK,Code.OK.name())).build());\n        Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n        while (messageIterator.hasNext()) {\n          MessageExt curMessageExt=messageIterator.next();\n          Message curMessage=convertToMessage(curMessageExt);\n          try {\n            streamObserver.onNext(ReceiveMessageResponse.newBuilder().setMessage(curMessage).build());\n          }\n catch (          Throwable t) {\n            this.processThrowableWhenWriteMessage(t,ctx,request,curMessageExt);\n            messageIterator.forEachRemaining(messageExt -> this.processThrowableWhenWriteMessage(t,ctx,request,messageExt));\n            return;\n          }\n        }\n      }\n    break;\ncase POLLING_FULL:  streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.TOO_MANY_REQUESTS,\"polling full\")).build());\nbreak;\ncase NO_NEW_MSG:case POLLING_NOT_FOUND:default:streamObserver.onNext(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(Code.MESSAGE_NOT_FOUND,\"no new message\")).build());\nbreak;\n}\n}\n catch (Throwable t) {\nwriteResponseWithErrorIgnore(ReceiveMessageResponse.newBuilder().setStatus(ResponseBuilder.getInstance().buildStatus(t)).build());\n}\n finally {\nonComplete();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 70,
        "startColumnNumber" : 24,
        "endLineNumber" : 70,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Iterator<MessageExt> messageIterator=messageFoundList.iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.Iterator<org.apache.rocketmq.common.message.MessageExt>"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 70,
    "startColumnNumber" : 63,
    "endLineNumber" : 70,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}