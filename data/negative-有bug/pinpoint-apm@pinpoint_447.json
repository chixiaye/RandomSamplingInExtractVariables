{
  "id" : 447,
  "expression" : "(short)11",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/commons-server/src/test/java/com/navercorp/pinpoint/common/server/bo/filter/SequenceSpanEventFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(short)11",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 33,
      "startColumnNumber" : 32,
      "endLineNumber" : 33,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 42
      },
      "nodeContext" : "spanEventBo.setSequence((short)11)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)11);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 29,
        "startColumnNumber" : 53,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanEventFilter filter=new SequenceSpanEventFilter(100);\n  final SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setSequence((short)11);\n  Assert.assertEquals(filter.filter(spanEventBo),SpanEventFilter.ACCEPT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFilter_accept() throws Exception {\n  SpanEventFilter filter=new SequenceSpanEventFilter(100);\n  final SpanEventBo spanEventBo=new SpanEventBo();\n  spanEventBo.setSequence((short)11);\n  Assert.assertEquals(filter.filter(spanEventBo),SpanEventFilter.ACCEPT);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 45,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 43
      },
      "nodeContext" : "spanEventBo.setSequence((short)11);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 33,
    "startColumnNumber" : 32,
    "endLineNumber" : 33,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}