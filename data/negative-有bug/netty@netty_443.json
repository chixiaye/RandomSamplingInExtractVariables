{
  "id" : 443,
  "expression" : "sc.close()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sc.close()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 157,
      "startColumnNumber" : 8,
      "endLineNumber" : 157,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 25
      },
      "nodeContext" : "sc.close().sync()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 26
      },
      "nodeContext" : "sc.close().sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2279,
        "startLineNumber" : 116,
        "startColumnNumber" : 113,
        "endLineNumber" : 175,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  sb.childOption(ChannelOption.AUTO_READ,autoRead);\n  cb.option(ChannelOption.AUTO_READ,autoRead);\n  Promise<Void> serverDonePromise=ImmediateEventExecutor.INSTANCE.newPromise();\n  final TestServerHandler sh=new TestServerHandler(autoRead,serverDonePromise,data.length);\n  final TestHandler ch=new TestHandler(autoRead);\n  cb.handler(ch);\n  sb.childHandler(sh);\n  Channel sc=sb.bind().get();\n  Channel cc=cb.connect(sc.localAddress()).get();\n  for (int i=0; i < data.length; ) {\n    int length=Math.min(random.nextInt(1024 * 8),data.length - i);\n    if (composite && i % 2 == 0) {\n      int firstBufLength=length / 2;\n      CompositeByteBuf comp=compositeBuffer();\n      comp.addComponent(true,wrappedBuffer(data,i,firstBufLength)).addComponent(true,wrappedBuffer(data,i + firstBufLength,length - firstBufLength));\n      cc.write(comp);\n    }\n else {\n      cc.write(wrappedBuffer(data,i,length));\n    }\n    i+=length;\n  }\n  Future<Void> cf=cc.writeAndFlush(Unpooled.EMPTY_BUFFER);\n  try {\n    assertTrue(cf.await(60000));\n    cf.sync();\n  }\n catch (  Throwable t) {\n    TestUtils.dump(StringUtil.simpleClassName(this));\n    throw t;\n  }\n  serverDonePromise.asFuture().sync();\n  sh.channel.close().sync();\n  ch.channel.close().sync();\n  sc.close().sync();\n  if (sh.exception.get() != null && !(sh.exception.get() instanceof IOException)) {\n    throw sh.exception.get();\n  }\n  if (sh.exception.get() != null) {\n    throw sh.exception.get();\n  }\n  if (ch.exception.get() != null && !(ch.exception.get() instanceof IOException)) {\n    throw ch.exception.get();\n  }\n  if (ch.exception.get() != null) {\n    throw ch.exception.get();\n  }\n  ByteBuf expected=wrappedBuffer(data);\n  assertEquals(expected,sh.received);\n  expected.release();\n  sh.received.release();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2427,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testGatheringWrite0(ServerBootstrap sb,Bootstrap cb,byte[] data,boolean composite,boolean autoRead) throws Throwable {\n  sb.childOption(ChannelOption.AUTO_READ,autoRead);\n  cb.option(ChannelOption.AUTO_READ,autoRead);\n  Promise<Void> serverDonePromise=ImmediateEventExecutor.INSTANCE.newPromise();\n  final TestServerHandler sh=new TestServerHandler(autoRead,serverDonePromise,data.length);\n  final TestHandler ch=new TestHandler(autoRead);\n  cb.handler(ch);\n  sb.childHandler(sh);\n  Channel sc=sb.bind().get();\n  Channel cc=cb.connect(sc.localAddress()).get();\n  for (int i=0; i < data.length; ) {\n    int length=Math.min(random.nextInt(1024 * 8),data.length - i);\n    if (composite && i % 2 == 0) {\n      int firstBufLength=length / 2;\n      CompositeByteBuf comp=compositeBuffer();\n      comp.addComponent(true,wrappedBuffer(data,i,firstBufLength)).addComponent(true,wrappedBuffer(data,i + firstBufLength,length - firstBufLength));\n      cc.write(comp);\n    }\n else {\n      cc.write(wrappedBuffer(data,i,length));\n    }\n    i+=length;\n  }\n  Future<Void> cf=cc.writeAndFlush(Unpooled.EMPTY_BUFFER);\n  try {\n    assertTrue(cf.await(60000));\n    cf.sync();\n  }\n catch (  Throwable t) {\n    TestUtils.dump(StringUtil.simpleClassName(this));\n    throw t;\n  }\n  serverDonePromise.asFuture().sync();\n  sh.channel.close().sync();\n  ch.channel.close().sync();\n  sc.close().sync();\n  if (sh.exception.get() != null && !(sh.exception.get() instanceof IOException)) {\n    throw sh.exception.get();\n  }\n  if (sh.exception.get() != null) {\n    throw sh.exception.get();\n  }\n  if (ch.exception.get() != null && !(ch.exception.get() instanceof IOException)) {\n    throw ch.exception.get();\n  }\n  if (ch.exception.get() != null) {\n    throw ch.exception.get();\n  }\n  ByteBuf expected=wrappedBuffer(data);\n  assertEquals(expected,sh.received);\n  expected.release();\n  sh.received.release();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 26
      },
      "nodeContext" : "sc.close().sync();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.netty.util.concurrent.Future<java.lang.Void>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 157,
    "startColumnNumber" : 8,
    "endLineNumber" : 157,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}