{
  "id" : 5,
  "expression" : "node",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestTokenPositionOptions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "node",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 68,
      "startColumnNumber" : 14,
      "endLineNumber" : 68,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 68,
        "startColumnNumber" : 14,
        "endLineNumber" : 68,
        "endColumnNumber" : 29
      },
      "nodeContext" : "node.getToken()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 68,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 30
      },
      "nodeContext" : "tokens.add(node.getToken())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 68,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 31
      },
      "nodeContext" : "tokens.add(node.getToken());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 67,
        "startColumnNumber" : 32,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  tokens.add(node.getToken());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (GrammarAST node : nodes) {\n  tokens.add(node.getToken());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1905,
        "startLineNumber" : 29,
        "startColumnNumber" : 63,
        "endLineNumber" : 71,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Grammar g=new Grammar(\"grammar T;\\n\" + \"s : e ';' ;\\n\" + \"e : e '*' e\\n\"+ \"  | e '+' e\\n\"+ \"  | e '.' ID\\n\"+ \"  | '-' e\\n\"+ \"  | ID\\n\"+ \"  ;\\n\"+ \"ID : [a-z]+ ;\\n\");\n  String expectedTree=\"(COMBINED_GRAMMAR T (RULES (RULE s (BLOCK (ALT e ';'))) (RULE e (BLOCK (ALT (BLOCK (ALT {} ('-' (ELEMENT_OPTIONS (= tokenIndex 43))) (e (ELEMENT_OPTIONS (= tokenIndex 45) (= p 2)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 49))))) (* (BLOCK (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) ('*' (ELEMENT_OPTIONS (= tokenIndex 21))) (e (ELEMENT_OPTIONS (= tokenIndex 23) (= p 6)))) (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) ('+' (ELEMENT_OPTIONS (= tokenIndex 29))) (e (ELEMENT_OPTIONS (= tokenIndex 31) (= p 5)))) (ALT ({precpred(_ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) ('.' (ELEMENT_OPTIONS (= tokenIndex 37))) (ID (ELEMENT_OPTIONS (= tokenIndex 39)))))))))))\";\n  assertEquals(expectedTree,g.ast.toStringTree());\n  String expectedElementTokens=\"[@5,11:11='s',<57>,2:0]\\n\" + \"[@9,15:15='e',<57>,2:4]\\n\" + \"[@11,17:19='';'',<62>,2:6]\\n\"+ \"[@15,23:23='e',<57>,3:0]\\n\"+ \"[@43,64:66=''-'',<62>,6:4]\\n\"+ \"[@45,68:68='e',<57>,6:8]\\n\"+ \"[@49,74:75='ID',<66>,7:4]\\n\"+ \"[@21,29:31=''*'',<62>,3:6]\\n\"+ \"[@23,33:33='e',<57>,3:10]\\n\"+ \"[@29,41:43=''+'',<62>,4:6]\\n\"+ \"[@31,45:45='e',<57>,4:10]\\n\"+ \"[@37,53:55=''.'',<62>,5:6]\\n\"+ \"[@39,57:58='ID',<66>,5:10]\";\n  IntervalSet types=new IntervalSet(ANTLRParser.TOKEN_REF,ANTLRParser.STRING_LITERAL,ANTLRParser.RULE_REF);\n  List<GrammarAST> nodes=g.ast.getNodesWithTypePreorderDFS(types);\n  List<Token> tokens=new ArrayList<Token>();\n  for (  GrammarAST node : nodes) {\n    tokens.add(node.getToken());\n  }\n  assertEquals(expectedElementTokens,Utils.join(tokens.toArray(),\"\\n\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1967,
        "startLineNumber" : 29,
        "startColumnNumber" : 1,
        "endLineNumber" : 71,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testLeftRecursionRewrite() throws Exception {\n  Grammar g=new Grammar(\"grammar T;\\n\" + \"s : e ';' ;\\n\" + \"e : e '*' e\\n\"+ \"  | e '+' e\\n\"+ \"  | e '.' ID\\n\"+ \"  | '-' e\\n\"+ \"  | ID\\n\"+ \"  ;\\n\"+ \"ID : [a-z]+ ;\\n\");\n  String expectedTree=\"(COMBINED_GRAMMAR T (RULES (RULE s (BLOCK (ALT e ';'))) (RULE e (BLOCK (ALT (BLOCK (ALT {} ('-' (ELEMENT_OPTIONS (= tokenIndex 43))) (e (ELEMENT_OPTIONS (= tokenIndex 45) (= p 2)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 49))))) (* (BLOCK (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) ('*' (ELEMENT_OPTIONS (= tokenIndex 21))) (e (ELEMENT_OPTIONS (= tokenIndex 23) (= p 6)))) (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) ('+' (ELEMENT_OPTIONS (= tokenIndex 29))) (e (ELEMENT_OPTIONS (= tokenIndex 31) (= p 5)))) (ALT ({precpred(_ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) ('.' (ELEMENT_OPTIONS (= tokenIndex 37))) (ID (ELEMENT_OPTIONS (= tokenIndex 39)))))))))))\";\n  assertEquals(expectedTree,g.ast.toStringTree());\n  String expectedElementTokens=\"[@5,11:11='s',<57>,2:0]\\n\" + \"[@9,15:15='e',<57>,2:4]\\n\" + \"[@11,17:19='';'',<62>,2:6]\\n\"+ \"[@15,23:23='e',<57>,3:0]\\n\"+ \"[@43,64:66=''-'',<62>,6:4]\\n\"+ \"[@45,68:68='e',<57>,6:8]\\n\"+ \"[@49,74:75='ID',<66>,7:4]\\n\"+ \"[@21,29:31=''*'',<62>,3:6]\\n\"+ \"[@23,33:33='e',<57>,3:10]\\n\"+ \"[@29,41:43=''+'',<62>,4:6]\\n\"+ \"[@31,45:45='e',<57>,4:10]\\n\"+ \"[@37,53:55=''.'',<62>,5:6]\\n\"+ \"[@39,57:58='ID',<66>,5:10]\";\n  IntervalSet types=new IntervalSet(ANTLRParser.TOKEN_REF,ANTLRParser.STRING_LITERAL,ANTLRParser.RULE_REF);\n  List<GrammarAST> nodes=g.ast.getNodesWithTypePreorderDFS(types);\n  List<Token> tokens=new ArrayList<Token>();\n  for (  GrammarAST node : nodes) {\n    tokens.add(node.getToken());\n  }\n  assertEquals(expectedElementTokens,Utils.join(tokens.toArray(),\"\\n\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 68,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 31
      },
      "nodeContext" : "tokens.add(node.getToken());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.tool.ast.GrammarAST"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 68,
    "startColumnNumber" : 14,
    "endLineNumber" : 68,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}