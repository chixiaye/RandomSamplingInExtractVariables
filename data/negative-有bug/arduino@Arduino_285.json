{
  "id" : 285,
  "expression" : "m",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/SyntaxUtilities.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "m",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 176,
      "startColumnNumber" : 9,
      "endLineNumber" : 176,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 176,
        "startColumnNumber" : 9,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "m.find()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "!m.find()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 18
      },
      "nodeContext" : "if (!m.find()) return null;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse comments and identify \"@schematics <b>&lt;something&gt;</b>\" pattern.\n * @param line A string to parse\n * @return <b>null</b> if the pattern is not found, otherwise an array ofString is returned: the elements with index 0, 1 and 2 are respectively the preamble, the <b>&lt;something&gt;</b> stuff, and the remaining part of the string.\n */\npublic static String[] parseCommentUrls(String line){\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "!m.find()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  }, {
    "nodeContext" : "m",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 180,
      "startColumnNumber" : 31,
      "endLineNumber" : 180,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 180,
        "startColumnNumber" : 31,
        "endLineNumber" : 180,
        "endColumnNumber" : 41
      },
      "nodeContext" : "m.start(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 180,
        "startColumnNumber" : 13,
        "endLineNumber" : 180,
        "endColumnNumber" : 42
      },
      "nodeContext" : "line.substring(0,m.start(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 42
      },
      "nodeContext" : "res[0]=line.substring(0,m.start(1))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 43
      },
      "nodeContext" : "res[0]=line.substring(0,m.start(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse comments and identify \"@schematics <b>&lt;something&gt;</b>\" pattern.\n * @param line A string to parse\n * @return <b>null</b> if the pattern is not found, otherwise an array ofString is returned: the elements with index 0, 1 and 2 are respectively the preamble, the <b>&lt;something&gt;</b> stuff, and the remaining part of the string.\n */\npublic static String[] parseCommentUrls(String line){\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 43
      },
      "nodeContext" : "res[0]=line.substring(0,m.start(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  }, {
    "nodeContext" : "m",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 181,
      "startColumnNumber" : 28,
      "endLineNumber" : 181,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 181,
        "startColumnNumber" : 28,
        "endLineNumber" : 181,
        "endColumnNumber" : 38
      },
      "nodeContext" : "m.start(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 181,
        "startColumnNumber" : 13,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "line.substring(m.start(1),m.end(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 50
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse comments and identify \"@schematics <b>&lt;something&gt;</b>\" pattern.\n * @param line A string to parse\n * @return <b>null</b> if the pattern is not found, otherwise an array ofString is returned: the elements with index 0, 1 and 2 are respectively the preamble, the <b>&lt;something&gt;</b> stuff, and the remaining part of the string.\n */\npublic static String[] parseCommentUrls(String line){\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 50
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  }, {
    "nodeContext" : "m",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 181,
      "startColumnNumber" : 40,
      "endLineNumber" : 181,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 181,
        "startColumnNumber" : 40,
        "endLineNumber" : 181,
        "endColumnNumber" : 48
      },
      "nodeContext" : "m.end(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 181,
        "startColumnNumber" : 13,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "line.substring(m.start(1),m.end(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 50
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse comments and identify \"@schematics <b>&lt;something&gt;</b>\" pattern.\n * @param line A string to parse\n * @return <b>null</b> if the pattern is not found, otherwise an array ofString is returned: the elements with index 0, 1 and 2 are respectively the preamble, the <b>&lt;something&gt;</b> stuff, and the remaining part of the string.\n */\npublic static String[] parseCommentUrls(String line){\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 50
      },
      "nodeContext" : "res[1]=line.substring(m.start(1),m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  }, {
    "nodeContext" : "m",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 182,
      "startColumnNumber" : 28,
      "endLineNumber" : 182,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 182,
        "startColumnNumber" : 28,
        "endLineNumber" : 182,
        "endColumnNumber" : 36
      },
      "nodeContext" : "m.end(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 182,
        "startColumnNumber" : 13,
        "endLineNumber" : 182,
        "endColumnNumber" : 37
      },
      "nodeContext" : "line.substring(m.end(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 37
      },
      "nodeContext" : "res[2]=line.substring(m.end(1))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 38
      },
      "nodeContext" : "res[2]=line.substring(m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse comments and identify \"@schematics <b>&lt;something&gt;</b>\" pattern.\n * @param line A string to parse\n * @return <b>null</b> if the pattern is not found, otherwise an array ofString is returned: the elements with index 0, 1 and 2 are respectively the preamble, the <b>&lt;something&gt;</b> stuff, and the remaining part of the string.\n */\npublic static String[] parseCommentUrls(String line){\n  Matcher m=urlPattern.matcher(line.toString());\n  if (!m.find())   return null;\n  String res[]=new String[3];\n  res[0]=line.substring(0,m.start(1));\n  res[1]=line.substring(m.start(1),m.end(1));\n  res[2]=line.substring(m.end(1));\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 38
      },
      "nodeContext" : "res[2]=line.substring(m.end(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 176,
    "startColumnNumber" : 9,
    "endLineNumber" : 176,
    "endColumnNumber" : 10
  }, {
    "charLength" : 1,
    "startLineNumber" : 180,
    "startColumnNumber" : 31,
    "endLineNumber" : 180,
    "endColumnNumber" : 32
  }, {
    "charLength" : 1,
    "startLineNumber" : 181,
    "startColumnNumber" : 28,
    "endLineNumber" : 181,
    "endColumnNumber" : 29
  }, {
    "charLength" : 1,
    "startLineNumber" : 181,
    "startColumnNumber" : 40,
    "endLineNumber" : 181,
    "endColumnNumber" : 41
  }, {
    "charLength" : 1,
    "startLineNumber" : 182,
    "startColumnNumber" : 28,
    "endLineNumber" : 182,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}