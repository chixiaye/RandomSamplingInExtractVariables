{
  "id" : 85,
  "expression" : "startTime - WINDOW_SIZE",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "startTime - WINDOW_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 145,
      "startColumnNumber" : 29,
      "endLineNumber" : 145,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 145,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 146,
        "endColumnNumber" : 54
      },
      "nodeContext" : "windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 143,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 55
      },
      "nodeContext" : "valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10882,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1259,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10918,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRolling(){\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1265,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 145,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "long"
  }, {
    "nodeContext" : "startTime - WINDOW_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 192,
      "startColumnNumber" : 29,
      "endLineNumber" : 192,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 190,
        "startColumnNumber" : 24,
        "endLineNumber" : 193,
        "endColumnNumber" : 54
      },
      "nodeContext" : "windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 55
      },
      "nodeContext" : "valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10882,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1259,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10918,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRolling(){\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1265,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "long"
  }, {
    "nodeContext" : "startTime - WINDOW_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 245,
      "startColumnNumber" : 29,
      "endLineNumber" : 245,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 245,
        "startColumnNumber" : 16,
        "endLineNumber" : 245,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 243,
        "startColumnNumber" : 24,
        "endLineNumber" : 246,
        "endColumnNumber" : 54
      },
      "nodeContext" : "windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 55
      },
      "nodeContext" : "valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 241,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 241,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10882,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1259,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10918,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRolling(){\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1265,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 245,
        "startColumnNumber" : 16,
        "endLineNumber" : 245,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "long"
  }, {
    "nodeContext" : "startTime - WINDOW_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 304,
      "startColumnNumber" : 29,
      "endLineNumber" : 304,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 302,
        "startColumnNumber" : 24,
        "endLineNumber" : 305,
        "endColumnNumber" : 54
      },
      "nodeContext" : "windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 302,
        "startColumnNumber" : 12,
        "endLineNumber" : 305,
        "endColumnNumber" : 55
      },
      "nodeContext" : "valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10882,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1259,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10918,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRolling(){\n  final long startTime=SEGMENT_INTERVAL * 2;\n  final long increment=SEGMENT_INTERVAL / 2;\n  windowStore.put(0,\"zero\",startTime);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(1,\"one\",startTime + increment);\n  assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir));\n  windowStore.put(2,\"two\",startTime + increment * 2);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir));\n  windowStore.put(4,\"four\",startTime + increment * 4);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  windowStore.put(5,\"five\",startTime + increment * 5);\n  assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.singletonList(\"zero\")),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"one\")),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  windowStore.put(6,\"six\",startTime + increment * 6);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  windowStore.put(7,\"seven\",startTime + increment * 7);\n  assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"two\")),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  windowStore.put(8,\"eight\",startTime + increment * 8);\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.emptyList()),valuesToSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"four\")),valuesToSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"five\")),valuesToSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"six\")),valuesToSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),valuesToSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n  assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),valuesToSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n  windowStore.flush();\n  assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1265,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ofEpochMilli(startTime - WINDOW_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 145,
    "startColumnNumber" : 29,
    "endLineNumber" : 145,
    "endColumnNumber" : 52
  }, {
    "charLength" : 23,
    "startLineNumber" : 192,
    "startColumnNumber" : 29,
    "endLineNumber" : 192,
    "endColumnNumber" : 52
  }, {
    "charLength" : 23,
    "startLineNumber" : 245,
    "startColumnNumber" : 29,
    "endLineNumber" : 245,
    "endColumnNumber" : 52
  }, {
    "charLength" : 23,
    "startLineNumber" : 304,
    "startColumnNumber" : 29,
    "endLineNumber" : 304,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}