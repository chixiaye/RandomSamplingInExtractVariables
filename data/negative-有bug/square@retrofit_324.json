{
  "id" : 324,
  "expression" : "new AsyncCallbackSubtypeExample.Foo(){\n  @Override public void success(  String result,  Response response){\n    actual.set(result);\n  }\n  @Override public void failure(  RetrofitError error){\n    throw new AssertionError();\n  }\n}\n",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AsyncCallbackSubtypeExample.Foo(){\n  @Override public void success(  String result,  Response response){\n    actual.set(result);\n  }\n  @Override public void failure(  RetrofitError error){\n    throw new AssertionError();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 257,
      "startLineNumber" : 631,
      "startColumnNumber" : 24,
      "endLineNumber" : 639,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 41,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 639,
        "endColumnNumber" : 6
      },
      "nodeContext" : "mockService.doStuff(new AsyncCallbackSubtypeExample.Foo(){\n  @Override public void success(  String result,  Response response){\n    actual.set(result);\n  }\n  @Override public void failure(  RetrofitError error){\n    throw new AssertionError();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 639,
        "endColumnNumber" : 7
      },
      "nodeContext" : "mockService.doStuff(new AsyncCallbackSubtypeExample.Foo(){\n  @Override public void success(  String result,  Response response){\n    actual.set(result);\n  }\n  @Override public void failure(  RetrofitError error){\n    throw new AssertionError();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 896,
        "startLineNumber" : 615,
        "startColumnNumber" : 49,
        "endLineNumber" : 642,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  mockRestAdapter.setDelay(1);\n  mockRestAdapter.setVariancePercentage(0);\n  mockRestAdapter.setErrorPercentage(0);\nclass MockAsyncCallbackSubtypeExample implements AsyncCallbackSubtypeExample {\n    @Override public void doStuff(    Foo foo){\n      foo.success(\"Hello!\",null);\n    }\n  }\n  AsyncCallbackSubtypeExample mockService=mockRestAdapter.create(AsyncCallbackSubtypeExample.class,new MockAsyncCallbackSubtypeExample());\n  final AtomicReference<String> actual=new AtomicReference<String>();\n  mockService.doStuff(new AsyncCallbackSubtypeExample.Foo(){\n    @Override public void success(    String result,    Response response){\n      actual.set(result);\n    }\n    @Override public void failure(    RetrofitError error){\n      throw new AssertionError();\n    }\n  }\n);\n  assertThat(actual.get()).isNotNull().isEqualTo(\"Hello!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 615,
        "startColumnNumber" : 2,
        "endLineNumber" : 642,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void asyncCanUseCallbackSubtype(){\n  mockRestAdapter.setDelay(1);\n  mockRestAdapter.setVariancePercentage(0);\n  mockRestAdapter.setErrorPercentage(0);\nclass MockAsyncCallbackSubtypeExample implements AsyncCallbackSubtypeExample {\n    @Override public void doStuff(    Foo foo){\n      foo.success(\"Hello!\",null);\n    }\n  }\n  AsyncCallbackSubtypeExample mockService=mockRestAdapter.create(AsyncCallbackSubtypeExample.class,new MockAsyncCallbackSubtypeExample());\n  final AtomicReference<String> actual=new AtomicReference<String>();\n  mockService.doStuff(new AsyncCallbackSubtypeExample.Foo(){\n    @Override public void success(    String result,    Response response){\n      actual.set(result);\n    }\n    @Override public void failure(    RetrofitError error){\n      throw new AssertionError();\n    }\n  }\n);\n  assertThat(actual.get()).isNotNull().isEqualTo(\"Hello!\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 639,
        "endColumnNumber" : 7
      },
      "nodeContext" : "mockService.doStuff(new AsyncCallbackSubtypeExample.Foo(){\n  @Override public void success(  String result,  Response response){\n    actual.set(result);\n  }\n  @Override public void failure(  RetrofitError error){\n    throw new AssertionError();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    },
    "tokenLength" : 16,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 257,
    "startLineNumber" : 631,
    "startColumnNumber" : 24,
    "endLineNumber" : 639,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}