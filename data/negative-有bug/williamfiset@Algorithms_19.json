{
  "id" : 19,
  "expression" : "iter1",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/linkedlist/LinkedListTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 218,
      "startColumnNumber" : 15,
      "endLineNumber" : 218,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 218,
        "startColumnNumber" : 15,
        "endLineNumber" : 218,
        "endColumnNumber" : 30
      },
      "nodeContext" : "iter1.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  }, {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 218,
      "startColumnNumber" : 45,
      "endLineNumber" : 218,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 218,
        "startColumnNumber" : 45,
        "endLineNumber" : 218,
        "endColumnNumber" : 57
      },
      "nodeContext" : "iter1.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 218,
        "startColumnNumber" : 32,
        "endLineNumber" : 218,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 218,
        "startColumnNumber" : 32,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  }, {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 222,
      "startColumnNumber" : 15,
      "endLineNumber" : 222,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 222,
        "startColumnNumber" : 15,
        "endLineNumber" : 222,
        "endColumnNumber" : 30
      },
      "nodeContext" : "iter1.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  }, {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 222,
      "startColumnNumber" : 45,
      "endLineNumber" : 222,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 222,
        "startColumnNumber" : 45,
        "endLineNumber" : 222,
        "endColumnNumber" : 57
      },
      "nodeContext" : "iter1.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 222,
        "startColumnNumber" : 32,
        "endLineNumber" : 222,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 222,
        "startColumnNumber" : 32,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 210,
        "startColumnNumber" : 6,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=randNums.get(i);\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n  iter1=javaLinkedList.iterator();\n  iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  }, {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 242,
      "startColumnNumber" : 15,
      "endLineNumber" : 242,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 242,
        "startColumnNumber" : 15,
        "endLineNumber" : 242,
        "endColumnNumber" : 30
      },
      "nodeContext" : "iter1.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 242,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 234,
        "startColumnNumber" : 48,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 234,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 242,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  }, {
    "nodeContext" : "iter1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 242,
      "startColumnNumber" : 45,
      "endLineNumber" : 242,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 242,
        "startColumnNumber" : 45,
        "endLineNumber" : 242,
        "endColumnNumber" : 57
      },
      "nodeContext" : "iter1.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 242,
        "startColumnNumber" : 32,
        "endLineNumber" : 242,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 242,
        "startColumnNumber" : 32,
        "endLineNumber" : 242,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 242,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 234,
        "startColumnNumber" : 48,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 234,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 242,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 73
      },
      "nodeContext" : "while (iter1.hasNext()) assertEquals(iter1.next(),iter2.next());\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 218,
    "startColumnNumber" : 15,
    "endLineNumber" : 218,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 218,
    "startColumnNumber" : 45,
    "endLineNumber" : 218,
    "endColumnNumber" : 50
  }, {
    "charLength" : 5,
    "startLineNumber" : 222,
    "startColumnNumber" : 15,
    "endLineNumber" : 222,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 222,
    "startColumnNumber" : 45,
    "endLineNumber" : 222,
    "endColumnNumber" : 50
  }, {
    "charLength" : 5,
    "startLineNumber" : 242,
    "startColumnNumber" : 15,
    "endLineNumber" : 242,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 242,
    "startColumnNumber" : 45,
    "endLineNumber" : 242,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}