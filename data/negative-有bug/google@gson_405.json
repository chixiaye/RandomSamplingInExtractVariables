{
  "id" : 405,
  "expression" : "typeVariable",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typeVariable",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 327,
      "startColumnNumber" : 65,
      "endLineNumber" : 327,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 327,
        "startColumnNumber" : 20,
        "endLineNumber" : 327,
        "endColumnNumber" : 78
      },
      "nodeContext" : "resolveTypeVariable(context,contextRawType,typeVariable)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 78
      },
      "nodeContext" : "toResolve=resolveTypeVariable(context,contextRawType,typeVariable)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 79
      },
      "nodeContext" : "toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 325,
        "startColumnNumber" : 45,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n  toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n  if (toResolve == typeVariable) {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2712,
        "startLineNumber" : 325,
        "startColumnNumber" : 6,
        "endLineNumber" : 390,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof TypeVariable) {\n  TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n  toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n  if (toResolve == typeVariable) {\n    return toResolve;\n  }\n}\n else if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n  Class<?> original=(Class<?>)toResolve;\n  Type componentType=original.getComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : arrayOf(newComponentType);\n}\n else if (toResolve instanceof GenericArrayType) {\n  GenericArrayType original=(GenericArrayType)toResolve;\n  Type componentType=original.getGenericComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : arrayOf(newComponentType);\n}\n else if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return supertypeOf(lowerBound);\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return subtypeOf(upperBound);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 349,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2726,
        "startLineNumber" : 324,
        "startColumnNumber" : 17,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return supertypeOf(lowerBound);\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return subtypeOf(upperBound);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2739,
        "startLineNumber" : 324,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return supertypeOf(lowerBound);\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return subtypeOf(upperBound);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 352,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2849,
        "startLineNumber" : 322,
        "startColumnNumber" : 84,
        "endLineNumber" : 392,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return supertypeOf(lowerBound);\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return subtypeOf(upperBound);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2931,
        "startLineNumber" : 322,
        "startColumnNumber" : 2,
        "endLineNumber" : 392,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Type resolve(Type context,Class<?> contextRawType,Type toResolve){\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return supertypeOf(lowerBound);\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return subtypeOf(upperBound);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 79
      },
      "nodeContext" : "toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.TypeVariable<>"
  }, {
    "nodeContext" : "typeVariable",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 328,
      "startColumnNumber" : 25,
      "endLineNumber" : 328,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 328,
        "startColumnNumber" : 12,
        "endLineNumber" : 328,
        "endColumnNumber" : 37
      },
      "nodeContext" : "toResolve == typeVariable",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 328,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (toResolve == typeVariable) {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 325,
        "startColumnNumber" : 45,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n  toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n  if (toResolve == typeVariable) {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2712,
        "startLineNumber" : 325,
        "startColumnNumber" : 6,
        "endLineNumber" : 390,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (toResolve instanceof TypeVariable) {\n  TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n  toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n  if (toResolve == typeVariable) {\n    return toResolve;\n  }\n}\n else if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n  Class<?> original=(Class<?>)toResolve;\n  Type componentType=original.getComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : arrayOf(newComponentType);\n}\n else if (toResolve instanceof GenericArrayType) {\n  GenericArrayType original=(GenericArrayType)toResolve;\n  Type componentType=original.getGenericComponentType();\n  Type newComponentType=resolve(context,contextRawType,componentType);\n  return componentType == newComponentType ? original : arrayOf(newComponentType);\n}\n else if (toResolve instanceof ParameterizedType) {\n  ParameterizedType original=(ParameterizedType)toResolve;\n  Type ownerType=original.getOwnerType();\n  Type newOwnerType=resolve(context,contextRawType,ownerType);\n  boolean changed=newOwnerType != ownerType;\n  Type[] args=original.getActualTypeArguments();\n  for (int t=0, length=args.length; t < length; t++) {\n    Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n    if (resolvedTypeArgument != args[t]) {\n      if (!changed) {\n        args=args.clone();\n        changed=true;\n      }\n      args[t]=resolvedTypeArgument;\n    }\n  }\n  return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n}\n else if (toResolve instanceof WildcardType) {\n  WildcardType original=(WildcardType)toResolve;\n  Type[] originalLowerBound=original.getLowerBounds();\n  Type[] originalUpperBound=original.getUpperBounds();\n  if (originalLowerBound.length == 1) {\n    Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n    if (lowerBound != originalLowerBound[0]) {\n      return supertypeOf(lowerBound);\n    }\n  }\n else   if (originalUpperBound.length == 1) {\n    Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n    if (upperBound != originalUpperBound[0]) {\n      return subtypeOf(upperBound);\n    }\n  }\n  return original;\n}\n else {\n  return toResolve;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 349,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2726,
        "startLineNumber" : 324,
        "startColumnNumber" : 17,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return supertypeOf(lowerBound);\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return subtypeOf(upperBound);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2739,
        "startLineNumber" : 324,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  if (toResolve instanceof TypeVariable) {\n    TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n    toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n    if (toResolve == typeVariable) {\n      return toResolve;\n    }\n  }\n else   if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n    Class<?> original=(Class<?>)toResolve;\n    Type componentType=original.getComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof GenericArrayType) {\n    GenericArrayType original=(GenericArrayType)toResolve;\n    Type componentType=original.getGenericComponentType();\n    Type newComponentType=resolve(context,contextRawType,componentType);\n    return componentType == newComponentType ? original : arrayOf(newComponentType);\n  }\n else   if (toResolve instanceof ParameterizedType) {\n    ParameterizedType original=(ParameterizedType)toResolve;\n    Type ownerType=original.getOwnerType();\n    Type newOwnerType=resolve(context,contextRawType,ownerType);\n    boolean changed=newOwnerType != ownerType;\n    Type[] args=original.getActualTypeArguments();\n    for (int t=0, length=args.length; t < length; t++) {\n      Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n      if (resolvedTypeArgument != args[t]) {\n        if (!changed) {\n          args=args.clone();\n          changed=true;\n        }\n        args[t]=resolvedTypeArgument;\n      }\n    }\n    return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n  }\n else   if (toResolve instanceof WildcardType) {\n    WildcardType original=(WildcardType)toResolve;\n    Type[] originalLowerBound=original.getLowerBounds();\n    Type[] originalUpperBound=original.getUpperBounds();\n    if (originalLowerBound.length == 1) {\n      Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n      if (lowerBound != originalLowerBound[0]) {\n        return supertypeOf(lowerBound);\n      }\n    }\n else     if (originalUpperBound.length == 1) {\n      Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n      if (upperBound != originalUpperBound[0]) {\n        return subtypeOf(upperBound);\n      }\n    }\n    return original;\n  }\n else {\n    return toResolve;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 352,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2849,
        "startLineNumber" : 322,
        "startColumnNumber" : 84,
        "endLineNumber" : 392,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return supertypeOf(lowerBound);\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return subtypeOf(upperBound);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2931,
        "startLineNumber" : 322,
        "startColumnNumber" : 2,
        "endLineNumber" : 392,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Type resolve(Type context,Class<?> contextRawType,Type toResolve){\n  while (true) {\n    if (toResolve instanceof TypeVariable) {\n      TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve;\n      toResolve=resolveTypeVariable(context,contextRawType,typeVariable);\n      if (toResolve == typeVariable) {\n        return toResolve;\n      }\n    }\n else     if (toResolve instanceof Class && ((Class<?>)toResolve).isArray()) {\n      Class<?> original=(Class<?>)toResolve;\n      Type componentType=original.getComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof GenericArrayType) {\n      GenericArrayType original=(GenericArrayType)toResolve;\n      Type componentType=original.getGenericComponentType();\n      Type newComponentType=resolve(context,contextRawType,componentType);\n      return componentType == newComponentType ? original : arrayOf(newComponentType);\n    }\n else     if (toResolve instanceof ParameterizedType) {\n      ParameterizedType original=(ParameterizedType)toResolve;\n      Type ownerType=original.getOwnerType();\n      Type newOwnerType=resolve(context,contextRawType,ownerType);\n      boolean changed=newOwnerType != ownerType;\n      Type[] args=original.getActualTypeArguments();\n      for (int t=0, length=args.length; t < length; t++) {\n        Type resolvedTypeArgument=resolve(context,contextRawType,args[t]);\n        if (resolvedTypeArgument != args[t]) {\n          if (!changed) {\n            args=args.clone();\n            changed=true;\n          }\n          args[t]=resolvedTypeArgument;\n        }\n      }\n      return changed ? newParameterizedTypeWithOwner(newOwnerType,original.getRawType(),args) : original;\n    }\n else     if (toResolve instanceof WildcardType) {\n      WildcardType original=(WildcardType)toResolve;\n      Type[] originalLowerBound=original.getLowerBounds();\n      Type[] originalUpperBound=original.getUpperBounds();\n      if (originalLowerBound.length == 1) {\n        Type lowerBound=resolve(context,contextRawType,originalLowerBound[0]);\n        if (lowerBound != originalLowerBound[0]) {\n          return supertypeOf(lowerBound);\n        }\n      }\n else       if (originalUpperBound.length == 1) {\n        Type upperBound=resolve(context,contextRawType,originalUpperBound[0]);\n        if (upperBound != originalUpperBound[0]) {\n          return subtypeOf(upperBound);\n        }\n      }\n      return original;\n    }\n else {\n      return toResolve;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 328,
        "startColumnNumber" : 12,
        "endLineNumber" : 328,
        "endColumnNumber" : 37
      },
      "nodeContext" : "toResolve == typeVariable",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.TypeVariable<>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 327,
    "startColumnNumber" : 65,
    "endLineNumber" : 327,
    "endColumnNumber" : 77
  }, {
    "charLength" : 12,
    "startLineNumber" : 328,
    "startColumnNumber" : 25,
    "endLineNumber" : 328,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}