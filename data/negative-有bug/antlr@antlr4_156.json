{
  "id" : 156,
  "expression" : "nalts",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nalts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 276,
      "startColumnNumber" : 19,
      "endLineNumber" : 276,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 276,
        "startColumnNumber" : 16,
        "endLineNumber" : 276,
        "endColumnNumber" : 24
      },
      "nodeContext" : "i < nalts",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 276,
        "startColumnNumber" : 2,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < nalts; i++) {\n  AltAST altAST=(AltAST)blk.getChild(i);\n  if (altAST.altLabel != null) {\n    String altLabel=altAST.altLabel.getText();\n    Rule r=ruleCollector.rules.get(Utils.decapitalize(altLabel));\n    if (r != null) {\n      g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_CONFLICTS_WITH_RULE,g.fileName,altAST.altLabel.token,altLabel,r.name);\n    }\n    String prevRuleForLabel=ruleCollector.altLabelToRuleName.get(altLabel);\n    if (prevRuleForLabel != null && !prevRuleForLabel.equals(rule.getRuleName())) {\n      g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_REDEF,g.fileName,altAST.altLabel.token,altLabel,rule.getRuleName(),prevRuleForLabel);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1604,
        "startLineNumber" : 271,
        "startColumnNumber" : 71,
        "endLineNumber" : 308,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (rule.isLexerRule())   return;\n  BlockAST blk=(BlockAST)rule.getFirstChildWithType(BLOCK);\n  int nalts=blk.getChildCount();\n  GrammarAST idAST=(GrammarAST)rule.getChild(0);\n  for (int i=0; i < nalts; i++) {\n    AltAST altAST=(AltAST)blk.getChild(i);\n    if (altAST.altLabel != null) {\n      String altLabel=altAST.altLabel.getText();\n      Rule r=ruleCollector.rules.get(Utils.decapitalize(altLabel));\n      if (r != null) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_CONFLICTS_WITH_RULE,g.fileName,altAST.altLabel.token,altLabel,r.name);\n      }\n      String prevRuleForLabel=ruleCollector.altLabelToRuleName.get(altLabel);\n      if (prevRuleForLabel != null && !prevRuleForLabel.equals(rule.getRuleName())) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_REDEF,g.fileName,altAST.altLabel.token,altLabel,rule.getRuleName(),prevRuleForLabel);\n      }\n    }\n  }\n  List<GrammarAST> altLabels=ruleCollector.ruleToAltLabels.get(rule.getRuleName());\n  int numAltLabels=0;\n  if (altLabels != null)   numAltLabels=altLabels.size();\n  if (numAltLabels > 0 && nalts != numAltLabels) {\n    g.tool.errMgr.grammarError(ErrorType.RULE_WITH_TOO_FEW_ALT_LABELS,g.fileName,idAST.token,rule.getRuleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1686,
        "startLineNumber" : 270,
        "startColumnNumber" : 1,
        "endLineNumber" : 308,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void finishRule(RuleAST rule,GrammarAST ID,GrammarAST block){\n  if (rule.isLexerRule())   return;\n  BlockAST blk=(BlockAST)rule.getFirstChildWithType(BLOCK);\n  int nalts=blk.getChildCount();\n  GrammarAST idAST=(GrammarAST)rule.getChild(0);\n  for (int i=0; i < nalts; i++) {\n    AltAST altAST=(AltAST)blk.getChild(i);\n    if (altAST.altLabel != null) {\n      String altLabel=altAST.altLabel.getText();\n      Rule r=ruleCollector.rules.get(Utils.decapitalize(altLabel));\n      if (r != null) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_CONFLICTS_WITH_RULE,g.fileName,altAST.altLabel.token,altLabel,r.name);\n      }\n      String prevRuleForLabel=ruleCollector.altLabelToRuleName.get(altLabel);\n      if (prevRuleForLabel != null && !prevRuleForLabel.equals(rule.getRuleName())) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_REDEF,g.fileName,altAST.altLabel.token,altLabel,rule.getRuleName(),prevRuleForLabel);\n      }\n    }\n  }\n  List<GrammarAST> altLabels=ruleCollector.ruleToAltLabels.get(rule.getRuleName());\n  int numAltLabels=0;\n  if (altLabels != null)   numAltLabels=altLabels.size();\n  if (numAltLabels > 0 && nalts != numAltLabels) {\n    g.tool.errMgr.grammarError(ErrorType.RULE_WITH_TOO_FEW_ALT_LABELS,g.fileName,idAST.token,rule.getRuleName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 276,
        "startColumnNumber" : 16,
        "endLineNumber" : 276,
        "endColumnNumber" : 24
      },
      "nodeContext" : "i < nalts",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "nalts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 304,
      "startColumnNumber" : 25,
      "endLineNumber" : 304,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 304,
        "startColumnNumber" : 25,
        "endLineNumber" : 304,
        "endColumnNumber" : 46
      },
      "nodeContext" : "nalts != numAltLabels",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 304,
        "startColumnNumber" : 7,
        "endLineNumber" : 304,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numAltLabels > 0 && nalts != numAltLabels",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 304,
        "startColumnNumber" : 2,
        "endLineNumber" : 307,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (numAltLabels > 0 && nalts != numAltLabels) {\n  g.tool.errMgr.grammarError(ErrorType.RULE_WITH_TOO_FEW_ALT_LABELS,g.fileName,idAST.token,rule.getRuleName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1604,
        "startLineNumber" : 271,
        "startColumnNumber" : 71,
        "endLineNumber" : 308,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (rule.isLexerRule())   return;\n  BlockAST blk=(BlockAST)rule.getFirstChildWithType(BLOCK);\n  int nalts=blk.getChildCount();\n  GrammarAST idAST=(GrammarAST)rule.getChild(0);\n  for (int i=0; i < nalts; i++) {\n    AltAST altAST=(AltAST)blk.getChild(i);\n    if (altAST.altLabel != null) {\n      String altLabel=altAST.altLabel.getText();\n      Rule r=ruleCollector.rules.get(Utils.decapitalize(altLabel));\n      if (r != null) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_CONFLICTS_WITH_RULE,g.fileName,altAST.altLabel.token,altLabel,r.name);\n      }\n      String prevRuleForLabel=ruleCollector.altLabelToRuleName.get(altLabel);\n      if (prevRuleForLabel != null && !prevRuleForLabel.equals(rule.getRuleName())) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_REDEF,g.fileName,altAST.altLabel.token,altLabel,rule.getRuleName(),prevRuleForLabel);\n      }\n    }\n  }\n  List<GrammarAST> altLabels=ruleCollector.ruleToAltLabels.get(rule.getRuleName());\n  int numAltLabels=0;\n  if (altLabels != null)   numAltLabels=altLabels.size();\n  if (numAltLabels > 0 && nalts != numAltLabels) {\n    g.tool.errMgr.grammarError(ErrorType.RULE_WITH_TOO_FEW_ALT_LABELS,g.fileName,idAST.token,rule.getRuleName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1686,
        "startLineNumber" : 270,
        "startColumnNumber" : 1,
        "endLineNumber" : 308,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void finishRule(RuleAST rule,GrammarAST ID,GrammarAST block){\n  if (rule.isLexerRule())   return;\n  BlockAST blk=(BlockAST)rule.getFirstChildWithType(BLOCK);\n  int nalts=blk.getChildCount();\n  GrammarAST idAST=(GrammarAST)rule.getChild(0);\n  for (int i=0; i < nalts; i++) {\n    AltAST altAST=(AltAST)blk.getChild(i);\n    if (altAST.altLabel != null) {\n      String altLabel=altAST.altLabel.getText();\n      Rule r=ruleCollector.rules.get(Utils.decapitalize(altLabel));\n      if (r != null) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_CONFLICTS_WITH_RULE,g.fileName,altAST.altLabel.token,altLabel,r.name);\n      }\n      String prevRuleForLabel=ruleCollector.altLabelToRuleName.get(altLabel);\n      if (prevRuleForLabel != null && !prevRuleForLabel.equals(rule.getRuleName())) {\n        g.tool.errMgr.grammarError(ErrorType.ALT_LABEL_REDEF,g.fileName,altAST.altLabel.token,altLabel,rule.getRuleName(),prevRuleForLabel);\n      }\n    }\n  }\n  List<GrammarAST> altLabels=ruleCollector.ruleToAltLabels.get(rule.getRuleName());\n  int numAltLabels=0;\n  if (altLabels != null)   numAltLabels=altLabels.size();\n  if (numAltLabels > 0 && nalts != numAltLabels) {\n    g.tool.errMgr.grammarError(ErrorType.RULE_WITH_TOO_FEW_ALT_LABELS,g.fileName,idAST.token,rule.getRuleName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 304,
        "startColumnNumber" : 7,
        "endLineNumber" : 304,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numAltLabels > 0 && nalts != numAltLabels",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 276,
    "startColumnNumber" : 19,
    "endLineNumber" : 276,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 304,
    "startColumnNumber" : 25,
    "endLineNumber" : 304,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}