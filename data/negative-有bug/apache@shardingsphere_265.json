{
  "id" : 265,
  "expression" : "actual.getFromSchema()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dal/impl/ShowOpenTablesStatementAssert.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actual.getFromSchema()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 43,
      "startColumnNumber" : 12,
      "endLineNumber" : 43,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 46
      },
      "nodeContext" : "actual.getFromSchema().isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual.getFromSchema().isPresent()) {\n  SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n  SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 42,
        "startColumnNumber" : 165,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert show open tables statement is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual show open tables statement\n * @param expected expected show open tables statement test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final MySQLShowOpenTablesStatement actual,final ShowOpenTablesStatementTestCase expected){\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 79,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 46
      },
      "nodeContext" : "actual.getFromSchema().isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.util.Optional<org.apache.shardingsphere.sql.parser.sql.common.segment.dal.FromSchemaSegment>"
  }, {
    "nodeContext" : "actual.getFromSchema()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 44,
      "startColumnNumber" : 49,
      "endLineNumber" : 44,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 44,
        "startColumnNumber" : 49,
        "endLineNumber" : 44,
        "endColumnNumber" : 77
      },
      "nodeContext" : "actual.getFromSchema().get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 44,
        "startColumnNumber" : 49,
        "endLineNumber" : 44,
        "endColumnNumber" : 89
      },
      "nodeContext" : "actual.getFromSchema().get().getSchema()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 128
      },
      "nodeContext" : "SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 129
      },
      "nodeContext" : "SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 43,
        "startColumnNumber" : 48,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n  SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual.getFromSchema().isPresent()) {\n  SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n  SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 42,
        "startColumnNumber" : 165,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert show open tables statement is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual show open tables statement\n * @param expected expected show open tables statement test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final MySQLShowOpenTablesStatement actual,final ShowOpenTablesStatementTestCase expected){\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 79,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 129
      },
      "nodeContext" : "SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.Optional<org.apache.shardingsphere.sql.parser.sql.common.segment.dal.FromSchemaSegment>"
  }, {
    "nodeContext" : "actual.getFromSchema()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 45,
      "startColumnNumber" : 53,
      "endLineNumber" : 45,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 45,
        "startColumnNumber" : 53,
        "endLineNumber" : 45,
        "endColumnNumber" : 81
      },
      "nodeContext" : "actual.getFromSchema().get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 108
      },
      "nodeContext" : "SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 109
      },
      "nodeContext" : "SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 43,
        "startColumnNumber" : 48,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n  SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual.getFromSchema().isPresent()) {\n  SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n  SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 42,
        "startColumnNumber" : 165,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert show open tables statement is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual show open tables statement\n * @param expected expected show open tables statement test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final MySQLShowOpenTablesStatement actual,final ShowOpenTablesStatementTestCase expected){\n  if (actual.getFromSchema().isPresent()) {\n    SchemaAssert.assertIs(assertContext,actual.getFromSchema().get().getSchema(),expected.getFromSchema().getSchema());\n    SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n  }\n  if (actual.getFilter().isPresent()) {\n    ShowFilterAssert.assertIs(assertContext,actual.getFilter().get(),expected.getFilter());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 79,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 109
      },
      "nodeContext" : "SQLSegmentAssert.assertIs(assertContext,actual.getFromSchema().get(),expected.getFromSchema());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Optional<org.apache.shardingsphere.sql.parser.sql.common.segment.dal.FromSchemaSegment>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 43,
    "startColumnNumber" : 12,
    "endLineNumber" : 43,
    "endColumnNumber" : 34
  }, {
    "charLength" : 22,
    "startLineNumber" : 44,
    "startColumnNumber" : 49,
    "endLineNumber" : 44,
    "endColumnNumber" : 71
  }, {
    "charLength" : 22,
    "startLineNumber" : 45,
    "startColumnNumber" : 53,
    "endLineNumber" : 45,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}