{
  "id" : 413,
  "expression" : "HystrixCollapserMetrics",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/main/java/com/netflix/hystrix/HystrixObservableCollapser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HystrixCollapserMetrics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 135,
      "startColumnNumber" : 27,
      "endLineNumber" : 135,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 135,
        "startColumnNumber" : 27,
        "endLineNumber" : 135,
        "endColumnNumber" : 88
      },
      "nodeContext" : "HystrixCollapserMetrics.getInstance(collapserKey,properties)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 88
      },
      "nodeContext" : "this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 89
      },
      "nodeContext" : "this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 134,
        "startColumnNumber" : 29,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (metrics == null) {\n  this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n}\n else {\n  this.metrics=metrics;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6965,
        "startLineNumber" : 124,
        "startColumnNumber" : 209,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (collapserKey == null || collapserKey.name().trim().equals(\"\")) {\n    String defaultKeyName=getDefaultNameFromClass(getClass());\n    collapserKey=HystrixCollapserKey.Factory.asKey(defaultKeyName);\n  }\n  HystrixCollapserProperties properties=HystrixPropertiesFactory.getCollapserProperties(collapserKey,propertiesBuilder);\n  this.collapserFactory=new RequestCollapserFactory<BatchReturnType,ResponseType,RequestArgumentType>(collapserKey,scope,timer,properties);\n  this.requestCache=HystrixRequestCache.getInstance(collapserKey,HystrixPlugins.getInstance().getConcurrencyStrategy());\n  if (metrics == null) {\n    this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n  }\n else {\n    this.metrics=metrics;\n  }\n  final HystrixObservableCollapser<K,BatchReturnType,ResponseType,RequestArgumentType> self=this;\n  HystrixMetricsPublisherFactory.createOrRetrievePublisherForCollapser(collapserKey,this.metrics,properties);\n  collapserInstanceWrapper=new HystrixCollapserBridge<BatchReturnType,ResponseType,RequestArgumentType>(){\n    @Override public Collection<Collection<CollapsedRequest<ResponseType,RequestArgumentType>>> shardRequests(    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      Collection<Collection<CollapsedRequest<ResponseType,RequestArgumentType>>> shards=self.shardRequests(requests);\n      self.metrics.markShards(shards.size());\n      return shards;\n    }\n    @Override public Observable<BatchReturnType> createObservableCommand(    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      HystrixObservableCommand<BatchReturnType> command=self.createCommand(requests);\n      command.markAsCollapsedCommand(this.getCollapserKey(),requests.size());\n      self.metrics.markBatch(requests.size());\n      return command.toObservable();\n    }\n    @Override public Observable<Void> mapResponseToRequests(    Observable<BatchReturnType> batchResponse,    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      Func1<RequestArgumentType,K> requestKeySelector=self.getRequestArgumentKeySelector();\n      final Func1<BatchReturnType,K> batchResponseKeySelector=self.getBatchReturnTypeKeySelector();\n      final Func1<BatchReturnType,ResponseType> mapBatchTypeToResponseType=self.getBatchReturnTypeToResponseTypeMapper();\n      final Map<K,CollapsedRequest<ResponseType,RequestArgumentType>> requestsByKey=new HashMap<K,CollapsedRequest<ResponseType,RequestArgumentType>>(requests.size());\n      for (      CollapsedRequest<ResponseType,RequestArgumentType> cr : requests) {\n        K requestArg=requestKeySelector.call(cr.getArgument());\n        requestsByKey.put(requestArg,cr);\n      }\n      final Set<K> seenKeys=new HashSet<K>();\n      return batchResponse.doOnNext(new Action1<BatchReturnType>(){\n        @Override public void call(        BatchReturnType batchReturnType){\n          try {\n            K responseKey=batchResponseKeySelector.call(batchReturnType);\n            CollapsedRequest<ResponseType,RequestArgumentType> requestForResponse=requestsByKey.get(responseKey);\n            if (requestForResponse != null) {\n              requestForResponse.emitResponse(mapBatchTypeToResponseType.call(batchReturnType));\n              seenKeys.add(responseKey);\n            }\n else {\n              logger.warn(\"Batch Response contained a response key not in request batch : {}\",responseKey);\n            }\n          }\n catch (          Throwable ex) {\n            logger.warn(\"Uncaught error during demultiplexing of BatchResponse\",ex);\n          }\n        }\n      }\n).doOnError(new Action1<Throwable>(){\n        @Override public void call(        Throwable t){\n          Exception ex=getExceptionFromThrowable(t);\n          for (          CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq : requestsByKey.values()) {\n            collapsedReq.setException(ex);\n          }\n        }\n      }\n).doOnCompleted(new Action0(){\n        @Override public void call(){\n          for (          Map.Entry<K,CollapsedRequest<ResponseType,RequestArgumentType>> entry : requestsByKey.entrySet()) {\n            K key=entry.getKey();\n            CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq=entry.getValue();\n            if (!seenKeys.contains(key)) {\n              try {\n                onMissingResponse(collapsedReq);\n              }\n catch (              Throwable ex) {\n                collapsedReq.setException(new RuntimeException(\"Error in HystrixObservableCollapser.onMissingResponse handler\",ex));\n              }\n            }\n            collapsedReq.setComplete();\n          }\n        }\n      }\n).ignoreElements().cast(Void.class);\n    }\n    @Override public HystrixCollapserKey getCollapserKey(){\n      return self.getCollapserKey();\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 641,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7147,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "HystrixObservableCollapser(HystrixCollapserKey collapserKey,Scope scope,CollapserTimer timer,HystrixCollapserProperties.Setter propertiesBuilder,HystrixCollapserMetrics metrics){\n  if (collapserKey == null || collapserKey.name().trim().equals(\"\")) {\n    String defaultKeyName=getDefaultNameFromClass(getClass());\n    collapserKey=HystrixCollapserKey.Factory.asKey(defaultKeyName);\n  }\n  HystrixCollapserProperties properties=HystrixPropertiesFactory.getCollapserProperties(collapserKey,propertiesBuilder);\n  this.collapserFactory=new RequestCollapserFactory<BatchReturnType,ResponseType,RequestArgumentType>(collapserKey,scope,timer,properties);\n  this.requestCache=HystrixRequestCache.getInstance(collapserKey,HystrixPlugins.getInstance().getConcurrencyStrategy());\n  if (metrics == null) {\n    this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n  }\n else {\n    this.metrics=metrics;\n  }\n  final HystrixObservableCollapser<K,BatchReturnType,ResponseType,RequestArgumentType> self=this;\n  HystrixMetricsPublisherFactory.createOrRetrievePublisherForCollapser(collapserKey,this.metrics,properties);\n  collapserInstanceWrapper=new HystrixCollapserBridge<BatchReturnType,ResponseType,RequestArgumentType>(){\n    @Override public Collection<Collection<CollapsedRequest<ResponseType,RequestArgumentType>>> shardRequests(    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      Collection<Collection<CollapsedRequest<ResponseType,RequestArgumentType>>> shards=self.shardRequests(requests);\n      self.metrics.markShards(shards.size());\n      return shards;\n    }\n    @Override public Observable<BatchReturnType> createObservableCommand(    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      HystrixObservableCommand<BatchReturnType> command=self.createCommand(requests);\n      command.markAsCollapsedCommand(this.getCollapserKey(),requests.size());\n      self.metrics.markBatch(requests.size());\n      return command.toObservable();\n    }\n    @Override public Observable<Void> mapResponseToRequests(    Observable<BatchReturnType> batchResponse,    Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n      Func1<RequestArgumentType,K> requestKeySelector=self.getRequestArgumentKeySelector();\n      final Func1<BatchReturnType,K> batchResponseKeySelector=self.getBatchReturnTypeKeySelector();\n      final Func1<BatchReturnType,ResponseType> mapBatchTypeToResponseType=self.getBatchReturnTypeToResponseTypeMapper();\n      final Map<K,CollapsedRequest<ResponseType,RequestArgumentType>> requestsByKey=new HashMap<K,CollapsedRequest<ResponseType,RequestArgumentType>>(requests.size());\n      for (      CollapsedRequest<ResponseType,RequestArgumentType> cr : requests) {\n        K requestArg=requestKeySelector.call(cr.getArgument());\n        requestsByKey.put(requestArg,cr);\n      }\n      final Set<K> seenKeys=new HashSet<K>();\n      return batchResponse.doOnNext(new Action1<BatchReturnType>(){\n        @Override public void call(        BatchReturnType batchReturnType){\n          try {\n            K responseKey=batchResponseKeySelector.call(batchReturnType);\n            CollapsedRequest<ResponseType,RequestArgumentType> requestForResponse=requestsByKey.get(responseKey);\n            if (requestForResponse != null) {\n              requestForResponse.emitResponse(mapBatchTypeToResponseType.call(batchReturnType));\n              seenKeys.add(responseKey);\n            }\n else {\n              logger.warn(\"Batch Response contained a response key not in request batch : {}\",responseKey);\n            }\n          }\n catch (          Throwable ex) {\n            logger.warn(\"Uncaught error during demultiplexing of BatchResponse\",ex);\n          }\n        }\n      }\n).doOnError(new Action1<Throwable>(){\n        @Override public void call(        Throwable t){\n          Exception ex=getExceptionFromThrowable(t);\n          for (          CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq : requestsByKey.values()) {\n            collapsedReq.setException(ex);\n          }\n        }\n      }\n).doOnCompleted(new Action0(){\n        @Override public void call(){\n          for (          Map.Entry<K,CollapsedRequest<ResponseType,RequestArgumentType>> entry : requestsByKey.entrySet()) {\n            K key=entry.getKey();\n            CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq=entry.getValue();\n            if (!seenKeys.contains(key)) {\n              try {\n                onMissingResponse(collapsedReq);\n              }\n catch (              Throwable ex) {\n                collapsedReq.setException(new RuntimeException(\"Error in HystrixObservableCollapser.onMissingResponse handler\",ex));\n              }\n            }\n            collapsedReq.setComplete();\n          }\n        }\n      }\n).ignoreElements().cast(Void.class);\n    }\n    @Override public HystrixCollapserKey getCollapserKey(){\n      return self.getCollapserKey();\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 665,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 89
      },
      "nodeContext" : "this.metrics=HystrixCollapserMetrics.getInstance(collapserKey,properties);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.HystrixCollapserMetrics"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 135,
    "startColumnNumber" : 27,
    "endLineNumber" : 135,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}