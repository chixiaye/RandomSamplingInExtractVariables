{
  "id" : 264,
  "expression" : "realmSchema.contains(name)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "realmSchema.contains(name)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 159,
      "startColumnNumber" : 60,
      "endLineNumber" : 159,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 153,
        "startColumnNumber" : 34,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    realmSchema.create(name);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 153,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String name : names) {\n  try {\n    realmSchema.create(name);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 146,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type == SchemaType.IMMUTABLE) {\n    return;\n  }\n  String[] names={null,\"\",TestHelper.getRandomString(58)};\n  for (  String name : names) {\n    try {\n      realmSchema.create(name);\n      fail();\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void create_invalidNameThrows(){\n  if (type == SchemaType.IMMUTABLE) {\n    return;\n  }\n  String[] names={null,\"\",TestHelper.getRandomString(58)};\n  for (  String name : names) {\n    try {\n      realmSchema.create(name);\n      fail();\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertFalse(String.format(\"'%s' failed\",name),realmSchema.contains(name));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 159,
    "startColumnNumber" : 60,
    "endLineNumber" : 159,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}