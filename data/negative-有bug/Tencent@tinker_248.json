{
  "id" : 248,
  "expression" : "new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index))",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 199,
      "startLineNumber" : 474,
      "startColumnNumber" : 34,
      "endLineNumber" : 475,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 15,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 474,
        "startColumnNumber" : 28,
        "endLineNumber" : 475,
        "endColumnNumber" : 121
      },
      "nodeContext" : "throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 473,
        "startColumnNumber" : 55,
        "endLineNumber" : 476,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 473,
        "startColumnNumber" : 24,
        "endLineNumber" : 476,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (targetInstruction == null) {\n  throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 469,
        "startColumnNumber" : 40,
        "endLineNumber" : 502,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n  BuilderInstruction targetInstruction=targetLocation.instruction;\n  if (targetInstruction == null) {\n    throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n  }\n  if (targetInstruction.getOpcode() == Opcode.NOP) {\n    targetInstruction=getFirstNonNop(targetLocation.index + 1);\n  }\n  if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n    throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n  }\n  if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n    throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n  }\n  if (!payloadLocations.add(targetLocation)) {\n    throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n  }\n  ((BuilderSwitchPayload)targetInstruction).referrer=location;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2533,
        "startLineNumber" : 467,
        "startColumnNumber" : 16,
        "endLineNumber" : 506,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n    MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n    BuilderInstruction targetInstruction=targetLocation.instruction;\n    if (targetInstruction == null) {\n      throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n    }\n    if (targetInstruction.getOpcode() == Opcode.NOP) {\n      targetInstruction=getFirstNonNop(targetLocation.index + 1);\n    }\n    if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n      throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n    }\n    if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n      throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n    }\n    if (!payloadLocations.add(targetLocation)) {\n      throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n    }\n    ((BuilderSwitchPayload)targetInstruction).referrer=location;\n    break;\n  }\ndefault:{\n  break;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 178,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2565,
        "startLineNumber" : 466,
        "startColumnNumber" : 37,
        "endLineNumber" : 507,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n      MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n      BuilderInstruction targetInstruction=targetLocation.instruction;\n      if (targetInstruction == null) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n      }\n      if (targetInstruction.getOpcode() == Opcode.NOP) {\n        targetInstruction=getFirstNonNop(targetLocation.index + 1);\n      }\n      if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n      }\n      if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n      }\n      if (!payloadLocations.add(targetLocation)) {\n        throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n      }\n      ((BuilderSwitchPayload)targetInstruction).referrer=location;\n      break;\n    }\ndefault:{\n    break;\n  }\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 466,
        "startColumnNumber" : 12,
        "endLineNumber" : 507,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n      MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n      BuilderInstruction targetInstruction=targetLocation.instruction;\n      if (targetInstruction == null) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n      }\n      if (targetInstruction.getOpcode() == Opcode.NOP) {\n        targetInstruction=getFirstNonNop(targetLocation.index + 1);\n      }\n      if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n      }\n      if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n        throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n      }\n      if (!payloadLocations.add(targetLocation)) {\n        throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n      }\n      ((BuilderSwitchPayload)targetInstruction).referrer=location;\n      break;\n    }\ndefault:{\n    break;\n  }\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2681,
        "startLineNumber" : 464,
        "startColumnNumber" : 56,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BuilderInstruction instruction=location.instruction;\n  if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n        MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n        BuilderInstruction targetInstruction=targetLocation.instruction;\n        if (targetInstruction == null) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n        }\n        if (targetInstruction.getOpcode() == Opcode.NOP) {\n          targetInstruction=getFirstNonNop(targetLocation.index + 1);\n        }\n        if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n        }\n        if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n        }\n        if (!payloadLocations.add(targetLocation)) {\n          throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n        }\n        ((BuilderSwitchPayload)targetInstruction).referrer=location;\n        break;\n      }\ndefault:{\n      break;\n    }\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2729,
        "startLineNumber" : 464,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MethodLocation location : instructionList) {\n  BuilderInstruction instruction=location.instruction;\n  if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n        MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n        BuilderInstruction targetInstruction=targetLocation.instruction;\n        if (targetInstruction == null) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n        }\n        if (targetInstruction.getOpcode() == Opcode.NOP) {\n          targetInstruction=getFirstNonNop(targetLocation.index + 1);\n        }\n        if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n        }\n        if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n          throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n        }\n        if (!payloadLocations.add(targetLocation)) {\n          throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n        }\n        ((BuilderSwitchPayload)targetInstruction).referrer=location;\n        break;\n      }\ndefault:{\n      break;\n    }\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 198,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6745,
        "startLineNumber" : 461,
        "startColumnNumber" : 35,
        "endLineNumber" : 581,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashSet<MethodLocation> payloadLocations=Sets.newHashSet();\n  for (  MethodLocation location : instructionList) {\n    BuilderInstruction instruction=location.instruction;\n    if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n          MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n          BuilderInstruction targetInstruction=targetLocation.instruction;\n          if (targetInstruction == null) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n          }\n          if (targetInstruction.getOpcode() == Opcode.NOP) {\n            targetInstruction=getFirstNonNop(targetLocation.index + 1);\n          }\n          if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n          }\n          if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n          }\n          if (!payloadLocations.add(targetLocation)) {\n            throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n          }\n          ((BuilderSwitchPayload)targetInstruction).referrer=location;\n          break;\n        }\ndefault:{\n        break;\n      }\n  }\n}\n}\nboolean madeChanges;\ndo {\nmadeChanges=false;\nfor (int index=0; index < instructionList.size(); index++) {\n  MethodLocation location=instructionList.get(index);\n  BuilderInstruction instruction=location.instruction;\n  if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase GOTO:{\n        int offset=((BuilderOffsetInstruction)instruction).internalGetCodeOffset();\n        if (offset < Byte.MIN_VALUE || offset > Byte.MAX_VALUE) {\n          BuilderOffsetInstruction replacement;\n          if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {\n            replacement=new BuilderInstruction30t(Opcode.GOTO_32,((BuilderOffsetInstruction)instruction).getTarget());\n          }\n else {\n            replacement=new BuilderInstruction20t(Opcode.GOTO_16,((BuilderOffsetInstruction)instruction).getTarget());\n          }\n          replaceInstruction(location.index,replacement);\n          madeChanges=true;\n        }\n        break;\n      }\ncase GOTO_16:{\n      int offset=((BuilderOffsetInstruction)instruction).internalGetCodeOffset();\n      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {\n        BuilderOffsetInstruction replacement=new BuilderInstruction30t(Opcode.GOTO_32,((BuilderOffsetInstruction)instruction).getTarget());\n        replaceInstruction(location.index,replacement);\n        madeChanges=true;\n      }\n      break;\n    }\ncase SPARSE_SWITCH_PAYLOAD:case PACKED_SWITCH_PAYLOAD:  if (((BuilderSwitchPayload)instruction).referrer == null) {\n    removeInstruction(index);\n    index--;\n    madeChanges=true;\n    break;\n  }\ncase ARRAY_PAYLOAD:{\n  if ((location.codeAddress & 0x01) != 0) {\n    int previousIndex=location.index - 1;\n    MethodLocation previousLocation=instructionList.get(previousIndex);\n    Instruction previousInstruction=previousLocation.instruction;\n    assert previousInstruction != null;\n    if (previousInstruction.getOpcode() == Opcode.NOP) {\n      removeInstruction(previousIndex);\n      index--;\n    }\n else {\n      addInstruction(location.index,new BuilderInstruction10x(Opcode.NOP));\n      index++;\n    }\n    madeChanges=true;\n  }\n  break;\n}\ndefault:{\nbreak;\n}\n}\n}\n}\n}\n while (madeChanges);\nfixInstructions=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 522,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6776,
        "startLineNumber" : 461,
        "startColumnNumber" : 4,
        "endLineNumber" : 581,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void fixInstructions(){\n  HashSet<MethodLocation> payloadLocations=Sets.newHashSet();\n  for (  MethodLocation location : instructionList) {\n    BuilderInstruction instruction=location.instruction;\n    if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase SPARSE_SWITCH:case PACKED_SWITCH:{\n          MethodLocation targetLocation=((BuilderOffsetInstruction)instruction).getTarget().getLocation();\n          BuilderInstruction targetInstruction=targetLocation.instruction;\n          if (targetInstruction == null) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n          }\n          if (targetInstruction.getOpcode() == Opcode.NOP) {\n            targetInstruction=getFirstNonNop(targetLocation.index + 1);\n          }\n          if (targetInstruction == null || !(targetInstruction instanceof BuilderSwitchPayload)) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d does not refer to a payload instruction.\",location.codeAddress,location.index));\n          }\n          if ((instruction.opcode == Opcode.PACKED_SWITCH && targetInstruction.getOpcode() != Opcode.PACKED_SWITCH_PAYLOAD) || (instruction.opcode == Opcode.SPARSE_SWITCH && targetInstruction.getOpcode() != Opcode.SPARSE_SWITCH_PAYLOAD)) {\n            throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d refers to the wrong type of payload instruction.\",location.codeAddress,location.index));\n          }\n          if (!payloadLocations.add(targetLocation)) {\n            throw new IllegalStateException(\"Multiple switch instructions refer to the same payload. \" + \"This is not currently supported. Please file a bug :)\");\n          }\n          ((BuilderSwitchPayload)targetInstruction).referrer=location;\n          break;\n        }\ndefault:{\n        break;\n      }\n  }\n}\n}\nboolean madeChanges;\ndo {\nmadeChanges=false;\nfor (int index=0; index < instructionList.size(); index++) {\n  MethodLocation location=instructionList.get(index);\n  BuilderInstruction instruction=location.instruction;\n  if (instruction != null) {\nswitch (instruction.getOpcode()) {\ncase GOTO:{\n        int offset=((BuilderOffsetInstruction)instruction).internalGetCodeOffset();\n        if (offset < Byte.MIN_VALUE || offset > Byte.MAX_VALUE) {\n          BuilderOffsetInstruction replacement;\n          if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {\n            replacement=new BuilderInstruction30t(Opcode.GOTO_32,((BuilderOffsetInstruction)instruction).getTarget());\n          }\n else {\n            replacement=new BuilderInstruction20t(Opcode.GOTO_16,((BuilderOffsetInstruction)instruction).getTarget());\n          }\n          replaceInstruction(location.index,replacement);\n          madeChanges=true;\n        }\n        break;\n      }\ncase GOTO_16:{\n      int offset=((BuilderOffsetInstruction)instruction).internalGetCodeOffset();\n      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {\n        BuilderOffsetInstruction replacement=new BuilderInstruction30t(Opcode.GOTO_32,((BuilderOffsetInstruction)instruction).getTarget());\n        replaceInstruction(location.index,replacement);\n        madeChanges=true;\n      }\n      break;\n    }\ncase SPARSE_SWITCH_PAYLOAD:case PACKED_SWITCH_PAYLOAD:  if (((BuilderSwitchPayload)instruction).referrer == null) {\n    removeInstruction(index);\n    index--;\n    madeChanges=true;\n    break;\n  }\ncase ARRAY_PAYLOAD:{\n  if ((location.codeAddress & 0x01) != 0) {\n    int previousIndex=location.index - 1;\n    MethodLocation previousLocation=instructionList.get(previousIndex);\n    Instruction previousInstruction=previousLocation.instruction;\n    assert previousInstruction != null;\n    if (previousInstruction.getOpcode() == Opcode.NOP) {\n      removeInstruction(previousIndex);\n      index--;\n    }\n else {\n      addInstruction(location.index,new BuilderInstruction10x(Opcode.NOP));\n      index++;\n    }\n    madeChanges=true;\n  }\n  break;\n}\ndefault:{\nbreak;\n}\n}\n}\n}\n}\n while (madeChanges);\nfixInstructions=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 474,
        "startColumnNumber" : 28,
        "endLineNumber" : 475,
        "endColumnNumber" : 121
      },
      "nodeContext" : "throw new IllegalStateException(String.format(\"Switch instruction at address/index \" + \"0x%x/%d points to the end of the method.\",location.codeAddress,location.index));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 20,
    "type" : "java.lang.IllegalStateException"
  } ],
  "positionList" : [ {
    "charLength" : 199,
    "startLineNumber" : 474,
    "startColumnNumber" : 34,
    "endLineNumber" : 475,
    "endColumnNumber" : 120
  } ],
  "layoutRelationDataList" : [ ]
}