{
  "id" : 324,
  "expression" : "0",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 41,
      "startColumnNumber" : 15,
      "endLineNumber" : 41,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 41,
        "startColumnNumber" : 11,
        "endLineNumber" : 41,
        "endColumnNumber" : 16
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 41,
        "startColumnNumber" : 7,
        "endLineNumber" : 41,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < argumentTypes.size(); i++) {\n  if (i > 0) {\n    sb.append(\",\");\n  }\n  TypeDescriptor typeDescriptor=argumentTypes.get(i);\n  if (typeDescriptor != null) {\n    sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n  }\n else {\n    sb.append(formatClassNameForMessage(null));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 38,
        "startColumnNumber" : 94,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder(name);\n  sb.append(\"(\");\n  for (int i=0; i < argumentTypes.size(); i++) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    TypeDescriptor typeDescriptor=argumentTypes.get(i);\n    if (typeDescriptor != null) {\n      sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n    }\n else {\n      sb.append(formatClassNameForMessage(null));\n    }\n  }\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 32,
        "startColumnNumber" : 1,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Produce a readable representation for a given method name with specified arguments.\n * @param name the name of the method\n * @param argumentTypes the types of the arguments to the method\n * @return a nicely formatted representation, e.g. {@code foo(String,int)}\n */\npublic static String formatMethodForMessage(String name,List<TypeDescriptor> argumentTypes){\n  StringBuilder sb=new StringBuilder(name);\n  sb.append(\"(\");\n  for (int i=0; i < argumentTypes.size(); i++) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    TypeDescriptor typeDescriptor=argumentTypes.get(i);\n    if (typeDescriptor != null) {\n      sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n    }\n else {\n      sb.append(formatClassNameForMessage(null));\n    }\n  }\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 41,
        "startColumnNumber" : 7,
        "endLineNumber" : 41,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 42,
      "startColumnNumber" : 11,
      "endLineNumber" : 42,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 42,
        "startColumnNumber" : 7,
        "endLineNumber" : 42,
        "endColumnNumber" : 12
      },
      "nodeContext" : "i > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 42,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (i > 0) {\n  sb.append(\",\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 41,
        "startColumnNumber" : 49,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (i > 0) {\n    sb.append(\",\");\n  }\n  TypeDescriptor typeDescriptor=argumentTypes.get(i);\n  if (typeDescriptor != null) {\n    sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n  }\n else {\n    sb.append(formatClassNameForMessage(null));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < argumentTypes.size(); i++) {\n  if (i > 0) {\n    sb.append(\",\");\n  }\n  TypeDescriptor typeDescriptor=argumentTypes.get(i);\n  if (typeDescriptor != null) {\n    sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n  }\n else {\n    sb.append(formatClassNameForMessage(null));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 38,
        "startColumnNumber" : 94,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder(name);\n  sb.append(\"(\");\n  for (int i=0; i < argumentTypes.size(); i++) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    TypeDescriptor typeDescriptor=argumentTypes.get(i);\n    if (typeDescriptor != null) {\n      sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n    }\n else {\n      sb.append(formatClassNameForMessage(null));\n    }\n  }\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 32,
        "startColumnNumber" : 1,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Produce a readable representation for a given method name with specified arguments.\n * @param name the name of the method\n * @param argumentTypes the types of the arguments to the method\n * @return a nicely formatted representation, e.g. {@code foo(String,int)}\n */\npublic static String formatMethodForMessage(String name,List<TypeDescriptor> argumentTypes){\n  StringBuilder sb=new StringBuilder(name);\n  sb.append(\"(\");\n  for (int i=0; i < argumentTypes.size(); i++) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    TypeDescriptor typeDescriptor=argumentTypes.get(i);\n    if (typeDescriptor != null) {\n      sb.append(formatClassNameForMessage(typeDescriptor.getType()));\n    }\n else {\n      sb.append(formatClassNameForMessage(null));\n    }\n  }\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 42,
        "startColumnNumber" : 7,
        "endLineNumber" : 42,
        "endColumnNumber" : 12
      },
      "nodeContext" : "i > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 41,
    "startColumnNumber" : 15,
    "endLineNumber" : 41,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 42,
    "startColumnNumber" : 11,
    "endLineNumber" : 42,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}