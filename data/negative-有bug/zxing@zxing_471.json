{
  "id" : 471,
  "expression" : "result.length()",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/oned/Code128Reader.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 345,
      "startColumnNumber" : 20,
      "endLineNumber" : 345,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 345,
        "startColumnNumber" : 20,
        "endLineNumber" : 345,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 345,
        "startColumnNumber" : 16,
        "endLineNumber" : 349,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 391,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 337,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 330,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2693,
        "startLineNumber" : 323,
        "startColumnNumber" : 10,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 64) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 345,
        "startColumnNumber" : 20,
        "endLineNumber" : 345,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 347,
      "startColumnNumber" : 27,
      "endLineNumber" : 347,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 347,
        "startColumnNumber" : 27,
        "endLineNumber" : 347,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 347,
        "startColumnNumber" : 23,
        "endLineNumber" : 349,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 345,
        "startColumnNumber" : 16,
        "endLineNumber" : 349,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 391,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 337,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 330,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2693,
        "startLineNumber" : 323,
        "startColumnNumber" : 10,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 64) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 347,
        "startColumnNumber" : 27,
        "endLineNumber" : 347,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 351,
      "startColumnNumber" : 22,
      "endLineNumber" : 351,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 351,
        "startColumnNumber" : 22,
        "endLineNumber" : 351,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 351,
        "startColumnNumber" : 18,
        "endLineNumber" : 358,
        "endColumnNumber" : 19
      },
      "nodeContext" : "if (result.length() == 0) {\n  result.append(\"]C1\");\n}\n else {\n  result.append((char)29);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 350,
        "startColumnNumber" : 33,
        "endLineNumber" : 359,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 350,
        "startColumnNumber" : 16,
        "endLineNumber" : 359,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 391,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 337,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2428,
        "startLineNumber" : 330,
        "startColumnNumber" : 17,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2693,
        "startLineNumber" : 323,
        "startColumnNumber" : 10,
        "endLineNumber" : 392,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 64) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(code - 64));\n  }\n else {\n    result.append((char)(code + 64));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 351,
        "startColumnNumber" : 22,
        "endLineNumber" : 351,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 408,
      "startColumnNumber" : 20,
      "endLineNumber" : 408,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 408,
        "startColumnNumber" : 20,
        "endLineNumber" : 408,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 408,
        "startColumnNumber" : 16,
        "endLineNumber" : 412,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 406,
        "startColumnNumber" : 12,
        "endLineNumber" : 454,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 402,
        "startColumnNumber" : 17,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 395,
        "startColumnNumber" : 10,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 408,
        "startColumnNumber" : 20,
        "endLineNumber" : 408,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 410,
      "startColumnNumber" : 27,
      "endLineNumber" : 410,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 410,
        "startColumnNumber" : 27,
        "endLineNumber" : 410,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 410,
        "startColumnNumber" : 23,
        "endLineNumber" : 412,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 408,
        "startColumnNumber" : 16,
        "endLineNumber" : 412,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 406,
        "startColumnNumber" : 12,
        "endLineNumber" : 454,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 402,
        "startColumnNumber" : 17,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 395,
        "startColumnNumber" : 10,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 410,
        "startColumnNumber" : 27,
        "endLineNumber" : 410,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 414,
      "startColumnNumber" : 22,
      "endLineNumber" : 414,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 414,
        "startColumnNumber" : 22,
        "endLineNumber" : 414,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 414,
        "startColumnNumber" : 18,
        "endLineNumber" : 421,
        "endColumnNumber" : 19
      },
      "nodeContext" : "if (result.length() == 0) {\n  result.append(\"]C1\");\n}\n else {\n  result.append((char)29);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 413,
        "startColumnNumber" : 33,
        "endLineNumber" : 422,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 413,
        "startColumnNumber" : 16,
        "endLineNumber" : 422,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 406,
        "startColumnNumber" : 12,
        "endLineNumber" : 454,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 402,
        "startColumnNumber" : 17,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 395,
        "startColumnNumber" : 10,
        "endLineNumber" : 455,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 96) {\n  if (shiftUpperMode == upperMode) {\n    result.append((char)(' ' + code));\n  }\n else {\n    result.append((char)(' ' + code + 128));\n  }\n  shiftUpperMode=false;\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 414,
        "startColumnNumber" : 22,
        "endLineNumber" : 414,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 469,
      "startColumnNumber" : 20,
      "endLineNumber" : 469,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 469,
        "startColumnNumber" : 20,
        "endLineNumber" : 469,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 469,
        "startColumnNumber" : 16,
        "endLineNumber" : 473,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 467,
        "startColumnNumber" : 12,
        "endLineNumber" : 494,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 463,
        "startColumnNumber" : 17,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 458,
        "startColumnNumber" : 10,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 100) {\n  if (code < 10) {\n    result.append('0');\n  }\n  result.append(code);\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 469,
        "startColumnNumber" : 20,
        "endLineNumber" : 469,
        "endColumnNumber" : 40
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 471,
      "startColumnNumber" : 27,
      "endLineNumber" : 471,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 471,
        "startColumnNumber" : 27,
        "endLineNumber" : 471,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 471,
        "startColumnNumber" : 23,
        "endLineNumber" : 473,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 469,
        "startColumnNumber" : 16,
        "endLineNumber" : 473,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (result.length() == 0) {\n  symbologyModifier=1;\n}\n else if (result.length() == 1) {\n  symbologyModifier=2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 467,
        "startColumnNumber" : 12,
        "endLineNumber" : 494,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 463,
        "startColumnNumber" : 17,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 458,
        "startColumnNumber" : 10,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 100) {\n  if (code < 10) {\n    result.append('0');\n  }\n  result.append(code);\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 471,
        "startColumnNumber" : 27,
        "endLineNumber" : 471,
        "endColumnNumber" : 47
      },
      "nodeContext" : "result.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 475,
      "startColumnNumber" : 22,
      "endLineNumber" : 475,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 475,
        "startColumnNumber" : 22,
        "endLineNumber" : 475,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 475,
        "startColumnNumber" : 18,
        "endLineNumber" : 482,
        "endColumnNumber" : 19
      },
      "nodeContext" : "if (result.length() == 0) {\n  result.append(\"]C1\");\n}\n else {\n  result.append((char)29);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 474,
        "startColumnNumber" : 33,
        "endLineNumber" : 483,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 474,
        "startColumnNumber" : 16,
        "endLineNumber" : 483,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 467,
        "startColumnNumber" : 12,
        "endLineNumber" : 494,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (code) {\ncase CODE_FNC_1:  if (result.length() == 0) {\n    symbologyModifier=1;\n  }\n else   if (result.length() == 1) {\n    symbologyModifier=2;\n  }\nif (convertFNC1) {\n  if (result.length() == 0) {\n    result.append(\"]C1\");\n  }\n else {\n    result.append((char)29);\n  }\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 463,
        "startColumnNumber" : 17,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 458,
        "startColumnNumber" : 10,
        "endLineNumber" : 495,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (code < 100) {\n  if (code < 10) {\n    result.append('0');\n  }\n  result.append(code);\n}\n else {\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=false;\n  }\nswitch (code) {\ncase CODE_FNC_1:    if (result.length() == 0) {\n      symbologyModifier=1;\n    }\n else     if (result.length() == 1) {\n      symbologyModifier=2;\n    }\n  if (convertFNC1) {\n    if (result.length() == 0) {\n      result.append(\"]C1\");\n    }\n else {\n      result.append((char)29);\n    }\n  }\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 497,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 493,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 7799,
        "startLineNumber" : 282,
        "startColumnNumber" : 18,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7813,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 504,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!done) {\n  boolean unshift=isNextShifted;\n  isNextShifted=false;\n  lastCode=code;\n  code=decodeCode(row,counters,nextStart);\n  rawCodes.add((byte)code);\n  if (code != CODE_STOP) {\n    lastCharacterWasPrintable=true;\n  }\n  if (code != CODE_STOP) {\n    multiplier++;\n    checksumTotal+=multiplier * code;\n  }\n  lastStart=nextStart;\n  for (  int counter : counters) {\n    nextStart+=counter;\n  }\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:    throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:  if (code < 64) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(' ' + code));\n    }\n else {\n      result.append((char)(' ' + code + 128));\n    }\n    shiftUpperMode=false;\n  }\n else   if (code < 96) {\n    if (shiftUpperMode == upperMode) {\n      result.append((char)(code - 64));\n    }\n else {\n      result.append((char)(code + 64));\n    }\n    shiftUpperMode=false;\n  }\n else {\n    if (code != CODE_STOP) {\n      lastCharacterWasPrintable=false;\n    }\nswitch (code) {\ncase CODE_FNC_1:      if (result.length() == 0) {\n        symbologyModifier=1;\n      }\n else       if (result.length() == 1) {\n        symbologyModifier=2;\n      }\n    if (convertFNC1) {\n      if (result.length() == 0) {\n        result.append(\"]C1\");\n      }\n else {\n        result.append((char)29);\n      }\n    }\n  break;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 586,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 475,
        "startColumnNumber" : 22,
        "endLineNumber" : 475,
        "endColumnNumber" : 42
      },
      "nodeContext" : "result.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "result.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 526,
      "startColumnNumber" : 23,
      "endLineNumber" : 526,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 526,
        "startColumnNumber" : 8,
        "endLineNumber" : 526,
        "endColumnNumber" : 38
      },
      "nodeContext" : "resultLength=result.length()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 526,
        "startColumnNumber" : 4,
        "endLineNumber" : 526,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int resultLength=result.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11128,
        "startLineNumber" : 238,
        "startColumnNumber" : 67,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 960,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11291,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 560,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException {\n  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);\n  int symbologyModifier=0;\n  int[] startPatternInfo=findStartPattern(row);\n  int startCode=startPatternInfo[2];\n  List<Byte> rawCodes=new ArrayList<>(20);\n  rawCodes.add((byte)startCode);\n  int codeSet;\nswitch (startCode) {\ncase CODE_START_A:    codeSet=CODE_CODE_A;\n  break;\ncase CODE_START_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_START_C:codeSet=CODE_CODE_C;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nboolean done=false;\nboolean isNextShifted=false;\nStringBuilder result=new StringBuilder(20);\nint lastStart=startPatternInfo[0];\nint nextStart=startPatternInfo[1];\nint[] counters=new int[6];\nint lastCode=0;\nint code=0;\nint checksumTotal=startCode;\nint multiplier=0;\nboolean lastCharacterWasPrintable=true;\nboolean upperMode=false;\nboolean shiftUpperMode=false;\nwhile (!done) {\nboolean unshift=isNextShifted;\nisNextShifted=false;\nlastCode=code;\ncode=decodeCode(row,counters,nextStart);\nrawCodes.add((byte)code);\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=true;\n}\nif (code != CODE_STOP) {\nmultiplier++;\nchecksumTotal+=multiplier * code;\n}\nlastStart=nextStart;\nfor (int counter : counters) {\nnextStart+=counter;\n}\nswitch (code) {\ncase CODE_START_A:case CODE_START_B:case CODE_START_C:throw FormatException.getFormatInstance();\n}\nswitch (codeSet) {\ncase CODE_CODE_A:if (code < 64) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(code - 64));\n}\n else {\nresult.append((char)(code + 64));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_A:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_B:if (code < 96) {\nif (shiftUpperMode == upperMode) {\nresult.append((char)(' ' + code));\n}\n else {\nresult.append((char)(' ' + code + 128));\n}\nshiftUpperMode=false;\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_FNC_2:symbologyModifier=4;\nbreak;\ncase CODE_FNC_3:break;\ncase CODE_FNC_4_B:if (!upperMode && shiftUpperMode) {\nupperMode=true;\nshiftUpperMode=false;\n}\n else if (upperMode && shiftUpperMode) {\nupperMode=false;\nshiftUpperMode=false;\n}\n else {\nshiftUpperMode=true;\n}\nbreak;\ncase CODE_SHIFT:isNextShifted=true;\ncodeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_C:codeSet=CODE_CODE_C;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\ncase CODE_CODE_C:if (code < 100) {\nif (code < 10) {\nresult.append('0');\n}\nresult.append(code);\n}\n else {\nif (code != CODE_STOP) {\nlastCharacterWasPrintable=false;\n}\nswitch (code) {\ncase CODE_FNC_1:if (result.length() == 0) {\nsymbologyModifier=1;\n}\n else if (result.length() == 1) {\nsymbologyModifier=2;\n}\nif (convertFNC1) {\nif (result.length() == 0) {\nresult.append(\"]C1\");\n}\n else {\nresult.append((char)29);\n}\n}\nbreak;\ncase CODE_CODE_A:codeSet=CODE_CODE_A;\nbreak;\ncase CODE_CODE_B:codeSet=CODE_CODE_B;\nbreak;\ncase CODE_STOP:done=true;\nbreak;\n}\n}\nbreak;\n}\nif (unshift) {\ncodeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;\n}\n}\nint lastPatternSize=nextStart - lastStart;\nnextStart=row.getNextUnset(nextStart);\nif (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {\nthrow NotFoundException.getNotFoundInstance();\n}\nchecksumTotal-=multiplier * lastCode;\nif (checksumTotal % 103 != lastCode) {\nthrow ChecksumException.getChecksumInstance();\n}\nint resultLength=result.length();\nif (resultLength == 0) {\nthrow NotFoundException.getNotFoundInstance();\n}\nif (resultLength > 0 && lastCharacterWasPrintable) {\nif (codeSet == CODE_CODE_C) {\nresult.delete(resultLength - 2,resultLength);\n}\n else {\nresult.delete(resultLength - 1,resultLength);\n}\n}\nfloat left=(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;\nfloat right=lastStart + lastPatternSize / 2.0f;\nint rawCodesSize=rawCodes.size();\nbyte[] rawBytes=new byte[rawCodesSize];\nfor (int i=0; i < rawCodesSize; i++) {\nrawBytes[i]=rawCodes.get(i);\n}\nResult resultObject=new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODE_128);\nresultObject.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]C\" + symbologyModifier);\nreturn resultObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 988,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 526,
        "startColumnNumber" : 4,
        "endLineNumber" : 526,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int resultLength=result.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 345,
    "startColumnNumber" : 20,
    "endLineNumber" : 345,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 347,
    "startColumnNumber" : 27,
    "endLineNumber" : 347,
    "endColumnNumber" : 42
  }, {
    "charLength" : 15,
    "startLineNumber" : 351,
    "startColumnNumber" : 22,
    "endLineNumber" : 351,
    "endColumnNumber" : 37
  }, {
    "charLength" : 15,
    "startLineNumber" : 408,
    "startColumnNumber" : 20,
    "endLineNumber" : 408,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 410,
    "startColumnNumber" : 27,
    "endLineNumber" : 410,
    "endColumnNumber" : 42
  }, {
    "charLength" : 15,
    "startLineNumber" : 414,
    "startColumnNumber" : 22,
    "endLineNumber" : 414,
    "endColumnNumber" : 37
  }, {
    "charLength" : 15,
    "startLineNumber" : 469,
    "startColumnNumber" : 20,
    "endLineNumber" : 469,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 471,
    "startColumnNumber" : 27,
    "endLineNumber" : 471,
    "endColumnNumber" : 42
  }, {
    "charLength" : 15,
    "startLineNumber" : 475,
    "startColumnNumber" : 22,
    "endLineNumber" : 475,
    "endColumnNumber" : 37
  }, {
    "charLength" : 15,
    "startLineNumber" : 526,
    "startColumnNumber" : 23,
    "endLineNumber" : 526,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  } ]
}