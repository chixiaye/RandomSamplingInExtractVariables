{
  "id" : 468,
  "expression" : "log",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/benchmarks/src/test/java/org/apache/druid/benchmark/TopNTypeInterfaceBenchmark.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 239,
      "startColumnNumber" : 4,
      "endLineNumber" : 239,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 61
      },
      "nodeContext" : "log.info(\"SETUP CALLED AT \" + System.currentTimeMillis())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 62
      },
      "nodeContext" : "log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2105,
        "startLineNumber" : 238,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Setup public void setup() throws IOException {\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 239,
        "endColumnNumber" : 62
      },
      "nodeContext" : "log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 260,
      "startColumnNumber" : 6,
      "endLineNumber" : 260,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 260,
        "startColumnNumber" : 6,
        "endLineNumber" : 260,
        "endColumnNumber" : 50
      },
      "nodeContext" : "log.info(\"Generating rows for segment \" + i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 260,
        "startColumnNumber" : 6,
        "endLineNumber" : 260,
        "endColumnNumber" : 51
      },
      "nodeContext" : "log.info(\"Generating rows for segment \" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 534,
        "startLineNumber" : 259,
        "startColumnNumber" : 42,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"Generating rows for segment \" + i);\n  DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n  IncrementalIndex incIndex=makeIncIndex();\n  for (int j=0; j < rowsPerSegment; j++) {\n    InputRow row=gen.nextRow();\n    if (j % 10000 == 0) {\n      log.info(j + \" rows generated.\");\n    }\n    incIndex.add(row);\n  }\n  incIndexes.add(incIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numSegments; i++) {\n  log.info(\"Generating rows for segment \" + i);\n  DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n  IncrementalIndex incIndex=makeIncIndex();\n  for (int j=0; j < rowsPerSegment; j++) {\n    InputRow row=gen.nextRow();\n    if (j % 10000 == 0) {\n      log.info(j + \" rows generated.\");\n    }\n    incIndex.add(row);\n  }\n  incIndexes.add(incIndex);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2105,
        "startLineNumber" : 238,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Setup public void setup() throws IOException {\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 260,
        "startColumnNumber" : 6,
        "endLineNumber" : 260,
        "endColumnNumber" : 51
      },
      "nodeContext" : "log.info(\"Generating rows for segment \" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 274,
      "startColumnNumber" : 10,
      "endLineNumber" : 274,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 274,
        "startColumnNumber" : 10,
        "endLineNumber" : 274,
        "endColumnNumber" : 42
      },
      "nodeContext" : "log.info(j + \" rows generated.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 274,
        "startColumnNumber" : 10,
        "endLineNumber" : 274,
        "endColumnNumber" : 43
      },
      "nodeContext" : "log.info(j + \" rows generated.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 273,
        "startColumnNumber" : 28,
        "endLineNumber" : 275,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.info(j + \" rows generated.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (j % 10000 == 0) {\n  log.info(j + \" rows generated.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 271,
        "startColumnNumber" : 47,
        "endLineNumber" : 277,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  InputRow row=gen.nextRow();\n  if (j % 10000 == 0) {\n    log.info(j + \" rows generated.\");\n  }\n  incIndex.add(row);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 277,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < rowsPerSegment; j++) {\n  InputRow row=gen.nextRow();\n  if (j % 10000 == 0) {\n    log.info(j + \" rows generated.\");\n  }\n  incIndex.add(row);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 534,
        "startLineNumber" : 259,
        "startColumnNumber" : 42,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"Generating rows for segment \" + i);\n  DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n  IncrementalIndex incIndex=makeIncIndex();\n  for (int j=0; j < rowsPerSegment; j++) {\n    InputRow row=gen.nextRow();\n    if (j % 10000 == 0) {\n      log.info(j + \" rows generated.\");\n    }\n    incIndex.add(row);\n  }\n  incIndexes.add(incIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numSegments; i++) {\n  log.info(\"Generating rows for segment \" + i);\n  DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n  IncrementalIndex incIndex=makeIncIndex();\n  for (int j=0; j < rowsPerSegment; j++) {\n    InputRow row=gen.nextRow();\n    if (j % 10000 == 0) {\n      log.info(j + \" rows generated.\");\n    }\n    incIndex.add(row);\n  }\n  incIndexes.add(incIndex);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2105,
        "startLineNumber" : 238,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Setup public void setup() throws IOException {\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 274,
        "startColumnNumber" : 10,
        "endLineNumber" : 274,
        "endColumnNumber" : 43
      },
      "nodeContext" : "log.info(j + \" rows generated.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 282,
      "startColumnNumber" : 4,
      "endLineNumber" : 282,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 282,
        "endColumnNumber" : 60
      },
      "nodeContext" : "log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 282,
        "endColumnNumber" : 61
      },
      "nodeContext" : "log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2105,
        "startLineNumber" : 238,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Setup public void setup() throws IOException {\n  log.info(\"SETUP CALLED AT \" + System.currentTimeMillis());\n  ComplexMetrics.registerSerde(\"hyperUnique\",new HyperUniquesSerde());\n  setupQueries();\n  schemaInfo=GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\");\n  queryBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"string\");\n  queryBuilder.threshold(threshold);\n  stringQuery=queryBuilder.build();\n  TopNQueryBuilder longBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"long\");\n  longBuilder.threshold(threshold);\n  longQuery=longBuilder.build();\n  TopNQueryBuilder floatBuilder=SCHEMA_QUERY_MAP.get(\"basic\").get(\"float\");\n  floatBuilder.threshold(threshold);\n  floatQuery=floatBuilder.build();\n  incIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    log.info(\"Generating rows for segment \" + i);\n    DataGenerator gen=new DataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + i,schemaInfo.getDataInterval(),rowsPerSegment);\n    IncrementalIndex incIndex=makeIncIndex();\n    for (int j=0; j < rowsPerSegment; j++) {\n      InputRow row=gen.nextRow();\n      if (j % 10000 == 0) {\n        log.info(j + \" rows generated.\");\n      }\n      incIndex.add(row);\n    }\n    incIndexes.add(incIndex);\n  }\n  File tmpFile=FileUtils.createTempDir();\n  log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n  tmpFile.deleteOnExit();\n  qIndexes=new ArrayList<>();\n  for (int i=0; i < numSegments; i++) {\n    File indexFile=INDEX_MERGER_V9.persist(incIndexes.get(i),tmpFile,new IndexSpec(),null);\n    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);\n    qIndexes.add(qIndex);\n  }\n  factory=new TopNQueryRunnerFactory(new StupidPool<>(\"TopNBenchmark-compute-bufferPool\",new OffheapBufferGenerator(\"compute\",250000000),0,Integer.MAX_VALUE),new TopNQueryQueryToolChest(new TopNQueryConfig()),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 282,
        "endColumnNumber" : 61
      },
      "nodeContext" : "log.info(\"Using temp dir: \" + tmpFile.getAbsolutePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 239,
    "startColumnNumber" : 4,
    "endLineNumber" : 239,
    "endColumnNumber" : 7
  }, {
    "charLength" : 3,
    "startLineNumber" : 260,
    "startColumnNumber" : 6,
    "endLineNumber" : 260,
    "endColumnNumber" : 9
  }, {
    "charLength" : 3,
    "startLineNumber" : 274,
    "startColumnNumber" : 10,
    "endLineNumber" : 274,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 282,
    "startColumnNumber" : 4,
    "endLineNumber" : 282,
    "endColumnNumber" : 7
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}