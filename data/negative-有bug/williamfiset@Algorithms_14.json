{
  "id" : 14,
  "expression" : "fitness[i] > bestEpochFitness",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/ai/GeneticAlgorithm_knapsack_01.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fitness[i] > bestEpochFitness",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 70,
      "startColumnNumber" : 12,
      "endLineNumber" : 70,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (fitness[i] > bestEpochFitness) {\n  bestEpochFitness=fitness[i];\n  if (bestEpochFitness > bestFitness)   bestFitness=bestEpochFitness;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 64,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double norm=fitness[i] / fitnessSum;\n  lo[i]=hi[i - 1]=lo[i - 1] + norm;\n  if (fitness[i] > bestEpochFitness) {\n    bestEpochFitness=fitness[i];\n    if (bestEpochFitness > bestFitness)     bestFitness=bestEpochFitness;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=1; i <= P; i++) {\n  double norm=fitness[i] / fitnessSum;\n  lo[i]=hi[i - 1]=lo[i - 1] + norm;\n  if (fitness[i] > bestEpochFitness) {\n    bestEpochFitness=fitness[i];\n    if (bestEpochFitness > bestFitness)     bestFitness=bestEpochFitness;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 47,
        "startColumnNumber" : 73,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double fitnessSum=0;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    fitness[i]=fitness(in,weights,values,capacity,N);\n    fitnessSum+=fitness[i];\n    lo[i]=hi[i]=0;\n  }\n  long bestEpochFitness=0;\n  for (int i=1; i <= P; i++) {\n    double norm=fitness[i] / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (fitness[i] > bestEpochFitness) {\n      bestEpochFitness=fitness[i];\n      if (bestEpochFitness > bestFitness)       bestFitness=bestEpochFitness;\n    }\n  }\n  if (epoch % 50 == 0)   System.out.printf(\"Epoch: %d, %d$, %d$\\n\",epoch,bestEpochFitness,bestFitness);\n  for (int i=1; i <= P; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2,N);\n    for (int j=0; j < N; j++) {\n      if (Math.random() < MUTATION_RATE)       mutate(child,j);\n    }\n    nextGeneration[i]=child;\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n  double fitnessSum=0;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    fitness[i]=fitness(in,weights,values,capacity,N);\n    fitnessSum+=fitness[i];\n    lo[i]=hi[i]=0;\n  }\n  long bestEpochFitness=0;\n  for (int i=1; i <= P; i++) {\n    double norm=fitness[i] / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (fitness[i] > bestEpochFitness) {\n      bestEpochFitness=fitness[i];\n      if (bestEpochFitness > bestFitness)       bestFitness=bestEpochFitness;\n    }\n  }\n  if (epoch % 50 == 0)   System.out.printf(\"Epoch: %d, %d$, %d$\\n\",epoch,bestEpochFitness,bestFitness);\n  for (int i=1; i <= P; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2,N);\n    for (int j=0; j < N; j++) {\n      if (Math.random() < MUTATION_RATE)       mutate(child,j);\n    }\n    nextGeneration[i]=child;\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2107,
        "startLineNumber" : 30,
        "startColumnNumber" : 61,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  power=1.0;\n  final int N=weights.length;\n  Individual[] generation=new Individual[P + 1];\n  Individual[] nextGeneration=new Individual[P + 1];\n  for (int i=1; i <= P; i++)   generation[i]=new Individual(N);\n  double[] lo=new double[P + 1];\n  double[] hi=new double[P + 1];\n  long[] fitness=new long[P + 1];\n  long bestFitness=0;\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      fitness[i]=fitness(in,weights,values,capacity,N);\n      fitnessSum+=fitness[i];\n      lo[i]=hi[i]=0;\n    }\n    long bestEpochFitness=0;\n    for (int i=1; i <= P; i++) {\n      double norm=fitness[i] / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (fitness[i] > bestEpochFitness) {\n        bestEpochFitness=fitness[i];\n        if (bestEpochFitness > bestFitness)         bestFitness=bestEpochFitness;\n      }\n    }\n    if (epoch % 50 == 0)     System.out.printf(\"Epoch: %d, %d$, %d$\\n\",epoch,bestEpochFitness,bestFitness);\n    for (int i=1; i <= P; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2,N);\n      for (int j=0; j < N; j++) {\n        if (Math.random() < MUTATION_RATE)         mutate(child,j);\n      }\n      nextGeneration[i]=child;\n    }\n    generation=nextGeneration;\n  }\n  return bestFitness;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 333,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2166,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static long run(int capacity,int[] weights,int[] values){\n  power=1.0;\n  final int N=weights.length;\n  Individual[] generation=new Individual[P + 1];\n  Individual[] nextGeneration=new Individual[P + 1];\n  for (int i=1; i <= P; i++)   generation[i]=new Individual(N);\n  double[] lo=new double[P + 1];\n  double[] hi=new double[P + 1];\n  long[] fitness=new long[P + 1];\n  long bestFitness=0;\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      fitness[i]=fitness(in,weights,values,capacity,N);\n      fitnessSum+=fitness[i];\n      lo[i]=hi[i]=0;\n    }\n    long bestEpochFitness=0;\n    for (int i=1; i <= P; i++) {\n      double norm=fitness[i] / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (fitness[i] > bestEpochFitness) {\n        bestEpochFitness=fitness[i];\n        if (bestEpochFitness > bestFitness)         bestFitness=bestEpochFitness;\n      }\n    }\n    if (epoch % 50 == 0)     System.out.printf(\"Epoch: %d, %d$, %d$\\n\",epoch,bestEpochFitness,bestFitness);\n    for (int i=1; i <= P; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2,N);\n      for (int j=0; j < N; j++) {\n        if (Math.random() < MUTATION_RATE)         mutate(child,j);\n      }\n      nextGeneration[i]=child;\n    }\n    generation=nextGeneration;\n  }\n  return bestFitness;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 350,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (fitness[i] > bestEpochFitness) {\n  bestEpochFitness=fitness[i];\n  if (bestEpochFitness > bestFitness)   bestFitness=bestEpochFitness;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 70,
    "startColumnNumber" : 12,
    "endLineNumber" : 70,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}