{
  "id" : 471,
  "expression" : "new BeforeStep<ModelAndData<T>>(){\n  @Override public ModelAndData<T> act() throws IOException {\n    FakeModel fakeModel=new FakeModel();\n    T data=opener.acquire(resourceId);\n    MockModelLoader.mock(fakeModel,data);\n    return new ModelAndData<T>(fakeModel,data);\n  }\n}\n",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/benchmark/src/androidTest/java/com/bumptech/glide/benchmark/BenchmarkData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BeforeStep<ModelAndData<T>>(){\n  @Override public ModelAndData<T> act() throws IOException {\n    FakeModel fakeModel=new FakeModel();\n    T data=opener.acquire(resourceId);\n    MockModelLoader.mock(fakeModel,data);\n    return new ModelAndData<T>(fakeModel,data);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 353,
      "startLineNumber" : 66,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 55,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 797,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 10
      },
      "nodeContext" : "glideBenchmarkRule.runBenchmark(new BeforeStep<ModelAndData<T>>(){\n  @Override public ModelAndData<T> act() throws IOException {\n    FakeModel fakeModel=new FakeModel();\n    T data=opener.acquire(resourceId);\n    MockModelLoader.mock(fakeModel,data);\n    return new ModelAndData<T>(fakeModel,data);\n  }\n}\n,new LoadStep<ModelAndData<T>>(){\n  @Override public Object getModel(  ModelAndData<T> beforeData){\n    return beforeData.model;\n  }\n}\n,new AfterStep<ModelAndData<T>>(){\n  @Override public void act(  ModelAndData<T> beforeData) throws IOException {\n    opener.close(beforeData.data);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "glideBenchmarkRule.runBenchmark(new BeforeStep<ModelAndData<T>>(){\n  @Override public ModelAndData<T> act() throws IOException {\n    FakeModel fakeModel=new FakeModel();\n    T data=opener.acquire(resourceId);\n    MockModelLoader.mock(fakeModel,data);\n    return new ModelAndData<T>(fakeModel,data);\n  }\n}\n,new LoadStep<ModelAndData<T>>(){\n  @Override public Object getModel(  ModelAndData<T> beforeData){\n    return beforeData.model;\n  }\n}\n,new AfterStep<ModelAndData<T>>(){\n  @Override public void act(  ModelAndData<T> beforeData) throws IOException {\n    opener.close(beforeData.data);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 64,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  glideBenchmarkRule.runBenchmark(new BeforeStep<ModelAndData<T>>(){\n    @Override public ModelAndData<T> act() throws IOException {\n      FakeModel fakeModel=new FakeModel();\n      T data=opener.acquire(resourceId);\n      MockModelLoader.mock(fakeModel,data);\n      return new ModelAndData<T>(fakeModel,data);\n    }\n  }\n,new LoadStep<ModelAndData<T>>(){\n    @Override public Object getModel(    ModelAndData<T> beforeData){\n      return beforeData.model;\n    }\n  }\n,new AfterStep<ModelAndData<T>>(){\n    @Override public void act(    ModelAndData<T> beforeData) throws IOException {\n      opener.close(beforeData.data);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private <T>void benchmarkData(final DataOpener<T> opener,final int resourceId) throws Exception {\n  glideBenchmarkRule.runBenchmark(new BeforeStep<ModelAndData<T>>(){\n    @Override public ModelAndData<T> act() throws IOException {\n      FakeModel fakeModel=new FakeModel();\n      T data=opener.acquire(resourceId);\n      MockModelLoader.mock(fakeModel,data);\n      return new ModelAndData<T>(fakeModel,data);\n    }\n  }\n,new LoadStep<ModelAndData<T>>(){\n    @Override public Object getModel(    ModelAndData<T> beforeData){\n      return beforeData.model;\n    }\n  }\n,new AfterStep<ModelAndData<T>>(){\n    @Override public void act(    ModelAndData<T> beforeData) throws IOException {\n      opener.close(beforeData.data);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 797,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 10
      },
      "nodeContext" : "glideBenchmarkRule.runBenchmark(new BeforeStep<ModelAndData<T>>(){\n  @Override public ModelAndData<T> act() throws IOException {\n    FakeModel fakeModel=new FakeModel();\n    T data=opener.acquire(resourceId);\n    MockModelLoader.mock(fakeModel,data);\n    return new ModelAndData<T>(fakeModel,data);\n  }\n}\n,new LoadStep<ModelAndData<T>>(){\n  @Override public Object getModel(  ModelAndData<T> beforeData){\n    return beforeData.model;\n  }\n}\n,new AfterStep<ModelAndData<T>>(){\n  @Override public void act(  ModelAndData<T> beforeData) throws IOException {\n    opener.close(beforeData.data);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 10
    },
    "tokenLength" : 19,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 353,
    "startLineNumber" : 66,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}