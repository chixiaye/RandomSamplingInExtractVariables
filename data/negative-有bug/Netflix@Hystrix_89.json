{
  "id" : 89,
  "expression" : "createMetricName(\"shardSize_percentile_50\")",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createMetricName(\"shardSize_percentile_50\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 163,
      "startColumnNumber" : 33,
      "endLineNumber" : 163,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 10
      },
      "nodeContext" : "metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"),new Gauge<Integer>(){\n  @Override public Integer value(){\n    return metrics.getShardSizePercentile(50);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 11
      },
      "nodeContext" : "metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"),new Gauge<Integer>(){\n  @Override public Integer value(){\n    return metrics.getShardSizePercentile(50);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6702,
        "startLineNumber" : 57,
        "startColumnNumber" : 29,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  metricsRegistry.newGauge(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long value(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countRequestsBatched\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countBatches\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_BATCH;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingRequestsBatched\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingBatches\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_BATCH;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_mean\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizeMean();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(25);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(50);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(75);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(90);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(99);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(99.5);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_mean\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizeMean();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(25);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(50);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(75);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(90);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(99);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(99.5);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_maxRequestsInBatch\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.maxRequestsInBatch().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_timerDelayInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.timerDelayInMilliseconds().get();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 653,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6741,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void initialize(){\n  metricsRegistry.newGauge(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long value(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countRequestsBatched\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countBatches\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_BATCH;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingRequestsBatched\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingBatches\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSER_BATCH;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_mean\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizeMean();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(25);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(50);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(75);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(90);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(99);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getBatchSizePercentile(99.5);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_mean\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizeMean();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(25);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(50);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(75);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(90);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(99);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer value(){\n      return metrics.getShardSizePercentile(99.5);\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean value(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_maxRequestsInBatch\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.maxRequestsInBatch().get();\n    }\n  }\n);\n  metricsRegistry.newGauge(createMetricName(\"propertyValue_timerDelayInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number value(){\n      return properties.timerDelayInMilliseconds().get();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 659,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 10
      },
      "nodeContext" : "metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"),new Gauge<Integer>(){\n  @Override public Integer value(){\n    return metrics.getShardSizePercentile(50);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "com.netflix.hystrix.contrib.yammermetricspublisher.MetricName"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 163,
    "startColumnNumber" : 33,
    "endLineNumber" : 163,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}