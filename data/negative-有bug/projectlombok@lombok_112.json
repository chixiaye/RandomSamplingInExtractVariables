{
  "id" : 112,
  "expression" : "!container.isResolutionBased() && phase == 0",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/HandlerLibrary.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!container.isResolutionBased() && phase == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 188,
      "startColumnNumber" : 8,
      "endLineNumber" : 188,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!container.isResolutionBased() && phase == 0) {\n  if (checkAndSetHandled(annotation))   container.handle(node);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 184,
        "startColumnNumber" : 7,
        "endLineNumber" : 194,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (container.isResolutionBased() && phase == 1) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n  if (!container.isResolutionBased() && phase == 0) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n  if (container.annotationClass == PrintAST.class && phase == 2) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 184,
        "startColumnNumber" : 3,
        "endLineNumber" : 200,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  if (container.isResolutionBased() && phase == 1) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n  if (!container.isResolutionBased() && phase == 0) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n  if (container.annotationClass == PrintAST.class && phase == 2) {\n    if (checkAndSetHandled(annotation))     container.handle(node);\n  }\n}\n catch (AnnotationValueDecodeFail fail) {\n  fail.owner.setError(fail.getMessage(),fail.idx);\n}\ncatch (Throwable t) {\n  String sourceName=\"(unknown).java\";\n  if (unit != null && unit.sourcefile != null)   sourceName=unit.sourcefile.getName();\n  javacError(String.format(\"Lombok annotation handler %s failed on \" + sourceName,container.handler.getClass()),t);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 124,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 177,
        "startColumnNumber" : 74,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n  if (isPrintAST && phase != 2)   continue;\n  if (!isPrintAST && phase == 2)   continue;\n  AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n  if (container == null)   continue;\n  try {\n    if (container.isResolutionBased() && phase == 1) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n    if (!container.isResolutionBased() && phase == 0) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n    if (container.annotationClass == PrintAST.class && phase == 2) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n  }\n catch (  AnnotationValueDecodeFail fail) {\n    fail.owner.setError(fail.getMessage(),fail.idx);\n  }\ncatch (  Throwable t) {\n    String sourceName=\"(unknown).java\";\n    if (unit != null && unit.sourcefile != null)     sourceName=unit.sourcefile.getName();\n    javacError(String.format(\"Lombok annotation handler %s failed on \" + sourceName,container.handler.getClass()),t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1125,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String fqn : resolver.findTypeMatches(node,typeLibrary,rawType)) {\n  boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n  if (isPrintAST && phase != 2)   continue;\n  if (!isPrintAST && phase == 2)   continue;\n  AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n  if (container == null)   continue;\n  try {\n    if (container.isResolutionBased() && phase == 1) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n    if (!container.isResolutionBased() && phase == 0) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n    if (container.annotationClass == PrintAST.class && phase == 2) {\n      if (checkAndSetHandled(annotation))       container.handle(node);\n    }\n  }\n catch (  AnnotationValueDecodeFail fail) {\n    fail.owner.setError(fail.getMessage(),fail.idx);\n  }\ncatch (  Throwable t) {\n    String sourceName=\"(unknown).java\";\n    if (unit != null && unit.sourcefile != null)     sourceName=unit.sourcefile.getName();\n    javacError(String.format(\"Lombok annotation handler %s failed on \" + sourceName,container.handler.getClass()),t);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 174,
        "startColumnNumber" : 95,
        "endLineNumber" : 202,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeResolver resolver=new TypeResolver(node.getPackageDeclaration(),node.getImportStatements());\n  String rawType=annotation.annotationType.toString();\n  for (  String fqn : resolver.findTypeMatches(node,typeLibrary,rawType)) {\n    boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n    if (isPrintAST && phase != 2)     continue;\n    if (!isPrintAST && phase == 2)     continue;\n    AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n    if (container == null)     continue;\n    try {\n      if (container.isResolutionBased() && phase == 1) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n      if (!container.isResolutionBased() && phase == 0) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n      if (container.annotationClass == PrintAST.class && phase == 2) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n    }\n catch (    AnnotationValueDecodeFail fail) {\n      fail.owner.setError(fail.getMessage(),fail.idx);\n    }\ncatch (    Throwable t) {\n      String sourceName=\"(unknown).java\";\n      if (unit != null && unit.sourcefile != null)       sourceName=unit.sourcefile.getName();\n      javacError(String.format(\"Lombok annotation handler %s failed on \" + sourceName,container.handler.getClass()),t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 157,
        "startColumnNumber" : 1,
        "endLineNumber" : 202,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handles the provided annotation node by first finding a qualifying instance of {@link JavacAnnotationHandler} and if one exists, calling it with a freshly cooked upinstance of  {@link lombok.core.AnnotationValues}. Note that depending on the printASTOnly flag, the  {@link lombok.core.PrintAST} annotationwill either be silently skipped, or everything that isn't  {@code PrintAST} will be skipped.The HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation. For example, if  {@code lombok.*} is in the import list, then this method will guess that{@code Getter} refers to {@code lombok.Getter}, presuming that  {@link lombok.javac.handlers.HandleGetter}has been loaded.\n * @param unit The Compilation Unit that contains the Annotation AST Node.\n * @param node The Lombok AST Node representing the Annotation AST Node.\n * @param annotation 'node.get()' - convenience parameter.\n */\npublic void handleAnnotation(JCCompilationUnit unit,JavacNode node,JCAnnotation annotation){\n  TypeResolver resolver=new TypeResolver(node.getPackageDeclaration(),node.getImportStatements());\n  String rawType=annotation.annotationType.toString();\n  for (  String fqn : resolver.findTypeMatches(node,typeLibrary,rawType)) {\n    boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n    if (isPrintAST && phase != 2)     continue;\n    if (!isPrintAST && phase == 2)     continue;\n    AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n    if (container == null)     continue;\n    try {\n      if (container.isResolutionBased() && phase == 1) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n      if (!container.isResolutionBased() && phase == 0) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n      if (container.annotationClass == PrintAST.class && phase == 2) {\n        if (checkAndSetHandled(annotation))         container.handle(node);\n      }\n    }\n catch (    AnnotationValueDecodeFail fail) {\n      fail.owner.setError(fail.getMessage(),fail.idx);\n    }\ncatch (    Throwable t) {\n      String sourceName=\"(unknown).java\";\n      if (unit != null && unit.sourcefile != null)       sourceName=unit.sourcefile.getName();\n      javacError(String.format(\"Lombok annotation handler %s failed on \" + sourceName,container.handler.getClass()),t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!container.isResolutionBased() && phase == 0) {\n  if (checkAndSetHandled(annotation))   container.handle(node);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 188,
    "startColumnNumber" : 8,
    "endLineNumber" : 188,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}