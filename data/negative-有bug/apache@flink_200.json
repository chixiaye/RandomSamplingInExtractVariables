{
  "id" : 200,
  "expression" : "schedulingTopology.getAllPipelinedRegions()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/strategy/PipelinedRegionSchedulingStrategyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "schedulingTopology.getAllPipelinedRegions()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 271,
      "startColumnNumber" : 8,
      "endLineNumber" : 271,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 271,
        "endColumnNumber" : 73
      },
      "nodeContext" : "schedulingTopology.getAllPipelinedRegions().forEach(regions::add)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 271,
        "endColumnNumber" : 74
      },
      "nodeContext" : "schedulingTopology.getAllPipelinedRegions().forEach(regions::add);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3393,
        "startLineNumber" : 249,
        "startColumnNumber" : 96,
        "endLineNumber" : 317,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JobVertex v1=createJobVertex(\"v1\",4);\n  final JobVertex v2=createJobVertex(\"v2\",3);\n  final JobVertex v3=createJobVertex(\"v3\",2);\n  v2.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);\n  v3.connectNewDataSetAsInput(v2,DistributionPattern.POINTWISE,ResultPartitionType.BLOCKING);\n  v3.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);\n  final List<JobVertex> ordered=new ArrayList<>(Arrays.asList(v1,v2,v3));\n  final JobGraph jobGraph=JobGraphBuilder.newBatchJobGraphBuilder().addJobVertices(ordered).build();\n  final ExecutionGraph executionGraph=TestingDefaultExecutionGraphBuilder.newBuilder().setJobGraph(jobGraph).build();\n  final SchedulingTopology schedulingTopology=executionGraph.getSchedulingTopology();\n  final List<SchedulingPipelinedRegion> regions=new ArrayList<>();\n  schedulingTopology.getAllPipelinedRegions().forEach(regions::add);\n  assertEquals(2,regions.size());\n  final ExecutionVertex v31=executionGraph.getJobVertex(v3.getID()).getTaskVertices()[0];\n  final Set<ExecutionVertexID> region1=new HashSet<>();\n  schedulingTopology.getPipelinedRegionOfVertex(v31.getID()).getVertices().forEach(vertex -> region1.add(vertex.getId()));\n  assertEquals(5,region1.size());\n  final ExecutionVertex v32=executionGraph.getJobVertex(v3.getID()).getTaskVertices()[1];\n  final Set<ExecutionVertexID> region2=new HashSet<>();\n  schedulingTopology.getPipelinedRegionOfVertex(v32.getID()).getVertices().forEach(vertex -> region2.add(vertex.getId()));\n  assertEquals(4,region2.size());\n  PipelinedRegionSchedulingStrategy schedulingStrategy=startScheduling(schedulingTopology);\n  assertEquals(1,testingSchedulerOperation.getScheduledVertices().size());\n  final List<ExecutionVertexDeploymentOption> deploymentOptions1=testingSchedulerOperation.getScheduledVertices().get(0);\n  assertEquals(5,deploymentOptions1.size());\n  for (  ExecutionVertexDeploymentOption deploymentOption : deploymentOptions1) {\n    assertTrue(region1.contains(deploymentOption.getExecutionVertexId()));\n  }\n  final ExecutionVertex v22=executionGraph.getJobVertex(v2.getID()).getTaskVertices()[1];\n  v22.finishAllBlockingPartitions();\n  schedulingStrategy.onExecutionStateChange(v22.getID(),ExecutionState.FINISHED);\n  assertEquals(2,testingSchedulerOperation.getScheduledVertices().size());\n  final List<ExecutionVertexDeploymentOption> deploymentOptions2=testingSchedulerOperation.getScheduledVertices().get(1);\n  assertEquals(4,deploymentOptions2.size());\n  for (  ExecutionVertexDeploymentOption deploymentOption : deploymentOptions2) {\n    assertTrue(region2.contains(deploymentOption.getExecutionVertexId()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3495,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 317,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSchedulingTopologyWithCrossRegionConsumedPartitionGroups() throws Exception {\n  final JobVertex v1=createJobVertex(\"v1\",4);\n  final JobVertex v2=createJobVertex(\"v2\",3);\n  final JobVertex v3=createJobVertex(\"v3\",2);\n  v2.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);\n  v3.connectNewDataSetAsInput(v2,DistributionPattern.POINTWISE,ResultPartitionType.BLOCKING);\n  v3.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);\n  final List<JobVertex> ordered=new ArrayList<>(Arrays.asList(v1,v2,v3));\n  final JobGraph jobGraph=JobGraphBuilder.newBatchJobGraphBuilder().addJobVertices(ordered).build();\n  final ExecutionGraph executionGraph=TestingDefaultExecutionGraphBuilder.newBuilder().setJobGraph(jobGraph).build();\n  final SchedulingTopology schedulingTopology=executionGraph.getSchedulingTopology();\n  final List<SchedulingPipelinedRegion> regions=new ArrayList<>();\n  schedulingTopology.getAllPipelinedRegions().forEach(regions::add);\n  assertEquals(2,regions.size());\n  final ExecutionVertex v31=executionGraph.getJobVertex(v3.getID()).getTaskVertices()[0];\n  final Set<ExecutionVertexID> region1=new HashSet<>();\n  schedulingTopology.getPipelinedRegionOfVertex(v31.getID()).getVertices().forEach(vertex -> region1.add(vertex.getId()));\n  assertEquals(5,region1.size());\n  final ExecutionVertex v32=executionGraph.getJobVertex(v3.getID()).getTaskVertices()[1];\n  final Set<ExecutionVertexID> region2=new HashSet<>();\n  schedulingTopology.getPipelinedRegionOfVertex(v32.getID()).getVertices().forEach(vertex -> region2.add(vertex.getId()));\n  assertEquals(4,region2.size());\n  PipelinedRegionSchedulingStrategy schedulingStrategy=startScheduling(schedulingTopology);\n  assertEquals(1,testingSchedulerOperation.getScheduledVertices().size());\n  final List<ExecutionVertexDeploymentOption> deploymentOptions1=testingSchedulerOperation.getScheduledVertices().get(0);\n  assertEquals(5,deploymentOptions1.size());\n  for (  ExecutionVertexDeploymentOption deploymentOption : deploymentOptions1) {\n    assertTrue(region1.contains(deploymentOption.getExecutionVertexId()));\n  }\n  final ExecutionVertex v22=executionGraph.getJobVertex(v2.getID()).getTaskVertices()[1];\n  v22.finishAllBlockingPartitions();\n  schedulingStrategy.onExecutionStateChange(v22.getID(),ExecutionState.FINISHED);\n  assertEquals(2,testingSchedulerOperation.getScheduledVertices().size());\n  final List<ExecutionVertexDeploymentOption> deploymentOptions2=testingSchedulerOperation.getScheduledVertices().get(1);\n  assertEquals(4,deploymentOptions2.size());\n  for (  ExecutionVertexDeploymentOption deploymentOption : deploymentOptions2) {\n    assertTrue(region2.contains(deploymentOption.getExecutionVertexId()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 271,
        "endColumnNumber" : 74
      },
      "nodeContext" : "schedulingTopology.getAllPipelinedRegions().forEach(regions::add);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Iterable<>"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 271,
    "startColumnNumber" : 8,
    "endLineNumber" : 271,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}