{
  "id" : 426,
  "expression" : "subName",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/PublicApiCreatorApp.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 106,
      "startColumnNumber" : 21,
      "endLineNumber" : 106,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 106,
        "startColumnNumber" : 21,
        "endLineNumber" : 106,
        "endColumnNumber" : 41
      },
      "nodeContext" : "subName.indexOf('/')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 41
      },
      "nodeContext" : "firstSlash=subName.indexOf('/')",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int firstSlash=subName.indexOf('/');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 98,
        "startColumnNumber" : 37,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  JarEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (!name.startsWith(\"lombok/\"))   continue;\n  if (name.endsWith(\"/package-info.class\"))   continue;\n  if (!name.endsWith(\".class\"))   continue;\n  String subName=name.substring(7,name.length() - 6);\n  int firstSlash=subName.indexOf('/');\n  if (firstSlash == -1) {\n    toCopy.add(name);\n    continue;\n  }\n  String topPkg=subName.substring(0,firstSlash);\n  if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n    toCopy.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  JarEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (!name.startsWith(\"lombok/\"))   continue;\n  if (name.endsWith(\"/package-info.class\"))   continue;\n  if (!name.endsWith(\".class\"))   continue;\n  String subName=name.substring(7,name.length() - 6);\n  int firstSlash=subName.indexOf('/');\n  if (firstSlash == -1) {\n    toCopy.add(name);\n    continue;\n  }\n  String topPkg=subName.substring(0,firstSlash);\n  if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n    toCopy.add(name);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Enumeration<JarEntry> entries=self.entries();\n  while (entries.hasMoreElements()) {\n    JarEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (!name.startsWith(\"lombok/\"))     continue;\n    if (name.endsWith(\"/package-info.class\"))     continue;\n    if (!name.endsWith(\".class\"))     continue;\n    String subName=name.substring(7,name.length() - 6);\n    int firstSlash=subName.indexOf('/');\n    if (firstSlash == -1) {\n      toCopy.add(name);\n      continue;\n    }\n    String topPkg=subName.substring(0,firstSlash);\n    if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n      toCopy.add(name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  Enumeration<JarEntry> entries=self.entries();\n  while (entries.hasMoreElements()) {\n    JarEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (!name.startsWith(\"lombok/\"))     continue;\n    if (name.endsWith(\"/package-info.class\"))     continue;\n    if (!name.endsWith(\".class\"))     continue;\n    String subName=name.substring(7,name.length() - 6);\n    int firstSlash=subName.indexOf('/');\n    if (firstSlash == -1) {\n      toCopy.add(name);\n      continue;\n    }\n    String topPkg=subName.substring(0,firstSlash);\n    if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n      toCopy.add(name);\n    }\n  }\n}\n  finally {\n  self.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int firstSlash=subName.indexOf('/');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "subName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 20,
      "endLineNumber" : 112,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 52
      },
      "nodeContext" : "subName.substring(0,firstSlash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 112,
        "startColumnNumber" : 11,
        "endLineNumber" : 112,
        "endColumnNumber" : 52
      },
      "nodeContext" : "topPkg=subName.substring(0,firstSlash)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String topPkg=subName.substring(0,firstSlash);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 98,
        "startColumnNumber" : 37,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  JarEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (!name.startsWith(\"lombok/\"))   continue;\n  if (name.endsWith(\"/package-info.class\"))   continue;\n  if (!name.endsWith(\".class\"))   continue;\n  String subName=name.substring(7,name.length() - 6);\n  int firstSlash=subName.indexOf('/');\n  if (firstSlash == -1) {\n    toCopy.add(name);\n    continue;\n  }\n  String topPkg=subName.substring(0,firstSlash);\n  if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n    toCopy.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  JarEntry entry=entries.nextElement();\n  String name=entry.getName();\n  if (!name.startsWith(\"lombok/\"))   continue;\n  if (name.endsWith(\"/package-info.class\"))   continue;\n  if (!name.endsWith(\".class\"))   continue;\n  String subName=name.substring(7,name.length() - 6);\n  int firstSlash=subName.indexOf('/');\n  if (firstSlash == -1) {\n    toCopy.add(name);\n    continue;\n  }\n  String topPkg=subName.substring(0,firstSlash);\n  if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n    toCopy.add(name);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Enumeration<JarEntry> entries=self.entries();\n  while (entries.hasMoreElements()) {\n    JarEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (!name.startsWith(\"lombok/\"))     continue;\n    if (name.endsWith(\"/package-info.class\"))     continue;\n    if (!name.endsWith(\".class\"))     continue;\n    String subName=name.substring(7,name.length() - 6);\n    int firstSlash=subName.indexOf('/');\n    if (firstSlash == -1) {\n      toCopy.add(name);\n      continue;\n    }\n    String topPkg=subName.substring(0,firstSlash);\n    if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n      toCopy.add(name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  Enumeration<JarEntry> entries=self.entries();\n  while (entries.hasMoreElements()) {\n    JarEntry entry=entries.nextElement();\n    String name=entry.getName();\n    if (!name.startsWith(\"lombok/\"))     continue;\n    if (name.endsWith(\"/package-info.class\"))     continue;\n    if (!name.endsWith(\".class\"))     continue;\n    String subName=name.substring(7,name.length() - 6);\n    int firstSlash=subName.indexOf('/');\n    if (firstSlash == -1) {\n      toCopy.add(name);\n      continue;\n    }\n    String topPkg=subName.substring(0,firstSlash);\n    if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n      toCopy.add(name);\n    }\n  }\n}\n  finally {\n  self.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 86,
        "startColumnNumber" : 56,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeApiJar(File outFile) throws Exception {\n  File selfRaw=findOurJar();\n  if (selfRaw == null) {\n    System.err.println(\"The publicApi option only works if lombok is a jar.\");\n    return 2;\n  }\n  List<String> toCopy=new ArrayList<String>();\n  JarFile self=new JarFile(selfRaw);\n  try {\n    Enumeration<JarEntry> entries=self.entries();\n    while (entries.hasMoreElements()) {\n      JarEntry entry=entries.nextElement();\n      String name=entry.getName();\n      if (!name.startsWith(\"lombok/\"))       continue;\n      if (name.endsWith(\"/package-info.class\"))       continue;\n      if (!name.endsWith(\".class\"))       continue;\n      String subName=name.substring(7,name.length() - 6);\n      int firstSlash=subName.indexOf('/');\n      if (firstSlash == -1) {\n        toCopy.add(name);\n        continue;\n      }\n      String topPkg=subName.substring(0,firstSlash);\n      if (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n        toCopy.add(name);\n      }\n    }\n  }\n  finally {\n    self.close();\n  }\n  if (toCopy.isEmpty()) {\n    System.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    for (    String resourceName : toCopy) {\n      InputStream in=Lombok.class.getResourceAsStream(\"/\" + resourceName);\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"api class %s cannot be found\",resourceName));\n        }\n        writeIntoJar(jar,resourceName,in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String topPkg=subName.substring(0,firstSlash);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 106,
    "startColumnNumber" : 21,
    "endLineNumber" : 106,
    "endColumnNumber" : 28
  }, {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 20,
    "endLineNumber" : 112,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}