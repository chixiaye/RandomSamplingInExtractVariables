{
  "id" : 432,
  "expression" : "new Random(System.currentTimeMillis())",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/remoting/src/test/java/org/apache/rocketmq/remoting/netty/FileRegionEncoderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Random(System.currentTimeMillis())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 46,
      "startColumnNumber" : 24,
      "endLineNumber" : 46,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 46,
        "startColumnNumber" : 15,
        "endLineNumber" : 46,
        "endColumnNumber" : 62
      },
      "nodeContext" : "random=new Random(System.currentTimeMillis())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Random random=new Random(System.currentTimeMillis());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 41,
        "startColumnNumber" : 48,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FileRegionEncoder fileRegionEncoder=new FileRegionEncoder();\n  EmbeddedChannel channel=new EmbeddedChannel(fileRegionEncoder);\n  File file=File.createTempFile(UUID.randomUUID().toString(),\".data\");\n  file.deleteOnExit();\n  Random random=new Random(System.currentTimeMillis());\n  int dataLength=1 << 10;\n  byte[] data=new byte[dataLength];\n  random.nextBytes(data);\n  write(file,data);\n  FileRegion fileRegion=new DefaultFileRegion(file,0,dataLength);\n  Assert.assertEquals(0,fileRegion.transfered());\n  Assert.assertEquals(dataLength,fileRegion.count());\n  Assert.assertTrue(channel.writeOutbound(fileRegion));\n  ByteBuf out=(ByteBuf)channel.readOutbound();\n  byte[] arr=new byte[out.readableBytes()];\n  out.getBytes(0,arr);\n  Assert.assertArrayEquals(\"Data should be identical\",data,arr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This unit test case ensures that  {@link FileRegionEncoder} indeed wraps {@link FileRegion} to{@link ByteBuf}.\n * @throws IOException if there is an error.\n */\n@Test public void testEncode() throws IOException {\n  FileRegionEncoder fileRegionEncoder=new FileRegionEncoder();\n  EmbeddedChannel channel=new EmbeddedChannel(fileRegionEncoder);\n  File file=File.createTempFile(UUID.randomUUID().toString(),\".data\");\n  file.deleteOnExit();\n  Random random=new Random(System.currentTimeMillis());\n  int dataLength=1 << 10;\n  byte[] data=new byte[dataLength];\n  random.nextBytes(data);\n  write(file,data);\n  FileRegion fileRegion=new DefaultFileRegion(file,0,dataLength);\n  Assert.assertEquals(0,fileRegion.transfered());\n  Assert.assertEquals(dataLength,fileRegion.count());\n  Assert.assertTrue(channel.writeOutbound(fileRegion));\n  ByteBuf out=(ByteBuf)channel.readOutbound();\n  byte[] arr=new byte[out.readableBytes()];\n  out.getBytes(0,arr);\n  Assert.assertArrayEquals(\"Data should be identical\",data,arr);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Random random=new Random(System.currentTimeMillis());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.util.Random"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 46,
    "startColumnNumber" : 24,
    "endLineNumber" : 46,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}