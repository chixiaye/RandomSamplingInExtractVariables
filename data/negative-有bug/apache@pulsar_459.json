{
  "id" : 459,
  "expression" : "namespace",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/impl/LoadManagerSharedTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 36,
      "startColumnNumber" : 32,
      "endLineNumber" : 36,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 36,
        "startColumnNumber" : 32,
        "endLineNumber" : 36,
        "endColumnNumber" : 68
      },
      "nodeContext" : "namespace + \"/0x00000000_0x40000000\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 36,
        "startColumnNumber" : 15,
        "endLineNumber" : 36,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assignedBundle=namespace + \"/0x00000000_0x40000000\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2562,
        "startLineNumber" : 34,
        "startColumnNumber" : 61,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemoveMostServicingBrokersForNamespace(){\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 49,
      "startColumnNumber" : 57,
      "endLineNumber" : 49,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2562,
        "startLineNumber" : 34,
        "startColumnNumber" : 61,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemoveMostServicingBrokersForNamespace(){\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 60,
      "startColumnNumber" : 57,
      "endLineNumber" : 60,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 92
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2562,
        "startLineNumber" : 34,
        "startColumnNumber" : 61,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemoveMostServicingBrokersForNamespace(){\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 67,
      "startColumnNumber" : 57,
      "endLineNumber" : 67,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 92
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2562,
        "startLineNumber" : 34,
        "startColumnNumber" : 61,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemoveMostServicingBrokersForNamespace(){\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 73,
      "startColumnNumber" : 57,
      "endLineNumber" : 73,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 92
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2562,
        "startLineNumber" : 34,
        "startColumnNumber" : 61,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRemoveMostServicingBrokersForNamespace(){\n  String namespace=\"tenant1/ns1\";\n  String assignedBundle=namespace + \"/0x00000000_0x40000000\";\n  Set<String> candidates=Sets.newHashSet();\n  ConcurrentOpenHashMap<String,ConcurrentOpenHashMap<String,ConcurrentOpenHashSet<String>>> map=new ConcurrentOpenHashMap<>();\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),0);\n  candidates=Sets.newHashSet(\"broker1\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker1\",namespace,\"0x40000000_0x80000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0x80000000_0xc0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker2\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker2\",namespace,\"0xc0000000_0xd0000000\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),1);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  candidates=Sets.newHashSet(\"broker1\",\"broker2\",\"broker3\");\n  fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n  LoadManagerShared.removeMostServicingBrokersForNamespace(assignedBundle,candidates,map);\n  Assert.assertEquals(candidates.size(),2);\n  Assert.assertTrue(candidates.contains(\"broker1\"));\n  Assert.assertTrue(candidates.contains(\"broker3\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fillBrokerToNamespaceToBundleMap(map,\"broker3\",namespace,\"0xd0000000_0xffffffff\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 36,
    "startColumnNumber" : 32,
    "endLineNumber" : 36,
    "endColumnNumber" : 41
  }, {
    "charLength" : 9,
    "startLineNumber" : 49,
    "startColumnNumber" : 57,
    "endLineNumber" : 49,
    "endColumnNumber" : 66
  }, {
    "charLength" : 9,
    "startLineNumber" : 60,
    "startColumnNumber" : 57,
    "endLineNumber" : 60,
    "endColumnNumber" : 66
  }, {
    "charLength" : 9,
    "startLineNumber" : 67,
    "startColumnNumber" : 57,
    "endLineNumber" : 67,
    "endColumnNumber" : 66
  }, {
    "charLength" : 9,
    "startLineNumber" : 73,
    "startColumnNumber" : 57,
    "endLineNumber" : 73,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}