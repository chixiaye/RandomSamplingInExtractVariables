{
  "id" : 142,
  "expression" : "\"a\"",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alibaba-dubbo/src/test/java/com/alibaba/cloud/dubbo/http/matcher/AbstractNameValueExpressionTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 49,
      "startColumnNumber" : 28,
      "endLineNumber" : 49,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetNameAndValue(){\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 53,
      "startColumnNumber" : 28,
      "endLineNumber" : 53,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetNameAndValue(){\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 59,
      "startColumnNumber" : 28,
      "endLineNumber" : 59,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetNameAndValue(){\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 63,
      "startColumnNumber" : 28,
      "endLineNumber" : 63,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 46,
        "startColumnNumber" : 38,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetNameAndValue(){\n  AbstractNameValueExpression expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"a=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertFalse(expression.isNegated());\n  expression=createExpression(\"!a\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertTrue(expression.isNegated());\n  expression=createExpression(\"a!=1\");\n  Assert.assertEquals(\"a\",expression.getName());\n  Assert.assertEquals(\"1\",expression.getValue());\n  Assert.assertTrue(expression.isNegated());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"a\",expression.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 49,
    "startColumnNumber" : 28,
    "endLineNumber" : 49,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 53,
    "startColumnNumber" : 28,
    "endLineNumber" : 53,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 59,
    "startColumnNumber" : 28,
    "endLineNumber" : 59,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 63,
    "startColumnNumber" : 28,
    "endLineNumber" : 63,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}