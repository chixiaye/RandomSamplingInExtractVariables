{
  "id" : 279,
  "expression" : "((XmlElementStart)temp).namespaces().get(0).uri()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-xml/src/test/java/io/netty/handler/codec/xml/XmlDecoderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((XmlElementStart)temp).namespaces().get(0).uri()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 103,
      "startColumnNumber" : 19,
      "endLineNumber" : 103,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 12,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8304,
        "startLineNumber" : 69,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object temp;\n  write(XML1);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDocumentStart.class));\n  assertThat(((XmlDocumentStart)temp).version(),is(\"1.0\"));\n  assertThat(((XmlDocumentStart)temp).encoding(),is(\"UTF-8\"));\n  assertThat(((XmlDocumentStart)temp).standalone(),is(false));\n  assertThat(((XmlDocumentStart)temp).encodingScheme(),is(nullValue()));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDTD.class));\n  assertThat(((XmlDTD)temp).text(),is(\"employee.dtd\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-stylesheet\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"type=\\\"text/css\\\" href=\\\"netty.css\\\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-test\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"id\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlEntityReference.class));\n  assertThat(((XmlEntityReference)temp).name(),is(\"plusmn\"));\n  assertThat(((XmlEntityReference)temp).text(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"1\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"id\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"\\n\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n  write(XML2);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"name\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"type\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"given\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"Alba\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"name\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCdata.class));\n  assertThat(((XmlCdata)temp).data(),is(\" <some data &gt;/> \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"   \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlComment.class));\n  assertThat(((XmlComment)temp).data(),is(\" namespaced \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"period\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"weekly\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"100\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"last\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"last\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1476,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8450,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test feeds basic XML and verifies the resulting messages\n */\n@Test public void shouldDecodeRequestWithSimpleXml(){\n  Object temp;\n  write(XML1);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDocumentStart.class));\n  assertThat(((XmlDocumentStart)temp).version(),is(\"1.0\"));\n  assertThat(((XmlDocumentStart)temp).encoding(),is(\"UTF-8\"));\n  assertThat(((XmlDocumentStart)temp).standalone(),is(false));\n  assertThat(((XmlDocumentStart)temp).encodingScheme(),is(nullValue()));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDTD.class));\n  assertThat(((XmlDTD)temp).text(),is(\"employee.dtd\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-stylesheet\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"type=\\\"text/css\\\" href=\\\"netty.css\\\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-test\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"id\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlEntityReference.class));\n  assertThat(((XmlEntityReference)temp).name(),is(\"plusmn\"));\n  assertThat(((XmlEntityReference)temp).text(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"1\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"id\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"\\n\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n  write(XML2);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"name\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"type\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"given\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"Alba\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"name\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCdata.class));\n  assertThat(((XmlCdata)temp).data(),is(\" <some data &gt;/> \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"   \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlComment.class));\n  assertThat(((XmlComment)temp).data(),is(\" namespaced \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"period\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"weekly\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"100\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"last\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"last\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1483,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "((XmlElementStart)temp).namespaces().get(0).uri()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 183,
      "startColumnNumber" : 19,
      "endLineNumber" : 183,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 12,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8304,
        "startLineNumber" : 69,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object temp;\n  write(XML1);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDocumentStart.class));\n  assertThat(((XmlDocumentStart)temp).version(),is(\"1.0\"));\n  assertThat(((XmlDocumentStart)temp).encoding(),is(\"UTF-8\"));\n  assertThat(((XmlDocumentStart)temp).standalone(),is(false));\n  assertThat(((XmlDocumentStart)temp).encodingScheme(),is(nullValue()));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDTD.class));\n  assertThat(((XmlDTD)temp).text(),is(\"employee.dtd\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-stylesheet\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"type=\\\"text/css\\\" href=\\\"netty.css\\\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-test\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"id\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlEntityReference.class));\n  assertThat(((XmlEntityReference)temp).name(),is(\"plusmn\"));\n  assertThat(((XmlEntityReference)temp).text(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"1\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"id\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"\\n\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n  write(XML2);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"name\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"type\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"given\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"Alba\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"name\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCdata.class));\n  assertThat(((XmlCdata)temp).data(),is(\" <some data &gt;/> \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"   \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlComment.class));\n  assertThat(((XmlComment)temp).data(),is(\" namespaced \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"period\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"weekly\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"100\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"last\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"last\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1476,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8450,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test feeds basic XML and verifies the resulting messages\n */\n@Test public void shouldDecodeRequestWithSimpleXml(){\n  Object temp;\n  write(XML1);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDocumentStart.class));\n  assertThat(((XmlDocumentStart)temp).version(),is(\"1.0\"));\n  assertThat(((XmlDocumentStart)temp).encoding(),is(\"UTF-8\"));\n  assertThat(((XmlDocumentStart)temp).standalone(),is(false));\n  assertThat(((XmlDocumentStart)temp).encodingScheme(),is(nullValue()));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlDTD.class));\n  assertThat(((XmlDTD)temp).text(),is(\"employee.dtd\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-stylesheet\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"type=\\\"text/css\\\" href=\\\"netty.css\\\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlProcessingInstruction.class));\n  assertThat(((XmlProcessingInstruction)temp).target(),is(\"xml-test\"));\n  assertThat(((XmlProcessingInstruction)temp).data(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"id\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlEntityReference.class));\n  assertThat(((XmlEntityReference)temp).name(),is(\"plusmn\"));\n  assertThat(((XmlEntityReference)temp).text(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"1\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"id\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"\\n\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n  write(XML2);\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"name\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"type\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"given\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"Alba\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"name\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCdata.class));\n  assertThat(((XmlCdata)temp).data(),is(\" <some data &gt;/> \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"   \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlComment.class));\n  assertThat(((XmlComment)temp).data(),is(\" namespaced \"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(1));\n  assertThat(((XmlElementStart)temp).attributes().get(0).name(),is(\"period\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).value(),is(\"weekly\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).attributes().get(0).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlCharacters.class));\n  assertThat(((XmlCharacters)temp).data(),is(\"100\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"salary\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"https://netty.io/netty/b\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettyb\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementStart.class));\n  assertThat(((XmlElementStart)temp).name(),is(\"last\"));\n  assertThat(((XmlElementStart)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementStart)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementStart)temp).attributes().size(),is(0));\n  assertThat(((XmlElementStart)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"last\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(0));\n  temp=channel.readInbound();\n  assertThat(temp,instanceOf(XmlElementEnd.class));\n  assertThat(((XmlElementEnd)temp).name(),is(\"employee\"));\n  assertThat(((XmlElementEnd)temp).prefix(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespace(),is(\"\"));\n  assertThat(((XmlElementEnd)temp).namespaces().size(),is(1));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).prefix(),is(\"nettya\"));\n  assertThat(((XmlElementEnd)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/a\"));\n  temp=channel.readInbound();\n  assertThat(temp,nullValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1483,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertThat(((XmlElementStart)temp).namespaces().get(0).uri(),is(\"https://netty.io/netty/b\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 103,
    "startColumnNumber" : 19,
    "endLineNumber" : 103,
    "endColumnNumber" : 69
  }, {
    "charLength" : 50,
    "startLineNumber" : 183,
    "startColumnNumber" : 19,
    "endLineNumber" : 183,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}