{
  "id" : 502,
  "expression" : "0",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 240,
      "startColumnNumber" : 21,
      "endLineNumber" : 240,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 240,
        "startColumnNumber" : 17,
        "endLineNumber" : 240,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 240,
        "startColumnNumber" : 13,
        "endLineNumber" : 240,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 10; i++) {\n  final Observer<Object> o=TestHelper.mockObserver();\n  InOrder inOrder=inOrder(o);\n  String v=\"\" + i;\n  src.onNext(v);\n  System.out.printf(\"Turn: %d%n\",i);\n  src.first().flatMap(new Function<String,Observable<String>>(){\n    @Override public Observable<String> apply(    String t1){\n      return Observable.just(t1 + \", \" + t1);\n    }\n  }\n).subscribe(new DefaultObserver<String>(){\n    @Override public void onNext(    String t){\n      o.onNext(t);\n    }\n    @Override public void onError(    Throwable e){\n      o.onError(e);\n    }\n    @Override public void onComplete(){\n      o.onComplete();\n    }\n  }\n);\n  inOrder.verify(o).onNext(v + \", \" + v);\n  inOrder.verify(o).onComplete();\n  verify(o,never()).onError(any(Throwable.class));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 237,
        "startColumnNumber" : 41,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BehaviorSubject<String> src=BehaviorSubject.createDefault(\"null\");\n  for (int i=0; i < 10; i++) {\n    final Observer<Object> o=TestHelper.mockObserver();\n    InOrder inOrder=inOrder(o);\n    String v=\"\" + i;\n    src.onNext(v);\n    System.out.printf(\"Turn: %d%n\",i);\n    src.first().flatMap(new Function<String,Observable<String>>(){\n      @Override public Observable<String> apply(      String t1){\n        return Observable.just(t1 + \", \" + t1);\n      }\n    }\n).subscribe(new DefaultObserver<String>(){\n      @Override public void onNext(      String t){\n        o.onNext(t);\n      }\n      @Override public void onError(      Throwable e){\n        o.onError(e);\n      }\n      @Override public void onComplete(){\n        o.onComplete();\n      }\n    }\n);\n    inOrder.verify(o).onNext(v + \", \" + v);\n    inOrder.verify(o).onComplete();\n    verify(o,never()).onError(any(Throwable.class));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1460,
        "startLineNumber" : 236,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testUnsubscriptionCase(){\n  BehaviorSubject<String> src=BehaviorSubject.createDefault(\"null\");\n  for (int i=0; i < 10; i++) {\n    final Observer<Object> o=TestHelper.mockObserver();\n    InOrder inOrder=inOrder(o);\n    String v=\"\" + i;\n    src.onNext(v);\n    System.out.printf(\"Turn: %d%n\",i);\n    src.first().flatMap(new Function<String,Observable<String>>(){\n      @Override public Observable<String> apply(      String t1){\n        return Observable.just(t1 + \", \" + t1);\n      }\n    }\n).subscribe(new DefaultObserver<String>(){\n      @Override public void onNext(      String t){\n        o.onNext(t);\n      }\n      @Override public void onError(      Throwable e){\n        o.onError(e);\n      }\n      @Override public void onComplete(){\n        o.onComplete();\n      }\n    }\n);\n    inOrder.verify(o).onNext(v + \", \" + v);\n    inOrder.verify(o).onComplete();\n    verify(o,never()).onError(any(Throwable.class));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 240,
        "startColumnNumber" : 13,
        "endLineNumber" : 240,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 240,
    "startColumnNumber" : 21,
    "endLineNumber" : 240,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}