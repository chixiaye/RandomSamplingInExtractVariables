{
  "id" : 215,
  "expression" : "\"2000-03-12T15:00:01.000Z\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/orc-extensions/src/test/java/org/apache/druid/data/input/orc/OrcReaderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"2000-03-12T15:00:01.000Z\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 170,
      "startColumnNumber" : 39,
      "endLineNumber" : 170,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 170,
        "startColumnNumber" : 26,
        "endLineNumber" : 170,
        "endColumnNumber" : 66
      },
      "nodeContext" : "DateTimes.of(\"2000-03-12T15:00:01.000Z\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 128,
        "startColumnNumber" : 63,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int actualRowCount=0;\n  Assert.assertTrue(iterator.hasNext());\n  InputRow row=iterator.next();\n  actualRowCount++;\n  Assert.assertEquals(\"false\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n  Assert.assertEquals(\"1\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n  Assert.assertEquals(\"1024\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n  Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n  Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n  Assert.assertEquals(\"1.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n  Assert.assertEquals(\"-15.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n  Assert.assertEquals(\"AAECAwQAAA==\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n  Assert.assertEquals(\"hi\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n  Assert.assertEquals(\"1.23456786547456E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n  Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n  Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n  Assert.assertEquals(\"good\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n  Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:00.0Z\"),row.getTimestamp());\n  while (iterator.hasNext()) {\n    actualRowCount++;\n    row=iterator.next();\n  }\n  Assert.assertEquals(\"true\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n  Assert.assertEquals(\"100\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n  Assert.assertEquals(\"2048\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n  Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n  Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n  Assert.assertEquals(\"2.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n  Assert.assertEquals(\"-5.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n  Assert.assertEquals(\"\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n  Assert.assertEquals(\"bye\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n  Assert.assertEquals(\"1.23456786547457E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n  Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n  Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n  Assert.assertEquals(\"cat\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n  Assert.assertEquals(\"5\",Iterables.getOnlyElement(row.getDimension(\"map_struct_int\")));\n  Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n  Assert.assertEquals(7500,actualRowCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 392,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3135,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (CloseableIterator<InputRow> iterator=reader.read()){\n  int actualRowCount=0;\n  Assert.assertTrue(iterator.hasNext());\n  InputRow row=iterator.next();\n  actualRowCount++;\n  Assert.assertEquals(\"false\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n  Assert.assertEquals(\"1\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n  Assert.assertEquals(\"1024\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n  Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n  Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n  Assert.assertEquals(\"1.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n  Assert.assertEquals(\"-15.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n  Assert.assertEquals(\"AAECAwQAAA==\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n  Assert.assertEquals(\"hi\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n  Assert.assertEquals(\"1.23456786547456E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n  Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n  Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n  Assert.assertEquals(\"good\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n  Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:00.0Z\"),row.getTimestamp());\n  while (iterator.hasNext()) {\n    actualRowCount++;\n    row=iterator.next();\n  }\n  Assert.assertEquals(\"true\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n  Assert.assertEquals(\"100\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n  Assert.assertEquals(\"2048\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n  Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n  Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n  Assert.assertEquals(\"2.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n  Assert.assertEquals(\"-5.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n  Assert.assertEquals(\"\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n  Assert.assertEquals(\"bye\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n  Assert.assertEquals(\"1.23456786547457E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n  Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n  Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n  Assert.assertEquals(\"cat\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n  Assert.assertEquals(\"5\",Iterables.getOnlyElement(row.getDimension(\"map_struct_int\")));\n  Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n  Assert.assertEquals(7500,actualRowCount);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 404,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3993,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final OrcInputFormat inputFormat=new OrcInputFormat(new JSONPathSpec(true,ImmutableList.of(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"struct_list_struct_int\",\"$.middle.list[1].int1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"struct_list_struct_intlist\",\"$.middle.list[*].int1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"list_struct_string\",\"$.list[0].string1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"map_struct_int\",\"$.map.chani.int1\"))),null,new Configuration());\n  final InputEntityReader reader=createReader(new TimestampSpec(\"ts\",\"millis\",null),new DimensionsSpec(null),inputFormat,\"example/orc-file-11-format.orc\");\n  try (CloseableIterator<InputRow> iterator=reader.read()){\n    int actualRowCount=0;\n    Assert.assertTrue(iterator.hasNext());\n    InputRow row=iterator.next();\n    actualRowCount++;\n    Assert.assertEquals(\"false\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n    Assert.assertEquals(\"1\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n    Assert.assertEquals(\"1024\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n    Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n    Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n    Assert.assertEquals(\"1.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n    Assert.assertEquals(\"-15.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n    Assert.assertEquals(\"AAECAwQAAA==\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n    Assert.assertEquals(\"hi\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n    Assert.assertEquals(\"1.23456786547456E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n    Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n    Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n    Assert.assertEquals(\"good\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n    Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:00.0Z\"),row.getTimestamp());\n    while (iterator.hasNext()) {\n      actualRowCount++;\n      row=iterator.next();\n    }\n    Assert.assertEquals(\"true\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n    Assert.assertEquals(\"100\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n    Assert.assertEquals(\"2048\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n    Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n    Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n    Assert.assertEquals(\"2.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n    Assert.assertEquals(\"-5.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n    Assert.assertEquals(\"\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n    Assert.assertEquals(\"bye\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n    Assert.assertEquals(\"1.23456786547457E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n    Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n    Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n    Assert.assertEquals(\"cat\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n    Assert.assertEquals(\"5\",Iterables.getOnlyElement(row.getDimension(\"map_struct_int\")));\n    Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n    Assert.assertEquals(7500,actualRowCount);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4056,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testOrcFile11Format() throws IOException {\n  final OrcInputFormat inputFormat=new OrcInputFormat(new JSONPathSpec(true,ImmutableList.of(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"struct_list_struct_int\",\"$.middle.list[1].int1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"struct_list_struct_intlist\",\"$.middle.list[*].int1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"list_struct_string\",\"$.list[0].string1\"),new JSONPathFieldSpec(JSONPathFieldType.PATH,\"map_struct_int\",\"$.map.chani.int1\"))),null,new Configuration());\n  final InputEntityReader reader=createReader(new TimestampSpec(\"ts\",\"millis\",null),new DimensionsSpec(null),inputFormat,\"example/orc-file-11-format.orc\");\n  try (CloseableIterator<InputRow> iterator=reader.read()){\n    int actualRowCount=0;\n    Assert.assertTrue(iterator.hasNext());\n    InputRow row=iterator.next();\n    actualRowCount++;\n    Assert.assertEquals(\"false\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n    Assert.assertEquals(\"1\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n    Assert.assertEquals(\"1024\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n    Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n    Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n    Assert.assertEquals(\"1.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n    Assert.assertEquals(\"-15.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n    Assert.assertEquals(\"AAECAwQAAA==\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n    Assert.assertEquals(\"hi\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n    Assert.assertEquals(\"1.23456786547456E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n    Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n    Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n    Assert.assertEquals(\"good\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n    Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:00.0Z\"),row.getTimestamp());\n    while (iterator.hasNext()) {\n      actualRowCount++;\n      row=iterator.next();\n    }\n    Assert.assertEquals(\"true\",Iterables.getOnlyElement(row.getDimension(\"boolean1\")));\n    Assert.assertEquals(\"100\",Iterables.getOnlyElement(row.getDimension(\"byte1\")));\n    Assert.assertEquals(\"2048\",Iterables.getOnlyElement(row.getDimension(\"short1\")));\n    Assert.assertEquals(\"65536\",Iterables.getOnlyElement(row.getDimension(\"int1\")));\n    Assert.assertEquals(\"9223372036854775807\",Iterables.getOnlyElement(row.getDimension(\"long1\")));\n    Assert.assertEquals(\"2.0\",Iterables.getOnlyElement(row.getDimension(\"float1\")));\n    Assert.assertEquals(\"-5.0\",Iterables.getOnlyElement(row.getDimension(\"double1\")));\n    Assert.assertEquals(\"\",Iterables.getOnlyElement(row.getDimension(\"bytes1\")));\n    Assert.assertEquals(\"bye\",Iterables.getOnlyElement(row.getDimension(\"string1\")));\n    Assert.assertEquals(\"1.23456786547457E7\",Iterables.getOnlyElement(row.getDimension(\"decimal1\")));\n    Assert.assertEquals(\"2\",Iterables.getOnlyElement(row.getDimension(\"struct_list_struct_int\")));\n    Assert.assertEquals(ImmutableList.of(\"1\",\"2\"),row.getDimension(\"struct_list_struct_intlist\"));\n    Assert.assertEquals(\"cat\",Iterables.getOnlyElement(row.getDimension(\"list_struct_string\")));\n    Assert.assertEquals(\"5\",Iterables.getOnlyElement(row.getDimension(\"map_struct_int\")));\n    Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n    Assert.assertEquals(7500,actualRowCount);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 485,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 170,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(DateTimes.of(\"2000-03-12T15:00:01.000Z\"),row.getTimestamp());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 170,
    "startColumnNumber" : 39,
    "endLineNumber" : 170,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}