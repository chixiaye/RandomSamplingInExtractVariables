{
  "id" : 163,
  "expression" : "accum",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/payloads/PayloadDeconstructor.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 123,
      "startColumnNumber" : 19,
      "endLineNumber" : 123,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 32
      },
      "nodeContext" : "accum == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "accum == null || reqs.length != accum.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (accum == null || reqs.length != accum.length) {\n  accum=new float[reqs.length];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "accum == null || reqs.length != accum.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 123,
      "startColumnNumber" : 51,
      "endLineNumber" : 123,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 123,
        "startColumnNumber" : 51,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "accum.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 123,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "reqs.length != accum.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "accum == null || reqs.length != accum.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (accum == null || reqs.length != accum.length) {\n  accum=new float[reqs.length];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 63
      },
      "nodeContext" : "accum == null || reqs.length != accum.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 130,
      "startColumnNumber" : 33,
      "endLineNumber" : 130,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 130,
        "startColumnNumber" : 20,
        "endLineNumber" : 135,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (var ac : accum) {\n  if (ac >= 1f) {\n    canProgress=false;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 129,
        "startColumnNumber" : 31,
        "endLineNumber" : 136,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  var ac : accum) {\n    if (ac >= 1f) {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 136,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (canProgress) {\n  for (  var ac : accum) {\n    if (ac >= 1f) {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 130,
        "startColumnNumber" : 20,
        "endLineNumber" : 135,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (var ac : accum) {\n  if (ac >= 1f) {\n    canProgress=false;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 147,
      "startColumnNumber" : 24,
      "endLineNumber" : 147,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 32
      },
      "nodeContext" : "accum[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 137
      },
      "nodeContext" : "accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift",
      "nodeType" : "Assignment",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 138
      },
      "nodeContext" : "accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 146,
        "startColumnNumber" : 56,
        "endLineNumber" : 148,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 146,
        "startColumnNumber" : 20,
        "endLineNumber" : 148,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < reqs.length; i++) {\n  accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 139,
        "startColumnNumber" : 31,
        "endLineNumber" : 149,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n  float realShift=Math.min(shift,1f - progress);\n  progress+=shift;\n  time+=edelta();\n  for (int i=0; i < reqs.length; i++) {\n    accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 504,
        "startLineNumber" : 139,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (canProgress) {\n  float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n  float realShift=Math.min(shift,1f - progress);\n  progress+=shift;\n  time+=edelta();\n  for (int i=0; i < reqs.length; i++) {\n    accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 138
      },
      "nodeContext" : "accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 155,
      "startColumnNumber" : 46,
      "endLineNumber" : 155,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 155,
        "startColumnNumber" : 46,
        "endLineNumber" : 155,
        "endColumnNumber" : 54
      },
      "nodeContext" : "accum[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 155,
        "startColumnNumber" : 41,
        "endLineNumber" : 155,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(int)accum[i]",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 155,
        "startColumnNumber" : 32,
        "endLineNumber" : 155,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Math.min((int)accum[i],itemCapacity - items.total())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 155,
        "startColumnNumber" : 24,
        "endLineNumber" : 155,
        "endColumnNumber" : 85
      },
      "nodeContext" : "taken=Math.min((int)accum[i],itemCapacity - items.total())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 155,
        "startColumnNumber" : 20,
        "endLineNumber" : 155,
        "endColumnNumber" : 86
      },
      "nodeContext" : "int taken=Math.min((int)accum[i],itemCapacity - items.total());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 154,
        "startColumnNumber" : 52,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int taken=Math.min((int)accum[i],itemCapacity - items.total());\n  if (taken > 0) {\n    items.add(reqs[i].item,taken);\n    accum[i]-=taken;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 154,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < reqs.length; i++) {\n  int taken=Math.min((int)accum[i],itemCapacity - items.total());\n  if (taken > 0) {\n    items.add(reqs[i].item,taken);\n    accum[i]-=taken;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 155,
        "startColumnNumber" : 20,
        "endLineNumber" : 155,
        "endColumnNumber" : 86
      },
      "nodeContext" : "int taken=Math.min((int)accum[i],itemCapacity - items.total());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 158,
      "startColumnNumber" : 24,
      "endLineNumber" : 158,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 158,
        "endColumnNumber" : 32
      },
      "nodeContext" : "accum[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 158,
        "endColumnNumber" : 41
      },
      "nodeContext" : "accum[i]-=taken",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 158,
        "endColumnNumber" : 42
      },
      "nodeContext" : "accum[i]-=taken;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 156,
        "startColumnNumber" : 33,
        "endLineNumber" : 159,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  items.add(reqs[i].item,taken);\n  accum[i]-=taken;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 156,
        "startColumnNumber" : 20,
        "endLineNumber" : 159,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (taken > 0) {\n  items.add(reqs[i].item,taken);\n  accum[i]-=taken;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 154,
        "startColumnNumber" : 52,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int taken=Math.min((int)accum[i],itemCapacity - items.total());\n  if (taken > 0) {\n    items.add(reqs[i].item,taken);\n    accum[i]-=taken;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 154,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < reqs.length; i++) {\n  int taken=Math.min((int)accum[i],itemCapacity - items.total());\n  if (taken > 0) {\n    items.add(reqs[i].item,taken);\n    accum[i]-=taken;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 158,
        "endColumnNumber" : 42
      },
      "nodeContext" : "accum[i]-=taken;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 167,
      "startColumnNumber" : 39,
      "endLineNumber" : 167,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 167,
        "startColumnNumber" : 39,
        "endLineNumber" : 167,
        "endColumnNumber" : 47
      },
      "nodeContext" : "accum[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 167,
        "startColumnNumber" : 27,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Mathf.equal(accum[i],1f,0.0001f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 167,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (Mathf.equal(accum[i],1f,0.0001f)) {\n  if (items.total() < itemCapacity) {\n    items.add(reqs[i].item,1);\n    accum[i]=0f;\n  }\n else {\n    canProgress=false;\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 166,
        "startColumnNumber" : 56,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (Mathf.equal(accum[i],1f,0.0001f)) {\n    if (items.total() < itemCapacity) {\n      items.add(reqs[i].item,1);\n      accum[i]=0f;\n    }\n else {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 166,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < reqs.length; i++) {\n  if (Mathf.equal(accum[i],1f,0.0001f)) {\n    if (items.total() < itemCapacity) {\n      items.add(reqs[i].item,1);\n      accum[i]=0f;\n    }\n else {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 163,
        "startColumnNumber" : 34,
        "endLineNumber" : 184,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  canProgress=true;\n  for (int i=0; i < reqs.length; i++) {\n    if (Mathf.equal(accum[i],1f,0.0001f)) {\n      if (items.total() < itemCapacity) {\n        items.add(reqs[i].item,1);\n        accum[i]=0f;\n      }\n else {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n    deconstructing=null;\n    accum=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 184,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (progress >= 1f) {\n  canProgress=true;\n  for (int i=0; i < reqs.length; i++) {\n    if (Mathf.equal(accum[i],1f,0.0001f)) {\n      if (items.total() < itemCapacity) {\n        items.add(reqs[i].item,1);\n        accum[i]=0f;\n      }\n else {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n    deconstructing=null;\n    accum=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 167,
        "startColumnNumber" : 27,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Mathf.equal(accum[i],1f,0.0001f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "float[]"
  }, {
    "nodeContext" : "accum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 170,
      "startColumnNumber" : 32,
      "endLineNumber" : 170,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 170,
        "startColumnNumber" : 32,
        "endLineNumber" : 170,
        "endColumnNumber" : 40
      },
      "nodeContext" : "accum[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 170,
        "startColumnNumber" : 32,
        "endLineNumber" : 170,
        "endColumnNumber" : 45
      },
      "nodeContext" : "accum[i]=0f",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 170,
        "startColumnNumber" : 32,
        "endLineNumber" : 170,
        "endColumnNumber" : 46
      },
      "nodeContext" : "accum[i]=0f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 168,
        "startColumnNumber" : 60,
        "endLineNumber" : 171,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  items.add(reqs[i].item,1);\n  accum[i]=0f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 168,
        "startColumnNumber" : 28,
        "endLineNumber" : 174,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (items.total() < itemCapacity) {\n  items.add(reqs[i].item,1);\n  accum[i]=0f;\n}\n else {\n  canProgress=false;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (items.total() < itemCapacity) {\n    items.add(reqs[i].item,1);\n    accum[i]=0f;\n  }\n else {\n    canProgress=false;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 167,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (Mathf.equal(accum[i],1f,0.0001f)) {\n  if (items.total() < itemCapacity) {\n    items.add(reqs[i].item,1);\n    accum[i]=0f;\n  }\n else {\n    canProgress=false;\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 166,
        "startColumnNumber" : 56,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (Mathf.equal(accum[i],1f,0.0001f)) {\n    if (items.total() < itemCapacity) {\n      items.add(reqs[i].item,1);\n      accum[i]=0f;\n    }\n else {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 166,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < reqs.length; i++) {\n  if (Mathf.equal(accum[i],1f,0.0001f)) {\n    if (items.total() < itemCapacity) {\n      items.add(reqs[i].item,1);\n      accum[i]=0f;\n    }\n else {\n      canProgress=false;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 163,
        "startColumnNumber" : 34,
        "endLineNumber" : 184,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  canProgress=true;\n  for (int i=0; i < reqs.length; i++) {\n    if (Mathf.equal(accum[i],1f,0.0001f)) {\n      if (items.total() < itemCapacity) {\n        items.add(reqs[i].item,1);\n        accum[i]=0f;\n      }\n else {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n    deconstructing=null;\n    accum=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 184,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (progress >= 1f) {\n  canProgress=true;\n  for (int i=0; i < reqs.length; i++) {\n    if (Mathf.equal(accum[i],1f,0.0001f)) {\n      if (items.total() < itemCapacity) {\n        items.add(reqs[i].item,1);\n        accum[i]=0f;\n      }\n else {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n    deconstructing=null;\n    accum=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 121,
        "startColumnNumber" : 38,
        "endLineNumber" : 185,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (deconstructing != null) {\n  var reqs=deconstructing.requirements();\n  if (accum == null || reqs.length != accum.length) {\n    accum=new float[reqs.length];\n  }\n  boolean canProgress=items.total() <= itemCapacity;\n  if (canProgress) {\n    for (    var ac : accum) {\n      if (ac >= 1f) {\n        canProgress=false;\n        break;\n      }\n    }\n  }\n  if (canProgress) {\n    float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n    float realShift=Math.min(shift,1f - progress);\n    progress+=shift;\n    time+=edelta();\n    for (int i=0; i < reqs.length; i++) {\n      accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n    }\n  }\n  speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n  for (int i=0; i < reqs.length; i++) {\n    int taken=Math.min((int)accum[i],itemCapacity - items.total());\n    if (taken > 0) {\n      items.add(reqs[i].item,taken);\n      accum[i]-=taken;\n    }\n  }\n  if (progress >= 1f) {\n    canProgress=true;\n    for (int i=0; i < reqs.length; i++) {\n      if (Mathf.equal(accum[i],1f,0.0001f)) {\n        if (items.total() < itemCapacity) {\n          items.add(reqs[i].item,1);\n          accum[i]=0f;\n        }\n else {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n      deconstructing=null;\n      accum=null;\n    }\n  }\n}\n else if (moveInPayload(false) && payload != null) {\n  accum=new float[payload.requirements().length];\n  deconstructing=payload;\n  payload=null;\n  progress=0f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3366,
        "startLineNumber" : 107,
        "startColumnNumber" : 32,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3409,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (items.total() > 0) {\n    for (int i=0; i < dumpRate; i++) {\n      dumpAccumulate();\n    }\n  }\n  if (deconstructing == null) {\n    progress=0f;\n  }\n  payRotation=Angles.moveToward(payRotation,90f,payloadRotateSpeed * edelta());\n  if (deconstructing != null) {\n    var reqs=deconstructing.requirements();\n    if (accum == null || reqs.length != accum.length) {\n      accum=new float[reqs.length];\n    }\n    boolean canProgress=items.total() <= itemCapacity;\n    if (canProgress) {\n      for (      var ac : accum) {\n        if (ac >= 1f) {\n          canProgress=false;\n          break;\n        }\n      }\n    }\n    if (canProgress) {\n      float shift=edelta() * deconstructSpeed / deconstructing.buildTime();\n      float realShift=Math.min(shift,1f - progress);\n      progress+=shift;\n      time+=edelta();\n      for (int i=0; i < reqs.length; i++) {\n        accum[i]+=reqs[i].amount * (payload instanceof BuildPayload ? state.rules.buildCostMultiplier : 1f) * realShift;\n      }\n    }\n    speedScl=Mathf.lerpDelta(speedScl,canProgress ? 1f : 0f,0.1f);\n    for (int i=0; i < reqs.length; i++) {\n      int taken=Math.min((int)accum[i],itemCapacity - items.total());\n      if (taken > 0) {\n        items.add(reqs[i].item,taken);\n        accum[i]-=taken;\n      }\n    }\n    if (progress >= 1f) {\n      canProgress=true;\n      for (int i=0; i < reqs.length; i++) {\n        if (Mathf.equal(accum[i],1f,0.0001f)) {\n          if (items.total() < itemCapacity) {\n            items.add(reqs[i].item,1);\n            accum[i]=0f;\n          }\n else {\n            canProgress=false;\n            break;\n          }\n        }\n      }\n      if (canProgress) {\n        Fx.breakBlock.at(x,y,deconstructing.size() / tilesize);\n        deconstructing=null;\n        accum=null;\n      }\n    }\n  }\n else   if (moveInPayload(false) && payload != null) {\n    accum=new float[payload.requirements().length];\n    deconstructing=payload;\n    payload=null;\n    progress=0f;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 170,
        "startColumnNumber" : 32,
        "endLineNumber" : 170,
        "endColumnNumber" : 46
      },
      "nodeContext" : "accum[i]=0f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float[]"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 123,
    "startColumnNumber" : 19,
    "endLineNumber" : 123,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 123,
    "startColumnNumber" : 51,
    "endLineNumber" : 123,
    "endColumnNumber" : 56
  }, {
    "charLength" : 5,
    "startLineNumber" : 130,
    "startColumnNumber" : 33,
    "endLineNumber" : 130,
    "endColumnNumber" : 38
  }, {
    "charLength" : 5,
    "startLineNumber" : 147,
    "startColumnNumber" : 24,
    "endLineNumber" : 147,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 155,
    "startColumnNumber" : 46,
    "endLineNumber" : 155,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 158,
    "startColumnNumber" : 24,
    "endLineNumber" : 158,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 167,
    "startColumnNumber" : 39,
    "endLineNumber" : 167,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 170,
    "startColumnNumber" : 32,
    "endLineNumber" : 170,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 6
  } ]
}