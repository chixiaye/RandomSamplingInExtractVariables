{
  "id" : 465,
  "expression" : "instructions.trim().split(\" \")",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/bytecode/src/main/java/com/iluwatar/bytecode/util/InstructionConverterUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "instructions.trim().split(\" \")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 43,
      "startColumnNumber" : 30,
      "endLineNumber" : 43,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 60
      },
      "nodeContext" : "splitedInstructions=instructions.trim().split(\" \")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 61
      },
      "nodeContext" : "var splitedInstructions=instructions.trim().split(\" \");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 38,
        "startColumnNumber" : 61,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (instructions == null || instructions.trim().length() == 0) {\n    return new int[0];\n  }\n  var splitedInstructions=instructions.trim().split(\" \");\n  var bytecode=new int[splitedInstructions.length];\n  for (var i=0; i < splitedInstructions.length; i++) {\n    if (isValidInstruction(splitedInstructions[i])) {\n      bytecode[i]=Instruction.valueOf(splitedInstructions[i]).getIntValue();\n    }\n else     if (isValidInt(splitedInstructions[i])) {\n      bytecode[i]=Integer.parseInt(splitedInstructions[i]);\n    }\n else {\n      var errorMessage=\"Invalid instruction or number: \" + splitedInstructions[i];\n      throw new IllegalArgumentException(errorMessage);\n    }\n  }\n  return bytecode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts instructions represented as String.\n * @param instructions to convert\n * @return array of int representing bytecode\n */\npublic static int[] convertToByteCode(String instructions){\n  if (instructions == null || instructions.trim().length() == 0) {\n    return new int[0];\n  }\n  var splitedInstructions=instructions.trim().split(\" \");\n  var bytecode=new int[splitedInstructions.length];\n  for (var i=0; i < splitedInstructions.length; i++) {\n    if (isValidInstruction(splitedInstructions[i])) {\n      bytecode[i]=Instruction.valueOf(splitedInstructions[i]).getIntValue();\n    }\n else     if (isValidInt(splitedInstructions[i])) {\n      bytecode[i]=Integer.parseInt(splitedInstructions[i]);\n    }\n else {\n      var errorMessage=\"Invalid instruction or number: \" + splitedInstructions[i];\n      throw new IllegalArgumentException(errorMessage);\n    }\n  }\n  return bytecode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 61
      },
      "nodeContext" : "var splitedInstructions=instructions.trim().split(\" \");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 43,
    "startColumnNumber" : 30,
    "endLineNumber" : 43,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}