{
  "id" : 491,
  "expression" : "entry.getKey()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getKey()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 450,
      "startColumnNumber" : 19,
      "endLineNumber" : 450,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 450,
        "startColumnNumber" : 13,
        "endLineNumber" : 450,
        "endColumnNumber" : 33
      },
      "nodeContext" : "key=entry.getKey()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 450,
        "startColumnNumber" : 6,
        "endLineNumber" : 450,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Object key=entry.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 449,
        "startColumnNumber" : 58,
        "endLineNumber" : 456,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object key=entry.getKey();\n  Object value=entry.getValue();\n  assertSame(value,result.get(key));\n  assertNull(result.get(value));\n  assertSame(value,cache.asMap().get(key));\n  assertSame(key,cache.asMap().get(value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 449,
        "startColumnNumber" : 4,
        "endLineNumber" : 456,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Entry<Object,Object> entry : result.entrySet()) {\n  Object key=entry.getKey();\n  Object value=entry.getValue();\n  assertSame(value,result.get(key));\n  assertNull(result.get(value));\n  assertSame(value,cache.asMap().get(key));\n  assertSame(key,cache.asMap().get(value));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 424,
        "startColumnNumber" : 61,
        "endLineNumber" : 457,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CacheLoader<Object,Object> loader=new CacheLoader<Object,Object>(){\n    @Override public Object load(    Object key) throws Exception {\n      return new Object();\n    }\n    @Override public Map<Object,Object> loadAll(    Iterable<?> keys) throws Exception {\n      Map<Object,Object> result=Maps.newHashMap();\n      for (      Object key : keys) {\n        Object value=new Object();\n        result.put(key,value);\n        result.put(value,key);\n      }\n      return result;\n    }\n  }\n;\n  LoadingCache<Object,Object> cache=CacheBuilder.newBuilder().build(loader);\n  Object[] lookupKeys=new Object[]{new Object(),new Object(),new Object()};\n  Map<Object,Object> result=cache.getAll(asList(lookupKeys));\n  assertThat(result.keySet()).containsExactlyElementsIn(asList(lookupKeys));\n  for (  Entry<Object,Object> entry : result.entrySet()) {\n    Object key=entry.getKey();\n    Object value=entry.getValue();\n    assertSame(value,result.get(key));\n    assertNull(result.get(value));\n    assertSame(value,cache.asMap().get(key));\n    assertSame(key,cache.asMap().get(value));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 424,
        "startColumnNumber" : 2,
        "endLineNumber" : 457,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testBulkLoad_extra() throws ExecutionException {\n  CacheLoader<Object,Object> loader=new CacheLoader<Object,Object>(){\n    @Override public Object load(    Object key) throws Exception {\n      return new Object();\n    }\n    @Override public Map<Object,Object> loadAll(    Iterable<?> keys) throws Exception {\n      Map<Object,Object> result=Maps.newHashMap();\n      for (      Object key : keys) {\n        Object value=new Object();\n        result.put(key,value);\n        result.put(value,key);\n      }\n      return result;\n    }\n  }\n;\n  LoadingCache<Object,Object> cache=CacheBuilder.newBuilder().build(loader);\n  Object[] lookupKeys=new Object[]{new Object(),new Object(),new Object()};\n  Map<Object,Object> result=cache.getAll(asList(lookupKeys));\n  assertThat(result.keySet()).containsExactlyElementsIn(asList(lookupKeys));\n  for (  Entry<Object,Object> entry : result.entrySet()) {\n    Object key=entry.getKey();\n    Object value=entry.getValue();\n    assertSame(value,result.get(key));\n    assertNull(result.get(value));\n    assertSame(value,cache.asMap().get(key));\n    assertSame(key,cache.asMap().get(value));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 450,
        "startColumnNumber" : 6,
        "endLineNumber" : 450,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Object key=entry.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 450,
    "startColumnNumber" : 19,
    "endLineNumber" : 450,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}