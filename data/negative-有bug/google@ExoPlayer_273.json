{
  "id" : 273,
  "expression" : "\"supported_widths_range\"",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/EncoderCapabilityAnalysisTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"supported_widths_range\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 94,
      "startColumnNumber" : 25,
      "endLineNumber" : 94,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 98
      },
      "nodeContext" : "capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 99
      },
      "nodeContext" : "capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 66,
        "startColumnNumber" : 54,
        "endLineNumber" : 135,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n  capabilities.put(\"encoder_name\",encoderInfo.getName());\n  capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n  capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n  capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n  capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n  capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n  capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n  Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n  capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n  capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n  checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n  capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n  capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n  capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n  capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n  capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n  encoderCapabilitiesForMimeType.add(capabilities);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3124,
        "startLineNumber" : 66,
        "startColumnNumber" : 6,
        "endLineNumber" : 135,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (MediaCodecInfo encoderInfo : encoderInfos) {\n  LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n  capabilities.put(\"encoder_name\",encoderInfo.getName());\n  capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n  capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n  capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n  capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n  capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n  capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n  Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n  capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n  capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n  checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n  checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n  capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n  capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n  capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n  capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n  capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n  encoderCapabilitiesForMimeType.add(capabilities);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 263,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3402,
        "startLineNumber" : 63,
        "startColumnNumber" : 52,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ImmutableList<MediaCodecInfo> encoderInfos=EncoderUtil.getSupportedEncoders(mimeType);\n  ArrayList<Map<String,Object>> encoderCapabilitiesForMimeType=new ArrayList<>();\n  for (  MediaCodecInfo encoderInfo : encoderInfos) {\n    LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n    capabilities.put(\"encoder_name\",encoderInfo.getName());\n    capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n    capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n    capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n    capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n    capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n    capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n    Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n    capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n    capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n    checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n    capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n    capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n    capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n    capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n    capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n    encoderCapabilitiesForMimeType.add(capabilities);\n  }\n  mimeTypeToEncoderInfo.put(mimeType,encoderCapabilitiesForMimeType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3450,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String mimeType : supportedVideoMimeTypes) {\n  ImmutableList<MediaCodecInfo> encoderInfos=EncoderUtil.getSupportedEncoders(mimeType);\n  ArrayList<Map<String,Object>> encoderCapabilitiesForMimeType=new ArrayList<>();\n  for (  MediaCodecInfo encoderInfo : encoderInfos) {\n    LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n    capabilities.put(\"encoder_name\",encoderInfo.getName());\n    capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n    capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n    capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n    capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n    capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n    capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n    Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n    capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n    capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n    checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n    checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n    capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n    capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n    capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n    capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n    capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n    encoderCapabilitiesForMimeType.add(capabilities);\n  }\n  mimeTypeToEncoderInfo.put(mimeType,encoderCapabilitiesForMimeType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 305,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4048,
        "startLineNumber" : 57,
        "startColumnNumber" : 56,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableSet<String> supportedVideoMimeTypes=EncoderUtil.getSupportedVideoMimeTypes();\n  LinkedHashMap<String,List<Map<String,Object>>> mimeTypeToEncoderInfo=new LinkedHashMap<>();\n  for (  String mimeType : supportedVideoMimeTypes) {\n    ImmutableList<MediaCodecInfo> encoderInfos=EncoderUtil.getSupportedEncoders(mimeType);\n    ArrayList<Map<String,Object>> encoderCapabilitiesForMimeType=new ArrayList<>();\n    for (    MediaCodecInfo encoderInfo : encoderInfos) {\n      LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n      capabilities.put(\"encoder_name\",encoderInfo.getName());\n      capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n      capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n      capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n      capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n      capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n      capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n      Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n      capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n      capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n      checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n      capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n      capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n      capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n      capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n      capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n      encoderCapabilitiesForMimeType.add(capabilities);\n    }\n    mimeTypeToEncoderInfo.put(mimeType,encoderCapabilitiesForMimeType);\n  }\n  JSONObject resultJson=new JSONObject();\n  resultJson.put(\"encoder_capabilities\",JSONObject.wrap(mimeTypeToEncoderInfo));\n  AndroidTestUtil.writeTestSummaryToFile(ApplicationProvider.getApplicationContext(),\"encoderCapabilityAnalysisTest\",resultJson);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 365,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4111,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void logEncoderCapabilities() throws Exception {\n  ImmutableSet<String> supportedVideoMimeTypes=EncoderUtil.getSupportedVideoMimeTypes();\n  LinkedHashMap<String,List<Map<String,Object>>> mimeTypeToEncoderInfo=new LinkedHashMap<>();\n  for (  String mimeType : supportedVideoMimeTypes) {\n    ImmutableList<MediaCodecInfo> encoderInfos=EncoderUtil.getSupportedEncoders(mimeType);\n    ArrayList<Map<String,Object>> encoderCapabilitiesForMimeType=new ArrayList<>();\n    for (    MediaCodecInfo encoderInfo : encoderInfos) {\n      LinkedHashMap<String,Object> capabilities=new LinkedHashMap<>();\n      capabilities.put(\"encoder_name\",encoderInfo.getName());\n      capabilities.put(\"is_software_encoder\",!EncoderUtil.isHardwareAccelerated(encoderInfo,mimeType));\n      capabilities.put(\"supports_vbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_VBR));\n      capabilities.put(\"supports_cbr\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR));\n      capabilities.put(\"supports_cq\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CQ));\n      capabilities.put(\"supports_cbr_fd\",EncoderUtil.isBitrateModeSupported(encoderInfo,mimeType,BITRATE_MODE_CBR_FD));\n      capabilities.put(\"supported_bitrate_range\",rangeToString(EncoderUtil.getSupportedBitrateRange(encoderInfo,mimeType)));\n      Pair<Range<Integer>,Range<Integer>> supportedResolutionRanges=EncoderUtil.getSupportedResolutionRanges(encoderInfo,mimeType);\n      capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n      capabilities.put(\"supported_heights_range\",rangeToString(supportedResolutionRanges.second));\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,1280,720);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,1920,1080);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,2560,1440);\n      checkResolutionSupport(encoderInfo,mimeType,capabilities,3840,2160);\n      checkProfileLevelSupport(encoderInfo,mimeType,capabilities);\n      capabilities.put(\"supported_color_profiles\",EncoderUtil.getSupportedColorFormats(encoderInfo,mimeType));\n      capabilities.put(\"max_supported_instances\",Util.SDK_INT >= 23 ? EncoderUtil.getMaxSupportedInstances(encoderInfo,mimeType) : -1);\n      capabilities.put(\"supports_qp_bounds\",Util.SDK_INT >= 31 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,MediaCodecInfo.CodecCapabilities.FEATURE_QpBounds));\n      capabilities.put(\"supports_hdr_editing\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_HdrEditing));\n      capabilities.put(\"supports_encoding_statistics\",Util.SDK_INT >= 33 && EncoderUtil.isFeatureSupported(encoderInfo,mimeType,FEATURE_EncodingStatistics));\n      encoderCapabilitiesForMimeType.add(capabilities);\n    }\n    mimeTypeToEncoderInfo.put(mimeType,encoderCapabilitiesForMimeType);\n  }\n  JSONObject resultJson=new JSONObject();\n  resultJson.put(\"encoder_capabilities\",JSONObject.wrap(mimeTypeToEncoderInfo));\n  AndroidTestUtil.writeTestSummaryToFile(ApplicationProvider.getApplicationContext(),\"encoderCapabilityAnalysisTest\",resultJson);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 99
      },
      "nodeContext" : "capabilities.put(\"supported_widths_range\",rangeToString(supportedResolutionRanges.first));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 94,
    "startColumnNumber" : 25,
    "endLineNumber" : 94,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}