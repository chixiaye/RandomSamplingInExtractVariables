{
  "id" : 489,
  "expression" : "(int)tileLocation.y",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(int)tileLocation.y",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 332,
      "startColumnNumber" : 80,
      "endLineNumber" : 332,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 332,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 57
      },
      "nodeContext" : "g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 332,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 58
      },
      "nodeContext" : "g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 318,
        "startColumnNumber" : 75,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1232,
        "startLineNumber" : 318,
        "startColumnNumber" : 3,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1809,
        "startLineNumber" : 305,
        "startColumnNumber" : 54,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 305,
        "startColumnNumber" : 2,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (TiledMapTileSet set : tilesetsToPack.values()) {\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 282,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2329,
        "startLineNumber" : 298,
        "startColumnNumber" : 106,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2602,
        "startLineNumber" : 296,
        "startColumnNumber" : 1,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Traverse the specified tilesets, optionally lookup the used ids and pass every tile image to the  {@link TexturePacker}, optionally ignoring unused tile ids \n */\nprivate void packTilesets(FileHandle inputDirHandle,Settings texturePackerSettings) throws IOException {\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 332,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 57
      },
      "nodeContext" : "g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "(int)tileLocation.y",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 333,
      "startColumnNumber" : 18,
      "endLineNumber" : 333,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 333,
        "startColumnNumber" : 18,
        "endLineNumber" : 333,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(int)tileLocation.y + tileHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 332,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 57
      },
      "nodeContext" : "g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 332,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 58
      },
      "nodeContext" : "g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 318,
        "startColumnNumber" : 75,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1232,
        "startLineNumber" : 318,
        "startColumnNumber" : 3,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1809,
        "startLineNumber" : 305,
        "startColumnNumber" : 54,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 305,
        "startColumnNumber" : 2,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (TiledMapTileSet set : tilesetsToPack.values()) {\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 282,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2329,
        "startLineNumber" : 298,
        "startColumnNumber" : 106,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2602,
        "startLineNumber" : 296,
        "startColumnNumber" : 1,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Traverse the specified tilesets, optionally lookup the used ids and pass every tile image to the  {@link TexturePacker}, optionally ignoring unused tile ids \n */\nprivate void packTilesets(FileHandle inputDirHandle,Settings texturePackerSettings) throws IOException {\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 333,
        "startColumnNumber" : 18,
        "endLineNumber" : 333,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(int)tileLocation.y + tileHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "(int)tileLocation.y",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 337,
      "startColumnNumber" : 8,
      "endLineNumber" : 337,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 336,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 33
      },
      "nodeContext" : "\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 336,
        "startColumnNumber" : 5,
        "endLineNumber" : 337,
        "endColumnNumber" : 34
      },
      "nodeContext" : "System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 336,
        "startColumnNumber" : 5,
        "endLineNumber" : 337,
        "endColumnNumber" : 35
      },
      "nodeContext" : "System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 335,
        "startColumnNumber" : 17,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 335,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (verbose) {\n  System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 318,
        "startColumnNumber" : 75,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1232,
        "startLineNumber" : 318,
        "startColumnNumber" : 3,
        "endLineNumber" : 346,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n  boolean verbose=this.settings.verbose;\n  if (usedIds != null && !usedIds.contains(gid)) {\n    if (verbose) {\n      System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n    }\n    continue;\n  }\n  tileLocation=layout.getLocation(gid);\n  tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n  g=tile.createGraphics();\n  g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n  if (verbose) {\n    System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n  }\n  int adjustedGid=gid - layout.firstgid;\n  final String separator=\"_\";\n  String regionName=tilesetName + separator + adjustedGid;\n  packer.addImage(tile,regionName);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1809,
        "startLineNumber" : 305,
        "startColumnNumber" : 54,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 305,
        "startColumnNumber" : 2,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (TiledMapTileSet set : tilesetsToPack.values()) {\n  String tilesetName=set.getName();\n  System.out.println(\"Processing tileset \" + tilesetName);\n  IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n  int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n  int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n  int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n  String imageName=set.getProperties().get(\"imagesource\",String.class);\n  TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n  for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n    boolean verbose=this.settings.verbose;\n    if (usedIds != null && !usedIds.contains(gid)) {\n      if (verbose) {\n        System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n      }\n      continue;\n    }\n    tileLocation=layout.getLocation(gid);\n    tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n    g=tile.createGraphics();\n    g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n    if (verbose) {\n      System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n    }\n    int adjustedGid=gid - layout.firstgid;\n    final String separator=\"_\";\n    String regionName=tilesetName + separator + adjustedGid;\n    packer.addImage(tile,regionName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 282,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2329,
        "startLineNumber" : 298,
        "startColumnNumber" : 106,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2602,
        "startLineNumber" : 296,
        "startColumnNumber" : 1,
        "endLineNumber" : 354,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Traverse the specified tilesets, optionally lookup the used ids and pass every tile image to the  {@link TexturePacker}, optionally ignoring unused tile ids \n */\nprivate void packTilesets(FileHandle inputDirHandle,Settings texturePackerSettings) throws IOException {\n  BufferedImage tile;\n  Vector2 tileLocation;\n  Graphics g;\n  packer=new TexturePacker(texturePackerSettings);\n  for (  TiledMapTileSet set : tilesetsToPack.values()) {\n    String tilesetName=set.getName();\n    System.out.println(\"Processing tileset \" + tilesetName);\n    IntArray usedIds=this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName,-1) : null;\n    int tileWidth=set.getProperties().get(\"tilewidth\",Integer.class);\n    int tileHeight=set.getProperties().get(\"tileheight\",Integer.class);\n    int firstgid=set.getProperties().get(\"firstgid\",Integer.class);\n    String imageName=set.getProperties().get(\"imagesource\",String.class);\n    TileSetLayout layout=new TileSetLayout(firstgid,set,inputDirHandle);\n    for (int gid=layout.firstgid, i=0; i < layout.numTiles; gid++, i++) {\n      boolean verbose=this.settings.verbose;\n      if (usedIds != null && !usedIds.contains(gid)) {\n        if (verbose) {\n          System.out.println(\"Stripped id #\" + gid + \" from tileset \\\"\"+ tilesetName+ \"\\\"\");\n        }\n        continue;\n      }\n      tileLocation=layout.getLocation(gid);\n      tile=new BufferedImage(tileWidth,tileHeight,BufferedImage.TYPE_4BYTE_ABGR);\n      g=tile.createGraphics();\n      g.drawImage(layout.image,0,0,tileWidth,tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + tileWidth,(int)tileLocation.y + tileHeight,null);\n      if (verbose) {\n        System.out.println(\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\");\n      }\n      int adjustedGid=gid - layout.firstgid;\n      final String separator=\"_\";\n      String regionName=tilesetName + separator + adjustedGid;\n      packer.addImage(tile,regionName);\n    }\n  }\n  String tilesetOutputDir=outputDir.toString() + \"/\" + this.settings.tilesetOutputDirectory;\n  File relativeTilesetOutputDir=new File(tilesetOutputDir);\n  File outputDirTilesets=new File(relativeTilesetOutputDir.getCanonicalPath());\n  outputDirTilesets.mkdirs();\n  packer.pack(outputDirTilesets,this.settings.atlasOutputName + \".atlas\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 336,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 33
      },
      "nodeContext" : "\"Adding \" + tileWidth + \"x\"+ tileHeight+ \" (\"+ (int)tileLocation.x+ \", \"+ (int)tileLocation.y+ \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 332,
    "startColumnNumber" : 80,
    "endLineNumber" : 332,
    "endColumnNumber" : 99
  }, {
    "charLength" : 19,
    "startLineNumber" : 333,
    "startColumnNumber" : 18,
    "endLineNumber" : 333,
    "endColumnNumber" : 37
  }, {
    "charLength" : 19,
    "startLineNumber" : 337,
    "startColumnNumber" : 8,
    "endLineNumber" : 337,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}