{
  "id" : 310,
  "expression" : "\"calculator not found for algorithmType '%s' databaseType '%s'\"",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-kernel/shardingsphere-data-pipeline/shardingsphere-data-pipeline-core/src/main/java/org/apache/shardingsphere/data/pipeline/core/check/consistency/SingleTableDataCalculatorRegistry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"calculator not found for algorithmType '%s' databaseType '%s'\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 64,
      "startColumnNumber" : 61,
      "endLineNumber" : 64,
      "endColumnNumber" : 124
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 64,
        "startColumnNumber" : 47,
        "endLineNumber" : 64,
        "endColumnNumber" : 154
      },
      "nodeContext" : "String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 155
      },
      "nodeContext" : "Preconditions.checkNotNull(calculator,String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 156
      },
      "nodeContext" : "Preconditions.checkNotNull(calculator,String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 60,
        "startColumnNumber" : 118,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,SingleTableDataCalculator> calculatorMap=ALGORITHM_DATABASE_CALCULATOR_MAP.get(algorithmType);\n  Preconditions.checkNotNull(calculatorMap,String.format(\"calculator not found for algorithmType '%s'\",algorithmType));\n  SingleTableDataCalculator calculator=calculatorMap.get(databaseType);\n  Preconditions.checkNotNull(calculator,String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType));\n  try {\n    return calculator.getClass().newInstance();\n  }\n catch (  final InstantiationException|IllegalAccessException ex) {\n    throw new ServiceLoaderInstantiationException(calculator.getClass(),ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1174,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * New service instance.\n * @param algorithmType algorithm type\n * @param databaseType database type\n * @return single table data calculator\n * @throws NullPointerException if calculator not found\n * @throws ServiceLoaderInstantiationException if new instance by reflection failed\n */\npublic static SingleTableDataCalculator newServiceInstance(final String algorithmType,final String databaseType){\n  Map<String,SingleTableDataCalculator> calculatorMap=ALGORITHM_DATABASE_CALCULATOR_MAP.get(algorithmType);\n  Preconditions.checkNotNull(calculatorMap,String.format(\"calculator not found for algorithmType '%s'\",algorithmType));\n  SingleTableDataCalculator calculator=calculatorMap.get(databaseType);\n  Preconditions.checkNotNull(calculator,String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType));\n  try {\n    return calculator.getClass().newInstance();\n  }\n catch (  final InstantiationException|IllegalAccessException ex) {\n    throw new ServiceLoaderInstantiationException(calculator.getClass(),ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 88,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 156
      },
      "nodeContext" : "Preconditions.checkNotNull(calculator,String.format(\"calculator not found for algorithmType '%s' databaseType '%s'\",algorithmType,databaseType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 64,
    "startColumnNumber" : 61,
    "endLineNumber" : 64,
    "endColumnNumber" : 124
  } ],
  "layoutRelationDataList" : [ ]
}