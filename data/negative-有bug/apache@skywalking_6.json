{
  "id" : 6,
  "expression" : "(Map)null",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/CollectionUtilsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(Map)null",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 36,
      "startColumnNumber" : 43,
      "endLineNumber" : 36,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 36,
        "startColumnNumber" : 19,
        "endLineNumber" : 36,
        "endColumnNumber" : 54
      },
      "nodeContext" : "CollectionUtils.isEmpty((Map)null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertTrue(CollectionUtils.isEmpty((Map)null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertTrue(CollectionUtils.isEmpty((Map)null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1482,
        "startLineNumber" : 35,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertTrue(CollectionUtils.isEmpty((Map)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyMap()));\n  assertFalse(CollectionUtils.isEmpty(ImmutableMap.of(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((Map)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyMap()));\n  assertTrue(CollectionUtils.isNotEmpty(ImmutableMap.of(1,2)));\n  assertTrue(CollectionUtils.isEmpty((List)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyList()));\n  assertFalse(CollectionUtils.isEmpty(Arrays.asList(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyList()));\n  assertTrue(CollectionUtils.isNotEmpty(Arrays.asList(1,2)));\n  assertTrue(CollectionUtils.isEmpty((Set)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptySet()));\n  assertFalse(CollectionUtils.isEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptySet()));\n  assertTrue(CollectionUtils.isNotEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((Object[])null));\n  assertTrue(CollectionUtils.isEmpty(new byte[0]));\n  assertTrue(CollectionUtils.isEmpty((byte[])null));\n  assertTrue(CollectionUtils.isNotEmpty(new byte[1]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test(){\n  assertTrue(CollectionUtils.isEmpty((Map)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyMap()));\n  assertFalse(CollectionUtils.isEmpty(ImmutableMap.of(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((Map)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyMap()));\n  assertTrue(CollectionUtils.isNotEmpty(ImmutableMap.of(1,2)));\n  assertTrue(CollectionUtils.isEmpty((List)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyList()));\n  assertFalse(CollectionUtils.isEmpty(Arrays.asList(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyList()));\n  assertTrue(CollectionUtils.isNotEmpty(Arrays.asList(1,2)));\n  assertTrue(CollectionUtils.isEmpty((Set)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptySet()));\n  assertFalse(CollectionUtils.isEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptySet()));\n  assertTrue(CollectionUtils.isNotEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((Object[])null));\n  assertTrue(CollectionUtils.isEmpty(new byte[0]));\n  assertTrue(CollectionUtils.isEmpty((byte[])null));\n  assertTrue(CollectionUtils.isNotEmpty(new byte[1]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertTrue(CollectionUtils.isEmpty((Map)null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.Map"
  }, {
    "nodeContext" : "(Map)null",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 39,
      "startColumnNumber" : 47,
      "endLineNumber" : 39,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 39,
        "startColumnNumber" : 20,
        "endLineNumber" : 39,
        "endColumnNumber" : 58
      },
      "nodeContext" : "CollectionUtils.isNotEmpty((Map)null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertFalse(CollectionUtils.isNotEmpty((Map)null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertFalse(CollectionUtils.isNotEmpty((Map)null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1482,
        "startLineNumber" : 35,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertTrue(CollectionUtils.isEmpty((Map)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyMap()));\n  assertFalse(CollectionUtils.isEmpty(ImmutableMap.of(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((Map)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyMap()));\n  assertTrue(CollectionUtils.isNotEmpty(ImmutableMap.of(1,2)));\n  assertTrue(CollectionUtils.isEmpty((List)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyList()));\n  assertFalse(CollectionUtils.isEmpty(Arrays.asList(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyList()));\n  assertTrue(CollectionUtils.isNotEmpty(Arrays.asList(1,2)));\n  assertTrue(CollectionUtils.isEmpty((Set)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptySet()));\n  assertFalse(CollectionUtils.isEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptySet()));\n  assertTrue(CollectionUtils.isNotEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((Object[])null));\n  assertTrue(CollectionUtils.isEmpty(new byte[0]));\n  assertTrue(CollectionUtils.isEmpty((byte[])null));\n  assertTrue(CollectionUtils.isNotEmpty(new byte[1]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test(){\n  assertTrue(CollectionUtils.isEmpty((Map)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyMap()));\n  assertFalse(CollectionUtils.isEmpty(ImmutableMap.of(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((Map)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyMap()));\n  assertTrue(CollectionUtils.isNotEmpty(ImmutableMap.of(1,2)));\n  assertTrue(CollectionUtils.isEmpty((List)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptyList()));\n  assertFalse(CollectionUtils.isEmpty(Arrays.asList(1,2)));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptyList()));\n  assertTrue(CollectionUtils.isNotEmpty(Arrays.asList(1,2)));\n  assertTrue(CollectionUtils.isEmpty((Set)null));\n  assertTrue(CollectionUtils.isEmpty(Collections.emptySet()));\n  assertFalse(CollectionUtils.isEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((List)null));\n  assertFalse(CollectionUtils.isNotEmpty(Collections.emptySet()));\n  assertTrue(CollectionUtils.isNotEmpty(new HashSet<>(Arrays.asList(1,2))));\n  assertFalse(CollectionUtils.isNotEmpty((Object[])null));\n  assertTrue(CollectionUtils.isEmpty(new byte[0]));\n  assertTrue(CollectionUtils.isEmpty((byte[])null));\n  assertTrue(CollectionUtils.isNotEmpty(new byte[1]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertFalse(CollectionUtils.isNotEmpty((Map)null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.Map"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 36,
    "startColumnNumber" : 43,
    "endLineNumber" : 36,
    "endColumnNumber" : 53
  }, {
    "charLength" : 10,
    "startLineNumber" : 39,
    "startColumnNumber" : 47,
    "endLineNumber" : 39,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}