{
  "id" : 241,
  "expression" : "executor.get() == null",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixTimer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "executor.get() == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 135,
      "startColumnNumber" : 15,
      "endLineNumber" : 135,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 135,
        "startColumnNumber" : 15,
        "endLineNumber" : 135,
        "endColumnNumber" : 73
      },
      "nodeContext" : "executor.get() == null || !executor.get().isInitialized()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (executor.get() == null || !executor.get().isInitialized()) {\n  if (executor.compareAndSet(null,new ScheduledExecutor())) {\n    executor.get().initialize();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 133,
        "startColumnNumber" : 41,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (executor.get() == null || !executor.get().isInitialized()) {\n    if (executor.compareAndSet(null,new ScheduledExecutor())) {\n      executor.get().initialize();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Since we allow resetting the timer (shutting down the thread) we need to lazily re-start it if it starts being used again. <p> This does the lazy initialization and start of the thread in a thread-safe manner while having little cost the rest of the time.\n */\nprotected void startThreadIfNeeded(){\n  while (executor.get() == null || !executor.get().isInitialized()) {\n    if (executor.compareAndSet(null,new ScheduledExecutor())) {\n      executor.get().initialize();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 135,
        "startColumnNumber" : 15,
        "endLineNumber" : 135,
        "endColumnNumber" : 73
      },
      "nodeContext" : "executor.get() == null || !executor.get().isInitialized()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 135,
    "startColumnNumber" : 15,
    "endLineNumber" : 135,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}