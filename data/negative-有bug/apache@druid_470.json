{
  "id" : 470,
  "expression" : "25",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "25",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1216,
      "startColumnNumber" : 19,
      "endLineNumber" : 1216,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1216,
        "startColumnNumber" : 6,
        "endLineNumber" : 1216,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Thread.sleep(25)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1216,
        "startColumnNumber" : 6,
        "endLineNumber" : 1216,
        "endColumnNumber" : 23
      },
      "nodeContext" : "Thread.sleep(25);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1215,
        "startColumnNumber" : 35,
        "endLineNumber" : 1217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Thread.sleep(25);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1215,
        "startColumnNumber" : 4,
        "endLineNumber" : 1217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (countEvents(task) != 3) {\n  Thread.sleep(25);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3048,
        "startLineNumber" : 1168,
        "startColumnNumber" : 2,
        "endLineNumber" : 1245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  insertData(Iterables.limit(records,3));\n  final KafkaIndexTask task=createTask(null,new DataSchema(\"test_ds\",new TimestampSpec(\"timestamp\",\"iso\",null),new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"dim1\"),new StringDimensionSchema(\"dim1t\"),new StringDimensionSchema(\"dim2\"),new LongDimensionSchema(\"dimLong\"),new FloatDimensionSchema(\"dimFloat\"),new StringDimensionSchema(\"kafka.topic\"),new LongDimensionSchema(\"kafka.offset\"),new StringDimensionSchema(\"kafka.header.encoding\")),null,null),new AggregatorFactory[]{new DoubleSumAggregatorFactory(\"met1sum\",\"met1\"),new CountAggregatorFactory(\"rows\")},new UniformGranularitySpec(Granularities.DAY,Granularities.NONE,null),null),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,new TestKafkaInputFormat(INPUT_FORMAT)));\n  Assert.assertTrue(task.supportsQueries());\n  final ListenableFuture<TaskStatus> future=runTask(task);\n  while (countEvents(task) != 3) {\n    Thread.sleep(25);\n  }\n  Assert.assertEquals(Status.READING,task.getRunner().getStatus());\n  final QuerySegmentSpec interval=OBJECT_MAPPER.readValue(\"\\\"2008/2012\\\"\",QuerySegmentSpec.class);\n  List<ScanResultValue> scanResultValues=scanData(task,interval);\n  Assert.assertEquals(3,Iterables.size(scanResultValues));\n  int i=0;\n  for (  ScanResultValue result : scanResultValues) {\n    final Map<String,Object> event=((List<Map<String,Object>>)result.getEvents()).get(0);\n    Assert.assertEquals((long)i++,event.get(\"kafka.offset\"));\n    Assert.assertEquals(topic,event.get(\"kafka.topic\"));\n    Assert.assertEquals(\"application/json\",event.get(\"kafka.header.encoding\"));\n  }\n  insertData(Iterables.skip(records,3));\n  Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode());\n  Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getProcessed());\n  Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable());\n  Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3141,
        "startLineNumber" : 1166,
        "startColumnNumber" : 2,
        "endLineNumber" : 1245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test(timeout=60_000L) public void testKafkaRecordEntityInputFormat() throws Exception {\n  insertData(Iterables.limit(records,3));\n  final KafkaIndexTask task=createTask(null,new DataSchema(\"test_ds\",new TimestampSpec(\"timestamp\",\"iso\",null),new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"dim1\"),new StringDimensionSchema(\"dim1t\"),new StringDimensionSchema(\"dim2\"),new LongDimensionSchema(\"dimLong\"),new FloatDimensionSchema(\"dimFloat\"),new StringDimensionSchema(\"kafka.topic\"),new LongDimensionSchema(\"kafka.offset\"),new StringDimensionSchema(\"kafka.header.encoding\")),null,null),new AggregatorFactory[]{new DoubleSumAggregatorFactory(\"met1sum\",\"met1\"),new CountAggregatorFactory(\"rows\")},new UniformGranularitySpec(Granularities.DAY,Granularities.NONE,null),null),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null,new TestKafkaInputFormat(INPUT_FORMAT)));\n  Assert.assertTrue(task.supportsQueries());\n  final ListenableFuture<TaskStatus> future=runTask(task);\n  while (countEvents(task) != 3) {\n    Thread.sleep(25);\n  }\n  Assert.assertEquals(Status.READING,task.getRunner().getStatus());\n  final QuerySegmentSpec interval=OBJECT_MAPPER.readValue(\"\\\"2008/2012\\\"\",QuerySegmentSpec.class);\n  List<ScanResultValue> scanResultValues=scanData(task,interval);\n  Assert.assertEquals(3,Iterables.size(scanResultValues));\n  int i=0;\n  for (  ScanResultValue result : scanResultValues) {\n    final Map<String,Object> event=((List<Map<String,Object>>)result.getEvents()).get(0);\n    Assert.assertEquals((long)i++,event.get(\"kafka.offset\"));\n    Assert.assertEquals(topic,event.get(\"kafka.topic\"));\n    Assert.assertEquals(\"application/json\",event.get(\"kafka.header.encoding\"));\n  }\n  insertData(Iterables.skip(records,3));\n  Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode());\n  Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getProcessed());\n  Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable());\n  Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 350,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1216,
        "startColumnNumber" : 6,
        "endLineNumber" : 1216,
        "endColumnNumber" : 23
      },
      "nodeContext" : "Thread.sleep(25);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 1216,
    "startColumnNumber" : 19,
    "endLineNumber" : 1216,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}