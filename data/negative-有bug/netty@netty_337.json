{
  "id" : 337,
  "expression" : "BYTES[i++]",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/test/java/io/netty/handler/codec/http/HttpChunkedInputTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BYTES[i++]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 150,
      "startColumnNumber" : 29,
      "endLineNumber" : 150,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(BYTES[i++],buffer.readByte())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(BYTES[i++],buffer.readByte());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 149,
        "startColumnNumber" : 40,
        "endLineNumber" : 155,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertEquals(BYTES[i++],buffer.readByte());\n  read++;\n  if (i == BYTES.length) {\n    i=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 155,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (buffer.isReadable()) {\n  assertEquals(BYTES[i++],buffer.readByte());\n  read++;\n  if (i == BYTES.length) {\n    i=0;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 139,
        "startColumnNumber" : 17,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  HttpContent httpContent=ch.readOutbound();\n  if (httpContent == null) {\n    break;\n  }\n  if (lastHttpContent != null) {\n    assertTrue(lastHttpContent instanceof DefaultHttpContent,\"Chunk must be DefaultHttpContent\");\n  }\n  ByteBuf buffer=httpContent.content();\n  while (buffer.isReadable()) {\n    assertEquals(BYTES[i++],buffer.readByte());\n    read++;\n    if (i == BYTES.length) {\n      i=0;\n    }\n  }\n  buffer.release();\n  lastHttpContent=httpContent;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  HttpContent httpContent=ch.readOutbound();\n  if (httpContent == null) {\n    break;\n  }\n  if (lastHttpContent != null) {\n    assertTrue(lastHttpContent instanceof DefaultHttpContent,\"Chunk must be DefaultHttpContent\");\n  }\n  ByteBuf buffer=httpContent.content();\n  while (buffer.isReadable()) {\n    assertEquals(BYTES[i++],buffer.readByte());\n    read++;\n    if (i == BYTES.length) {\n      i=0;\n    }\n  }\n  buffer.release();\n  lastHttpContent=httpContent;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1257,
        "startLineNumber" : 127,
        "startColumnNumber" : 57,
        "endLineNumber" : 165,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EmbeddedChannel ch=new EmbeddedChannel(new ChunkedWriteHandler());\n  for (  ChunkedInput<?> input : inputs) {\n    ch.writeOutbound(input);\n  }\n  assertTrue(ch.finish());\n  int i=0;\n  int read=0;\n  HttpContent lastHttpContent=null;\n  for (; ; ) {\n    HttpContent httpContent=ch.readOutbound();\n    if (httpContent == null) {\n      break;\n    }\n    if (lastHttpContent != null) {\n      assertTrue(lastHttpContent instanceof DefaultHttpContent,\"Chunk must be DefaultHttpContent\");\n    }\n    ByteBuf buffer=httpContent.content();\n    while (buffer.isReadable()) {\n      assertEquals(BYTES[i++],buffer.readByte());\n      read++;\n      if (i == BYTES.length) {\n        i=0;\n      }\n    }\n    buffer.release();\n    lastHttpContent=httpContent;\n  }\n  assertEquals(BYTES.length * inputs.length,read);\n  assertSame(LastHttpContent.EMPTY_LAST_CONTENT,lastHttpContent,\"Last chunk must be LastHttpContent.EMPTY_LAST_CONTENT\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1310,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void check(ChunkedInput<?>... inputs){\n  EmbeddedChannel ch=new EmbeddedChannel(new ChunkedWriteHandler());\n  for (  ChunkedInput<?> input : inputs) {\n    ch.writeOutbound(input);\n  }\n  assertTrue(ch.finish());\n  int i=0;\n  int read=0;\n  HttpContent lastHttpContent=null;\n  for (; ; ) {\n    HttpContent httpContent=ch.readOutbound();\n    if (httpContent == null) {\n      break;\n    }\n    if (lastHttpContent != null) {\n      assertTrue(lastHttpContent instanceof DefaultHttpContent,\"Chunk must be DefaultHttpContent\");\n    }\n    ByteBuf buffer=httpContent.content();\n    while (buffer.isReadable()) {\n      assertEquals(BYTES[i++],buffer.readByte());\n      read++;\n      if (i == BYTES.length) {\n        i=0;\n      }\n    }\n    buffer.release();\n    lastHttpContent=httpContent;\n  }\n  assertEquals(BYTES.length * inputs.length,read);\n  assertSame(LastHttpContent.EMPTY_LAST_CONTENT,lastHttpContent,\"Last chunk must be LastHttpContent.EMPTY_LAST_CONTENT\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(BYTES[i++],buffer.readByte());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "byte"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 150,
    "startColumnNumber" : 29,
    "endLineNumber" : 150,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}