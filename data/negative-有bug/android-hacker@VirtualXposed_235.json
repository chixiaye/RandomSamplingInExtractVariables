{
  "id" : 235,
  "expression" : "new ValueAnimator.AnimatorUpdateListener(){\n  @Override public void onAnimationUpdate(  ValueAnimator animation){\n    mProgress=(float)animation.getAnimatedValue();\n    if (0 < mProgress && mProgress < 100)     invalidate();\n else     if (mProgress == 100 && !isReverse)     startMaskAnim();\n  }\n}\n",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/app/src/main/java/io/virtualapp/widgets/LauncherIconView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ValueAnimator.AnimatorUpdateListener(){\n  @Override public void onAnimationUpdate(  ValueAnimator animation){\n    mProgress=(float)animation.getAnimatedValue();\n    if (0 < mProgress && mProgress < 100)     invalidate();\n else     if (mProgress == 100 && !isReverse)     startMaskAnim();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 408,
      "startLineNumber" : 219,
      "startColumnNumber" : 44,
      "endLineNumber" : 229,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 46,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 10
      },
      "nodeContext" : "mProgressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){\n  @Override public void onAnimationUpdate(  ValueAnimator animation){\n    mProgress=(float)animation.getAnimatedValue();\n    if (0 < mProgress && mProgress < 100)     invalidate();\n else     if (mProgress == 100 && !isReverse)     startMaskAnim();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 11
      },
      "nodeContext" : "mProgressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){\n  @Override public void onAnimationUpdate(  ValueAnimator animation){\n    mProgress=(float)animation.getAnimatedValue();\n    if (0 < mProgress && mProgress < 100)     invalidate();\n else     if (mProgress == 100 && !isReverse)     startMaskAnim();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 210,
        "startColumnNumber" : 57,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mProgressAnimator != null)   mProgressAnimator.cancel();\n  final boolean isReverse=from > to;\n  mProgressAnimator=ValueAnimator.ofFloat(from,to);\n  mProgressAnimator.setInterpolator(new DecelerateInterpolator());\n  mProgressAnimator.setDuration(mMediumAnimTime);\n  mProgressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){\n    @Override public void onAnimationUpdate(    ValueAnimator animation){\n      mProgress=(float)animation.getAnimatedValue();\n      if (0 < mProgress && mProgress < 100)       invalidate();\n else       if (mProgress == 100 && !isReverse)       startMaskAnim();\n    }\n  }\n);\n  mProgressAnimator.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 210,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void startProgressAnim(float from,float to){\n  if (mProgressAnimator != null)   mProgressAnimator.cancel();\n  final boolean isReverse=from > to;\n  mProgressAnimator=ValueAnimator.ofFloat(from,to);\n  mProgressAnimator.setInterpolator(new DecelerateInterpolator());\n  mProgressAnimator.setDuration(mMediumAnimTime);\n  mProgressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){\n    @Override public void onAnimationUpdate(    ValueAnimator animation){\n      mProgress=(float)animation.getAnimatedValue();\n      if (0 < mProgress && mProgress < 100)       invalidate();\n else       if (mProgress == 100 && !isReverse)       startMaskAnim();\n    }\n  }\n);\n  mProgressAnimator.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 11
      },
      "nodeContext" : "mProgressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){\n  @Override public void onAnimationUpdate(  ValueAnimator animation){\n    mProgress=(float)animation.getAnimatedValue();\n    if (0 < mProgress && mProgress < 100)     invalidate();\n else     if (mProgress == 100 && !isReverse)     startMaskAnim();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    },
    "tokenLength" : 23,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 408,
    "startLineNumber" : 219,
    "startColumnNumber" : 44,
    "endLineNumber" : 229,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}