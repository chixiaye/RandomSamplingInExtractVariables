{
  "id" : 299,
  "expression" : "new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"))",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 367,
      "startLineNumber" : 116,
      "startColumnNumber" : 22,
      "endLineNumber" : 121,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 19,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 37
      },
      "nodeContext" : "throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 408,
        "startLineNumber" : 115,
        "startColumnNumber" : 53,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 115,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!enclosing.isInstance(testInstance)) {\n  throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 113,
        "startColumnNumber" : 56,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?> enclosing=type.getEnclosingClass();\n  if (!enclosing.isInstance(testInstance)) {\n    throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n  }\n  return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 678,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (typeIsNonStaticInnerClass(type,modifiers)) {\n  Class<?> enclosing=type.getEnclosingClass();\n  if (!enclosing.isInstance(testInstance)) {\n    throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n  }\n  return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1949,
        "startLineNumber" : 96,
        "startColumnNumber" : 93,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (typeIsPrivateAbstractInnerClass(type,modifiers)) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (typeIsNonStaticInnerClass(type,modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (!enclosing.isInstance(testInstance)) {\n      throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n    }\n    return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n  }\n  Constructor<?> constructor=noArgConstructorOf(type);\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return Mockito.mock(type,settings.spiedInstance(accessor.newInstance(constructor)));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2114,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object spyNewInstance(Object testInstance,Field field) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n  MockSettings settings=withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());\n  Class<?> type=field.getType();\n  if (type.isInterface()) {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n  int modifiers=type.getModifiers();\n  if (typeIsPrivateAbstractInnerClass(type,modifiers)) {\n    throw new MockitoException(join(\"@Spy annotation can't initialize private abstract inner classes.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + type.getEnclosingClass().getSimpleName() + \"'\",\"\",\"You should augment the visibility of this inner class\"));\n  }\n  if (typeIsNonStaticInnerClass(type,modifiers)) {\n    Class<?> enclosing=type.getEnclosingClass();\n    if (!enclosing.isInstance(testInstance)) {\n      throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n    }\n    return Mockito.mock(type,settings.useConstructor().outerInstance(testInstance));\n  }\n  Constructor<?> constructor=noArgConstructorOf(type);\n  if (Modifier.isPrivate(constructor.getModifiers())) {\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return Mockito.mock(type,settings.spiedInstance(accessor.newInstance(constructor)));\n  }\n else {\n    return Mockito.mock(type,settings.useConstructor());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 37
      },
      "nodeContext" : "throw new MockitoException(join(\"@Spy annotation can only initialize inner classes declared in the test.\",\"  inner class: '\" + type.getSimpleName() + \"'\",\"  outer class: '\" + enclosing.getSimpleName() + \"'\",\"\"));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 23,
    "type" : "org.mockito.exceptions.base.MockitoException"
  } ],
  "positionList" : [ {
    "charLength" : 367,
    "startLineNumber" : 116,
    "startColumnNumber" : 22,
    "endLineNumber" : 121,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}