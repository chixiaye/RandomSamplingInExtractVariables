{
  "id" : 381,
  "expression" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/datasource/src/test/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 70,
      "startColumnNumber" : 8,
      "endLineNumber" : 71,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 35
      },
      "nodeContext" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 66
      },
      "nodeContext" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 31
      },
      "nodeContext" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties).createDataSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 74,
        "endColumnNumber" : 31
      },
      "nodeContext" : "dataSource=new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties).createDataSource()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 32
      },
      "nodeContext" : "DefaultHttpDataSource dataSource=new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2145,
        "startLineNumber" : 59,
        "startColumnNumber" : 91,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MockWebServer mockWebServer=new MockWebServer();\n  mockWebServer.enqueue(new MockResponse());\n  String propertyFromFactory=\"fromFactory\";\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"0\",propertyFromFactory);\n  defaultRequestProperties.put(\"1\",propertyFromFactory);\n  defaultRequestProperties.put(\"2\",propertyFromFactory);\n  defaultRequestProperties.put(\"4\",propertyFromFactory);\n  DefaultHttpDataSource dataSource=new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  String propertyFromSetter=\"fromSetter\";\n  dataSource.setRequestProperty(\"1\",propertyFromSetter);\n  dataSource.setRequestProperty(\"2\",propertyFromSetter);\n  dataSource.setRequestProperty(\"3\",propertyFromSetter);\n  dataSource.setRequestProperty(\"5\",propertyFromSetter);\n  String propertyFromDataSpec=\"fromDataSpec\";\n  Map<String,String> dataSpecRequestProperties=new HashMap<>();\n  dataSpecRequestProperties.put(\"2\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"3\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"4\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"6\",propertyFromDataSpec);\n  DataSpec dataSpec=new DataSpec.Builder().setUri(mockWebServer.url(\"/test-path\").toString()).setHttpRequestHeaders(dataSpecRequestProperties).build();\n  dataSource.open(dataSpec);\n  Headers headers=mockWebServer.takeRequest(10,SECONDS).getHeaders();\n  assertThat(headers.get(\"0\")).isEqualTo(propertyFromFactory);\n  assertThat(headers.get(\"1\")).isEqualTo(propertyFromSetter);\n  assertThat(headers.get(\"2\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"3\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"4\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"5\")).isEqualTo(propertyFromSetter);\n  assertThat(headers.get(\"6\")).isEqualTo(propertyFromDataSpec);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3169,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This test will set HTTP default request parameters (1) in the DefaultHttpDataSource, (2) via DefaultHttpDataSource.setRequestProperty() and (3) in the DataSpec instance according to the table below. Values wrapped in '*' are the ones that should be set in the connection request. <pre> {@code +---------------+-----+-----+-----+-----+-----+-----+-----+ |               |               Header Key                | +---------------+-----+-----+-----+-----+-----+-----+-----+ |   Location    |  0  |  1  |  2  |  3  |  4  |  5  |  6  | +---------------+-----+-----+-----+-----+-----+-----+-----+ | Constructor   | *Y* |  Y  |  Y  |     |  Y  |     |     | | Setter        |     | *Y* |  Y  |  Y  |     | *Y* |     | | DataSpec      |     |     | *Y* | *Y* | *Y* |     | *Y* | +---------------+-----+-----+-----+-----+-----+-----+-----+}</pre>\n */\n@Test public void open_withSpecifiedRequestParameters_usesCorrectParameters() throws Exception {\n  MockWebServer mockWebServer=new MockWebServer();\n  mockWebServer.enqueue(new MockResponse());\n  String propertyFromFactory=\"fromFactory\";\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"0\",propertyFromFactory);\n  defaultRequestProperties.put(\"1\",propertyFromFactory);\n  defaultRequestProperties.put(\"2\",propertyFromFactory);\n  defaultRequestProperties.put(\"4\",propertyFromFactory);\n  DefaultHttpDataSource dataSource=new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  String propertyFromSetter=\"fromSetter\";\n  dataSource.setRequestProperty(\"1\",propertyFromSetter);\n  dataSource.setRequestProperty(\"2\",propertyFromSetter);\n  dataSource.setRequestProperty(\"3\",propertyFromSetter);\n  dataSource.setRequestProperty(\"5\",propertyFromSetter);\n  String propertyFromDataSpec=\"fromDataSpec\";\n  Map<String,String> dataSpecRequestProperties=new HashMap<>();\n  dataSpecRequestProperties.put(\"2\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"3\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"4\",propertyFromDataSpec);\n  dataSpecRequestProperties.put(\"6\",propertyFromDataSpec);\n  DataSpec dataSpec=new DataSpec.Builder().setUri(mockWebServer.url(\"/test-path\").toString()).setHttpRequestHeaders(dataSpecRequestProperties).build();\n  dataSource.open(dataSpec);\n  Headers headers=mockWebServer.takeRequest(10,SECONDS).getHeaders();\n  assertThat(headers.get(\"0\")).isEqualTo(propertyFromFactory);\n  assertThat(headers.get(\"1\")).isEqualTo(propertyFromSetter);\n  assertThat(headers.get(\"2\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"3\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"4\")).isEqualTo(propertyFromDataSpec);\n  assertThat(headers.get(\"5\")).isEqualTo(propertyFromSetter);\n  assertThat(headers.get(\"6\")).isEqualTo(propertyFromDataSpec);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 274,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 35
      },
      "nodeContext" : "new DefaultHttpDataSource.Factory().setConnectTimeoutMs(1000).setReadTimeoutMs(1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "com.google.android.exoplayer2.upstream.DefaultHttpDataSource.Factory"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 70,
    "startColumnNumber" : 8,
    "endLineNumber" : 71,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}