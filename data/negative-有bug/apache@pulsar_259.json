{
  "id" : 259,
  "expression" : "new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName))",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 142,
      "startLineNumber" : 292,
      "startColumnNumber" : 18,
      "endLineNumber" : 292,
      "endColumnNumber" : 160
    },
    "astNodeNumber" : 17,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 292,
        "startColumnNumber" : 12,
        "endLineNumber" : 292,
        "endColumnNumber" : 161
      },
      "nodeContext" : "throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 291,
        "startColumnNumber" : 88,
        "endLineNumber" : 293,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 291,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!functionMetaDataManager.containsFunction(tenant,namespace,functionName)) {\n  throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11361,
        "startLineNumber" : 258,
        "startColumnNumber" : 64,
        "endLineNumber" : 442,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (functionName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Function name is not provided\");\n  }\n  if (functionConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Function config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.error(\"{}/{}/{} Client [{}] is not authorized to update {}\",tenant,namespace,functionName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,functionName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (!functionMetaDataManager.containsFunction(tenant,namespace,functionName)) {\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n  }\n  Function.FunctionMetaData existingComponent=functionMetaDataManager.getFunctionMetaData(tenant,namespace,functionName);\n  if (!InstanceUtils.calculateSubjectType(existingComponent.getFunctionDetails()).equals(componentType)) {\n    log.error(\"{}/{}/{} is not a {}\",tenant,namespace,functionName,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.NOT_FOUND,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n  }\n  FunctionConfig existingFunctionConfig=FunctionConfigUtils.convertFromDetails(existingComponent.getFunctionDetails());\n  functionConfig.setTenant(tenant);\n  functionConfig.setNamespace(namespace);\n  functionConfig.setName(functionName);\n  FunctionConfig mergedConfig;\n  try {\n    mergedConfig=FunctionConfigUtils.validateUpdate(existingFunctionConfig,functionConfig);\n  }\n catch (  Exception e) {\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  if (existingFunctionConfig.equals(mergedConfig) && isBlank(functionPkgUrl) && uploadedInputStream == null) {\n    log.error(\"{}/{}/{} Update contains no changes\",tenant,namespace,functionName);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Update contains no change\");\n  }\n  Function.FunctionDetails functionDetails=null;\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isNotBlank(functionPkgUrl)) {\n        if (hasPackageTypePrefix(functionPkgUrl)) {\n          componentPackageFile=downloadPackageFile(functionName);\n        }\n else {\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(functionPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),functionPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.FILE) || existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.HTTP)) {\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(existingComponent.getPackageLocation().getPackagePath());\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),functionPkgUrl));\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.BUILTIN)) {\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n else {\n        componentPackageFile=FunctionCommon.createPkgTempFile();\n        componentPackageFile.deleteOnExit();\n        WorkerUtils.downloadFromBookkeeper(worker().getDlogNamespace(),componentPackageFile,existingComponent.getPackageLocation().getPackagePath());\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid update {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"Updated {} {}/{}/{} cannot be submitted to runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),functionName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().mergeFrom(existingComponent).setFunctionDetails(functionDetails);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null && updateOptions != null && updateOptions.isUpdateAuthData()) {\n          Optional<FunctionAuthData> existingFunctionAuthData=Optional.empty();\n          if (functionMetaDataBuilder.hasFunctionAuthSpec()) {\n            existingFunctionAuthData=Optional.ofNullable(getFunctionAuthData(Optional.ofNullable(functionMetaDataBuilder.getFunctionAuthSpec())));\n          }\n          try {\n            Optional<FunctionAuthData> newFunctionAuthData=functionAuthProvider.updateAuthData(finalFunctionDetails,existingFunctionAuthData,clientAuthenticationDataHttps);\n            if (newFunctionAuthData.isPresent()) {\n              functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(newFunctionAuthData.get().getData())).build());\n            }\n else {\n              functionMetaDataBuilder.clearFunctionAuthSpec();\n            }\n          }\n catch (          Exception e) {\n            log.error(\"Error updating authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),functionName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    if (isNotBlank(functionPkgUrl) || uploadedInputStream != null) {\n      try {\n        packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),functionPkgUrl,fileDetail,componentPackageFile);\n      }\n catch (      Exception e) {\n        log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n        throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n      }\n    }\n else {\n      packageLocationMetaDataBuilder=Function.PackageLocationMetaData.newBuilder().mergeFrom(existingComponent.getPackageLocation());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(existingComponent,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if ((functionPkgUrl != null && !functionPkgUrl.startsWith(Utils.FILE)) || uploadedInputStream != null) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 942,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12016,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 442,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void updateFunction(final String tenant,final String namespace,final String functionName,final InputStream uploadedInputStream,final FormDataContentDisposition fileDetail,final String functionPkgUrl,final FunctionConfig functionConfig,final String clientRole,AuthenticationDataHttps clientAuthenticationDataHttps,UpdateOptionsImpl updateOptions){\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (functionName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Function name is not provided\");\n  }\n  if (functionConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Function config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.error(\"{}/{}/{} Client [{}] is not authorized to update {}\",tenant,namespace,functionName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,functionName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (!functionMetaDataManager.containsFunction(tenant,namespace,functionName)) {\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n  }\n  Function.FunctionMetaData existingComponent=functionMetaDataManager.getFunctionMetaData(tenant,namespace,functionName);\n  if (!InstanceUtils.calculateSubjectType(existingComponent.getFunctionDetails()).equals(componentType)) {\n    log.error(\"{}/{}/{} is not a {}\",tenant,namespace,functionName,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.NOT_FOUND,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n  }\n  FunctionConfig existingFunctionConfig=FunctionConfigUtils.convertFromDetails(existingComponent.getFunctionDetails());\n  functionConfig.setTenant(tenant);\n  functionConfig.setNamespace(namespace);\n  functionConfig.setName(functionName);\n  FunctionConfig mergedConfig;\n  try {\n    mergedConfig=FunctionConfigUtils.validateUpdate(existingFunctionConfig,functionConfig);\n  }\n catch (  Exception e) {\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  if (existingFunctionConfig.equals(mergedConfig) && isBlank(functionPkgUrl) && uploadedInputStream == null) {\n    log.error(\"{}/{}/{} Update contains no changes\",tenant,namespace,functionName);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Update contains no change\");\n  }\n  Function.FunctionDetails functionDetails=null;\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isNotBlank(functionPkgUrl)) {\n        if (hasPackageTypePrefix(functionPkgUrl)) {\n          componentPackageFile=downloadPackageFile(functionName);\n        }\n else {\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(functionPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),functionPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.FILE) || existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.HTTP)) {\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(existingComponent.getPackageLocation().getPackagePath());\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),functionPkgUrl));\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n else       if (existingComponent.getPackageLocation().getPackagePath().startsWith(Utils.BUILTIN)) {\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n else {\n        componentPackageFile=FunctionCommon.createPkgTempFile();\n        componentPackageFile.deleteOnExit();\n        WorkerUtils.downloadFromBookkeeper(worker().getDlogNamespace(),componentPackageFile,existingComponent.getPackageLocation().getPackagePath());\n        functionDetails=validateUpdateRequestParams(tenant,namespace,functionName,mergedConfig,componentPackageFile);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid update {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"Updated {} {}/{}/{} cannot be submitted to runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),functionName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().mergeFrom(existingComponent).setFunctionDetails(functionDetails);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null && updateOptions != null && updateOptions.isUpdateAuthData()) {\n          Optional<FunctionAuthData> existingFunctionAuthData=Optional.empty();\n          if (functionMetaDataBuilder.hasFunctionAuthSpec()) {\n            existingFunctionAuthData=Optional.ofNullable(getFunctionAuthData(Optional.ofNullable(functionMetaDataBuilder.getFunctionAuthSpec())));\n          }\n          try {\n            Optional<FunctionAuthData> newFunctionAuthData=functionAuthProvider.updateAuthData(finalFunctionDetails,existingFunctionAuthData,clientAuthenticationDataHttps);\n            if (newFunctionAuthData.isPresent()) {\n              functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(newFunctionAuthData.get().getData())).build());\n            }\n else {\n              functionMetaDataBuilder.clearFunctionAuthSpec();\n            }\n          }\n catch (          Exception e) {\n            log.error(\"Error updating authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),functionName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    if (isNotBlank(functionPkgUrl) || uploadedInputStream != null) {\n      try {\n        packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),functionPkgUrl,fileDetail,componentPackageFile);\n      }\n catch (      Exception e) {\n        log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,functionName,e);\n        throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n      }\n    }\n else {\n      packageLocationMetaDataBuilder=Function.PackageLocationMetaData.newBuilder().mergeFrom(existingComponent.getPackageLocation());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(existingComponent,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if ((functionPkgUrl != null && !functionPkgUrl.startsWith(Utils.FILE)) || uploadedInputStream != null) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 996,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 292,
        "startColumnNumber" : 12,
        "endLineNumber" : 292,
        "endColumnNumber" : 161
      },
      "nodeContext" : "throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s doesn't exist\",ComponentTypeUtils.toString(componentType),functionName));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 16,
    "type" : "org.apache.pulsar.common.util.RestException"
  } ],
  "positionList" : [ {
    "charLength" : 142,
    "startLineNumber" : 292,
    "startColumnNumber" : 18,
    "endLineNumber" : 292,
    "endColumnNumber" : 160
  } ],
  "layoutRelationDataList" : [ ]
}