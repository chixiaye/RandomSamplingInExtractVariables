{
  "id" : 320,
  "expression" : "promise",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/main/java/io/netty/util/concurrent/Futures.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "promise",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 65,
      "startColumnNumber" : 40,
      "endLineNumber" : 65,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 65,
        "endColumnNumber" : 56
      },
      "nodeContext" : "new Mapper<>(promise,mapper)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 57
      },
      "nodeContext" : "future.addListener(new Mapper<>(promise,mapper))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 58
      },
      "nodeContext" : "future.addListener(new Mapper<>(promise,mapper));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 53,
        "startColumnNumber" : 80,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(future,\"future\");\n  requireNonNull(mapper,\"mapper\");\n  if (future.isFailed()) {\n    @SuppressWarnings(\"unchecked\") Future<R> failed=(Future<R>)future;\n    return failed;\n  }\n  if (future.isSuccess()) {\n    return future.executor().submit(new CallableMapper<>(future,mapper));\n  }\n  Promise<R> promise=future.executor().newPromise();\n  future.addListener(new Mapper<>(promise,mapper));\n  Future<R> mappedFuture=promise.asFuture();\n  mappedFuture.addListener(future,propagateCancel());\n  return mappedFuture;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a new  {@link Future} that will complete with the result of the given {@link Future} mapped through thegiven mapper function. <p> If the given future fails, then the returned future will fail as well, with the same exception. Cancellation of either future will cancel the other. If the mapper function throws, the returned future will fail, but the given future will be unaffected.\n * @param future The future whose result will flow to the returned future, through the mapping function.\n * @param mapper The function that will convert the result of the given future into the result of the returnedfuture.\n * @param < R >    The result type of the mapper function, and of the returned future.\n * @return A new future instance that will complete with the mapped result of the given future.\n */\npublic static <V,R>Future<R> map(Future<V> future,Function<V,R> mapper){\n  requireNonNull(future,\"future\");\n  requireNonNull(mapper,\"mapper\");\n  if (future.isFailed()) {\n    @SuppressWarnings(\"unchecked\") Future<R> failed=(Future<R>)future;\n    return failed;\n  }\n  if (future.isSuccess()) {\n    return future.executor().submit(new CallableMapper<>(future,mapper));\n  }\n  Promise<R> promise=future.executor().newPromise();\n  future.addListener(new Mapper<>(promise,mapper));\n  Future<R> mappedFuture=promise.asFuture();\n  mappedFuture.addListener(future,propagateCancel());\n  return mappedFuture;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 58
      },
      "nodeContext" : "future.addListener(new Mapper<>(promise,mapper));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.netty.util.concurrent.Promise<R>"
  }, {
    "nodeContext" : "promise",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 66,
      "startColumnNumber" : 33,
      "endLineNumber" : 66,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 66,
        "startColumnNumber" : 33,
        "endLineNumber" : 66,
        "endColumnNumber" : 51
      },
      "nodeContext" : "promise.asFuture()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 66,
        "startColumnNumber" : 18,
        "endLineNumber" : 66,
        "endColumnNumber" : 51
      },
      "nodeContext" : "mappedFuture=promise.asFuture()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Future<R> mappedFuture=promise.asFuture();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 53,
        "startColumnNumber" : 80,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(future,\"future\");\n  requireNonNull(mapper,\"mapper\");\n  if (future.isFailed()) {\n    @SuppressWarnings(\"unchecked\") Future<R> failed=(Future<R>)future;\n    return failed;\n  }\n  if (future.isSuccess()) {\n    return future.executor().submit(new CallableMapper<>(future,mapper));\n  }\n  Promise<R> promise=future.executor().newPromise();\n  future.addListener(new Mapper<>(promise,mapper));\n  Future<R> mappedFuture=promise.asFuture();\n  mappedFuture.addListener(future,propagateCancel());\n  return mappedFuture;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a new  {@link Future} that will complete with the result of the given {@link Future} mapped through thegiven mapper function. <p> If the given future fails, then the returned future will fail as well, with the same exception. Cancellation of either future will cancel the other. If the mapper function throws, the returned future will fail, but the given future will be unaffected.\n * @param future The future whose result will flow to the returned future, through the mapping function.\n * @param mapper The function that will convert the result of the given future into the result of the returnedfuture.\n * @param < R >    The result type of the mapper function, and of the returned future.\n * @return A new future instance that will complete with the mapped result of the given future.\n */\npublic static <V,R>Future<R> map(Future<V> future,Function<V,R> mapper){\n  requireNonNull(future,\"future\");\n  requireNonNull(mapper,\"mapper\");\n  if (future.isFailed()) {\n    @SuppressWarnings(\"unchecked\") Future<R> failed=(Future<R>)future;\n    return failed;\n  }\n  if (future.isSuccess()) {\n    return future.executor().submit(new CallableMapper<>(future,mapper));\n  }\n  Promise<R> promise=future.executor().newPromise();\n  future.addListener(new Mapper<>(promise,mapper));\n  Future<R> mappedFuture=promise.asFuture();\n  mappedFuture.addListener(future,propagateCancel());\n  return mappedFuture;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Future<R> mappedFuture=promise.asFuture();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.util.concurrent.Promise<R>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 65,
    "startColumnNumber" : 40,
    "endLineNumber" : 65,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 66,
    "startColumnNumber" : 33,
    "endLineNumber" : 66,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}