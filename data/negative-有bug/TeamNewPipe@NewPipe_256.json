{
  "id" : 256,
  "expression" : "context",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/util/SparseItemUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 59,
      "startColumnNumber" : 41,
      "endLineNumber" : 59,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 79
      },
      "nodeContext" : "fetchStreamInfoAndSaveToDatabase(context,item.getServiceId(),item.getUrl(),streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 80
      },
      "nodeContext" : "fetchStreamInfoAndSaveToDatabase(context,item.getServiceId(),item.getUrl(),streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 49,
        "startColumnNumber" : 96,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((StreamTypeUtil.isLiveStream(item.getStreamType()) || item.getDuration() >= 0) && !isNullOrEmpty(item.getUploaderUrl())) {\n    callback.accept(new SinglePlayQueue(item));\n    return;\n  }\n  fetchStreamInfoAndSaveToDatabase(context,item.getServiceId(),item.getUrl(),streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1820,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Use this to certainly obtain an single play queue with all of the data filled in when the stream info item you are handling might be sparse, e.g. because it was fetched via a  {@link org.schabi.newpipe.extractor.feed.FeedExtractor}. FeedExtractors provide a fast and lightweight method to fetch info, but the info might be incomplete (see {@link org.schabi.newpipe.local.feed.service.FeedLoadService} for more details).\n * @param context  Android context\n * @param item     item which is checked and eventually loaded completely\n * @param callback callback to call with the single play queue built from the original item ifall info was available, otherwise from the fetched  {@link org.schabi.newpipe.extractor.stream.StreamInfo}\n */\npublic static void fetchItemInfoIfSparse(@NonNull final Context context,@NonNull final StreamInfoItem item,@NonNull final Consumer<SinglePlayQueue> callback){\n  if ((StreamTypeUtil.isLiveStream(item.getStreamType()) || item.getDuration() >= 0) && !isNullOrEmpty(item.getUploaderUrl())) {\n    callback.accept(new SinglePlayQueue(item));\n    return;\n  }\n  fetchStreamInfoAndSaveToDatabase(context,item.getServiceId(),item.getUrl(),streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 82,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 79
      },
      "nodeContext" : "fetchStreamInfoAndSaveToDatabase(context,item.getServiceId(),item.getUrl(),streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.schabi.newpipe.util.Context"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 59,
    "startColumnNumber" : 41,
    "endLineNumber" : 59,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}