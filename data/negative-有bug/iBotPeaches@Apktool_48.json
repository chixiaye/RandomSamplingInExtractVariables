{
  "id" : 48,
  "expression" : "out",
  "projectName" : "iBotPeaches@Apktool",
  "commitID" : "719a25afd69d2211259a65d4fce197340cbae819",
  "filePath" : "/src/brut/androlib/src/SmaliBuilder.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "out",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 76,
      "startColumnNumber" : 16,
      "endLineNumber" : 76,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "out.append(linesArray[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "out.append(linesArray[i]).append('\\n')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 55
      },
      "nodeContext" : "out.append(linesArray[i]).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 75,
        "startColumnNumber" : 60,
        "endLineNumber" : 77,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  out.append(linesArray[i]).append('\\n');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=2; i < linesArray.length - 2; i++) {\n  out.append(linesArray[i]).append('\\n');\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 73,
        "startColumnNumber" : 21,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String[] linesArray=lines.toArray(new String[0]);\n  for (int i=2; i < linesArray.length - 2; i++) {\n    out.append(linesArray[i]).append('\\n');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!mDebug) {\n  final String[] linesArray=lines.toArray(new String[0]);\n  for (int i=2; i < linesArray.length - 2; i++) {\n    out.append(linesArray[i]).append('\\n');\n  }\n}\n else {\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildFile(String fileName) throws AndrolibException, IOException {\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 55
      },
      "nodeContext" : "out.append(linesArray[i]).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "out",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 83,
      "startColumnNumber" : 12,
      "endLineNumber" : 83,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 36
      },
      "nodeContext" : "out.append(\".source \\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 61
      },
      "nodeContext" : "out.append(\".source \\\"\").append(inFile.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 76
      },
      "nodeContext" : "out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 77
      },
      "nodeContext" : "out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 78,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!mDebug) {\n  final String[] linesArray=lines.toArray(new String[0]);\n  for (int i=2; i < linesArray.length - 2; i++) {\n    out.append(linesArray[i]).append('\\n');\n  }\n}\n else {\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildFile(String fileName) throws AndrolibException, IOException {\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 77
      },
      "nodeContext" : "out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "out",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 92,
      "startColumnNumber" : 45,
      "endLineNumber" : 92,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 49
      },
      "nodeContext" : "DebugInjector.inject(it,out)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "DebugInjector.inject(it,out);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 90,
        "startColumnNumber" : 49,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  it.previous();\n  DebugInjector.inject(it,out);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (line.startsWith(\".method \")) {\n  it.previous();\n  DebugInjector.inject(it,out);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 84,
        "startColumnNumber" : 33,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String line=it.next().trim();\n  if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n    continue;\n  }\n  if (line.startsWith(\".method \")) {\n    it.previous();\n    DebugInjector.inject(it,out);\n    continue;\n  }\n  out.append(line).append('\\n');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (it.hasNext()) {\n  String line=it.next().trim();\n  if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n    continue;\n  }\n  if (line.startsWith(\".method \")) {\n    it.previous();\n    DebugInjector.inject(it,out);\n    continue;\n  }\n  out.append(line).append('\\n');\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 78,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!mDebug) {\n  final String[] linesArray=lines.toArray(new String[0]);\n  for (int i=2; i < linesArray.length - 2; i++) {\n    out.append(linesArray[i]).append('\\n');\n  }\n}\n else {\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildFile(String fileName) throws AndrolibException, IOException {\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "DebugInjector.inject(it,out);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "out",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 96,
      "startColumnNumber" : 16,
      "endLineNumber" : 96,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 32
      },
      "nodeContext" : "out.append(line)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 45
      },
      "nodeContext" : "out.append(line).append('\\n')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "out.append(line).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 84,
        "startColumnNumber" : 33,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String line=it.next().trim();\n  if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n    continue;\n  }\n  if (line.startsWith(\".method \")) {\n    it.previous();\n    DebugInjector.inject(it,out);\n    continue;\n  }\n  out.append(line).append('\\n');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (it.hasNext()) {\n  String line=it.next().trim();\n  if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n    continue;\n  }\n  if (line.startsWith(\".method \")) {\n    it.previous();\n    DebugInjector.inject(it,out);\n    continue;\n  }\n  out.append(line).append('\\n');\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 78,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!mDebug) {\n  final String[] linesArray=lines.toArray(new String[0]);\n  for (int i=2; i < linesArray.length - 2; i++) {\n    out.append(linesArray[i]).append('\\n');\n  }\n}\n else {\n  lines.remove(lines.size() - 1);\n  lines.remove(lines.size() - 1);\n  ListIterator<String> it=lines.listIterator(2);\n  out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n  while (it.hasNext()) {\n    String line=it.next().trim();\n    if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n      continue;\n    }\n    if (line.startsWith(\".method \")) {\n      it.previous();\n      DebugInjector.inject(it,out);\n      continue;\n    }\n    out.append(line).append('\\n');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildFile(String fileName) throws AndrolibException, IOException {\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "out.append(line).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "out",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 100,
      "startColumnNumber" : 34,
      "endLineNumber" : 100,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 48
      },
      "nodeContext" : "out.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 49
      },
      "nodeContext" : "IOUtils.toInputStream(out.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void buildFile(String fileName) throws AndrolibException, IOException {\n  File inFile=new File(mSmaliDir,fileName);\n  InputStream inStream=new FileInputStream(inFile);\n  if (fileName.endsWith(\".smali\")) {\n    mDexBuilder.addSmaliFile(inFile);\n    return;\n  }\n  if (!fileName.endsWith(\".java\")) {\n    throw new AndrolibException(\"Unknown file type: \" + inFile);\n  }\n  StringBuilder out=new StringBuilder();\n  List<String> lines=IOUtils.readLines(inStream);\n  if (!mDebug) {\n    final String[] linesArray=lines.toArray(new String[0]);\n    for (int i=2; i < linesArray.length - 2; i++) {\n      out.append(linesArray[i]).append('\\n');\n    }\n  }\n else {\n    lines.remove(lines.size() - 1);\n    lines.remove(lines.size() - 1);\n    ListIterator<String> it=lines.listIterator(2);\n    out.append(\".source \\\"\").append(inFile.getName()).append(\"\\\"\\n\");\n    while (it.hasNext()) {\n      String line=it.next().trim();\n      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(\".source\")) {\n        continue;\n      }\n      if (line.startsWith(\".method \")) {\n        it.previous();\n        DebugInjector.inject(it,out);\n        continue;\n      }\n      out.append(line).append('\\n');\n    }\n  }\n  mDexBuilder.addSmaliFile(IOUtils.toInputStream(out.toString()),fileName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 49
      },
      "nodeContext" : "IOUtils.toInputStream(out.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 76,
    "startColumnNumber" : 16,
    "endLineNumber" : 76,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 83,
    "startColumnNumber" : 12,
    "endLineNumber" : 83,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 92,
    "startColumnNumber" : 45,
    "endLineNumber" : 92,
    "endColumnNumber" : 48
  }, {
    "charLength" : 3,
    "startLineNumber" : 96,
    "startColumnNumber" : 16,
    "endLineNumber" : 96,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 100,
    "startColumnNumber" : 34,
    "endLineNumber" : 100,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}