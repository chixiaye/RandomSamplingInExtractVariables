{
  "id" : 211,
  "expression" : "newImageIcon(\"/org/jd/gui/images/forward_nav.png\")",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/app/src/main/java/org/jd/gui/view/MainView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newImageIcon(\"/org/jd/gui/images/forward_nav.png\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 188,
      "startColumnNumber" : 49,
      "endLineNumber" : 188,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 188,
        "startColumnNumber" : 28,
        "endLineNumber" : 188,
        "endColumnNumber" : 130
      },
      "nodeContext" : "newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 130
      },
      "nodeContext" : "forwardAction=newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 131
      },
      "nodeContext" : "forwardAction=newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 15002,
        "startLineNumber" : 89,
        "startColumnNumber" : 26,
        "endLineNumber" : 336,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  mainFrame=new JFrame(\"Java Decompiler\");\n  mainFrame.setIconImages(Arrays.asList(getImage(\"/org/jd/gui/images/jd_icon_32.png\"),getImage(\"/org/jd/gui/images/jd_icon_64.png\"),getImage(\"/org/jd/gui/images/jd_icon_128.png\")));\n  mainFrame.setMinimumSize(new Dimension(Constants.MINIMAL_WIDTH,Constants.MINIMAL_HEIGHT));\n  mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n  Action findNextAction=newAction(\"Next\",newImageIcon(\"/org/jd/gui/images/next_nav.png\"),true,findNextActionListener);\n  findPanel=Box.createHorizontalBox();\n  findPanel.setVisible(false);\n  findPanel.add(new JLabel(\"Find: \"));\n  findComboBox=new JComboBox();\n  findComboBox.setEditable(true);\n  JComponent editorComponent=(JComponent)findComboBox.getEditor().getEditorComponent();\n  editorComponent.addKeyListener(new KeyAdapter(){\n    protected String lastStr=\"\";\n    @Override public void keyReleased(    KeyEvent e){\nswitch (e.getKeyCode()) {\ncase KeyEvent.VK_ESCAPE:        findPanel.setVisible(false);\n      break;\ncase KeyEvent.VK_ENTER:    String str=getFindText();\n  if (str.length() > 1) {\n    int index=((DefaultComboBoxModel)findComboBox.getModel()).getIndexOf(str);\n    if (index != -1) {\n      findComboBox.removeItemAt(index);\n    }\n    findComboBox.insertItemAt(str,0);\n    findComboBox.setSelectedIndex(0);\n    findNextAction.actionPerformed(null);\n  }\nbreak;\ndefault:str=getFindText();\nif (!lastStr.equals(str)) {\nfindCriteriaChangedCallback.run();\nlastStr=str;\n}\n}\n}\n}\n);\neditorComponent.setOpaque(true);\nfindComboBox.setBackground(this.findBackgroundColor=editorComponent.getBackground());\nthis.findErrorBackgroundColor=Color.decode(configuration.getPreferences().get(\"JdGuiPreferences.errorBackgroundColor\"));\nfindPanel.add(findComboBox);\nfindPanel.add(Box.createHorizontalStrut(5));\nJToolBar toolBar=new JToolBar();\ntoolBar.setFloatable(false);\ntoolBar.setRollover(true);\nIconButton findNextButton=new IconButton(\"Next\",newAction(newImageIcon(\"/org/jd/gui/images/next_nav.png\"),true,findNextActionListener));\ntoolBar.add(findNextButton);\ntoolBar.add(Box.createHorizontalStrut(5));\nIconButton findPreviousButton=new IconButton(\"Previous\",newAction(newImageIcon(\"/org/jd/gui/images/prev_nav.png\"),true,findPreviousActionListener));\ntoolBar.add(findPreviousButton);\nfindPanel.add(toolBar);\nfindCaseSensitive=new JCheckBox();\nfindCaseSensitive.setAction(newAction(\"Case sensitive\",true,findCaseSensitiveActionListener));\nfindPanel.add(findCaseSensitive);\nfindPanel.add(Box.createHorizontalGlue());\nIconButton findCloseButton=new IconButton(newAction(null,null,true,e -> findPanel.setVisible(false)));\nfindCloseButton.setContentAreaFilled(false);\nfindCloseButton.setIcon(newImageIcon(\"/org/jd/gui/images/close.gif\"));\nfindCloseButton.setRolloverIcon(newImageIcon(\"/org/jd/gui/images/close_active.gif\"));\nfindPanel.add(findCloseButton);\nif (PlatformService.getInstance().isMac()) {\nfindPanel.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));\nBorder border=BorderFactory.createEmptyBorder();\nfindNextButton.setBorder(border);\nfindPreviousButton.setBorder(border);\nfindCloseButton.setBorder(border);\n}\n else {\nfindPanel.setBorder(BorderFactory.createEmptyBorder(2,10,2,2));\n}\nboolean browser=Desktop.isDesktopSupported() ? Desktop.getDesktop().isSupported(Desktop.Action.BROWSE) : false;\nAction openAction=newAction(\"Open File...\",newImageIcon(\"/org/jd/gui/images/open.png\"),true,\"Open a file\",openActionListener);\ncloseAction=newAction(\"Close\",false,closeActionListener);\nAction saveAction=newAction(\"Save\",newImageIcon(\"/org/jd/gui/images/save.png\"),false,saveActionListener);\nAction saveAllSourcesAction=newAction(\"Save All Sources\",newImageIcon(\"/org/jd/gui/images/save_all.png\"),false,saveAllSourcesActionListener);\nAction exitAction=newAction(\"Exit\",true,\"Quit this program\",exitActionListener);\nAction copyAction=newAction(\"Copy\",newImageIcon(\"/org/jd/gui/images/copy.png\"),false,copyActionListener);\nAction pasteAction=newAction(\"Paste Log\",newImageIcon(\"/org/jd/gui/images/paste.png\"),true,pasteActionListener);\nAction selectAllAction=newAction(\"Select all\",false,selectAllActionListener);\nAction findAction=newAction(\"Find...\",false,findActionListener);\nopenTypeAction=newAction(\"Open Type...\",newImageIcon(\"/org/jd/gui/images/open_type.png\"),false,openTypeActionListener);\nAction openTypeHierarchyAction=newAction(\"Open Type Hierarchy...\",false,openTypeHierarchyActionListener);\nAction goToAction=newAction(\"Go to Line...\",false,goToActionListener);\nbackwardAction=newAction(\"Back\",newImageIcon(\"/org/jd/gui/images/backward_nav.png\"),false,backwardActionListener);\nforwardAction=newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener);\nAction searchAction=newAction(\"Search...\",newImageIcon(\"/org/jd/gui/images/search_src.png\"),false,searchActionListener);\nAction jdWebSiteAction=newAction(\"JD Web site\",browser,\"Open JD Web site\",jdWebSiteActionListener);\nAction jdGuiIssuesActionAction=newAction(\"JD-GUI issues\",browser,\"Open JD-GUI issues page\",jdGuiIssuesActionListener);\nAction jdCoreIssuesActionAction=newAction(\"JD-Core issues\",browser,\"Open JD-Core issues page\",jdCoreIssuesActionListener);\nAction preferencesAction=newAction(\"Preferences...\",newImageIcon(\"/org/jd/gui/images/preferences.png\"),true,\"Open the preferences panel\",preferencesActionListener);\nAction aboutAction=newAction(\"About...\",true,\"About JD-GUI\",aboutActionListener);\nint menuShortcutKeyMask=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\nJMenuBar menuBar=new JMenuBar();\nJMenu menu=new JMenu(\"File\");\nmenuBar.add(menu);\nmenu.add(openAction).setAccelerator(KeyStroke.getKeyStroke('O',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(closeAction).setAccelerator(KeyStroke.getKeyStroke('W',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(saveAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask));\nmenu.add(saveAllSourcesAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask | InputEvent.ALT_MASK));\nmenu.addSeparator();\nmenu.add(recentFiles);\nif (!PlatformService.getInstance().isMac()) {\nmenu.addSeparator();\nmenu.add(exitAction).setAccelerator(KeyStroke.getKeyStroke('X',InputEvent.ALT_MASK));\n}\nmenu=new JMenu(\"Edit\");\nmenuBar.add(menu);\nmenu.add(copyAction).setAccelerator(KeyStroke.getKeyStroke('C',menuShortcutKeyMask));\nmenu.add(pasteAction).setAccelerator(KeyStroke.getKeyStroke('V',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(selectAllAction).setAccelerator(KeyStroke.getKeyStroke('A',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(findAction).setAccelerator(KeyStroke.getKeyStroke('F',menuShortcutKeyMask));\nmenu=new JMenu(\"Navigation\");\nmenuBar.add(menu);\nmenu.add(openTypeAction).setAccelerator(KeyStroke.getKeyStroke('T',menuShortcutKeyMask));\nmenu.add(openTypeHierarchyAction).setAccelerator(KeyStroke.getKeyStroke('H',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(goToAction).setAccelerator(KeyStroke.getKeyStroke('L',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(backwardAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.ALT_MASK));\nmenu.add(forwardAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.ALT_MASK));\nmenu=new JMenu(\"Search\");\nmenuBar.add(menu);\nmenu.add(searchAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask | InputEvent.SHIFT_MASK));\nmenu=new JMenu(\"Help\");\nmenuBar.add(menu);\nif (browser) {\nmenu.add(jdWebSiteAction);\nmenu.add(jdGuiIssuesActionAction);\nmenu.add(jdCoreIssuesActionAction);\nmenu.addSeparator();\n}\nmenu.add(preferencesAction).setAccelerator(KeyStroke.getKeyStroke('P',menuShortcutKeyMask | InputEvent.SHIFT_MASK));\nif (!PlatformService.getInstance().isMac()) {\nmenu.addSeparator();\nmenu.add(aboutAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));\n}\nmainFrame.setJMenuBar(menuBar);\nJPanel panel=new JPanel();\npanel.setLayout(new BorderLayout());\ntoolBar=new JToolBar();\ntoolBar.setFloatable(false);\ntoolBar.setRollover(true);\ntoolBar.add(new IconButton(openAction));\ntoolBar.addSeparator();\ntoolBar.add(new IconButton(openTypeAction));\ntoolBar.add(new IconButton(searchAction));\ntoolBar.addSeparator();\ntoolBar.add(new IconButton(backwardAction));\ntoolBar.add(new IconButton(forwardAction));\npanel.add(toolBar,BorderLayout.PAGE_START);\nmainTabbedPanel=new MainTabbedPanel(api);\nmainTabbedPanel.getPageChangedListeners().add(new PageChangeListener(){\nprotected JComponent currentPage=null;\n@Override public <U extends JComponent & UriGettable>void pageChanged(U page){\nif (currentPage != page) {\ncurrentPage=page;\ncurrentPageChangedCallback.accept((T)page);\ninvokeLater(() -> {\nif (page == null) {\nmainFrame.setTitle(\"Java Decompiler\");\nsaveAction.setEnabled(false);\ncopyAction.setEnabled(false);\nselectAllAction.setEnabled(false);\nopenTypeHierarchyAction.setEnabled(false);\ngoToAction.setEnabled(false);\nfindPanel.setVisible(false);\n}\n else {\nString path=page.getUri().getPath();\nint index=path.lastIndexOf('/');\nString name=(index == -1) ? path : path.substring(index + 1);\nmainFrame.setTitle((name != null) ? name + \" - Java Decompiler\" : \"Java Decompiler\");\nhistory.add(page.getUri());\nupdateHistoryActions();\nsaveAction.setEnabled(page instanceof ContentSavable);\ncopyAction.setEnabled(page instanceof ContentCopyable);\nselectAllAction.setEnabled(page instanceof ContentSelectable);\nfindAction.setEnabled(page instanceof ContentSearchable);\nopenTypeHierarchyAction.setEnabled(page instanceof FocusedTypeGettable);\ngoToAction.setEnabled(page instanceof LineNumberNavigable);\nif (findPanel.isVisible()) {\nfindPanel.setVisible(page instanceof ContentSearchable);\n}\n}\n}\n);\n}\n}\n}\n);\nmainTabbedPanel.getTabbedPane().addChangeListener(new ChangeListener(){\nprotected int lastTabCount=0;\n@Override public void stateChanged(ChangeEvent e){\nint tabCount=mainTabbedPanel.getTabbedPane().getTabCount();\nboolean enabled=(tabCount > 0);\ncloseAction.setEnabled(enabled);\nopenTypeAction.setEnabled(enabled);\nsearchAction.setEnabled(enabled);\nsaveAllSourcesAction.setEnabled((mainTabbedPanel.getTabbedPane().getSelectedComponent() instanceof SourcesSavable));\nif (tabCount < lastTabCount) {\npanelClosedCallback.run();\n}\nlastTabCount=tabCount;\n}\n}\n);\nmainTabbedPanel.preferencesChanged(configuration.getPreferences());\npanel.add(mainTabbedPanel,BorderLayout.CENTER);\npanel.add(findPanel,BorderLayout.PAGE_END);\nmainFrame.add(panel);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1524,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15008,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 336,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  mainFrame=new JFrame(\"Java Decompiler\");\n  mainFrame.setIconImages(Arrays.asList(getImage(\"/org/jd/gui/images/jd_icon_32.png\"),getImage(\"/org/jd/gui/images/jd_icon_64.png\"),getImage(\"/org/jd/gui/images/jd_icon_128.png\")));\n  mainFrame.setMinimumSize(new Dimension(Constants.MINIMAL_WIDTH,Constants.MINIMAL_HEIGHT));\n  mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n  Action findNextAction=newAction(\"Next\",newImageIcon(\"/org/jd/gui/images/next_nav.png\"),true,findNextActionListener);\n  findPanel=Box.createHorizontalBox();\n  findPanel.setVisible(false);\n  findPanel.add(new JLabel(\"Find: \"));\n  findComboBox=new JComboBox();\n  findComboBox.setEditable(true);\n  JComponent editorComponent=(JComponent)findComboBox.getEditor().getEditorComponent();\n  editorComponent.addKeyListener(new KeyAdapter(){\n    protected String lastStr=\"\";\n    @Override public void keyReleased(    KeyEvent e){\nswitch (e.getKeyCode()) {\ncase KeyEvent.VK_ESCAPE:        findPanel.setVisible(false);\n      break;\ncase KeyEvent.VK_ENTER:    String str=getFindText();\n  if (str.length() > 1) {\n    int index=((DefaultComboBoxModel)findComboBox.getModel()).getIndexOf(str);\n    if (index != -1) {\n      findComboBox.removeItemAt(index);\n    }\n    findComboBox.insertItemAt(str,0);\n    findComboBox.setSelectedIndex(0);\n    findNextAction.actionPerformed(null);\n  }\nbreak;\ndefault:str=getFindText();\nif (!lastStr.equals(str)) {\nfindCriteriaChangedCallback.run();\nlastStr=str;\n}\n}\n}\n}\n);\neditorComponent.setOpaque(true);\nfindComboBox.setBackground(this.findBackgroundColor=editorComponent.getBackground());\nthis.findErrorBackgroundColor=Color.decode(configuration.getPreferences().get(\"JdGuiPreferences.errorBackgroundColor\"));\nfindPanel.add(findComboBox);\nfindPanel.add(Box.createHorizontalStrut(5));\nJToolBar toolBar=new JToolBar();\ntoolBar.setFloatable(false);\ntoolBar.setRollover(true);\nIconButton findNextButton=new IconButton(\"Next\",newAction(newImageIcon(\"/org/jd/gui/images/next_nav.png\"),true,findNextActionListener));\ntoolBar.add(findNextButton);\ntoolBar.add(Box.createHorizontalStrut(5));\nIconButton findPreviousButton=new IconButton(\"Previous\",newAction(newImageIcon(\"/org/jd/gui/images/prev_nav.png\"),true,findPreviousActionListener));\ntoolBar.add(findPreviousButton);\nfindPanel.add(toolBar);\nfindCaseSensitive=new JCheckBox();\nfindCaseSensitive.setAction(newAction(\"Case sensitive\",true,findCaseSensitiveActionListener));\nfindPanel.add(findCaseSensitive);\nfindPanel.add(Box.createHorizontalGlue());\nIconButton findCloseButton=new IconButton(newAction(null,null,true,e -> findPanel.setVisible(false)));\nfindCloseButton.setContentAreaFilled(false);\nfindCloseButton.setIcon(newImageIcon(\"/org/jd/gui/images/close.gif\"));\nfindCloseButton.setRolloverIcon(newImageIcon(\"/org/jd/gui/images/close_active.gif\"));\nfindPanel.add(findCloseButton);\nif (PlatformService.getInstance().isMac()) {\nfindPanel.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));\nBorder border=BorderFactory.createEmptyBorder();\nfindNextButton.setBorder(border);\nfindPreviousButton.setBorder(border);\nfindCloseButton.setBorder(border);\n}\n else {\nfindPanel.setBorder(BorderFactory.createEmptyBorder(2,10,2,2));\n}\nboolean browser=Desktop.isDesktopSupported() ? Desktop.getDesktop().isSupported(Desktop.Action.BROWSE) : false;\nAction openAction=newAction(\"Open File...\",newImageIcon(\"/org/jd/gui/images/open.png\"),true,\"Open a file\",openActionListener);\ncloseAction=newAction(\"Close\",false,closeActionListener);\nAction saveAction=newAction(\"Save\",newImageIcon(\"/org/jd/gui/images/save.png\"),false,saveActionListener);\nAction saveAllSourcesAction=newAction(\"Save All Sources\",newImageIcon(\"/org/jd/gui/images/save_all.png\"),false,saveAllSourcesActionListener);\nAction exitAction=newAction(\"Exit\",true,\"Quit this program\",exitActionListener);\nAction copyAction=newAction(\"Copy\",newImageIcon(\"/org/jd/gui/images/copy.png\"),false,copyActionListener);\nAction pasteAction=newAction(\"Paste Log\",newImageIcon(\"/org/jd/gui/images/paste.png\"),true,pasteActionListener);\nAction selectAllAction=newAction(\"Select all\",false,selectAllActionListener);\nAction findAction=newAction(\"Find...\",false,findActionListener);\nopenTypeAction=newAction(\"Open Type...\",newImageIcon(\"/org/jd/gui/images/open_type.png\"),false,openTypeActionListener);\nAction openTypeHierarchyAction=newAction(\"Open Type Hierarchy...\",false,openTypeHierarchyActionListener);\nAction goToAction=newAction(\"Go to Line...\",false,goToActionListener);\nbackwardAction=newAction(\"Back\",newImageIcon(\"/org/jd/gui/images/backward_nav.png\"),false,backwardActionListener);\nforwardAction=newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener);\nAction searchAction=newAction(\"Search...\",newImageIcon(\"/org/jd/gui/images/search_src.png\"),false,searchActionListener);\nAction jdWebSiteAction=newAction(\"JD Web site\",browser,\"Open JD Web site\",jdWebSiteActionListener);\nAction jdGuiIssuesActionAction=newAction(\"JD-GUI issues\",browser,\"Open JD-GUI issues page\",jdGuiIssuesActionListener);\nAction jdCoreIssuesActionAction=newAction(\"JD-Core issues\",browser,\"Open JD-Core issues page\",jdCoreIssuesActionListener);\nAction preferencesAction=newAction(\"Preferences...\",newImageIcon(\"/org/jd/gui/images/preferences.png\"),true,\"Open the preferences panel\",preferencesActionListener);\nAction aboutAction=newAction(\"About...\",true,\"About JD-GUI\",aboutActionListener);\nint menuShortcutKeyMask=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\nJMenuBar menuBar=new JMenuBar();\nJMenu menu=new JMenu(\"File\");\nmenuBar.add(menu);\nmenu.add(openAction).setAccelerator(KeyStroke.getKeyStroke('O',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(closeAction).setAccelerator(KeyStroke.getKeyStroke('W',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(saveAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask));\nmenu.add(saveAllSourcesAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask | InputEvent.ALT_MASK));\nmenu.addSeparator();\nmenu.add(recentFiles);\nif (!PlatformService.getInstance().isMac()) {\nmenu.addSeparator();\nmenu.add(exitAction).setAccelerator(KeyStroke.getKeyStroke('X',InputEvent.ALT_MASK));\n}\nmenu=new JMenu(\"Edit\");\nmenuBar.add(menu);\nmenu.add(copyAction).setAccelerator(KeyStroke.getKeyStroke('C',menuShortcutKeyMask));\nmenu.add(pasteAction).setAccelerator(KeyStroke.getKeyStroke('V',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(selectAllAction).setAccelerator(KeyStroke.getKeyStroke('A',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(findAction).setAccelerator(KeyStroke.getKeyStroke('F',menuShortcutKeyMask));\nmenu=new JMenu(\"Navigation\");\nmenuBar.add(menu);\nmenu.add(openTypeAction).setAccelerator(KeyStroke.getKeyStroke('T',menuShortcutKeyMask));\nmenu.add(openTypeHierarchyAction).setAccelerator(KeyStroke.getKeyStroke('H',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(goToAction).setAccelerator(KeyStroke.getKeyStroke('L',menuShortcutKeyMask));\nmenu.addSeparator();\nmenu.add(backwardAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.ALT_MASK));\nmenu.add(forwardAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.ALT_MASK));\nmenu=new JMenu(\"Search\");\nmenuBar.add(menu);\nmenu.add(searchAction).setAccelerator(KeyStroke.getKeyStroke('S',menuShortcutKeyMask | InputEvent.SHIFT_MASK));\nmenu=new JMenu(\"Help\");\nmenuBar.add(menu);\nif (browser) {\nmenu.add(jdWebSiteAction);\nmenu.add(jdGuiIssuesActionAction);\nmenu.add(jdCoreIssuesActionAction);\nmenu.addSeparator();\n}\nmenu.add(preferencesAction).setAccelerator(KeyStroke.getKeyStroke('P',menuShortcutKeyMask | InputEvent.SHIFT_MASK));\nif (!PlatformService.getInstance().isMac()) {\nmenu.addSeparator();\nmenu.add(aboutAction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));\n}\nmainFrame.setJMenuBar(menuBar);\nJPanel panel=new JPanel();\npanel.setLayout(new BorderLayout());\ntoolBar=new JToolBar();\ntoolBar.setFloatable(false);\ntoolBar.setRollover(true);\ntoolBar.add(new IconButton(openAction));\ntoolBar.addSeparator();\ntoolBar.add(new IconButton(openTypeAction));\ntoolBar.add(new IconButton(searchAction));\ntoolBar.addSeparator();\ntoolBar.add(new IconButton(backwardAction));\ntoolBar.add(new IconButton(forwardAction));\npanel.add(toolBar,BorderLayout.PAGE_START);\nmainTabbedPanel=new MainTabbedPanel(api);\nmainTabbedPanel.getPageChangedListeners().add(new PageChangeListener(){\nprotected JComponent currentPage=null;\n@Override public <U extends JComponent & UriGettable>void pageChanged(U page){\nif (currentPage != page) {\ncurrentPage=page;\ncurrentPageChangedCallback.accept((T)page);\ninvokeLater(() -> {\nif (page == null) {\nmainFrame.setTitle(\"Java Decompiler\");\nsaveAction.setEnabled(false);\ncopyAction.setEnabled(false);\nselectAllAction.setEnabled(false);\nopenTypeHierarchyAction.setEnabled(false);\ngoToAction.setEnabled(false);\nfindPanel.setVisible(false);\n}\n else {\nString path=page.getUri().getPath();\nint index=path.lastIndexOf('/');\nString name=(index == -1) ? path : path.substring(index + 1);\nmainFrame.setTitle((name != null) ? name + \" - Java Decompiler\" : \"Java Decompiler\");\nhistory.add(page.getUri());\nupdateHistoryActions();\nsaveAction.setEnabled(page instanceof ContentSavable);\ncopyAction.setEnabled(page instanceof ContentCopyable);\nselectAllAction.setEnabled(page instanceof ContentSelectable);\nfindAction.setEnabled(page instanceof ContentSearchable);\nopenTypeHierarchyAction.setEnabled(page instanceof FocusedTypeGettable);\ngoToAction.setEnabled(page instanceof LineNumberNavigable);\nif (findPanel.isVisible()) {\nfindPanel.setVisible(page instanceof ContentSearchable);\n}\n}\n}\n);\n}\n}\n}\n);\nmainTabbedPanel.getTabbedPane().addChangeListener(new ChangeListener(){\nprotected int lastTabCount=0;\n@Override public void stateChanged(ChangeEvent e){\nint tabCount=mainTabbedPanel.getTabbedPane().getTabCount();\nboolean enabled=(tabCount > 0);\ncloseAction.setEnabled(enabled);\nopenTypeAction.setEnabled(enabled);\nsearchAction.setEnabled(enabled);\nsaveAllSourcesAction.setEnabled((mainTabbedPanel.getTabbedPane().getSelectedComponent() instanceof SourcesSavable));\nif (tabCount < lastTabCount) {\npanelClosedCallback.run();\n}\nlastTabCount=tabCount;\n}\n}\n);\nmainTabbedPanel.preferencesChanged(configuration.getPreferences());\npanel.add(mainTabbedPanel,BorderLayout.CENTER);\npanel.add(findPanel,BorderLayout.PAGE_END);\nmainFrame.add(panel);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 1525,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 131
      },
      "nodeContext" : "forwardAction=newAction(\"Forward\",newImageIcon(\"/org/jd/gui/images/forward_nav.png\"),false,forwardActionListener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "javax.swing.ImageIcon"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 188,
    "startColumnNumber" : 49,
    "endLineNumber" : 188,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}