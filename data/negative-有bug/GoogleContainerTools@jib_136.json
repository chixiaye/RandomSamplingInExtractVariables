{
  "id" : 136,
  "expression" : "\": \"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentials.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\": \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 109,
      "startColumnNumber" : 61,
      "endLineNumber" : 109,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 109,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 75
      },
      "nodeContext" : "\"Unable to decrypt password for \" + registry + \": \"+ problem",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 109,
        "endColumnNumber" : 77
      },
      "nodeContext" : "throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 107,
        "startColumnNumber" : 72,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n  throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 105,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n    throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 336,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (SettingsProblem problem : result.getProblems()) {\n  if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n    throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 96,
        "startColumnNumber" : 35,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SettingsDecryptionRequest request=new DefaultSettingsDecryptionRequest(registryServer);\n  SettingsDecryptionResult result=settingsDecrypter.decrypt(request);\n  for (  SettingsProblem problem : result.getProblems()) {\n    if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n      throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n    }\n  }\n  if (result.getServer() != null) {\n    registryServer=result.getServer();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (settingsDecrypter != null) {\n  SettingsDecryptionRequest request=new DefaultSettingsDecryptionRequest(registryServer);\n  SettingsDecryptionResult result=settingsDecrypter.decrypt(request);\n  for (  SettingsProblem problem : result.getProblems()) {\n    if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n      throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n    }\n  }\n  if (result.getServer() != null) {\n    registryServer=result.getServer();\n  }\n}\n else if (isEncrypted(registryServer.getPassword())) {\n  mavenJibLogger.warn(\"Server password for registry \" + registry + \" appears to be encrypted, but there is no decrypter available\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1772,
        "startLineNumber" : 86,
        "startColumnNumber" : 88,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (registry == null) {\n    return null;\n  }\n  Server registryServer=settings.getServer(registry);\n  if (registryServer == null) {\n    return null;\n  }\n  if (settingsDecrypter != null) {\n    SettingsDecryptionRequest request=new DefaultSettingsDecryptionRequest(registryServer);\n    SettingsDecryptionResult result=settingsDecrypter.decrypt(request);\n    for (    SettingsProblem problem : result.getProblems()) {\n      if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n        throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n      }\n    }\n    if (result.getServer() != null) {\n      registryServer=result.getServer();\n    }\n  }\n else   if (isEncrypted(registryServer.getPassword())) {\n    mavenJibLogger.warn(\"Server password for registry \" + registry + \" appears to be encrypted, but there is no decrypter available\");\n  }\n  return new RegistryCredentials(CREDENTIAL_SOURCE,Authorizations.withBasicCredentials(registryServer.getUsername(),registryServer.getPassword()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2125,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Attempts to retrieve credentials for  {@code registry} from Maven settings.\n * @param registry the registry\n * @return the credentials for the registry\n * @throws MojoExecutionException if the credentials could not be retrieved\n */\n@Nullable RegistryCredentials retrieve(@Nullable String registry) throws MojoExecutionException {\n  if (registry == null) {\n    return null;\n  }\n  Server registryServer=settings.getServer(registry);\n  if (registryServer == null) {\n    return null;\n  }\n  if (settingsDecrypter != null) {\n    SettingsDecryptionRequest request=new DefaultSettingsDecryptionRequest(registryServer);\n    SettingsDecryptionResult result=settingsDecrypter.decrypt(request);\n    for (    SettingsProblem problem : result.getProblems()) {\n      if (problem.getSeverity() == SettingsProblem.Severity.ERROR || problem.getSeverity() == SettingsProblem.Severity.FATAL) {\n        throw new MojoExecutionException(\"Unable to decrypt password for \" + registry + \": \"+ problem);\n      }\n    }\n    if (result.getServer() != null) {\n      registryServer=result.getServer();\n    }\n  }\n else   if (isEncrypted(registryServer.getPassword())) {\n    mavenJibLogger.warn(\"Server password for registry \" + registry + \" appears to be encrypted, but there is no decrypter available\");\n  }\n  return new RegistryCredentials(CREDENTIAL_SOURCE,Authorizations.withBasicCredentials(registryServer.getUsername(),registryServer.getPassword()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 109,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 75
      },
      "nodeContext" : "\"Unable to decrypt password for \" + registry + \": \"+ problem",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 109,
    "startColumnNumber" : 61,
    "endLineNumber" : 109,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}