{
  "id" : 236,
  "expression" : "n == 0",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyListTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 35,
      "startColumnNumber" : 8,
      "endLineNumber" : 35,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (n == 0) {\n  assertThat(ordering.length).isEqualTo(0);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1416,
        "startLineNumber" : 29,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EulerianPathDirectedEdgesAdjacencyList solver;\n  solver=new EulerianPathDirectedEdgesAdjacencyList(graph);\n  int n=graph.size();\n  int[] ordering=solver.getEulerianPath();\n  if (n == 0) {\n    assertThat(ordering.length).isEqualTo(0);\n    return;\n  }\n  assertThat(ordering).isNotNull();\n  Map<Long,Integer> map=new HashMap<>();\n  for (int from=0; from < n; from++) {\n    for (    int to : graph.get(from)) {\n      long hash=((long)from) << 32 | to;\n      Integer count=map.get(hash);\n      if (count == null)       count=0;\n      map.put(hash,count + 1);\n    }\n  }\n  for (int i=1; i < ordering.length; i++) {\n    int from=ordering[i - 1];\n    int to=ordering[i];\n    long hash=((long)from) << 32 | to;\n    Integer count=map.get(hash);\n    assertThat(count).isNotNull();\n    assertThat(count).isGreaterThan(0);\n    map.put(hash,count - 1);\n  }\n  for (  long hash : map.keySet()) {\n    int count=map.get(hash);\n    assertThat(count).isEqualTo(0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void verifyEulerianPath(List<List<Integer>> graph){\n  EulerianPathDirectedEdgesAdjacencyList solver;\n  solver=new EulerianPathDirectedEdgesAdjacencyList(graph);\n  int n=graph.size();\n  int[] ordering=solver.getEulerianPath();\n  if (n == 0) {\n    assertThat(ordering.length).isEqualTo(0);\n    return;\n  }\n  assertThat(ordering).isNotNull();\n  Map<Long,Integer> map=new HashMap<>();\n  for (int from=0; from < n; from++) {\n    for (    int to : graph.get(from)) {\n      long hash=((long)from) << 32 | to;\n      Integer count=map.get(hash);\n      if (count == null)       count=0;\n      map.put(hash,count + 1);\n    }\n  }\n  for (int i=1; i < ordering.length; i++) {\n    int from=ordering[i - 1];\n    int to=ordering[i];\n    long hash=((long)from) << 32 | to;\n    Integer count=map.get(hash);\n    assertThat(count).isNotNull();\n    assertThat(count).isGreaterThan(0);\n    map.put(hash,count - 1);\n  }\n  for (  long hash : map.keySet()) {\n    int count=map.get(hash);\n    assertThat(count).isEqualTo(0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (n == 0) {\n  assertThat(ordering.length).isEqualTo(0);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 35,
    "startColumnNumber" : 8,
    "endLineNumber" : 35,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}