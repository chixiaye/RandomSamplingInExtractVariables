{
  "id" : 74,
  "expression" : "Z",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/ZAlgorithm.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 22,
      "startColumnNumber" : 18,
      "endLineNumber" : 22,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 22,
        "startColumnNumber" : 18,
        "endLineNumber" : 22,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Z[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 22,
        "startColumnNumber" : 18,
        "endLineNumber" : 22,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Z[i]=size",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 22,
        "startColumnNumber" : 18,
        "endLineNumber" : 22,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Z[i]=size;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 22,
        "startColumnNumber" : 18,
        "endLineNumber" : 22,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Z[i]=size;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 26,
      "startColumnNumber" : 8,
      "endLineNumber" : 26,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 12
      },
      "nodeContext" : "Z[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 20
      },
      "nodeContext" : "Z[i]=R - L",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 21
      },
      "nodeContext" : "Z[i]=R - L;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 23,
        "startColumnNumber" : 22,
        "endLineNumber" : 28,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 23,
        "startColumnNumber" : 11,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 21
      },
      "nodeContext" : "Z[i]=R - L;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 30,
      "startColumnNumber" : 12,
      "endLineNumber" : 30,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 16
      },
      "nodeContext" : "Z[k]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Z[k] < R - i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Z[k] < R - i + 1) Z[i]=Z[k];\n else {\n  L=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 28,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 23,
        "startColumnNumber" : 11,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Z[k] < R - i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 30,
      "startColumnNumber" : 30,
      "endLineNumber" : 30,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Z[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Z[i]=Z[k]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Z[i]=Z[k];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Z[k] < R - i + 1) Z[i]=Z[k];\n else {\n  L=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 28,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 23,
        "startColumnNumber" : 11,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Z[i]=Z[k];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 30,
      "startColumnNumber" : 37,
      "endLineNumber" : 30,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 30,
        "startColumnNumber" : 37,
        "endLineNumber" : 30,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Z[k]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Z[i]=Z[k]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Z[i]=Z[k];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Z[k] < R - i + 1) Z[i]=Z[k];\n else {\n  L=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 28,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 23,
        "startColumnNumber" : 11,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 30,
        "startColumnNumber" : 30,
        "endLineNumber" : 30,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Z[i]=Z[k];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 34,
      "startColumnNumber" : 10,
      "endLineNumber" : 34,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 34,
        "startColumnNumber" : 10,
        "endLineNumber" : 34,
        "endColumnNumber" : 14
      },
      "nodeContext" : "Z[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 34,
        "startColumnNumber" : 10,
        "endLineNumber" : 34,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Z[i]=R - L",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 34,
        "startColumnNumber" : 10,
        "endLineNumber" : 34,
        "endColumnNumber" : 23
      },
      "nodeContext" : "Z[i]=R - L;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 31,
        "startColumnNumber" : 13,
        "endLineNumber" : 36,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  L=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Z[k] < R - i + 1) Z[i]=Z[k];\n else {\n  L=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 28,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 23,
        "startColumnNumber" : 11,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 37,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i == 0) Z[i]=size;\n else if (i > R) {\n  L=R=i;\n  while (R < size && text.charAt(R - L) == text.charAt(R))   R++;\n  Z[i]=R - L;\n  R--;\n}\n else {\n  k=i - L;\n  if (Z[k] < R - i + 1)   Z[i]=Z[k];\n else {\n    L=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 21,
        "startColumnNumber" : 35,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (i == 0)   Z[i]=size;\n else   if (i > R) {\n    L=R=i;\n    while (R < size && text.charAt(R - L) == text.charAt(R))     R++;\n    Z[i]=R - L;\n    R--;\n  }\n else {\n    k=i - L;\n    if (Z[k] < R - i + 1)     Z[i]=Z[k];\n else {\n      L=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 34,
        "startColumnNumber" : 10,
        "endLineNumber" : 34,
        "endColumnNumber" : 23
      },
      "nodeContext" : "Z[i]=R - L;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "Z",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 39,
      "startColumnNumber" : 11,
      "endLineNumber" : 39,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 13
      },
      "nodeContext" : "return Z;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the Z-array of a given string\n * @param text the string on which Z-array is computed\n * @return An int-array which is the Z-array of text\n */\npublic int[] calculateZ(String text){\n  if (isNull(text)) {\n    return new int[]{};\n  }\n  int size=text.length();\n  int[] Z=new int[size];\n  int L, R, k;\n  L=R=0;\n  for (int i=0; i < size; i++) {\n    if (i == 0)     Z[i]=size;\n else     if (i > R) {\n      L=R=i;\n      while (R < size && text.charAt(R - L) == text.charAt(R))       R++;\n      Z[i]=R - L;\n      R--;\n    }\n else {\n      k=i - L;\n      if (Z[k] < R - i + 1)       Z[i]=Z[k];\n else {\n        L=i;\n        while (R < size && text.charAt(R - L) == text.charAt(R))         R++;\n        Z[i]=R - L;\n        R--;\n      }\n    }\n  }\n  return Z;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 13
      },
      "nodeContext" : "return Z;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 22,
    "startColumnNumber" : 18,
    "endLineNumber" : 22,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 26,
    "startColumnNumber" : 8,
    "endLineNumber" : 26,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 30,
    "startColumnNumber" : 12,
    "endLineNumber" : 30,
    "endColumnNumber" : 13
  }, {
    "charLength" : 1,
    "startLineNumber" : 30,
    "startColumnNumber" : 30,
    "endLineNumber" : 30,
    "endColumnNumber" : 31
  }, {
    "charLength" : 1,
    "startLineNumber" : 30,
    "startColumnNumber" : 37,
    "endLineNumber" : 30,
    "endColumnNumber" : 38
  }, {
    "charLength" : 1,
    "startLineNumber" : 34,
    "startColumnNumber" : 10,
    "endLineNumber" : 34,
    "endColumnNumber" : 11
  }, {
    "charLength" : 1,
    "startLineNumber" : 39,
    "startColumnNumber" : 11,
    "endLineNumber" : 39,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  } ]
}