{
  "id" : 266,
  "expression" : "3",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/common/src/main/java/com/alibaba/nacos/common/codec/Base64.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 373,
      "startColumnNumber" : 21,
      "endLineNumber" : 373,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 373,
        "startColumnNumber" : 16,
        "endLineNumber" : 373,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case 3:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 366,
        "startColumnNumber" : 12,
        "endLineNumber" : 380,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (modulus) {\ncase 2:  bitWorkArea=bitWorkArea >> 4;\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ncase 3:bitWorkArea=bitWorkArea >> 2;\nbuffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 361,
        "startColumnNumber" : 33,
        "endLineNumber" : 381,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ensureBufferSize(decodeSize);\nswitch (modulus) {\ncase 2:    bitWorkArea=bitWorkArea >> 4;\n  buffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ncase 3:bitWorkArea=bitWorkArea >> 2;\nbuffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 361,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (eof && modulus != 0) {\n  ensureBufferSize(decodeSize);\nswitch (modulus) {\ncase 2:    bitWorkArea=bitWorkArea >> 4;\n  buffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ncase 3:bitWorkArea=bitWorkArea >> 2;\nbuffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2136,
        "startLineNumber" : 328,
        "startColumnNumber" : 51,
        "endLineNumber" : 382,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (eof) {\n    return;\n  }\n  if (inAvail < 0) {\n    eof=true;\n  }\n  for (int i=0; i < inAvail; i++) {\n    ensureBufferSize(decodeSize);\n    byte b=in[inPos++];\n    if (b == PAD) {\n      eof=true;\n      break;\n    }\n else {\n      if (b >= 0 && b < DECODE_TABLE.length) {\n        int result=DECODE_TABLE[b];\n        if (result >= 0) {\n          modulus=(modulus + 1) % BYTES_PER_ENCODED_BLOCK;\n          bitWorkArea=(bitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n          if (modulus == 0) {\n            buffer[pos++]=(byte)((bitWorkArea >> 16) & MASK_8BITS);\n            buffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\n            buffer[pos++]=(byte)(bitWorkArea & MASK_8BITS);\n          }\n        }\n      }\n    }\n  }\n  if (eof && modulus != 0) {\n    ensureBufferSize(decodeSize);\nswitch (modulus) {\ncase 2:      bitWorkArea=bitWorkArea >> 4;\n    buffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\n  break;\ncase 3:bitWorkArea=bitWorkArea >> 2;\nbuffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3225,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 382,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\" call is not necessary when decoding, but it doesn't hurt, either. </p> <p> Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in, garbage-out philosophy: it will not check the provided data for validity. </p> <p> Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach. http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ </p>\n * @param in      byte[] array of ascii data to base64 decode.\n * @param inPos   Position to start reading data from.\n * @param inAvail Amount of bytes available from input for encoding.\n */\nvoid decode(byte[] in,int inPos,int inAvail){\n  if (eof) {\n    return;\n  }\n  if (inAvail < 0) {\n    eof=true;\n  }\n  for (int i=0; i < inAvail; i++) {\n    ensureBufferSize(decodeSize);\n    byte b=in[inPos++];\n    if (b == PAD) {\n      eof=true;\n      break;\n    }\n else {\n      if (b >= 0 && b < DECODE_TABLE.length) {\n        int result=DECODE_TABLE[b];\n        if (result >= 0) {\n          modulus=(modulus + 1) % BYTES_PER_ENCODED_BLOCK;\n          bitWorkArea=(bitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n          if (modulus == 0) {\n            buffer[pos++]=(byte)((bitWorkArea >> 16) & MASK_8BITS);\n            buffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\n            buffer[pos++]=(byte)(bitWorkArea & MASK_8BITS);\n          }\n        }\n      }\n    }\n  }\n  if (eof && modulus != 0) {\n    ensureBufferSize(decodeSize);\nswitch (modulus) {\ncase 2:      bitWorkArea=bitWorkArea >> 4;\n    buffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\n  break;\ncase 3:bitWorkArea=bitWorkArea >> 2;\nbuffer[pos++]=(byte)((bitWorkArea >> 8) & MASK_8BITS);\nbuffer[pos++]=(byte)((bitWorkArea) & MASK_8BITS);\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 373,
        "startColumnNumber" : 16,
        "endLineNumber" : 373,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case 3:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 373,
    "startColumnNumber" : 21,
    "endLineNumber" : 373,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}