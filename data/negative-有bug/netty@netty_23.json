{
  "id" : 23,
  "expression" : "e",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/resolver-dns/src/main/java/io/netty/resolver/dns/DirContextUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 69,
      "startColumnNumber" : 88,
      "endLineNumber" : 69,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 90
      },
      "nodeContext" : "logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 91
      },
      "nodeContext" : "logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 68,
        "startColumnNumber" : 51,
        "endLineNumber" : 70,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 68,
        "startColumnNumber" : 22,
        "endLineNumber" : 70,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 896,
        "startLineNumber" : 55,
        "startColumnNumber" : 20,
        "endLineNumber" : 70,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  URI uri=new URI(server);\n  String host=new URI(server).getHost();\n  if (host == null || host.isEmpty()) {\n    logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n    continue;\n  }\n  int port=uri.getPort();\n  defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n}\n catch (URISyntaxException e) {\n  logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 54,
        "startColumnNumber" : 46,
        "endLineNumber" : 71,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    URI uri=new URI(server);\n    String host=new URI(server).getHost();\n    if (host == null || host.isEmpty()) {\n      logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n      continue;\n    }\n    int port=uri.getPort();\n    defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n  }\n catch (  URISyntaxException e) {\n    logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 71,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (String server : servers) {\n  try {\n    URI uri=new URI(server);\n    String host=new URI(server).getHost();\n    if (host == null || host.isEmpty()) {\n      logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n      continue;\n    }\n    int port=uri.getPort();\n    defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n  }\n catch (  URISyntaxException e) {\n    logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 52,
        "startColumnNumber" : 55,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String[] servers=dnsUrls.split(\" \");\n  for (  String server : servers) {\n    try {\n      URI uri=new URI(server);\n      String host=new URI(server).getHost();\n      if (host == null || host.isEmpty()) {\n        logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n        continue;\n      }\n      int port=uri.getPort();\n      defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n    }\n catch (    URISyntaxException e) {\n      logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (dnsUrls != null && !dnsUrls.isEmpty()) {\n  String[] servers=dnsUrls.split(\" \");\n  for (  String server : servers) {\n    try {\n      URI uri=new URI(server);\n      String host=new URI(server).getHost();\n      if (host == null || host.isEmpty()) {\n        logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n        continue;\n      }\n      int port=uri.getPort();\n      defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n    }\n catch (    URISyntaxException e) {\n      logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DirContext ctx=new InitialDirContext(env);\n  String dnsUrls=(String)ctx.getEnvironment().get(\"java.naming.provider.url\");\n  if (dnsUrls != null && !dnsUrls.isEmpty()) {\n    String[] servers=dnsUrls.split(\" \");\n    for (    String server : servers) {\n      try {\n        URI uri=new URI(server);\n        String host=new URI(server).getHost();\n        if (host == null || host.isEmpty()) {\n          logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n          continue;\n        }\n        int port=uri.getPort();\n        defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n      }\n catch (      URISyntaxException e) {\n        logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DirContext ctx=new InitialDirContext(env);\n  String dnsUrls=(String)ctx.getEnvironment().get(\"java.naming.provider.url\");\n  if (dnsUrls != null && !dnsUrls.isEmpty()) {\n    String[] servers=dnsUrls.split(\" \");\n    for (    String server : servers) {\n      try {\n        URI uri=new URI(server);\n        String host=new URI(server).getHost();\n        if (host == null || host.isEmpty()) {\n          logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n          continue;\n        }\n        int port=uri.getPort();\n        defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n      }\n catch (      URISyntaxException e) {\n        logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n      }\n    }\n  }\n}\n catch (NamingException ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1947,
        "startLineNumber" : 38,
        "startColumnNumber" : 92,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Hashtable<String,String> env=new Hashtable<>();\n  env.put(Context.INITIAL_CONTEXT_FACTORY,\"com.sun.jndi.dns.DnsContextFactory\");\n  env.put(\"java.naming.provider.url\",\"dns://\");\n  try {\n    DirContext ctx=new InitialDirContext(env);\n    String dnsUrls=(String)ctx.getEnvironment().get(\"java.naming.provider.url\");\n    if (dnsUrls != null && !dnsUrls.isEmpty()) {\n      String[] servers=dnsUrls.split(\" \");\n      for (      String server : servers) {\n        try {\n          URI uri=new URI(server);\n          String host=new URI(server).getHost();\n          if (host == null || host.isEmpty()) {\n            logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n            continue;\n          }\n          int port=uri.getPort();\n          defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n        }\n catch (        URISyntaxException e) {\n          logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n        }\n      }\n    }\n  }\n catch (  NamingException ignore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2035,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static void addNameServers(List<InetSocketAddress> defaultNameServers,int defaultPort){\n  Hashtable<String,String> env=new Hashtable<>();\n  env.put(Context.INITIAL_CONTEXT_FACTORY,\"com.sun.jndi.dns.DnsContextFactory\");\n  env.put(\"java.naming.provider.url\",\"dns://\");\n  try {\n    DirContext ctx=new InitialDirContext(env);\n    String dnsUrls=(String)ctx.getEnvironment().get(\"java.naming.provider.url\");\n    if (dnsUrls != null && !dnsUrls.isEmpty()) {\n      String[] servers=dnsUrls.split(\" \");\n      for (      String server : servers) {\n        try {\n          URI uri=new URI(server);\n          String host=new URI(server).getHost();\n          if (host == null || host.isEmpty()) {\n            logger.debug(\"Skipping a nameserver URI as host portion could not be extracted: {}\",server);\n            continue;\n          }\n          int port=uri.getPort();\n          defaultNameServers.add(SocketUtils.socketAddress(uri.getHost(),port == -1 ? defaultPort : port));\n        }\n catch (        URISyntaxException e) {\n          logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n        }\n      }\n    }\n  }\n catch (  NamingException ignore) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 91
      },
      "nodeContext" : "logger.debug(\"Skipping a malformed nameserver URI: {}\",server,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.net.URISyntaxException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 69,
    "startColumnNumber" : 88,
    "endLineNumber" : 69,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}