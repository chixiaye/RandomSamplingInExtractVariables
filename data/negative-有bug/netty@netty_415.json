{
  "id" : 415,
  "expression" : "new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES))",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/LzmaCompressor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 163,
      "startLineNumber" : 213,
      "startColumnNumber" : 18,
      "endLineNumber" : 215,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 15
      },
      "nodeContext" : "throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 212,
        "startColumnNumber" : 76,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 212,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (numFastBytes < MIN_FAST_BYTES || numFastBytes > MAX_FAST_BYTES) {\n  throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1329,
        "startLineNumber" : 191,
        "startColumnNumber" : 95,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (lc < 0 || lc > 8) {\n    throw new IllegalArgumentException(\"lc: \" + lc + \" (expected: 0-8)\");\n  }\n  if (lp < 0 || lp > 4) {\n    throw new IllegalArgumentException(\"lp: \" + lp + \" (expected: 0-4)\");\n  }\n  if (pb < 0 || pb > 4) {\n    throw new IllegalArgumentException(\"pb: \" + pb + \" (expected: 0-4)\");\n  }\n  if (lc + lp > 4) {\n    if (!warningLogged) {\n      logger.warn(\"The latest versions of LZMA libraries (for example, XZ Utils) \" + \"has an additional requirement: lc + lp <= 4. Data which don't follow \" + \"this requirement cannot be decompressed with this libraries.\");\n      warningLogged=true;\n    }\n  }\n  if (dictionarySize < 0) {\n    throw new IllegalArgumentException(\"dictionarySize: \" + dictionarySize + \" (expected: 0+)\");\n  }\n  if (numFastBytes < MIN_FAST_BYTES || numFastBytes > MAX_FAST_BYTES) {\n    throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n  }\n  return () -> new LzmaCompressor(lc,lp,pb,dictionarySize,endMarkerMode,numFastBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 168,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates LZMA compressor factory with specified settings.\n * @param lc the number of \"literal context\" bits, available values [0, 8], default value  {@value #DEFAULT_LC}.\n * @param lp the number of \"literal position\" bits, available values [0, 4], default value  {@value #DEFAULT_LP}.\n * @param pb the number of \"position\" bits, available values [0, 4], default value  {@value #DEFAULT_PB}.\n * @param dictionarySize available values [0,  {@link java.lang.Integer#MAX_VALUE}], default value is  {@value #MEDIUM_DICTIONARY_SIZE}.\n * @param endMarkerMode indicates should  {@link LzmaCompressor} use end of stream marker or not.Note, that  {@link LzmaCompressor} always sets size of uncompressed datain LZMA header, so EOS marker is unnecessary. But you may use it for better portability. For full description see \"LZMA Decoding modes\" section of LZMA-Specification.txt in official LZMA SDK.\n * @param numFastBytes available values [ {@value #MIN_FAST_BYTES},  {@value #MAX_FAST_BYTES}].\n * @return the factory.\n */\npublic static Supplier<LzmaCompressor> newFactory(int lc,int lp,int pb,int dictionarySize,boolean endMarkerMode,int numFastBytes){\n  if (lc < 0 || lc > 8) {\n    throw new IllegalArgumentException(\"lc: \" + lc + \" (expected: 0-8)\");\n  }\n  if (lp < 0 || lp > 4) {\n    throw new IllegalArgumentException(\"lp: \" + lp + \" (expected: 0-4)\");\n  }\n  if (pb < 0 || pb > 4) {\n    throw new IllegalArgumentException(\"pb: \" + pb + \" (expected: 0-4)\");\n  }\n  if (lc + lp > 4) {\n    if (!warningLogged) {\n      logger.warn(\"The latest versions of LZMA libraries (for example, XZ Utils) \" + \"has an additional requirement: lc + lp <= 4. Data which don't follow \" + \"this requirement cannot be decompressed with this libraries.\");\n      warningLogged=true;\n    }\n  }\n  if (dictionarySize < 0) {\n    throw new IllegalArgumentException(\"dictionarySize: \" + dictionarySize + \" (expected: 0+)\");\n  }\n  if (numFastBytes < MIN_FAST_BYTES || numFastBytes > MAX_FAST_BYTES) {\n    throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n  }\n  return () -> new LzmaCompressor(lc,lp,pb,dictionarySize,endMarkerMode,numFastBytes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 15
      },
      "nodeContext" : "throw new IllegalArgumentException(String.format(\"numFastBytes: %d (expected: %d-%d)\",numFastBytes,MIN_FAST_BYTES,MAX_FAST_BYTES));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 14,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 163,
    "startLineNumber" : 213,
    "startColumnNumber" : 18,
    "endLineNumber" : 215,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}