{
  "id" : 324,
  "expression" : "0",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 34,
      "startColumnNumber" : 29,
      "endLineNumber" : 34,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 34,
        "startColumnNumber" : 19,
        "endLineNumber" : 34,
        "endColumnNumber" : 31
      },
      "nodeContext" : "stack.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 31,
        "startColumnNumber" : 43,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOps() throws Exception {\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 38,
      "startColumnNumber" : 29,
      "endLineNumber" : 38,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 38,
        "startColumnNumber" : 19,
        "endLineNumber" : 38,
        "endColumnNumber" : 31
      },
      "nodeContext" : "stack.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 31,
        "startColumnNumber" : 43,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOps() throws Exception {\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 41,
      "startColumnNumber" : 29,
      "endLineNumber" : 41,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 41,
        "startColumnNumber" : 19,
        "endLineNumber" : 41,
        "endColumnNumber" : 40
      },
      "nodeContext" : "stack.set(0,\"three\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(stack.set(0,\"three\"),equalTo(\"one\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 31,
        "startColumnNumber" : 43,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOps() throws Exception {\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 42,
      "startColumnNumber" : 32,
      "endLineNumber" : 42,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 42,
        "startColumnNumber" : 19,
        "endLineNumber" : 42,
        "endColumnNumber" : 34
      },
      "nodeContext" : "stack.remove(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(stack.remove(0),equalTo(\"three\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(stack.remove(0),equalTo(\"three\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 31,
        "startColumnNumber" : 43,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOps() throws Exception {\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(stack.remove(0),equalTo(\"three\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 45,
      "startColumnNumber" : 29,
      "endLineNumber" : 45,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 45,
        "startColumnNumber" : 19,
        "endLineNumber" : 45,
        "endColumnNumber" : 31
      },
      "nodeContext" : "stack.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"two\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"two\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 31,
        "startColumnNumber" : 43,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOps() throws Exception {\n  Stack<String> stack=new Stack<String>();\n  stack.push(\"one\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"one\"));\n  assertThat(stack.size(),equalTo(1));\n  stack.push(\"two\");\n  assertThat(stack.get(0),equalTo(\"one\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.size(),equalTo(2));\n  assertThat(stack.set(0,\"three\"),equalTo(\"one\"));\n  assertThat(stack.remove(0),equalTo(\"three\"));\n  assertThat(stack.size(),equalTo(1));\n  assertThat(stack.isEmpty(),is(false));\n  assertThat(stack.get(0),equalTo(\"two\"));\n  assertThat(stack.peek(),equalTo(\"two\"));\n  assertThat(stack.pop(),equalTo(\"two\"));\n  assertThat(stack.isEmpty(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(stack.get(0),equalTo(\"two\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 34,
    "startColumnNumber" : 29,
    "endLineNumber" : 34,
    "endColumnNumber" : 30
  }, {
    "charLength" : 1,
    "startLineNumber" : 38,
    "startColumnNumber" : 29,
    "endLineNumber" : 38,
    "endColumnNumber" : 30
  }, {
    "charLength" : 1,
    "startLineNumber" : 41,
    "startColumnNumber" : 29,
    "endLineNumber" : 41,
    "endColumnNumber" : 30
  }, {
    "charLength" : 1,
    "startLineNumber" : 42,
    "startColumnNumber" : 32,
    "endLineNumber" : 42,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 45,
    "startColumnNumber" : 29,
    "endLineNumber" : 45,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}