{
  "id" : 400,
  "expression" : "java",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordEdgeList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "java",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 36,
      "startColumnNumber" : 4,
      "endLineNumber" : 36,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 13
      },
      "nodeContext" : "java.util",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 20
      },
      "nodeContext" : "java.util.Arrays",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 57
      },
      "nodeContext" : "java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 58
      },
      "nodeContext" : "java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  double[] dist=new double[V];\n  java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0;\n  boolean relaxedAnEdge=true;\n  for (int v=0; v < V - 1 && relaxedAnEdge; v++) {\n    relaxedAnEdge=false;\n    for (    Edge edge : edges) {\n      if (dist[edge.from] + edge.cost < dist[edge.to]) {\n        dist[edge.to]=dist[edge.from] + edge.cost;\n        relaxedAnEdge=true;\n      }\n    }\n  }\n  relaxedAnEdge=true;\n  for (int v=0; v < V - 1 && relaxedAnEdge; v++) {\n    relaxedAnEdge=false;\n    for (    Edge edge : edges) {\n      if (dist[edge.from] + edge.cost < dist[edge.to]) {\n        dist[edge.to]=Double.NEGATIVE_INFINITY;\n        relaxedAnEdge=true;\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1908,
        "startLineNumber" : 23,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * An implementation of the Bellman-Ford algorithm. The algorithm finds the shortest path between a starting node and all other nodes in the graph. The algorithm also detects negative cycles. If a node is part of a negative cycle then the minimum cost for that node is set to Double.NEGATIVE_INFINITY.\n * @param edges - An edge list containing directed edges forming the graph\n * @param V - The number of vertices in the graph.\n * @param start - The id of the starting node\n */\npublic static double[] bellmanFord(Edge[] edges,int V,int start){\n  double[] dist=new double[V];\n  java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0;\n  boolean relaxedAnEdge=true;\n  for (int v=0; v < V - 1 && relaxedAnEdge; v++) {\n    relaxedAnEdge=false;\n    for (    Edge edge : edges) {\n      if (dist[edge.from] + edge.cost < dist[edge.to]) {\n        dist[edge.to]=dist[edge.from] + edge.cost;\n        relaxedAnEdge=true;\n      }\n    }\n  }\n  relaxedAnEdge=true;\n  for (int v=0; v < V - 1 && relaxedAnEdge; v++) {\n    relaxedAnEdge=false;\n    for (    Edge edge : edges) {\n      if (dist[edge.from] + edge.cost < dist[edge.to]) {\n        dist[edge.to]=Double.NEGATIVE_INFINITY;\n        relaxedAnEdge=true;\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 58
      },
      "nodeContext" : "java.util.Arrays.fill(dist,Double.POSITIVE_INFINITY);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 36,
    "startColumnNumber" : 4,
    "endLineNumber" : 36,
    "endColumnNumber" : 8
  } ],
  "layoutRelationDataList" : [ ]
}