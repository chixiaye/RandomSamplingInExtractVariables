{
  "id" : 467,
  "expression" : "getShardSizePercentileMonitor(\"shardSize_percentile_50\",50)",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-servo-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/servopublisher/HystrixServoMetricsPublisherCollapser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getShardSizePercentileMonitor(\"shardSize_percentile_50\",50)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 262,
      "startColumnNumber" : 21,
      "endLineNumber" : 262,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 82
      },
      "nodeContext" : "monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_50\",50))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 83
      },
      "nodeContext" : "monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_50\",50));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4220,
        "startLineNumber" : 210,
        "startColumnNumber" : 48,
        "endLineNumber" : 299,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"name\").build()){\n    @Override public String getValue(){\n      return key.name();\n    }\n  }\n);\n  monitors.add(new GaugeMetric(MonitorConfig.builder(\"currentTime\").withTag(DataSourceLevel.DEBUG).build()){\n    @Override public Number getValue(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  monitors.add(safelyGetCumulativeMonitor(\"countRequestsBatched\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.ADDED_TO_BATCH;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countBatches\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.BATCH_EXECUTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countResponsesFromCache\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(getBatchSizeMeanMonitor(\"batchSize_mean\"));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_25\",25));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_50\",50));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_75\",75));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_95\",95));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_99\",99));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_99_5\",99.5));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_100\",100));\n  monitors.add(getShardSizeMeanMonitor(\"shardSize_mean\"));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_25\",25));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_50\",50));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_75\",75));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_95\",95));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_99\",99));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_99_5\",99.5));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_100\",100));\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_rollingStatisticalWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestCacheEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_maxRequestsInBatch\").build()){\n    @Override public Number getValue(){\n      return properties.maxRequestsInBatch().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_timerDelayInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.timerDelayInMilliseconds().get();\n    }\n  }\n);\n  return monitors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4822,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 299,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Servo will flatten metric names as: getServoTypeTag()_getServoInstanceTag()_monitorName An implementation note.  If there's a version mismatch between hystrix-core and hystrix-servo-metric-publisher, the code below may reference a HystrixEventType.Collapser that does not exist in hystrix-core.  If this happens, a j.l.NoSuchFieldError occurs.  Since this data is not being generated by hystrix-core, it's safe to count it as 0 and we should log an error to get users to update their dependency set.\n */\nprivate List<Monitor<?>> getServoMonitors(){\n  List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"name\").build()){\n    @Override public String getValue(){\n      return key.name();\n    }\n  }\n);\n  monitors.add(new GaugeMetric(MonitorConfig.builder(\"currentTime\").withTag(DataSourceLevel.DEBUG).build()){\n    @Override public Number getValue(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  monitors.add(safelyGetCumulativeMonitor(\"countRequestsBatched\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.ADDED_TO_BATCH;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countBatches\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.BATCH_EXECUTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countResponsesFromCache\",new Func0<HystrixEventType.Collapser>(){\n    @Override public HystrixEventType.Collapser call(){\n      return HystrixEventType.Collapser.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(getBatchSizeMeanMonitor(\"batchSize_mean\"));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_25\",25));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_50\",50));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_75\",75));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_95\",95));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_99\",99));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_99_5\",99.5));\n  monitors.add(getBatchSizePercentileMonitor(\"batchSize_percentile_100\",100));\n  monitors.add(getShardSizeMeanMonitor(\"shardSize_mean\"));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_25\",25));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_50\",50));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_75\",75));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_95\",95));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_99\",99));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_99_5\",99.5));\n  monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_100\",100));\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_rollingStatisticalWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestCacheEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_maxRequestsInBatch\").build()){\n    @Override public Number getValue(){\n      return properties.maxRequestsInBatch().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_timerDelayInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.timerDelayInMilliseconds().get();\n    }\n  }\n);\n  return monitors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 438,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 83
      },
      "nodeContext" : "monitors.add(getShardSizePercentileMonitor(\"shardSize_percentile_50\",50));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "com.netflix.hystrix.contrib.servopublisher.Monitor<java.lang.Number>"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 262,
    "startColumnNumber" : 21,
    "endLineNumber" : 262,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}