{
  "id" : 467,
  "expression" : "\"Did not get the expected type parameter\"",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/Generic/src/test/java/utilities/util/reflection/ReflectionUtilitiesTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Did not get the expected type parameter\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 140,
      "startColumnNumber" : 15,
      "endLineNumber" : 140,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 108,
        "startColumnNumber" : 40,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2494,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRuntimeTypeDiscovery(){\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Did not get the expected type parameter\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 142,
      "startColumnNumber" : 15,
      "endLineNumber" : 142,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 108,
        "startColumnNumber" : 40,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2494,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRuntimeTypeDiscovery(){\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Did not get the expected type parameter\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 151,
      "startColumnNumber" : 15,
      "endLineNumber" : 151,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 151,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 28
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 151,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 108,
        "startColumnNumber" : 40,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2494,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRuntimeTypeDiscovery(){\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 151,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 28
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Did not get the expected type parameter\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 153,
      "startColumnNumber" : 15,
      "endLineNumber" : 153,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 153,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 28
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 153,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2447,
        "startLineNumber" : 108,
        "startColumnNumber" : 40,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2494,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 155,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRuntimeTypeDiscovery(){\n  RuntimeBaseType<Integer,Float> runtimeBaseType=new RuntimeBaseType<>();\n  List<Class<?>> typeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,runtimeBaseType.getClass());\n  assertTrue(\"Did not get a list with null values for each declared type on a base class\",!typeArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithPassThroughTypes<Integer,Float> passThroughType=new ChildTypeWithPassThroughTypes<>();\n  List<Class<?>> passThroughArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,passThroughType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!passThroughArguments.isEmpty());\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(0));\n  assertNull(\"Did not get a null value as expected for a declared type\",typeArguments.get(1));\n  ChildTypeWithActualTypes actualType=new ChildTypeWithActualTypes();\n  List<Class<?>> actualTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,actualType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!actualTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",String.class,actualTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",Object.class,actualTypeArguments.get(1));\n  BabyType babyType=new BabyType();\n  List<Class<?>> babyTypeArguments=ReflectionUtilities.getTypeArguments(RuntimeBaseType.class,babyType.getClass());\n  assertTrue(\"Unable to resolve parent types from child implementation\",!babyTypeArguments.isEmpty());\n  assertEquals(\"Did not get the expected type parameter\",Integer.class,babyTypeArguments.get(0));\n  assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 153,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 28
      },
      "nodeContext" : "assertEquals(\"Did not get the expected type parameter\",String.class,babyTypeArguments.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 140,
    "startColumnNumber" : 15,
    "endLineNumber" : 140,
    "endColumnNumber" : 56
  }, {
    "charLength" : 41,
    "startLineNumber" : 142,
    "startColumnNumber" : 15,
    "endLineNumber" : 142,
    "endColumnNumber" : 56
  }, {
    "charLength" : 41,
    "startLineNumber" : 151,
    "startColumnNumber" : 15,
    "endLineNumber" : 151,
    "endColumnNumber" : 56
  }, {
    "charLength" : 41,
    "startLineNumber" : 153,
    "startColumnNumber" : 15,
    "endLineNumber" : 153,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}