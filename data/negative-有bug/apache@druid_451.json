{
  "id" : 451,
  "expression" : "storageAdapter",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/segment/realtime/appenderator/SinkQuerySegmentWalker.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "storageAdapter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 234,
      "startColumnNumber" : 46,
      "endLineNumber" : 234,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 234,
        "startColumnNumber" : 46,
        "endLineNumber" : 234,
        "endColumnNumber" : 73
      },
      "nodeContext" : "storageAdapter.getMinTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 234,
        "startColumnNumber" : 46,
        "endLineNumber" : 234,
        "endColumnNumber" : 85
      },
      "nodeContext" : "storageAdapter.getMinTime().getMillis()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 234,
        "startColumnNumber" : 29,
        "endLineNumber" : 234,
        "endColumnNumber" : 85
      },
      "nodeContext" : "segmentMinTime=storageAdapter.getMinTime().getMillis()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 234,
        "startColumnNumber" : 24,
        "endLineNumber" : 234,
        "endColumnNumber" : 86
      },
      "nodeContext" : "long segmentMinTime=storageAdapter.getMinTime().getMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 254,
        "endColumnNumber" : 23
      },
      "nodeContext" : "{\n  StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n  long segmentMinTime=storageAdapter.getMinTime().getMillis();\n  long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n  Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n  runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 232,
        "startColumnNumber" : 22,
        "endLineNumber" : 254,
        "endColumnNumber" : 23
      },
      "nodeContext" : "if (hydrantDefinitelySwapped && cache.isLocal()) {\n  StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n  long segmentMinTime=storageAdapter.getMinTime().getMillis();\n  long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n  Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n  runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1907,
        "startLineNumber" : 226,
        "startColumnNumber" : 24,
        "endLineNumber" : 261,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n  if (hydrantDefinitelySwapped && cache.isLocal()) {\n    StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n    long segmentMinTime=storageAdapter.getMinTime().getMillis();\n    long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n    Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n    runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n  }\n  runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n  return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 265,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n  if (hydrantDefinitelySwapped && cache.isLocal()) {\n    StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n    long segmentMinTime=storageAdapter.getMinTime().getMillis();\n    long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n    Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n    runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n  }\n  runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n  return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n}\n catch (RuntimeException e) {\n  CloseQuietly.close(segmentAndCloseable.rhs);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3340,
        "startLineNumber" : 205,
        "startColumnNumber" : 29,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "{\n  final boolean hydrantDefinitelySwapped=hydrant.hasSwapped();\n  if (skipIncrementalSegment && !hydrantDefinitelySwapped) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new NoopQueryRunner<>());\n  }\n  final Optional<Pair<SegmentReference,Closeable>> maybeSegmentAndCloseable=hydrant.getSegmentForQuery(segmentMapFn);\n  if (!maybeSegmentAndCloseable.isPresent()) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new ReportTimelineMissingSegmentQueryRunner<>(descriptor));\n  }\n  final Pair<SegmentReference,Closeable> segmentAndCloseable=maybeSegmentAndCloseable.get();\n  try {\n    QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n    if (hydrantDefinitelySwapped && cache.isLocal()) {\n      StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n      long segmentMinTime=storageAdapter.getMinTime().getMillis();\n      long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n      Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n      runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n    }\n    runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n    return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n  }\n catch (  RuntimeException e) {\n    CloseQuietly.close(segmentAndCloseable.rhs);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3351,
        "startLineNumber" : 205,
        "startColumnNumber" : 18,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "hydrant -> {\n  final boolean hydrantDefinitelySwapped=hydrant.hasSwapped();\n  if (skipIncrementalSegment && !hydrantDefinitelySwapped) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new NoopQueryRunner<>());\n  }\n  final Optional<Pair<SegmentReference,Closeable>> maybeSegmentAndCloseable=hydrant.getSegmentForQuery(segmentMapFn);\n  if (!maybeSegmentAndCloseable.isPresent()) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new ReportTimelineMissingSegmentQueryRunner<>(descriptor));\n  }\n  final Pair<SegmentReference,Closeable> segmentAndCloseable=maybeSegmentAndCloseable.get();\n  try {\n    QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n    if (hydrantDefinitelySwapped && cache.isLocal()) {\n      StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n      long segmentMinTime=storageAdapter.getMinTime().getMillis();\n      long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n      Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n      runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n    }\n    runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n    return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n  }\n catch (  RuntimeException e) {\n    CloseQuietly.close(segmentAndCloseable.rhs);\n    throw e;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 206,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 234,
        "startColumnNumber" : 24,
        "endLineNumber" : 234,
        "endColumnNumber" : 86
      },
      "nodeContext" : "long segmentMinTime=storageAdapter.getMinTime().getMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "storageAdapter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 235,
      "startColumnNumber" : 46,
      "endLineNumber" : 235,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 235,
        "startColumnNumber" : 46,
        "endLineNumber" : 235,
        "endColumnNumber" : 73
      },
      "nodeContext" : "storageAdapter.getMaxTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 235,
        "startColumnNumber" : 46,
        "endLineNumber" : 235,
        "endColumnNumber" : 85
      },
      "nodeContext" : "storageAdapter.getMaxTime().getMillis()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 235,
        "startColumnNumber" : 29,
        "endLineNumber" : 235,
        "endColumnNumber" : 85
      },
      "nodeContext" : "segmentMaxTime=storageAdapter.getMaxTime().getMillis()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 235,
        "startColumnNumber" : 24,
        "endLineNumber" : 235,
        "endColumnNumber" : 86
      },
      "nodeContext" : "long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 254,
        "endColumnNumber" : 23
      },
      "nodeContext" : "{\n  StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n  long segmentMinTime=storageAdapter.getMinTime().getMillis();\n  long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n  Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n  runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 232,
        "startColumnNumber" : 22,
        "endLineNumber" : 254,
        "endColumnNumber" : 23
      },
      "nodeContext" : "if (hydrantDefinitelySwapped && cache.isLocal()) {\n  StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n  long segmentMinTime=storageAdapter.getMinTime().getMillis();\n  long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n  Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n  runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1907,
        "startLineNumber" : 226,
        "startColumnNumber" : 24,
        "endLineNumber" : 261,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n  if (hydrantDefinitelySwapped && cache.isLocal()) {\n    StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n    long segmentMinTime=storageAdapter.getMinTime().getMillis();\n    long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n    Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n    runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n  }\n  runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n  return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 265,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n  if (hydrantDefinitelySwapped && cache.isLocal()) {\n    StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n    long segmentMinTime=storageAdapter.getMinTime().getMillis();\n    long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n    Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n    runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n  }\n  runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n  return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n}\n catch (RuntimeException e) {\n  CloseQuietly.close(segmentAndCloseable.rhs);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3340,
        "startLineNumber" : 205,
        "startColumnNumber" : 29,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "{\n  final boolean hydrantDefinitelySwapped=hydrant.hasSwapped();\n  if (skipIncrementalSegment && !hydrantDefinitelySwapped) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new NoopQueryRunner<>());\n  }\n  final Optional<Pair<SegmentReference,Closeable>> maybeSegmentAndCloseable=hydrant.getSegmentForQuery(segmentMapFn);\n  if (!maybeSegmentAndCloseable.isPresent()) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new ReportTimelineMissingSegmentQueryRunner<>(descriptor));\n  }\n  final Pair<SegmentReference,Closeable> segmentAndCloseable=maybeSegmentAndCloseable.get();\n  try {\n    QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n    if (hydrantDefinitelySwapped && cache.isLocal()) {\n      StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n      long segmentMinTime=storageAdapter.getMinTime().getMillis();\n      long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n      Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n      runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n    }\n    runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n    return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n  }\n catch (  RuntimeException e) {\n    CloseQuietly.close(segmentAndCloseable.rhs);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3351,
        "startLineNumber" : 205,
        "startColumnNumber" : 18,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "hydrant -> {\n  final boolean hydrantDefinitelySwapped=hydrant.hasSwapped();\n  if (skipIncrementalSegment && !hydrantDefinitelySwapped) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new NoopQueryRunner<>());\n  }\n  final Optional<Pair<SegmentReference,Closeable>> maybeSegmentAndCloseable=hydrant.getSegmentForQuery(segmentMapFn);\n  if (!maybeSegmentAndCloseable.isPresent()) {\n    return new Pair<>(hydrant.getSegmentDataInterval(),new ReportTimelineMissingSegmentQueryRunner<>(descriptor));\n  }\n  final Pair<SegmentReference,Closeable> segmentAndCloseable=maybeSegmentAndCloseable.get();\n  try {\n    QueryRunner<T> runner=factory.createRunner(segmentAndCloseable.lhs);\n    if (hydrantDefinitelySwapped && cache.isLocal()) {\n      StorageAdapter storageAdapter=segmentAndCloseable.lhs.asStorageAdapter();\n      long segmentMinTime=storageAdapter.getMinTime().getMillis();\n      long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n      Interval actualDataInterval=Intervals.utc(segmentMinTime,segmentMaxTime + 1);\n      runner=new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant),cacheKeyPrefix,descriptor,actualDataInterval,objectMapper,cache,toolChest,runner,new ForegroundCachePopulator(objectMapper,cachePopulatorStats,cacheConfig.getMaxEntrySize()),cacheConfig);\n    }\n    runner=QueryRunnerHelper.makeClosingQueryRunner(runner,segmentAndCloseable.rhs);\n    return new Pair<>(segmentAndCloseable.lhs.getDataInterval(),runner);\n  }\n catch (  RuntimeException e) {\n    CloseQuietly.close(segmentAndCloseable.rhs);\n    throw e;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 206,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 235,
        "startColumnNumber" : 24,
        "endLineNumber" : 235,
        "endColumnNumber" : 86
      },
      "nodeContext" : "long segmentMaxTime=storageAdapter.getMaxTime().getMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 234,
    "startColumnNumber" : 46,
    "endLineNumber" : 234,
    "endColumnNumber" : 60
  }, {
    "charLength" : 14,
    "startLineNumber" : 235,
    "startColumnNumber" : 46,
    "endLineNumber" : 235,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}