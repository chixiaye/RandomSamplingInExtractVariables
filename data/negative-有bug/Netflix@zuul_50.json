{
  "id" : 50,
  "expression" : "filter",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/FilterLoader.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "filter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 87,
      "startColumnNumber" : 12,
      "endLineNumber" : 87,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 26
      },
      "nodeContext" : "filter == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (filter == null) {\n  Class clazz=compiler.compile(sCode,sName);\n  if (!Modifier.isAbstract(clazz.getModifiers())) {\n    filter=filterFactory.newInstance(clazz);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 601,
        "startLineNumber" : 77,
        "startColumnNumber" : 77,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (filterCheck.get(sName) == null) {\n    filterCheck.putIfAbsent(sName,sName);\n    if (!sCode.equals(filterClassCode.get(sName))) {\n      LOG.info(\"reloading code \" + sName);\n      filterRegistry.remove(sName);\n    }\n  }\n  ZuulFilter filter=filterRegistry.get(sName);\n  if (filter == null) {\n    Class clazz=compiler.compile(sCode,sName);\n    if (!Modifier.isAbstract(clazz.getModifiers())) {\n      filter=filterFactory.newInstance(clazz);\n    }\n  }\n  return filter;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given source and name will compile and store the filter if it detects that the filter code has changed or the filter doesn't exist. Otherwise it will return an instance of the requested ZuulFilter\n * @param sCode source code\n * @param sName name of the filter\n * @return the IZuulFilter\n * @throws IllegalAccessException\n * @throws InstantiationException\n */\npublic ZuulFilter getFilter(String sCode,String sName) throws Exception {\n  if (filterCheck.get(sName) == null) {\n    filterCheck.putIfAbsent(sName,sName);\n    if (!sCode.equals(filterClassCode.get(sName))) {\n      LOG.info(\"reloading code \" + sName);\n      filterRegistry.remove(sName);\n    }\n  }\n  ZuulFilter filter=filterRegistry.get(sName);\n  if (filter == null) {\n    Class clazz=compiler.compile(sCode,sName);\n    if (!Modifier.isAbstract(clazz.getModifiers())) {\n      filter=filterFactory.newInstance(clazz);\n    }\n  }\n  return filter;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 26
      },
      "nodeContext" : "filter == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.zuul.filters.ZuulFilter"
  }, {
    "nodeContext" : "filter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 93,
      "startColumnNumber" : 15,
      "endLineNumber" : 93,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return filter;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 601,
        "startLineNumber" : 77,
        "startColumnNumber" : 77,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (filterCheck.get(sName) == null) {\n    filterCheck.putIfAbsent(sName,sName);\n    if (!sCode.equals(filterClassCode.get(sName))) {\n      LOG.info(\"reloading code \" + sName);\n      filterRegistry.remove(sName);\n    }\n  }\n  ZuulFilter filter=filterRegistry.get(sName);\n  if (filter == null) {\n    Class clazz=compiler.compile(sCode,sName);\n    if (!Modifier.isAbstract(clazz.getModifiers())) {\n      filter=filterFactory.newInstance(clazz);\n    }\n  }\n  return filter;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given source and name will compile and store the filter if it detects that the filter code has changed or the filter doesn't exist. Otherwise it will return an instance of the requested ZuulFilter\n * @param sCode source code\n * @param sName name of the filter\n * @return the IZuulFilter\n * @throws IllegalAccessException\n * @throws InstantiationException\n */\npublic ZuulFilter getFilter(String sCode,String sName) throws Exception {\n  if (filterCheck.get(sName) == null) {\n    filterCheck.putIfAbsent(sName,sName);\n    if (!sCode.equals(filterClassCode.get(sName))) {\n      LOG.info(\"reloading code \" + sName);\n      filterRegistry.remove(sName);\n    }\n  }\n  ZuulFilter filter=filterRegistry.get(sName);\n  if (filter == null) {\n    Class clazz=compiler.compile(sCode,sName);\n    if (!Modifier.isAbstract(clazz.getModifiers())) {\n      filter=filterFactory.newInstance(clazz);\n    }\n  }\n  return filter;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return filter;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.zuul.filters.ZuulFilter"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 87,
    "startColumnNumber" : 12,
    "endLineNumber" : 87,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 93,
    "startColumnNumber" : 15,
    "endLineNumber" : 93,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}