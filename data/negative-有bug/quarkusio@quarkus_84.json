{
  "id" : 84,
  "expression" : "fieldType",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fieldType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 102,
      "startColumnNumber" : 50,
      "endLineNumber" : 102,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 102,
        "startColumnNumber" : 29,
        "endLineNumber" : 102,
        "endColumnNumber" : 72
      },
      "nodeContext" : "beanManager.getBeans(fieldType,qualifiers)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 102,
        "startColumnNumber" : 21,
        "endLineNumber" : 102,
        "endColumnNumber" : 72
      },
      "nodeContext" : "beans=beanManager.getBeans(fieldType,qualifiers)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 97,
        "startColumnNumber" : 112,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Type fieldType=field.getGenericType();\n  Annotation[] qualifiers=getQualifiers(field);\n  ArcContainer container=Arc.container();\n  BeanManager beanManager=container.beanManager();\n  Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n  if (beans.isEmpty()) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  Bean<?> bean=beanManager.resolve(beans);\n  if (!beanManager.isNormalScope(bean.getScope())) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - the injected bean does not declare a CDI normal scope but: \"+ bean.getScope().getName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  return container.instance((InjectableBean<?>)bean).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1348,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Object getBeanInstance(Object testInstance,Field field,Class<? extends Annotation> annotationType){\n  Type fieldType=field.getGenericType();\n  Annotation[] qualifiers=getQualifiers(field);\n  ArcContainer container=Arc.container();\n  BeanManager beanManager=container.beanManager();\n  Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n  if (beans.isEmpty()) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  Bean<?> bean=beanManager.resolve(beans);\n  if (!beanManager.isNormalScope(bean.getScope())) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - the injected bean does not declare a CDI normal scope but: \"+ bean.getScope().getName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  return container.instance((InjectableBean<?>)bean).get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Type"
  }, {
    "nodeContext" : "fieldType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 106,
      "startColumnNumber" : 30,
      "endLineNumber" : 106,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 106,
        "startColumnNumber" : 30,
        "endLineNumber" : 106,
        "endColumnNumber" : 53
      },
      "nodeContext" : "fieldType.getTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 53
      },
      "nodeContext" : "\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 104,
        "startColumnNumber" : 18,
        "endLineNumber" : 107,
        "endColumnNumber" : 54
      },
      "nodeContext" : "new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 55
      },
      "nodeContext" : "throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 103,
        "startColumnNumber" : 29,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (beans.isEmpty()) {\n  throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 97,
        "startColumnNumber" : 112,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Type fieldType=field.getGenericType();\n  Annotation[] qualifiers=getQualifiers(field);\n  ArcContainer container=Arc.container();\n  BeanManager beanManager=container.beanManager();\n  Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n  if (beans.isEmpty()) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  Bean<?> bean=beanManager.resolve(beans);\n  if (!beanManager.isNormalScope(bean.getScope())) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - the injected bean does not declare a CDI normal scope but: \"+ bean.getScope().getName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  return container.instance((InjectableBean<?>)bean).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1348,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Object getBeanInstance(Object testInstance,Field field,Class<? extends Annotation> annotationType){\n  Type fieldType=field.getGenericType();\n  Annotation[] qualifiers=getQualifiers(field);\n  ArcContainer container=Arc.container();\n  BeanManager beanManager=container.beanManager();\n  Set<Bean<?>> beans=beanManager.getBeans(fieldType,qualifiers);\n  if (beans.isEmpty()) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - could not resolve the bean of type: \"+ fieldType.getTypeName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  Bean<?> bean=beanManager.resolve(beans);\n  if (!beanManager.isNormalScope(bean.getScope())) {\n    throw new IllegalStateException(\"Invalid use of \" + annotationType.getTypeName() + \" - the injected bean does not declare a CDI normal scope but: \"+ bean.getScope().getName()+ \". Offending field is \"+ field.getName()+ \" of test class \"+ testInstance.getClass());\n  }\n  return container.instance((InjectableBean<?>)bean).get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 106,
        "startColumnNumber" : 30,
        "endLineNumber" : 106,
        "endColumnNumber" : 53
      },
      "nodeContext" : "fieldType.getTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Type"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 102,
    "startColumnNumber" : 50,
    "endLineNumber" : 102,
    "endColumnNumber" : 59
  }, {
    "charLength" : 9,
    "startLineNumber" : 106,
    "startColumnNumber" : 30,
    "endLineNumber" : 106,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}