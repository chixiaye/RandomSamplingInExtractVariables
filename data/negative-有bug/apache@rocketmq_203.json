{
  "id" : 203,
  "expression" : "this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup())",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/processor/PullMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 95,
      "startLineNumber" : 98,
      "startColumnNumber" : 40,
      "endLineNumber" : 98,
      "endColumnNumber" : 135
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 98,
        "startColumnNumber" : 25,
        "endLineNumber" : 98,
        "endColumnNumber" : 135
      },
      "nodeContext" : "subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 136
      },
      "nodeContext" : "Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 97,
        "startColumnNumber" : 34,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n  if (null == subscription) {\n    log.warn(\"The consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n    response.setRemark(\"The consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && subscription.getMessageModel() == MessageModel.BROADCASTING) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"The consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n    return response;\n  }\n  subscriptionData=subscription.getSubscriptionData(requestHeader.getTopic());\n  if (null == subscriptionData) {\n    log.warn(\"The consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n    response.setRemark(\"The consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n    return response;\n  }\n  if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n    log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n    response.setRemark(\"The consumer's subscription not latest\");\n    return response;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1953,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!hasSubscriptionFlag) {\n  Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n  if (null == subscription) {\n    log.warn(\"The consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n    response.setRemark(\"The consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && subscription.getMessageModel() == MessageModel.BROADCASTING) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"The consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n    return response;\n  }\n  subscriptionData=subscription.getSubscriptionData(requestHeader.getTopic());\n  if (null == subscriptionData) {\n    log.warn(\"The consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n    response.setRemark(\"The consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n    return response;\n  }\n  if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n    log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n    response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n    response.setRemark(\"The consumer's subscription not latest\");\n    return response;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4689,
        "startLineNumber" : 66,
        "startColumnNumber" : 65,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RemotingCommand response=RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n  response.setOpaque(request.getOpaque());\n  final PullMessageRequestHeader requestHeader=(PullMessageRequestHeader)request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n  SubscriptionGroupConfig subscriptionGroupConfig=this.snodeController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n  if (null == subscriptionGroupConfig) {\n    response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n    response.setRemark(String.format(\"Subscription group [%s] does not exist, %s\",requestHeader.getConsumerGroup(),FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeEnable()) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"Subscription group no permission, \" + requestHeader.getConsumerGroup());\n    return response;\n  }\n  final boolean hasSubscriptionFlag=PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n  if (requestHeader.getQueueId() < 0) {\n    String errorInfo=String.format(\"QueueId[%d] is illegal, topic:[%s] consumer:[%s]\",requestHeader.getQueueId(),requestHeader.getTopic(),remotingChannel.remoteAddress());\n    log.warn(errorInfo);\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(errorInfo);\n    return response;\n  }\n  SubscriptionData subscriptionData;\n  if (!hasSubscriptionFlag) {\n    Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n    if (null == subscription) {\n      log.warn(\"The consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"The consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && subscription.getMessageModel() == MessageModel.BROADCASTING) {\n      response.setCode(ResponseCode.NO_PERMISSION);\n      response.setRemark(\"The consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n      return response;\n    }\n    subscriptionData=subscription.getSubscriptionData(requestHeader.getTopic());\n    if (null == subscriptionData) {\n      log.warn(\"The consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"The consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n      log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n      response.setRemark(\"The consumer's subscription not latest\");\n      return response;\n    }\n  }\n  CompletableFuture<RemotingCommand> responseFuture=snodeController.getEnodeService().pullMessage(requestHeader.getEnodeName(),request);\n  responseFuture.whenComplete((data,ex) -> {\n    if (ex == null) {\n      if (this.snodeController.getConsumeMessageInterceptorGroup() != null) {\n        ResponseContext responseContext=new ResponseContext(request,remotingChannel,data);\n        this.snodeController.getSendMessageInterceptorGroup().afterRequest(responseContext);\n      }\n      remotingChannel.reply(data);\n    }\n else {\n      if (this.snodeController.getConsumeMessageInterceptorGroup() != null) {\n        ExceptionContext exceptionContext=new ExceptionContext(request,remotingChannel,ex,null);\n        this.snodeController.getConsumeMessageInterceptorGroup().onException(exceptionContext);\n      }\n      log.error(\"Pull message error: {}\",ex);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 435,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4823,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RemotingCommand pullMessage(RemotingChannel remotingChannel,RemotingCommand request) throws RemotingCommandException {\n  RemotingCommand response=RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n  response.setOpaque(request.getOpaque());\n  final PullMessageRequestHeader requestHeader=(PullMessageRequestHeader)request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n  SubscriptionGroupConfig subscriptionGroupConfig=this.snodeController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n  if (null == subscriptionGroupConfig) {\n    response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n    response.setRemark(String.format(\"Subscription group [%s] does not exist, %s\",requestHeader.getConsumerGroup(),FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeEnable()) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"Subscription group no permission, \" + requestHeader.getConsumerGroup());\n    return response;\n  }\n  final boolean hasSubscriptionFlag=PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n  if (requestHeader.getQueueId() < 0) {\n    String errorInfo=String.format(\"QueueId[%d] is illegal, topic:[%s] consumer:[%s]\",requestHeader.getQueueId(),requestHeader.getTopic(),remotingChannel.remoteAddress());\n    log.warn(errorInfo);\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(errorInfo);\n    return response;\n  }\n  SubscriptionData subscriptionData;\n  if (!hasSubscriptionFlag) {\n    Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n    if (null == subscription) {\n      log.warn(\"The consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"The consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && subscription.getMessageModel() == MessageModel.BROADCASTING) {\n      response.setCode(ResponseCode.NO_PERMISSION);\n      response.setRemark(\"The consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n      return response;\n    }\n    subscriptionData=subscription.getSubscriptionData(requestHeader.getTopic());\n    if (null == subscriptionData) {\n      log.warn(\"The consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"The consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n      log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n      response.setRemark(\"The consumer's subscription not latest\");\n      return response;\n    }\n  }\n  CompletableFuture<RemotingCommand> responseFuture=snodeController.getEnodeService().pullMessage(requestHeader.getEnodeName(),request);\n  responseFuture.whenComplete((data,ex) -> {\n    if (ex == null) {\n      if (this.snodeController.getConsumeMessageInterceptorGroup() != null) {\n        ResponseContext responseContext=new ResponseContext(request,remotingChannel,data);\n        this.snodeController.getSendMessageInterceptorGroup().afterRequest(responseContext);\n      }\n      remotingChannel.reply(data);\n    }\n else {\n      if (this.snodeController.getConsumeMessageInterceptorGroup() != null) {\n        ExceptionContext exceptionContext=new ExceptionContext(request,remotingChannel,ex,null);\n        this.snodeController.getConsumeMessageInterceptorGroup().onException(exceptionContext);\n      }\n      log.error(\"Pull message error: {}\",ex);\n    }\n  }\n);\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 450,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 136
      },
      "nodeContext" : "Subscription subscription=this.snodeController.getSubscriptionManager().getSubscription(requestHeader.getConsumerGroup());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "org.apache.rocketmq.snode.client.impl.Subscription"
  } ],
  "positionList" : [ {
    "charLength" : 95,
    "startLineNumber" : 98,
    "startColumnNumber" : 40,
    "endLineNumber" : 98,
    "endColumnNumber" : 135
  } ],
  "layoutRelationDataList" : [ ]
}