{
  "id" : 499,
  "expression" : "0",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/ChallengeFlowTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 171,
      "startColumnNumber" : 51,
      "endLineNumber" : 171,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 171,
        "startColumnNumber" : 40,
        "endLineNumber" : 171,
        "endColumnNumber" : 53
      },
      "nodeContext" : "params.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Assert.assertEquals(\"username\",params.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"username\",params.get(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2946,
        "startLineNumber" : 129,
        "startColumnNumber" : 53,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  oauth.clientId(TEST_APP_FLOW);\n  String loginFormUrl=oauth.getLoginFormUrl();\n  Client client=AdminClientUtil.createResteasyClient();\n  WebTarget loginTarget=client.target(loginFormUrl);\n  Response response=loginTarget.request().get();\n  Assert.assertEquals(401,response.getStatus());\n  String authenticateHeader=response.getHeaderString(HttpHeaders.WWW_AUTHENTICATE);\n  Assert.assertNotNull(authenticateHeader);\n  String splash=response.readEntity(String.class);\n  response.close();\n  client.close();\n  client=AdminClientUtil.createResteasyClient();\n  authenticateHeader=authenticateHeader.trim();\n  Pattern callbackPattern=Pattern.compile(\"callback\\\\s*=\\\\s*\\\"([^\\\"]+)\\\"\");\n  Pattern paramPattern=Pattern.compile(\"param=\\\"([^\\\"]+)\\\"\\\\s+label=\\\"([^\\\"]+)\\\"\");\n  Matcher m=callbackPattern.matcher(authenticateHeader);\n  String callback=null;\n  if (m.find()) {\n    callback=m.group(1);\n  }\n  m=paramPattern.matcher(authenticateHeader);\n  List<String> params=new LinkedList<>();\n  List<String> labels=new LinkedList<>();\n  while (m.find()) {\n    String param=m.group(1);\n    String label=m.group(2);\n    params.add(param);\n    labels.add(label);\n  }\n  Assert.assertEquals(\"username\",params.get(0));\n  Assert.assertEquals(\"Username:\",labels.get(0).trim());\n  Assert.assertEquals(\"password\",params.get(1));\n  Assert.assertEquals(\"Password:\",labels.get(1).trim());\n  Form form=new Form();\n  form.param(\"username\",\"test-user@localhost\");\n  form.param(\"password\",\"password\");\n  response=client.target(callback).request().post(Entity.form(form));\n  Assert.assertEquals(302,response.getStatus());\n  String redirect=response.getHeaderString(HttpHeaders.LOCATION);\n  System.out.println(\"------\");\n  System.out.println(redirect);\n  Pattern codePattern=Pattern.compile(\"code=([^&]+)\");\n  m=codePattern.matcher(redirect);\n  Assert.assertTrue(m.find());\n  String code=m.group(1);\n  OAuthClient.AccessTokenResponse oauthResponse=oauth.doAccessTokenRequest(code,\"password\");\n  Assert.assertNotNull(oauthResponse.getAccessToken());\n  client.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testChallengeFlow() throws Exception {\n  oauth.clientId(TEST_APP_FLOW);\n  String loginFormUrl=oauth.getLoginFormUrl();\n  Client client=AdminClientUtil.createResteasyClient();\n  WebTarget loginTarget=client.target(loginFormUrl);\n  Response response=loginTarget.request().get();\n  Assert.assertEquals(401,response.getStatus());\n  String authenticateHeader=response.getHeaderString(HttpHeaders.WWW_AUTHENTICATE);\n  Assert.assertNotNull(authenticateHeader);\n  String splash=response.readEntity(String.class);\n  response.close();\n  client.close();\n  client=AdminClientUtil.createResteasyClient();\n  authenticateHeader=authenticateHeader.trim();\n  Pattern callbackPattern=Pattern.compile(\"callback\\\\s*=\\\\s*\\\"([^\\\"]+)\\\"\");\n  Pattern paramPattern=Pattern.compile(\"param=\\\"([^\\\"]+)\\\"\\\\s+label=\\\"([^\\\"]+)\\\"\");\n  Matcher m=callbackPattern.matcher(authenticateHeader);\n  String callback=null;\n  if (m.find()) {\n    callback=m.group(1);\n  }\n  m=paramPattern.matcher(authenticateHeader);\n  List<String> params=new LinkedList<>();\n  List<String> labels=new LinkedList<>();\n  while (m.find()) {\n    String param=m.group(1);\n    String label=m.group(2);\n    params.add(param);\n    labels.add(label);\n  }\n  Assert.assertEquals(\"username\",params.get(0));\n  Assert.assertEquals(\"Username:\",labels.get(0).trim());\n  Assert.assertEquals(\"password\",params.get(1));\n  Assert.assertEquals(\"Password:\",labels.get(1).trim());\n  Form form=new Form();\n  form.param(\"username\",\"test-user@localhost\");\n  form.param(\"password\",\"password\");\n  response=client.target(callback).request().post(Entity.form(form));\n  Assert.assertEquals(302,response.getStatus());\n  String redirect=response.getHeaderString(HttpHeaders.LOCATION);\n  System.out.println(\"------\");\n  System.out.println(redirect);\n  Pattern codePattern=Pattern.compile(\"code=([^&]+)\");\n  m=codePattern.matcher(redirect);\n  Assert.assertTrue(m.find());\n  String code=m.group(1);\n  OAuthClient.AccessTokenResponse oauthResponse=oauth.doAccessTokenRequest(code,\"password\");\n  Assert.assertNotNull(oauthResponse.getAccessToken());\n  client.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(\"username\",params.get(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 172,
      "startColumnNumber" : 52,
      "endLineNumber" : 172,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 172,
        "startColumnNumber" : 41,
        "endLineNumber" : 172,
        "endColumnNumber" : 54
      },
      "nodeContext" : "labels.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 172,
        "startColumnNumber" : 41,
        "endLineNumber" : 172,
        "endColumnNumber" : 61
      },
      "nodeContext" : "labels.get(0).trim()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(\"Username:\",labels.get(0).trim())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(\"Username:\",labels.get(0).trim());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2946,
        "startLineNumber" : 129,
        "startColumnNumber" : 53,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  oauth.clientId(TEST_APP_FLOW);\n  String loginFormUrl=oauth.getLoginFormUrl();\n  Client client=AdminClientUtil.createResteasyClient();\n  WebTarget loginTarget=client.target(loginFormUrl);\n  Response response=loginTarget.request().get();\n  Assert.assertEquals(401,response.getStatus());\n  String authenticateHeader=response.getHeaderString(HttpHeaders.WWW_AUTHENTICATE);\n  Assert.assertNotNull(authenticateHeader);\n  String splash=response.readEntity(String.class);\n  response.close();\n  client.close();\n  client=AdminClientUtil.createResteasyClient();\n  authenticateHeader=authenticateHeader.trim();\n  Pattern callbackPattern=Pattern.compile(\"callback\\\\s*=\\\\s*\\\"([^\\\"]+)\\\"\");\n  Pattern paramPattern=Pattern.compile(\"param=\\\"([^\\\"]+)\\\"\\\\s+label=\\\"([^\\\"]+)\\\"\");\n  Matcher m=callbackPattern.matcher(authenticateHeader);\n  String callback=null;\n  if (m.find()) {\n    callback=m.group(1);\n  }\n  m=paramPattern.matcher(authenticateHeader);\n  List<String> params=new LinkedList<>();\n  List<String> labels=new LinkedList<>();\n  while (m.find()) {\n    String param=m.group(1);\n    String label=m.group(2);\n    params.add(param);\n    labels.add(label);\n  }\n  Assert.assertEquals(\"username\",params.get(0));\n  Assert.assertEquals(\"Username:\",labels.get(0).trim());\n  Assert.assertEquals(\"password\",params.get(1));\n  Assert.assertEquals(\"Password:\",labels.get(1).trim());\n  Form form=new Form();\n  form.param(\"username\",\"test-user@localhost\");\n  form.param(\"password\",\"password\");\n  response=client.target(callback).request().post(Entity.form(form));\n  Assert.assertEquals(302,response.getStatus());\n  String redirect=response.getHeaderString(HttpHeaders.LOCATION);\n  System.out.println(\"------\");\n  System.out.println(redirect);\n  Pattern codePattern=Pattern.compile(\"code=([^&]+)\");\n  m=codePattern.matcher(redirect);\n  Assert.assertTrue(m.find());\n  String code=m.group(1);\n  OAuthClient.AccessTokenResponse oauthResponse=oauth.doAccessTokenRequest(code,\"password\");\n  Assert.assertNotNull(oauthResponse.getAccessToken());\n  client.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testChallengeFlow() throws Exception {\n  oauth.clientId(TEST_APP_FLOW);\n  String loginFormUrl=oauth.getLoginFormUrl();\n  Client client=AdminClientUtil.createResteasyClient();\n  WebTarget loginTarget=client.target(loginFormUrl);\n  Response response=loginTarget.request().get();\n  Assert.assertEquals(401,response.getStatus());\n  String authenticateHeader=response.getHeaderString(HttpHeaders.WWW_AUTHENTICATE);\n  Assert.assertNotNull(authenticateHeader);\n  String splash=response.readEntity(String.class);\n  response.close();\n  client.close();\n  client=AdminClientUtil.createResteasyClient();\n  authenticateHeader=authenticateHeader.trim();\n  Pattern callbackPattern=Pattern.compile(\"callback\\\\s*=\\\\s*\\\"([^\\\"]+)\\\"\");\n  Pattern paramPattern=Pattern.compile(\"param=\\\"([^\\\"]+)\\\"\\\\s+label=\\\"([^\\\"]+)\\\"\");\n  Matcher m=callbackPattern.matcher(authenticateHeader);\n  String callback=null;\n  if (m.find()) {\n    callback=m.group(1);\n  }\n  m=paramPattern.matcher(authenticateHeader);\n  List<String> params=new LinkedList<>();\n  List<String> labels=new LinkedList<>();\n  while (m.find()) {\n    String param=m.group(1);\n    String label=m.group(2);\n    params.add(param);\n    labels.add(label);\n  }\n  Assert.assertEquals(\"username\",params.get(0));\n  Assert.assertEquals(\"Username:\",labels.get(0).trim());\n  Assert.assertEquals(\"password\",params.get(1));\n  Assert.assertEquals(\"Password:\",labels.get(1).trim());\n  Form form=new Form();\n  form.param(\"username\",\"test-user@localhost\");\n  form.param(\"password\",\"password\");\n  response=client.target(callback).request().post(Entity.form(form));\n  Assert.assertEquals(302,response.getStatus());\n  String redirect=response.getHeaderString(HttpHeaders.LOCATION);\n  System.out.println(\"------\");\n  System.out.println(redirect);\n  Pattern codePattern=Pattern.compile(\"code=([^&]+)\");\n  m=codePattern.matcher(redirect);\n  Assert.assertTrue(m.find());\n  String code=m.group(1);\n  OAuthClient.AccessTokenResponse oauthResponse=oauth.doAccessTokenRequest(code,\"password\");\n  Assert.assertNotNull(oauthResponse.getAccessToken());\n  client.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(\"Username:\",labels.get(0).trim());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 171,
    "startColumnNumber" : 51,
    "endLineNumber" : 171,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 172,
    "startColumnNumber" : 52,
    "endLineNumber" : 172,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}