{
  "id" : 500,
  "expression" : "xs",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/test/java/hudson/util/CopyOnWriteListTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "xs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 56,
      "startColumnNumber" : 21,
      "endLineNumber" : 56,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 56,
        "startColumnNumber" : 21,
        "endLineNumber" : 56,
        "endColumnNumber" : 33
      },
      "nodeContext" : "xs.toXML(td)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 56,
        "startColumnNumber" : 15,
        "endLineNumber" : 56,
        "endColumnNumber" : 33
      },
      "nodeContext" : "out=xs.toXML(td)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 34
      },
      "nodeContext" : "String out=xs.toXML(td);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 52,
        "startColumnNumber" : 32,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that the serialization form of List and CopyOnWriteList are the same.\n */\n@Test public void serialization(){\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 34
      },
      "nodeContext" : "String out=xs.toXML(td);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "hudson.util.XStream2"
  }, {
    "nodeContext" : "xs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 63,
      "startColumnNumber" : 33,
      "endLineNumber" : 63,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 63,
        "startColumnNumber" : 33,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "xs.fromXML(out)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "(TestData)xs.fromXML(out)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 17,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "td2=(TestData)xs.fromXML(out)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 49
      },
      "nodeContext" : "TestData td2=(TestData)xs.fromXML(out);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 52,
        "startColumnNumber" : 32,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that the serialization form of List and CopyOnWriteList are the same.\n */\n@Test public void serialization(){\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 49
      },
      "nodeContext" : "TestData td2=(TestData)xs.fromXML(out);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.util.XStream2"
  }, {
    "nodeContext" : "xs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 69,
      "startColumnNumber" : 14,
      "endLineNumber" : 69,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 69,
        "startColumnNumber" : 14,
        "endLineNumber" : 69,
        "endColumnNumber" : 26
      },
      "nodeContext" : "xs.toXML(td)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 26
      },
      "nodeContext" : "out=xs.toXML(td)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 27
      },
      "nodeContext" : "out=xs.toXML(td);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 52,
        "startColumnNumber" : 32,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that the serialization form of List and CopyOnWriteList are the same.\n */\n@Test public void serialization(){\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 27
      },
      "nodeContext" : "out=xs.toXML(td);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "hudson.util.XStream2"
  }, {
    "nodeContext" : "xs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 75,
      "startColumnNumber" : 24,
      "endLineNumber" : 75,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "xs.fromXML(out)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 75,
        "startColumnNumber" : 14,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "(TestData)xs.fromXML(out)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "td2=(TestData)xs.fromXML(out)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "td2=(TestData)xs.fromXML(out);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 52,
        "startColumnNumber" : 32,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that the serialization form of List and CopyOnWriteList are the same.\n */\n@Test public void serialization(){\n  XStream2 xs=new XStream2();\n  TestData td=new TestData();\n  String out=xs.toXML(td);\n  String expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1/><list2/></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  TestData td2=(TestData)xs.fromXML(out);\n  assertTrue(td2.list1.isEmpty());\n  assertTrue(td2.list2.isEmpty());\n  td.list1.add(\"foobar1\");\n  td.list2.add(\"foobar2\");\n  out=xs.toXML(td);\n  expected=\"<hudson.util.CopyOnWriteListTest_-TestData>\" + \"<list1><string>foobar1</string></list1><list2><string>foobar2\" + \"</string></list2></hudson.util.CopyOnWriteListTest_-TestData>\";\n  assertThat(out,isSimilarTo(expected).ignoreWhitespace().withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)));\n  td2=(TestData)xs.fromXML(out);\n  assertEquals(\"foobar1\",td2.list1.getView().get(0));\n  assertEquals(\"foobar2\",td2.list2.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "td2=(TestData)xs.fromXML(out);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.util.XStream2"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 56,
    "startColumnNumber" : 21,
    "endLineNumber" : 56,
    "endColumnNumber" : 23
  }, {
    "charLength" : 2,
    "startLineNumber" : 63,
    "startColumnNumber" : 33,
    "endLineNumber" : 63,
    "endColumnNumber" : 35
  }, {
    "charLength" : 2,
    "startLineNumber" : 69,
    "startColumnNumber" : 14,
    "endLineNumber" : 69,
    "endColumnNumber" : 16
  }, {
    "charLength" : 2,
    "startLineNumber" : 75,
    "startColumnNumber" : 24,
    "endLineNumber" : 75,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}