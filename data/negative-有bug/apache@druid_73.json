{
  "id" : 73,
  "expression" : "JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 202,
      "startColumnNumber" : 15,
      "endLineNumber" : 202,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 71
      },
      "nodeContext" : "fields.add(JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 72
      },
      "nodeContext" : "fields.add(JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3278,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 262,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<JSONPathFieldSpec> fields=new ArrayList<>();\n  fields.add(JSONPathFieldSpec.createNestedField(\"foobar1\",\"$.foo.bar1\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"foobar2\",\"$.foo.bar2\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz0\",\"$.baz[0]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz1\",\"$.baz[1]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"hey0barx\",\"$.hey[0].barx\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"metA\",\"$.met.a\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"missing\",\"$.nonexistent.nested.field\"));\n  fields.add(JSONPathFieldSpec.createRootField(\"timestamp\"));\n  fields.add(JSONPathFieldSpec.createRootField(\"foo.bar1\"));\n  JSONPathSpec flattenSpec=new JSONPathSpec(true,fields);\n  final StringInputRowParser parser=new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\",null),new DimensionsSpec(null,null,null),flattenSpec,null,null),null);\n  final StringInputRowParser parser2=jsonMapper.readValue(jsonMapper.writeValueAsBytes(parser),StringInputRowParser.class);\n  final InputRow parsed=parser2.parse(\"{\\\"blah\\\":[4,5,6], \\\"newmet\\\":5, \\\"foo\\\":{\\\"bar1\\\":\\\"aaa\\\", \\\"bar2\\\":\\\"bbb\\\"}, \\\"baz\\\":[1,2,3], \\\"timestamp\\\":\\\"2999\\\", \\\"foo.bar1\\\":\\\"Hello world!\\\", \\\"hey\\\":[{\\\"barx\\\":\\\"asdf\\\"}], \\\"met\\\":{\\\"a\\\":456}}\");\n  Assert.assertEquals(ImmutableList.of(\"foobar1\",\"foobar2\",\"baz0\",\"baz1\",\"baz2\",\"hey0barx\",\"metA\",\"missing\",\"timestamp\",\"foo.bar1\",\"blah\",\"newmet\",\"baz\"),parsed.getDimensions());\n  Assert.assertEquals(ImmutableList.of(\"aaa\"),parsed.getDimension(\"foobar1\"));\n  Assert.assertEquals(ImmutableList.of(\"bbb\"),parsed.getDimension(\"foobar2\"));\n  Assert.assertEquals(ImmutableList.of(\"1\"),parsed.getDimension(\"baz0\"));\n  Assert.assertEquals(ImmutableList.of(\"2\"),parsed.getDimension(\"baz1\"));\n  Assert.assertEquals(ImmutableList.of(\"3\"),parsed.getDimension(\"baz2\"));\n  Assert.assertEquals(ImmutableList.of(\"Hello world!\"),parsed.getDimension(\"foo.bar1\"));\n  Assert.assertEquals(ImmutableList.of(\"asdf\"),parsed.getDimension(\"hey0barx\"));\n  Assert.assertEquals(ImmutableList.of(\"456\"),parsed.getDimension(\"metA\"));\n  Assert.assertEquals(ImmutableList.of(\"5\"),parsed.getDimension(\"newmet\"));\n  Assert.assertEquals(ImmutableList.of(),parsed.getDimension(\"missing\"));\n  Assert.assertEquals(DateTimes.of(\"2999\").getMillis(),parsed.getTimestampFromEpoch());\n  String testSpec=\"{\\\"enabled\\\": true,\\\"useFieldDiscovery\\\": true, \\\"fields\\\": [\\\"parseThisRootField\\\"]}\";\n  final JSONPathSpec parsedSpec=jsonMapper.readValue(testSpec,JSONPathSpec.class);\n  List<JSONPathFieldSpec> fieldSpecs=parsedSpec.getFields();\n  Assert.assertEquals(JSONPathFieldType.ROOT,fieldSpecs.get(0).getType());\n  Assert.assertEquals(\"parseThisRootField\",fieldSpecs.get(0).getName());\n  Assert.assertEquals(\"parseThisRootField\",fieldSpecs.get(0).getExpr());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 385,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3336,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 262,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFlattenParse() throws Exception {\n  List<JSONPathFieldSpec> fields=new ArrayList<>();\n  fields.add(JSONPathFieldSpec.createNestedField(\"foobar1\",\"$.foo.bar1\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"foobar2\",\"$.foo.bar2\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz0\",\"$.baz[0]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz1\",\"$.baz[1]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"hey0barx\",\"$.hey[0].barx\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"metA\",\"$.met.a\"));\n  fields.add(JSONPathFieldSpec.createNestedField(\"missing\",\"$.nonexistent.nested.field\"));\n  fields.add(JSONPathFieldSpec.createRootField(\"timestamp\"));\n  fields.add(JSONPathFieldSpec.createRootField(\"foo.bar1\"));\n  JSONPathSpec flattenSpec=new JSONPathSpec(true,fields);\n  final StringInputRowParser parser=new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\",null),new DimensionsSpec(null,null,null),flattenSpec,null,null),null);\n  final StringInputRowParser parser2=jsonMapper.readValue(jsonMapper.writeValueAsBytes(parser),StringInputRowParser.class);\n  final InputRow parsed=parser2.parse(\"{\\\"blah\\\":[4,5,6], \\\"newmet\\\":5, \\\"foo\\\":{\\\"bar1\\\":\\\"aaa\\\", \\\"bar2\\\":\\\"bbb\\\"}, \\\"baz\\\":[1,2,3], \\\"timestamp\\\":\\\"2999\\\", \\\"foo.bar1\\\":\\\"Hello world!\\\", \\\"hey\\\":[{\\\"barx\\\":\\\"asdf\\\"}], \\\"met\\\":{\\\"a\\\":456}}\");\n  Assert.assertEquals(ImmutableList.of(\"foobar1\",\"foobar2\",\"baz0\",\"baz1\",\"baz2\",\"hey0barx\",\"metA\",\"missing\",\"timestamp\",\"foo.bar1\",\"blah\",\"newmet\",\"baz\"),parsed.getDimensions());\n  Assert.assertEquals(ImmutableList.of(\"aaa\"),parsed.getDimension(\"foobar1\"));\n  Assert.assertEquals(ImmutableList.of(\"bbb\"),parsed.getDimension(\"foobar2\"));\n  Assert.assertEquals(ImmutableList.of(\"1\"),parsed.getDimension(\"baz0\"));\n  Assert.assertEquals(ImmutableList.of(\"2\"),parsed.getDimension(\"baz1\"));\n  Assert.assertEquals(ImmutableList.of(\"3\"),parsed.getDimension(\"baz2\"));\n  Assert.assertEquals(ImmutableList.of(\"Hello world!\"),parsed.getDimension(\"foo.bar1\"));\n  Assert.assertEquals(ImmutableList.of(\"asdf\"),parsed.getDimension(\"hey0barx\"));\n  Assert.assertEquals(ImmutableList.of(\"456\"),parsed.getDimension(\"metA\"));\n  Assert.assertEquals(ImmutableList.of(\"5\"),parsed.getDimension(\"newmet\"));\n  Assert.assertEquals(ImmutableList.of(),parsed.getDimension(\"missing\"));\n  Assert.assertEquals(DateTimes.of(\"2999\").getMillis(),parsed.getTimestampFromEpoch());\n  String testSpec=\"{\\\"enabled\\\": true,\\\"useFieldDiscovery\\\": true, \\\"fields\\\": [\\\"parseThisRootField\\\"]}\";\n  final JSONPathSpec parsedSpec=jsonMapper.readValue(testSpec,JSONPathSpec.class);\n  List<JSONPathFieldSpec> fieldSpecs=parsedSpec.getFields();\n  Assert.assertEquals(JSONPathFieldType.ROOT,fieldSpecs.get(0).getType());\n  Assert.assertEquals(\"parseThisRootField\",fieldSpecs.get(0).getName());\n  Assert.assertEquals(\"parseThisRootField\",fieldSpecs.get(0).getExpr());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 393,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 72
      },
      "nodeContext" : "fields.add(JSONPathFieldSpec.createNestedField(\"baz2\",\"$.baz[2]\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "org.apache.druid.java.util.common.parsers.JSONPathFieldSpec"
  } ],
  "positionList" : [ {
    "charLength" : 55,
    "startLineNumber" : 202,
    "startColumnNumber" : 15,
    "endLineNumber" : 202,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}