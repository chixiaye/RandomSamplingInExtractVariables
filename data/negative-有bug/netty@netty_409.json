{
  "id" : 409,
  "expression" : "!partUncompressedContent.isReadable()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/DeflateDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!partUncompressedContent.isReadable()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 128,
      "startColumnNumber" : 16,
      "endLineNumber" : 128,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!partUncompressedContent.isReadable()) {\n  partUncompressedContent.release();\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 123,
        "startColumnNumber" : 17,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ByteBuf partUncompressedContent=decoder.readInbound();\n  if (partUncompressedContent == null) {\n    break;\n  }\n  if (!partUncompressedContent.isReadable()) {\n    partUncompressedContent.release();\n    continue;\n  }\n  compositeDecompressedContent.addComponent(true,partUncompressedContent);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  ByteBuf partUncompressedContent=decoder.readInbound();\n  if (partUncompressedContent == null) {\n    break;\n  }\n  if (!partUncompressedContent.isReadable()) {\n    partUncompressedContent.release();\n    continue;\n  }\n  compositeDecompressedContent.addComponent(true,partUncompressedContent);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 106,
        "startColumnNumber" : 85,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (decoder == null) {\n    if (!(msg instanceof TextWebSocketFrame) && !(msg instanceof BinaryWebSocketFrame)) {\n      throw new CodecException(\"unexpected initial frame type: \" + msg.getClass().getName());\n    }\n    decoder=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));\n  }\n  boolean readable=msg.content().isReadable();\n  boolean emptyDeflateBlock=EMPTY_DEFLATE_BLOCK.equals(msg.content());\n  decoder.writeInbound(msg.content().retain());\n  if (appendFrameTail(msg)) {\n    decoder.writeInbound(FRAME_TAIL.duplicate());\n  }\n  CompositeByteBuf compositeDecompressedContent=ctx.alloc().compositeBuffer();\n  for (; ; ) {\n    ByteBuf partUncompressedContent=decoder.readInbound();\n    if (partUncompressedContent == null) {\n      break;\n    }\n    if (!partUncompressedContent.isReadable()) {\n      partUncompressedContent.release();\n      continue;\n    }\n    compositeDecompressedContent.addComponent(true,partUncompressedContent);\n  }\n  if (!emptyDeflateBlock && readable && compositeDecompressedContent.numComponents() <= 0) {\n    if (!(msg instanceof ContinuationWebSocketFrame)) {\n      compositeDecompressedContent.release();\n      throw new CodecException(\"cannot read uncompressed buffer\");\n    }\n  }\n  if (msg.isFinalFragment() && noContext) {\n    cleanup();\n  }\n  return compositeDecompressedContent;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1970,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ByteBuf decompressContent(ChannelHandlerContext ctx,WebSocketFrame msg){\n  if (decoder == null) {\n    if (!(msg instanceof TextWebSocketFrame) && !(msg instanceof BinaryWebSocketFrame)) {\n      throw new CodecException(\"unexpected initial frame type: \" + msg.getClass().getName());\n    }\n    decoder=new EmbeddedChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE));\n  }\n  boolean readable=msg.content().isReadable();\n  boolean emptyDeflateBlock=EMPTY_DEFLATE_BLOCK.equals(msg.content());\n  decoder.writeInbound(msg.content().retain());\n  if (appendFrameTail(msg)) {\n    decoder.writeInbound(FRAME_TAIL.duplicate());\n  }\n  CompositeByteBuf compositeDecompressedContent=ctx.alloc().compositeBuffer();\n  for (; ; ) {\n    ByteBuf partUncompressedContent=decoder.readInbound();\n    if (partUncompressedContent == null) {\n      break;\n    }\n    if (!partUncompressedContent.isReadable()) {\n      partUncompressedContent.release();\n      continue;\n    }\n    compositeDecompressedContent.addComponent(true,partUncompressedContent);\n  }\n  if (!emptyDeflateBlock && readable && compositeDecompressedContent.numComponents() <= 0) {\n    if (!(msg instanceof ContinuationWebSocketFrame)) {\n      compositeDecompressedContent.release();\n      throw new CodecException(\"cannot read uncompressed buffer\");\n    }\n  }\n  if (msg.isFinalFragment() && noContext) {\n    cleanup();\n  }\n  return compositeDecompressedContent;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!partUncompressedContent.isReadable()) {\n  partUncompressedContent.release();\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 128,
    "startColumnNumber" : 16,
    "endLineNumber" : 128,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}