{
  "id" : 116,
  "expression" : "new HashSet<ATNState>()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/tool/DOTGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HashSet<ATNState>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 185,
      "startColumnNumber" : 31,
      "endLineNumber" : 185,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 54
      },
      "nodeContext" : "markedStates=new HashSet<ATNState>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Set<ATNState> markedStates=new HashSet<ATNState>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5651,
        "startLineNumber" : 181,
        "startColumnNumber" : 80,
        "endLineNumber" : 330,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (startState == null)   return null;\n  Set<ATNState> markedStates=new HashSet<ATNState>();\n  ST dot=stlib.getInstanceOf(\"atn\");\n  dot.add(\"startState\",startState.stateNumber);\n  dot.add(\"rankdir\",rankdir);\n  List<ATNState> work=new LinkedList<ATNState>();\n  work.add(startState);\n  while (!work.isEmpty()) {\n    ATNState s=work.get(0);\n    if (markedStates.contains(s)) {\n      work.remove(0);\n      continue;\n    }\n    markedStates.add(s);\n    if (s instanceof RuleStopState)     continue;\n    ST edgeST;\n    for (int i=0; i < s.getNumberOfTransitions(); i++) {\n      Transition edge=s.transition(i);\n      if (edge instanceof RuleTransition) {\n        RuleTransition rr=((RuleTransition)edge);\n        edgeST=stlib.getInstanceOf(\"edge\");\n        String label=\"<\" + ruleNames[rr.ruleIndex];\n        if (((RuleStartState)rr.target).isLeftRecursiveRule) {\n          label+=\"[\" + rr.precedence + \"]\";\n        }\n        label+=\">\";\n        edgeST.add(\"label\",label);\n        edgeST.add(\"src\",\"s\" + s.stateNumber);\n        edgeST.add(\"target\",\"s\" + rr.followState.stateNumber);\n        edgeST.add(\"arrowhead\",arrowhead);\n        dot.add(\"edges\",edgeST);\n        work.add(rr.followState);\n        continue;\n      }\n      if (edge instanceof ActionTransition) {\n        edgeST=stlib.getInstanceOf(\"action-edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n else       if (edge instanceof AbstractPredicateTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n else       if (edge.isEpsilon()) {\n        edgeST=stlib.getInstanceOf(\"epsilon-edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n        boolean loopback=false;\n        if (edge.target instanceof PlusBlockStartState) {\n          loopback=s.equals(((PlusBlockStartState)edge.target).loopBackState);\n        }\n else         if (edge.target instanceof StarLoopEntryState) {\n          loopback=s.equals(((StarLoopEntryState)edge.target).loopBackState);\n        }\n        edgeST.add(\"loopback\",loopback);\n      }\n else       if (edge instanceof AtomTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        AtomTransition atom=(AtomTransition)edge;\n        String label=String.valueOf(atom.label);\n        if (isLexer)         label=\"'\" + getEdgeLabel(new StringBuilder().appendCodePoint(atom.label).toString()) + \"'\";\n else         if (grammar != null)         label=grammar.getTokenDisplayName(atom.label);\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else       if (edge instanceof SetTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        SetTransition set=(SetTransition)edge;\n        String label=set.label().toString();\n        if (isLexer)         label=set.label().toString(true);\n else         if (grammar != null)         label=set.label().toString(grammar.getVocabulary());\n        if (edge instanceof NotSetTransition)         label=\"~\" + label;\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else       if (edge instanceof RangeTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        RangeTransition range=(RangeTransition)edge;\n        String label=range.label().toString();\n        if (isLexer)         label=range.toString();\n else         if (grammar != null)         label=range.label().toString(grammar.getVocabulary());\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n      edgeST.add(\"src\",\"s\" + s.stateNumber);\n      edgeST.add(\"target\",\"s\" + edge.target.stateNumber);\n      edgeST.add(\"arrowhead\",arrowhead);\n      if (s.getNumberOfTransitions() > 1) {\n        edgeST.add(\"transitionIndex\",i);\n      }\n else {\n        edgeST.add(\"transitionIndex\",false);\n      }\n      dot.add(\"edges\",edgeST);\n      work.add(edge.target);\n    }\n  }\n  for (  ATNState s : markedStates) {\n    if (!(s instanceof RuleStopState))     continue;\n    ST st=stlib.getInstanceOf(\"stopstate\");\n    st.add(\"name\",\"s\" + s.stateNumber);\n    st.add(\"label\",getStateLabel(s));\n    dot.add(\"states\",st);\n  }\n  for (  ATNState s : markedStates) {\n    if (s instanceof RuleStopState)     continue;\n    ST st=stlib.getInstanceOf(\"state\");\n    st.add(\"name\",\"s\" + s.stateNumber);\n    st.add(\"label\",getStateLabel(s));\n    st.add(\"transitions\",s.getTransitions());\n    dot.add(\"states\",st);\n  }\n  return dot.render();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 760,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5932,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 330,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Return a String containing a DOT description that, when displayed, will show the incoming state machine visually.  All nodes reachable from startState will be included.\n */\npublic String getDOT(ATNState startState,String[] ruleNames,boolean isLexer){\n  if (startState == null)   return null;\n  Set<ATNState> markedStates=new HashSet<ATNState>();\n  ST dot=stlib.getInstanceOf(\"atn\");\n  dot.add(\"startState\",startState.stateNumber);\n  dot.add(\"rankdir\",rankdir);\n  List<ATNState> work=new LinkedList<ATNState>();\n  work.add(startState);\n  while (!work.isEmpty()) {\n    ATNState s=work.get(0);\n    if (markedStates.contains(s)) {\n      work.remove(0);\n      continue;\n    }\n    markedStates.add(s);\n    if (s instanceof RuleStopState)     continue;\n    ST edgeST;\n    for (int i=0; i < s.getNumberOfTransitions(); i++) {\n      Transition edge=s.transition(i);\n      if (edge instanceof RuleTransition) {\n        RuleTransition rr=((RuleTransition)edge);\n        edgeST=stlib.getInstanceOf(\"edge\");\n        String label=\"<\" + ruleNames[rr.ruleIndex];\n        if (((RuleStartState)rr.target).isLeftRecursiveRule) {\n          label+=\"[\" + rr.precedence + \"]\";\n        }\n        label+=\">\";\n        edgeST.add(\"label\",label);\n        edgeST.add(\"src\",\"s\" + s.stateNumber);\n        edgeST.add(\"target\",\"s\" + rr.followState.stateNumber);\n        edgeST.add(\"arrowhead\",arrowhead);\n        dot.add(\"edges\",edgeST);\n        work.add(rr.followState);\n        continue;\n      }\n      if (edge instanceof ActionTransition) {\n        edgeST=stlib.getInstanceOf(\"action-edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n else       if (edge instanceof AbstractPredicateTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n else       if (edge.isEpsilon()) {\n        edgeST=stlib.getInstanceOf(\"epsilon-edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n        boolean loopback=false;\n        if (edge.target instanceof PlusBlockStartState) {\n          loopback=s.equals(((PlusBlockStartState)edge.target).loopBackState);\n        }\n else         if (edge.target instanceof StarLoopEntryState) {\n          loopback=s.equals(((StarLoopEntryState)edge.target).loopBackState);\n        }\n        edgeST.add(\"loopback\",loopback);\n      }\n else       if (edge instanceof AtomTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        AtomTransition atom=(AtomTransition)edge;\n        String label=String.valueOf(atom.label);\n        if (isLexer)         label=\"'\" + getEdgeLabel(new StringBuilder().appendCodePoint(atom.label).toString()) + \"'\";\n else         if (grammar != null)         label=grammar.getTokenDisplayName(atom.label);\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else       if (edge instanceof SetTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        SetTransition set=(SetTransition)edge;\n        String label=set.label().toString();\n        if (isLexer)         label=set.label().toString(true);\n else         if (grammar != null)         label=set.label().toString(grammar.getVocabulary());\n        if (edge instanceof NotSetTransition)         label=\"~\" + label;\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else       if (edge instanceof RangeTransition) {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        RangeTransition range=(RangeTransition)edge;\n        String label=range.label().toString();\n        if (isLexer)         label=range.toString();\n else         if (grammar != null)         label=range.label().toString(grammar.getVocabulary());\n        edgeST.add(\"label\",getEdgeLabel(label));\n      }\n else {\n        edgeST=stlib.getInstanceOf(\"edge\");\n        edgeST.add(\"label\",getEdgeLabel(edge.toString()));\n      }\n      edgeST.add(\"src\",\"s\" + s.stateNumber);\n      edgeST.add(\"target\",\"s\" + edge.target.stateNumber);\n      edgeST.add(\"arrowhead\",arrowhead);\n      if (s.getNumberOfTransitions() > 1) {\n        edgeST.add(\"transitionIndex\",i);\n      }\n else {\n        edgeST.add(\"transitionIndex\",false);\n      }\n      dot.add(\"edges\",edgeST);\n      work.add(edge.target);\n    }\n  }\n  for (  ATNState s : markedStates) {\n    if (!(s instanceof RuleStopState))     continue;\n    ST st=stlib.getInstanceOf(\"stopstate\");\n    st.add(\"name\",\"s\" + s.stateNumber);\n    st.add(\"label\",getStateLabel(s));\n    dot.add(\"states\",st);\n  }\n  for (  ATNState s : markedStates) {\n    if (s instanceof RuleStopState)     continue;\n    ST st=stlib.getInstanceOf(\"state\");\n    st.add(\"name\",\"s\" + s.stateNumber);\n    st.add(\"label\",getStateLabel(s));\n    st.add(\"transitions\",s.getTransitions());\n    dot.add(\"states\",st);\n  }\n  return dot.render();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 779,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Set<ATNState> markedStates=new HashSet<ATNState>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.HashSet<org.antlr.v4.runtime.atn.ATNState>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 185,
    "startColumnNumber" : 31,
    "endLineNumber" : 185,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}