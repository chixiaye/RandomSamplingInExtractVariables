{
  "id" : 481,
  "expression" : "StickerPackOperationMessage.Type.INSTALL",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/libsignal/service/src/main/java/org/whispersystems/signalservice/api/messages/SignalServiceContent.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StickerPackOperationMessage.Type.INSTALL",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 699,
      "startColumnNumber" : 33,
      "endLineNumber" : 699,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 699,
        "startColumnNumber" : 26,
        "endLineNumber" : 699,
        "endColumnNumber" : 73
      },
      "nodeContext" : "type=StickerPackOperationMessage.Type.INSTALL",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 699,
        "startColumnNumber" : 26,
        "endLineNumber" : 699,
        "endColumnNumber" : 74
      },
      "nodeContext" : "type=StickerPackOperationMessage.Type.INSTALL;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 698,
        "startColumnNumber" : 10,
        "endLineNumber" : 701,
        "endColumnNumber" : 11
      },
      "nodeContext" : "switch (operation.getType()) {\ncase INSTALL:  type=StickerPackOperationMessage.Type.INSTALL;\nbreak;\ncase REMOVE:type=StickerPackOperationMessage.Type.REMOVE;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 697,
        "startColumnNumber" : 33,
        "endLineNumber" : 702,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (operation.getType()) {\ncase INSTALL:    type=StickerPackOperationMessage.Type.INSTALL;\n  break;\ncase REMOVE:type=StickerPackOperationMessage.Type.REMOVE;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 697,
        "startColumnNumber" : 8,
        "endLineNumber" : 702,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:    type=StickerPackOperationMessage.Type.INSTALL;\n  break;\ncase REMOVE:type=StickerPackOperationMessage.Type.REMOVE;\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 648,
        "startLineNumber" : 692,
        "startColumnNumber" : 115,
        "endLineNumber" : 704,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n  byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n  StickerPackOperationMessage.Type type=null;\n  if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:      type=StickerPackOperationMessage.Type.INSTALL;\n    break;\ncase REMOVE:  type=StickerPackOperationMessage.Type.REMOVE;\nbreak;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 692,
        "startColumnNumber" : 6,
        "endLineNumber" : 704,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (SignalServiceProtos.SyncMessage.StickerPackOperation operation : content.getStickerPackOperationList()) {\n  byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n  byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n  StickerPackOperationMessage.Type type=null;\n  if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:      type=StickerPackOperationMessage.Type.INSTALL;\n    break;\ncase REMOVE:  type=StickerPackOperationMessage.Type.REMOVE;\nbreak;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 922,
        "startLineNumber" : 689,
        "startColumnNumber" : 58,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<StickerPackOperationMessage> operations=new LinkedList<>();\n  for (  SignalServiceProtos.SyncMessage.StickerPackOperation operation : content.getStickerPackOperationList()) {\n    byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n    byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n    StickerPackOperationMessage.Type type=null;\n    if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:        type=StickerPackOperationMessage.Type.INSTALL;\n      break;\ncase REMOVE:    type=StickerPackOperationMessage.Type.REMOVE;\n  break;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\nreturn SignalServiceSyncMessage.forStickerPackOperations(operations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 976,
        "startLineNumber" : 689,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (content.getStickerPackOperationList().size() > 0) {\n  List<StickerPackOperationMessage> operations=new LinkedList<>();\n  for (  SignalServiceProtos.SyncMessage.StickerPackOperation operation : content.getStickerPackOperationList()) {\n    byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n    byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n    StickerPackOperationMessage.Type type=null;\n    if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:        type=StickerPackOperationMessage.Type.INSTALL;\n      break;\ncase REMOVE:    type=StickerPackOperationMessage.Type.REMOVE;\n  break;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\nreturn SignalServiceSyncMessage.forStickerPackOperations(operations);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13303,
        "startLineNumber" : 585,
        "startColumnNumber" : 2,
        "endLineNumber" : 813,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (content.hasSent()) {\n    Map<SignalServiceAddress,Boolean> unidentifiedStatuses=new HashMap<>();\n    SignalServiceProtos.SyncMessage.Sent sentContent=content.getSent();\n    SignalServiceDataMessage dataMessage=createSignalServiceMessage(metadata,sentContent.getMessage());\n    Optional<SignalServiceAddress> address=SignalServiceAddress.isValidAddress(sentContent.getDestinationUuid(),sentContent.getDestinationE164()) ? Optional.of(new SignalServiceAddress(UuidUtil.parseOrThrow(sentContent.getDestinationUuid()),sentContent.getDestinationE164())) : Optional.<SignalServiceAddress>absent();\n    if (!address.isPresent() && !dataMessage.getGroupContext().isPresent()) {\n      throw new InvalidMessageStructureException(\"SyncMessage missing both destination and group ID!\");\n    }\n    for (    SignalServiceProtos.SyncMessage.Sent.UnidentifiedDeliveryStatus status : sentContent.getUnidentifiedStatusList()) {\n      if (SignalServiceAddress.isValidAddress(status.getDestinationUuid(),status.getDestinationE164())) {\n        SignalServiceAddress recipient=new SignalServiceAddress(UuidUtil.parseOrThrow(status.getDestinationUuid()),status.getDestinationE164());\n        unidentifiedStatuses.put(recipient,status.getUnidentified());\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid UnidentifiedDeliveryStatus in a SentTranscript! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forSentTranscript(new SentTranscriptMessage(address,sentContent.getTimestamp(),dataMessage,sentContent.getExpirationStartTimestamp(),unidentifiedStatuses,sentContent.getIsRecipientUpdate()));\n  }\n  if (content.hasRequest()) {\n    return SignalServiceSyncMessage.forRequest(new RequestMessage(content.getRequest()));\n  }\n  if (content.getReadList().size() > 0) {\n    List<ReadMessage> readMessages=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.Read read : content.getReadList()) {\n      if (SignalServiceAddress.isValidAddress(read.getSenderUuid(),read.getSenderE164())) {\n        SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(read.getSenderUuid()),read.getSenderE164());\n        readMessages.add(new ReadMessage(address,read.getTimestamp()));\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid ReadMessage! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forRead(readMessages);\n  }\n  if (content.getViewedList().size() > 0) {\n    List<ViewedMessage> viewedMessages=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.Viewed viewed : content.getViewedList()) {\n      if (SignalServiceAddress.isValidAddress(viewed.getSenderUuid(),viewed.getSenderE164())) {\n        SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(viewed.getSenderUuid()),viewed.getSenderE164());\n        viewedMessages.add(new ViewedMessage(address,viewed.getTimestamp()));\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid ReadMessage! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forViewed(viewedMessages);\n  }\n  if (content.hasViewOnceOpen()) {\n    if (SignalServiceAddress.isValidAddress(content.getViewOnceOpen().getSenderUuid(),content.getViewOnceOpen().getSenderE164())) {\n      SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(content.getViewOnceOpen().getSenderUuid()),content.getViewOnceOpen().getSenderE164());\n      ViewOnceOpenMessage timerRead=new ViewOnceOpenMessage(address,content.getViewOnceOpen().getTimestamp());\n      return SignalServiceSyncMessage.forViewOnceOpen(timerRead);\n    }\n else {\n      throw new InvalidMessageStructureException(\"ViewOnceOpen message has no sender!\");\n    }\n  }\n  if (content.hasVerified()) {\n    if (SignalServiceAddress.isValidAddress(content.getVerified().getDestinationUuid(),content.getVerified().getDestinationE164())) {\n      try {\n        SignalServiceProtos.Verified verified=content.getVerified();\n        SignalServiceAddress destination=new SignalServiceAddress(UuidUtil.parseOrThrow(verified.getDestinationUuid()),verified.getDestinationE164());\n        IdentityKey identityKey=new IdentityKey(verified.getIdentityKey().toByteArray(),0);\n        VerifiedMessage.VerifiedState verifiedState;\n        if (verified.getState() == SignalServiceProtos.Verified.State.DEFAULT) {\n          verifiedState=VerifiedMessage.VerifiedState.DEFAULT;\n        }\n else         if (verified.getState() == SignalServiceProtos.Verified.State.VERIFIED) {\n          verifiedState=VerifiedMessage.VerifiedState.VERIFIED;\n        }\n else         if (verified.getState() == SignalServiceProtos.Verified.State.UNVERIFIED) {\n          verifiedState=VerifiedMessage.VerifiedState.UNVERIFIED;\n        }\n else {\n          throw new InvalidMessageStructureException(\"Unknown state: \" + verified.getState().getNumber(),metadata.getSender().getIdentifier(),metadata.getSenderDevice());\n        }\n        return SignalServiceSyncMessage.forVerified(new VerifiedMessage(destination,identityKey,verifiedState,System.currentTimeMillis()));\n      }\n catch (      InvalidKeyException e) {\n        throw new ProtocolInvalidKeyException(e,metadata.getSender().getIdentifier(),metadata.getSenderDevice());\n      }\n    }\n else {\n      throw new InvalidMessageStructureException(\"Verified message has no sender!\");\n    }\n  }\n  if (content.getStickerPackOperationList().size() > 0) {\n    List<StickerPackOperationMessage> operations=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.StickerPackOperation operation : content.getStickerPackOperationList()) {\n      byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n      byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n      StickerPackOperationMessage.Type type=null;\n      if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:          type=StickerPackOperationMessage.Type.INSTALL;\n        break;\ncase REMOVE:      type=StickerPackOperationMessage.Type.REMOVE;\n    break;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\nreturn SignalServiceSyncMessage.forStickerPackOperations(operations);\n}\nif (content.hasBlocked()) {\nList<String> numbers=content.getBlocked().getNumbersList();\nList<String> uuids=content.getBlocked().getUuidsList();\nList<SignalServiceAddress> addresses=new ArrayList<>(numbers.size() + uuids.size());\nList<byte[]> groupIds=new ArrayList<>(content.getBlocked().getGroupIdsList().size());\nfor (String uuid : uuids) {\nOptional<SignalServiceAddress> address=SignalServiceAddress.fromRaw(uuid,null);\nif (address.isPresent()) {\naddresses.add(address.get());\n}\n}\nfor (ByteString groupId : content.getBlocked().getGroupIdsList()) {\ngroupIds.add(groupId.toByteArray());\n}\nreturn SignalServiceSyncMessage.forBlocked(new BlockedListMessage(addresses,groupIds));\n}\nif (content.hasConfiguration()) {\nBoolean readReceipts=content.getConfiguration().hasReadReceipts() ? content.getConfiguration().getReadReceipts() : null;\nBoolean unidentifiedDeliveryIndicators=content.getConfiguration().hasUnidentifiedDeliveryIndicators() ? content.getConfiguration().getUnidentifiedDeliveryIndicators() : null;\nBoolean typingIndicators=content.getConfiguration().hasTypingIndicators() ? content.getConfiguration().getTypingIndicators() : null;\nBoolean linkPreviews=content.getConfiguration().hasLinkPreviews() ? content.getConfiguration().getLinkPreviews() : null;\nreturn SignalServiceSyncMessage.forConfiguration(new ConfigurationMessage(Optional.fromNullable(readReceipts),Optional.fromNullable(unidentifiedDeliveryIndicators),Optional.fromNullable(typingIndicators),Optional.fromNullable(linkPreviews)));\n}\nif (content.hasFetchLatest() && content.getFetchLatest().hasType()) {\nswitch (content.getFetchLatest().getType()) {\ncase LOCAL_PROFILE:return SignalServiceSyncMessage.forFetchLatest(SignalServiceSyncMessage.FetchType.LOCAL_PROFILE);\ncase STORAGE_MANIFEST:return SignalServiceSyncMessage.forFetchLatest(SignalServiceSyncMessage.FetchType.STORAGE_MANIFEST);\n}\n}\nif (content.hasMessageRequestResponse()) {\nMessageRequestResponseMessage.Type type;\nswitch (content.getMessageRequestResponse().getType()) {\ncase ACCEPT:type=MessageRequestResponseMessage.Type.ACCEPT;\nbreak;\ncase DELETE:type=MessageRequestResponseMessage.Type.DELETE;\nbreak;\ncase BLOCK:type=MessageRequestResponseMessage.Type.BLOCK;\nbreak;\ncase BLOCK_AND_DELETE:type=MessageRequestResponseMessage.Type.BLOCK_AND_DELETE;\nbreak;\ndefault:type=MessageRequestResponseMessage.Type.UNKNOWN;\nbreak;\n}\nMessageRequestResponseMessage responseMessage;\nif (content.getMessageRequestResponse().hasGroupId()) {\nresponseMessage=MessageRequestResponseMessage.forGroup(content.getMessageRequestResponse().getGroupId().toByteArray(),type);\n}\n else {\nOptional<SignalServiceAddress> address=SignalServiceAddress.fromRaw(content.getMessageRequestResponse().getThreadUuid(),content.getMessageRequestResponse().getThreadE164());\nif (address.isPresent()) {\nresponseMessage=MessageRequestResponseMessage.forIndividual(address.get(),type);\n}\n else {\nthrow new InvalidMessageStructureException(\"Message request response has an invalid thread identifier!\");\n}\n}\nreturn SignalServiceSyncMessage.forMessageRequestResponse(responseMessage);\n}\nif (content.hasOutgoingPayment()) {\nSignalServiceProtos.SyncMessage.OutgoingPayment outgoingPayment=content.getOutgoingPayment();\nswitch (outgoingPayment.getPaymentDetailCase()) {\ncase MOBILECOIN:{\nSignalServiceProtos.SyncMessage.OutgoingPayment.MobileCoin mobileCoin=outgoingPayment.getMobileCoin();\nMoney.MobileCoin amount=Money.picoMobileCoin(mobileCoin.getAmountPicoMob());\nMoney.MobileCoin fee=Money.picoMobileCoin(mobileCoin.getFeePicoMob());\nByteString address=mobileCoin.getRecipientAddress();\nOptional<UUID> recipient=Optional.fromNullable(UuidUtil.parseOrNull(outgoingPayment.getRecipientUuid()));\nreturn SignalServiceSyncMessage.forOutgoingPayment(new OutgoingPaymentMessage(recipient,amount,fee,mobileCoin.getReceipt(),mobileCoin.getLedgerBlockIndex(),mobileCoin.getLedgerBlockTimestamp(),address.isEmpty() ? Optional.absent() : Optional.of(address.toByteArray()),Optional.of(outgoingPayment.getNote()),mobileCoin.getOutputPublicKeysList(),mobileCoin.getSpentKeyImagesList()));\n}\ndefault:return SignalServiceSyncMessage.empty();\n}\n}\nreturn SignalServiceSyncMessage.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1290,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13618,
        "startLineNumber" : 582,
        "startColumnNumber" : 2,
        "endLineNumber" : 813,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static SignalServiceSyncMessage createSynchronizeMessage(SignalServiceMetadata metadata,SignalServiceProtos.SyncMessage content) throws ProtocolInvalidKeyException, UnsupportedDataMessageException, InvalidMessageStructureException {\n  if (content.hasSent()) {\n    Map<SignalServiceAddress,Boolean> unidentifiedStatuses=new HashMap<>();\n    SignalServiceProtos.SyncMessage.Sent sentContent=content.getSent();\n    SignalServiceDataMessage dataMessage=createSignalServiceMessage(metadata,sentContent.getMessage());\n    Optional<SignalServiceAddress> address=SignalServiceAddress.isValidAddress(sentContent.getDestinationUuid(),sentContent.getDestinationE164()) ? Optional.of(new SignalServiceAddress(UuidUtil.parseOrThrow(sentContent.getDestinationUuid()),sentContent.getDestinationE164())) : Optional.<SignalServiceAddress>absent();\n    if (!address.isPresent() && !dataMessage.getGroupContext().isPresent()) {\n      throw new InvalidMessageStructureException(\"SyncMessage missing both destination and group ID!\");\n    }\n    for (    SignalServiceProtos.SyncMessage.Sent.UnidentifiedDeliveryStatus status : sentContent.getUnidentifiedStatusList()) {\n      if (SignalServiceAddress.isValidAddress(status.getDestinationUuid(),status.getDestinationE164())) {\n        SignalServiceAddress recipient=new SignalServiceAddress(UuidUtil.parseOrThrow(status.getDestinationUuid()),status.getDestinationE164());\n        unidentifiedStatuses.put(recipient,status.getUnidentified());\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid UnidentifiedDeliveryStatus in a SentTranscript! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forSentTranscript(new SentTranscriptMessage(address,sentContent.getTimestamp(),dataMessage,sentContent.getExpirationStartTimestamp(),unidentifiedStatuses,sentContent.getIsRecipientUpdate()));\n  }\n  if (content.hasRequest()) {\n    return SignalServiceSyncMessage.forRequest(new RequestMessage(content.getRequest()));\n  }\n  if (content.getReadList().size() > 0) {\n    List<ReadMessage> readMessages=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.Read read : content.getReadList()) {\n      if (SignalServiceAddress.isValidAddress(read.getSenderUuid(),read.getSenderE164())) {\n        SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(read.getSenderUuid()),read.getSenderE164());\n        readMessages.add(new ReadMessage(address,read.getTimestamp()));\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid ReadMessage! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forRead(readMessages);\n  }\n  if (content.getViewedList().size() > 0) {\n    List<ViewedMessage> viewedMessages=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.Viewed viewed : content.getViewedList()) {\n      if (SignalServiceAddress.isValidAddress(viewed.getSenderUuid(),viewed.getSenderE164())) {\n        SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(viewed.getSenderUuid()),viewed.getSenderE164());\n        viewedMessages.add(new ViewedMessage(address,viewed.getTimestamp()));\n      }\n else {\n        Log.w(TAG,\"Encountered an invalid ReadMessage! Ignoring.\");\n      }\n    }\n    return SignalServiceSyncMessage.forViewed(viewedMessages);\n  }\n  if (content.hasViewOnceOpen()) {\n    if (SignalServiceAddress.isValidAddress(content.getViewOnceOpen().getSenderUuid(),content.getViewOnceOpen().getSenderE164())) {\n      SignalServiceAddress address=new SignalServiceAddress(UuidUtil.parseOrThrow(content.getViewOnceOpen().getSenderUuid()),content.getViewOnceOpen().getSenderE164());\n      ViewOnceOpenMessage timerRead=new ViewOnceOpenMessage(address,content.getViewOnceOpen().getTimestamp());\n      return SignalServiceSyncMessage.forViewOnceOpen(timerRead);\n    }\n else {\n      throw new InvalidMessageStructureException(\"ViewOnceOpen message has no sender!\");\n    }\n  }\n  if (content.hasVerified()) {\n    if (SignalServiceAddress.isValidAddress(content.getVerified().getDestinationUuid(),content.getVerified().getDestinationE164())) {\n      try {\n        SignalServiceProtos.Verified verified=content.getVerified();\n        SignalServiceAddress destination=new SignalServiceAddress(UuidUtil.parseOrThrow(verified.getDestinationUuid()),verified.getDestinationE164());\n        IdentityKey identityKey=new IdentityKey(verified.getIdentityKey().toByteArray(),0);\n        VerifiedMessage.VerifiedState verifiedState;\n        if (verified.getState() == SignalServiceProtos.Verified.State.DEFAULT) {\n          verifiedState=VerifiedMessage.VerifiedState.DEFAULT;\n        }\n else         if (verified.getState() == SignalServiceProtos.Verified.State.VERIFIED) {\n          verifiedState=VerifiedMessage.VerifiedState.VERIFIED;\n        }\n else         if (verified.getState() == SignalServiceProtos.Verified.State.UNVERIFIED) {\n          verifiedState=VerifiedMessage.VerifiedState.UNVERIFIED;\n        }\n else {\n          throw new InvalidMessageStructureException(\"Unknown state: \" + verified.getState().getNumber(),metadata.getSender().getIdentifier(),metadata.getSenderDevice());\n        }\n        return SignalServiceSyncMessage.forVerified(new VerifiedMessage(destination,identityKey,verifiedState,System.currentTimeMillis()));\n      }\n catch (      InvalidKeyException e) {\n        throw new ProtocolInvalidKeyException(e,metadata.getSender().getIdentifier(),metadata.getSenderDevice());\n      }\n    }\n else {\n      throw new InvalidMessageStructureException(\"Verified message has no sender!\");\n    }\n  }\n  if (content.getStickerPackOperationList().size() > 0) {\n    List<StickerPackOperationMessage> operations=new LinkedList<>();\n    for (    SignalServiceProtos.SyncMessage.StickerPackOperation operation : content.getStickerPackOperationList()) {\n      byte[] packId=operation.hasPackId() ? operation.getPackId().toByteArray() : null;\n      byte[] packKey=operation.hasPackKey() ? operation.getPackKey().toByteArray() : null;\n      StickerPackOperationMessage.Type type=null;\n      if (operation.hasType()) {\nswitch (operation.getType()) {\ncase INSTALL:          type=StickerPackOperationMessage.Type.INSTALL;\n        break;\ncase REMOVE:      type=StickerPackOperationMessage.Type.REMOVE;\n    break;\n}\n}\noperations.add(new StickerPackOperationMessage(packId,packKey,type));\n}\nreturn SignalServiceSyncMessage.forStickerPackOperations(operations);\n}\nif (content.hasBlocked()) {\nList<String> numbers=content.getBlocked().getNumbersList();\nList<String> uuids=content.getBlocked().getUuidsList();\nList<SignalServiceAddress> addresses=new ArrayList<>(numbers.size() + uuids.size());\nList<byte[]> groupIds=new ArrayList<>(content.getBlocked().getGroupIdsList().size());\nfor (String uuid : uuids) {\nOptional<SignalServiceAddress> address=SignalServiceAddress.fromRaw(uuid,null);\nif (address.isPresent()) {\naddresses.add(address.get());\n}\n}\nfor (ByteString groupId : content.getBlocked().getGroupIdsList()) {\ngroupIds.add(groupId.toByteArray());\n}\nreturn SignalServiceSyncMessage.forBlocked(new BlockedListMessage(addresses,groupIds));\n}\nif (content.hasConfiguration()) {\nBoolean readReceipts=content.getConfiguration().hasReadReceipts() ? content.getConfiguration().getReadReceipts() : null;\nBoolean unidentifiedDeliveryIndicators=content.getConfiguration().hasUnidentifiedDeliveryIndicators() ? content.getConfiguration().getUnidentifiedDeliveryIndicators() : null;\nBoolean typingIndicators=content.getConfiguration().hasTypingIndicators() ? content.getConfiguration().getTypingIndicators() : null;\nBoolean linkPreviews=content.getConfiguration().hasLinkPreviews() ? content.getConfiguration().getLinkPreviews() : null;\nreturn SignalServiceSyncMessage.forConfiguration(new ConfigurationMessage(Optional.fromNullable(readReceipts),Optional.fromNullable(unidentifiedDeliveryIndicators),Optional.fromNullable(typingIndicators),Optional.fromNullable(linkPreviews)));\n}\nif (content.hasFetchLatest() && content.getFetchLatest().hasType()) {\nswitch (content.getFetchLatest().getType()) {\ncase LOCAL_PROFILE:return SignalServiceSyncMessage.forFetchLatest(SignalServiceSyncMessage.FetchType.LOCAL_PROFILE);\ncase STORAGE_MANIFEST:return SignalServiceSyncMessage.forFetchLatest(SignalServiceSyncMessage.FetchType.STORAGE_MANIFEST);\n}\n}\nif (content.hasMessageRequestResponse()) {\nMessageRequestResponseMessage.Type type;\nswitch (content.getMessageRequestResponse().getType()) {\ncase ACCEPT:type=MessageRequestResponseMessage.Type.ACCEPT;\nbreak;\ncase DELETE:type=MessageRequestResponseMessage.Type.DELETE;\nbreak;\ncase BLOCK:type=MessageRequestResponseMessage.Type.BLOCK;\nbreak;\ncase BLOCK_AND_DELETE:type=MessageRequestResponseMessage.Type.BLOCK_AND_DELETE;\nbreak;\ndefault:type=MessageRequestResponseMessage.Type.UNKNOWN;\nbreak;\n}\nMessageRequestResponseMessage responseMessage;\nif (content.getMessageRequestResponse().hasGroupId()) {\nresponseMessage=MessageRequestResponseMessage.forGroup(content.getMessageRequestResponse().getGroupId().toByteArray(),type);\n}\n else {\nOptional<SignalServiceAddress> address=SignalServiceAddress.fromRaw(content.getMessageRequestResponse().getThreadUuid(),content.getMessageRequestResponse().getThreadE164());\nif (address.isPresent()) {\nresponseMessage=MessageRequestResponseMessage.forIndividual(address.get(),type);\n}\n else {\nthrow new InvalidMessageStructureException(\"Message request response has an invalid thread identifier!\");\n}\n}\nreturn SignalServiceSyncMessage.forMessageRequestResponse(responseMessage);\n}\nif (content.hasOutgoingPayment()) {\nSignalServiceProtos.SyncMessage.OutgoingPayment outgoingPayment=content.getOutgoingPayment();\nswitch (outgoingPayment.getPaymentDetailCase()) {\ncase MOBILECOIN:{\nSignalServiceProtos.SyncMessage.OutgoingPayment.MobileCoin mobileCoin=outgoingPayment.getMobileCoin();\nMoney.MobileCoin amount=Money.picoMobileCoin(mobileCoin.getAmountPicoMob());\nMoney.MobileCoin fee=Money.picoMobileCoin(mobileCoin.getFeePicoMob());\nByteString address=mobileCoin.getRecipientAddress();\nOptional<UUID> recipient=Optional.fromNullable(UuidUtil.parseOrNull(outgoingPayment.getRecipientUuid()));\nreturn SignalServiceSyncMessage.forOutgoingPayment(new OutgoingPaymentMessage(recipient,amount,fee,mobileCoin.getReceipt(),mobileCoin.getLedgerBlockIndex(),mobileCoin.getLedgerBlockTimestamp(),address.isEmpty() ? Optional.absent() : Optional.of(address.toByteArray()),Optional.of(outgoingPayment.getNote()),mobileCoin.getOutputPublicKeysList(),mobileCoin.getSpentKeyImagesList()));\n}\ndefault:return SignalServiceSyncMessage.empty();\n}\n}\nreturn SignalServiceSyncMessage.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 699,
        "startColumnNumber" : 26,
        "endLineNumber" : 699,
        "endColumnNumber" : 74
      },
      "nodeContext" : "type=StickerPackOperationMessage.Type.INSTALL;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.whispersystems.signalservice.api.messages.multidevice.StickerPackOperationMessage.Type"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 699,
    "startColumnNumber" : 33,
    "endLineNumber" : 699,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}