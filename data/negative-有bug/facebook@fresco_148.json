{
  "id" : 148,
  "expression" : "108",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/CountingMemoryCacheTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "108",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 612,
      "startColumnNumber" : 35,
      "endLineNumber" : 612,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 612,
        "startColumnNumber" : 4,
        "endLineNumber" : 612,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertSharedWithCount(KEYS[8],108,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 612,
        "startColumnNumber" : 4,
        "endLineNumber" : 612,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertSharedWithCount(KEYS[8],108,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4081,
        "startLineNumber" : 580,
        "startColumnNumber" : 29,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 579,
        "startColumnNumber" : 2,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTrimming(){\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 612,
        "startColumnNumber" : 4,
        "endLineNumber" : 612,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertSharedWithCount(KEYS[8],108,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "108",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 628,
      "startColumnNumber" : 36,
      "endLineNumber" : 628,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 628,
        "startColumnNumber" : 4,
        "endLineNumber" : 628,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertExclusivelyOwned(KEYS[8],108)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 628,
        "startColumnNumber" : 4,
        "endLineNumber" : 628,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertExclusivelyOwned(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4081,
        "startLineNumber" : 580,
        "startColumnNumber" : 29,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 579,
        "startColumnNumber" : 2,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTrimming(){\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 628,
        "startColumnNumber" : 4,
        "endLineNumber" : 628,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertExclusivelyOwned(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "108",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 648,
      "startColumnNumber" : 29,
      "endLineNumber" : 648,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 648,
        "startColumnNumber" : 4,
        "endLineNumber" : 648,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertNotCached(KEYS[8],108)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 648,
        "startColumnNumber" : 4,
        "endLineNumber" : 648,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertNotCached(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4081,
        "startLineNumber" : 580,
        "startColumnNumber" : 29,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 579,
        "startColumnNumber" : 2,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTrimming(){\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 648,
        "startColumnNumber" : 4,
        "endLineNumber" : 648,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertNotCached(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "108",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 655,
      "startColumnNumber" : 38,
      "endLineNumber" : 655,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 655,
        "startColumnNumber" : 4,
        "endLineNumber" : 655,
        "endColumnNumber" : 42
      },
      "nodeContext" : "inOrder.verify(mReleaser).release(108)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 655,
        "startColumnNumber" : 4,
        "endLineNumber" : 655,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inOrder.verify(mReleaser).release(108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4081,
        "startLineNumber" : 580,
        "startColumnNumber" : 29,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 579,
        "startColumnNumber" : 2,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTrimming(){\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 655,
        "startColumnNumber" : 4,
        "endLineNumber" : 655,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inOrder.verify(mReleaser).release(108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "108",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 667,
      "startColumnNumber" : 29,
      "endLineNumber" : 667,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 667,
        "startColumnNumber" : 4,
        "endLineNumber" : 667,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertNotCached(KEYS[8],108)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 667,
        "startColumnNumber" : 4,
        "endLineNumber" : 667,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertNotCached(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4081,
        "startLineNumber" : 580,
        "startColumnNumber" : 29,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 579,
        "startColumnNumber" : 2,
        "endLineNumber" : 678,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTrimming(){\n  MemoryTrimType memoryTrimType=MemoryTrimType.OnCloseToDalvikHeapLimit;\n  mParams=new MemoryCacheParams(1100,10,1100,10,110,PARAMS_CHECK_INTERVAL_MS);\n  when(mParamsSupplier.get()).thenReturn(mParams);\n  PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);\n  InOrder inOrder=inOrder(mReleaser);\n  CloseableReference<Integer>[] originalRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    originalRefs[i]=newReference(100 + i);\n  }\n  CloseableReference<Integer>[] cachedRefs=new CloseableReference[10];\n  for (int i=0; i < 10; i++) {\n    cachedRefs[i]=mCache.cache(KEYS[i],originalRefs[i]);\n    originalRefs[i].close();\n  }\n  inOrder.verify(mReleaser,never()).release(anyInt());\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[2],102,1);\n  assertSharedWithCount(KEYS[3],103,1);\n  assertSharedWithCount(KEYS[4],104,1);\n  assertSharedWithCount(KEYS[5],105,1);\n  assertSharedWithCount(KEYS[6],106,1);\n  assertSharedWithCount(KEYS[7],107,1);\n  assertSharedWithCount(KEYS[8],108,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(0,0);\n  cachedRefs[8].close();\n  cachedRefs[2].close();\n  cachedRefs[7].close();\n  cachedRefs[3].close();\n  cachedRefs[6].close();\n  cachedRefs[4].close();\n  cachedRefs[5].close();\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[8],108);\n  assertExclusivelyOwned(KEYS[2],102);\n  assertExclusivelyOwned(KEYS[7],107);\n  assertExclusivelyOwned(KEYS[3],103);\n  assertExclusivelyOwned(KEYS[6],106);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertTotalSize(10,1045);\n  assertExclusivelyOwnedSize(7,735);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertExclusivelyOwned(KEYS[4],104);\n  assertExclusivelyOwned(KEYS[5],105);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertTotalSize(5,519);\n  assertExclusivelyOwnedSize(2,209);\n  inOrder.verify(mReleaser).release(108);\n  inOrder.verify(mReleaser).release(102);\n  inOrder.verify(mReleaser).release(107);\n  inOrder.verify(mReleaser).release(103);\n  inOrder.verify(mReleaser).release(106);\n  when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);\n  mCache.trim(memoryTrimType);\n  assertSharedWithCount(KEYS[0],100,1);\n  assertSharedWithCount(KEYS[1],101,1);\n  assertSharedWithCount(KEYS[9],109,1);\n  assertNotCached(KEYS[8],108);\n  assertNotCached(KEYS[2],102);\n  assertNotCached(KEYS[7],107);\n  assertNotCached(KEYS[3],103);\n  assertNotCached(KEYS[6],106);\n  assertNotCached(KEYS[6],104);\n  assertNotCached(KEYS[6],105);\n  assertTotalSize(3,310);\n  assertExclusivelyOwnedSize(0,0);\n  inOrder.verify(mReleaser).release(104);\n  inOrder.verify(mReleaser).release(105);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 667,
        "startColumnNumber" : 4,
        "endLineNumber" : 667,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertNotCached(KEYS[8],108);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 612,
    "startColumnNumber" : 35,
    "endLineNumber" : 612,
    "endColumnNumber" : 38
  }, {
    "charLength" : 3,
    "startLineNumber" : 628,
    "startColumnNumber" : 36,
    "endLineNumber" : 628,
    "endColumnNumber" : 39
  }, {
    "charLength" : 3,
    "startLineNumber" : 648,
    "startColumnNumber" : 29,
    "endLineNumber" : 648,
    "endColumnNumber" : 32
  }, {
    "charLength" : 3,
    "startLineNumber" : 655,
    "startColumnNumber" : 38,
    "endLineNumber" : 655,
    "endColumnNumber" : 41
  }, {
    "charLength" : 3,
    "startLineNumber" : 667,
    "startColumnNumber" : 29,
    "endLineNumber" : 667,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}