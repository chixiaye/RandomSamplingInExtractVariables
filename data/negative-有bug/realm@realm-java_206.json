{
  "id" : 206,
  "expression" : "Long.valueOf(8)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/MutableRealmIntegerTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Long.valueOf(8)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 506,
      "startColumnNumber" : 28,
      "endLineNumber" : 506,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 506,
        "startColumnNumber" : 19,
        "endLineNumber" : 506,
        "endColumnNumber" : 44
      },
      "nodeContext" : "n.equals(Long.valueOf(8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 506,
        "startColumnNumber" : 8,
        "endLineNumber" : 506,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertTrue(n.equals(Long.valueOf(8)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 506,
        "startColumnNumber" : 8,
        "endLineNumber" : 506,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(n.equals(Long.valueOf(8)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 489,
        "startColumnNumber" : 88,
        "endLineNumber" : 513,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertFalse(c1 == c2);\n  c1.columnNullableMutableRealmInteger.set(7);\n  c2.columnNullableMutableRealmInteger.set(Long.valueOf(7));\n  assertTrue(c1.columnNullableMutableRealmInteger != c2.columnNullableMutableRealmInteger);\n  assertTrue(c1.columnNullableMutableRealmInteger.equals(c2.columnNullableMutableRealmInteger));\n  MutableRealmInteger r1=c1.columnNullableMutableRealmInteger;\n  r1.increment(1);\n  assertTrue(r1.equals(c1.columnNullableMutableRealmInteger));\n  assertTrue(r1 == c1.columnNullableMutableRealmInteger);\n  assertTrue(c1.columnNullableMutableRealmInteger.get().equals(8L));\n  assertFalse(c1.columnNullableMutableRealmInteger.get().equals(c2.columnNullableMutableRealmInteger.get()));\n  assertTrue(c1.columnNullableMutableRealmInteger.get().intValue() == 8);\n  Long n=c1.columnNullableMutableRealmInteger.get();\n  assertTrue(n.equals(Long.valueOf(8)));\n  assertTrue(n.equals(c1.columnNullableMutableRealmInteger.get()));\n  assertTrue(n.intValue() == c1.columnNullableMutableRealmInteger.get().intValue());\n  c1.columnNullableMutableRealmInteger.increment(1);\n  assertFalse(n.intValue() == c1.columnNullableMutableRealmInteger.get().intValue());\n  assertFalse(n.intValue() == r1.get().intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2321,
        "startLineNumber" : 474,
        "startColumnNumber" : 4,
        "endLineNumber" : 513,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Thorough tests of equality, as defined <a href=\"https://github.com/realm/realm-java/issues/4266#issuecomment-308772718\">here</a> and in subsequent comments.  The general principles are: <ul> <li>MutableRealmInteger.equals tests the value of the wrapped integer<./li> <li>All references to a single MutableRealmInteger must be  {@code .equals} to the same thing.</li><li>Except when set to  {@code null} MutableRealmInteger does not distinguish boxed and primitive types.</li></ul> Since the implementations of managed and unmanaged MutableRealmIntegers are completely different these tests should be run on both implementations.\n * @param c1 a MutableRealmIntegerTypes\n * @param c2 another MutableRealmIntegerTypes\n */\n@SuppressWarnings({\"ReferenceEquality\",\"EqualsIncompatibleType\"}) private void testEquality(MutableRealmIntegerTypes c1,MutableRealmIntegerTypes c2){\n  assertFalse(c1 == c2);\n  c1.columnNullableMutableRealmInteger.set(7);\n  c2.columnNullableMutableRealmInteger.set(Long.valueOf(7));\n  assertTrue(c1.columnNullableMutableRealmInteger != c2.columnNullableMutableRealmInteger);\n  assertTrue(c1.columnNullableMutableRealmInteger.equals(c2.columnNullableMutableRealmInteger));\n  MutableRealmInteger r1=c1.columnNullableMutableRealmInteger;\n  r1.increment(1);\n  assertTrue(r1.equals(c1.columnNullableMutableRealmInteger));\n  assertTrue(r1 == c1.columnNullableMutableRealmInteger);\n  assertTrue(c1.columnNullableMutableRealmInteger.get().equals(8L));\n  assertFalse(c1.columnNullableMutableRealmInteger.get().equals(c2.columnNullableMutableRealmInteger.get()));\n  assertTrue(c1.columnNullableMutableRealmInteger.get().intValue() == 8);\n  Long n=c1.columnNullableMutableRealmInteger.get();\n  assertTrue(n.equals(Long.valueOf(8)));\n  assertTrue(n.equals(c1.columnNullableMutableRealmInteger.get()));\n  assertTrue(n.intValue() == c1.columnNullableMutableRealmInteger.get().intValue());\n  c1.columnNullableMutableRealmInteger.increment(1);\n  assertFalse(n.intValue() == c1.columnNullableMutableRealmInteger.get().intValue());\n  assertFalse(n.intValue() == r1.get().intValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 506,
        "startColumnNumber" : 8,
        "endLineNumber" : 506,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(n.equals(Long.valueOf(8)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Long"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 506,
    "startColumnNumber" : 28,
    "endLineNumber" : 506,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}