{
  "id" : 58,
  "expression" : "false",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-zookeeper-utils/src/test/java/org/apache/pulsar/zookeeper/LocalZooKeeperConnectionServiceTest.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 57,
      "startColumnNumber" : 42,
      "endLineNumber" : 57,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 57,
        "startColumnNumber" : 22,
        "endLineNumber" : 57,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.exists(\"/path1\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 66,
      "startColumnNumber" : 42,
      "endLineNumber" : 66,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 66,
        "startColumnNumber" : 22,
        "endLineNumber" : 66,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.exists(\"/path1\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 70,
      "startColumnNumber" : 42,
      "endLineNumber" : 70,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 70,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.exists(\"/path2\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path2\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path2\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path2\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 75,
      "startColumnNumber" : 42,
      "endLineNumber" : 75,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 75,
        "startColumnNumber" : 22,
        "endLineNumber" : 75,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.exists(\"/path3\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path3\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path3\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/path3\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 80,
      "startColumnNumber" : 39,
      "endLineNumber" : 80,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 80,
        "startColumnNumber" : 19,
        "endLineNumber" : 80,
        "endColumnNumber" : 45
      },
      "nodeContext" : "zk.exists(\"/path1\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(zk.exists(\"/path1\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path1\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 82,
      "startColumnNumber" : 39,
      "endLineNumber" : 82,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 82,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 45
      },
      "nodeContext" : "zk.exists(\"/path2\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(zk.exists(\"/path2\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path2\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path2\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 84,
      "startColumnNumber" : 39,
      "endLineNumber" : 84,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 84,
        "startColumnNumber" : 19,
        "endLineNumber" : 84,
        "endColumnNumber" : 45
      },
      "nodeContext" : "zk.exists(\"/path3\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(zk.exists(\"/path3\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path3\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"/path3\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 91,
      "startColumnNumber" : 39,
      "endLineNumber" : 91,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 91,
        "startColumnNumber" : 19,
        "endLineNumber" : 91,
        "endColumnNumber" : 45
      },
      "nodeContext" : "zk.exists(\"//////\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(zk.exists(\"//////\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"//////\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 34,
        "startColumnNumber" : 65,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2853,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimpleZooKeeperConnection() throws Exception {\n  MockedZooKeeperClientFactoryImpl mockZkClientFactory=new MockedZooKeeperClientFactoryImpl();\n  LocalZooKeeperConnectionService localZkConnectionService=new LocalZooKeeperConnectionService(mockZkClientFactory,\"dummy\",1000);\n  localZkConnectionService.start(new ZookeeperSessionExpiredHandler(){\n    @Override public void onSessionExpired(){\n    }\n    @Override public void setWatcher(    ZooKeeperSessionWatcher watcher){\n    }\n  }\n);\n  MockZooKeeper zk=(MockZooKeeper)localZkConnectionService.getLocalZooKeeper();\n  assertTrue(zk.getState().isConnected());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  zk.setSessionId(-1L);\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path1\",\"data1\",CreateMode.EPHEMERAL,true);\n  assertEquals(zk.getData(\"/path1\",null,null),\"data1\".getBytes());\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/path1\");\n  assertNotNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path2\",\"data2\",CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path2\",false));\n  assertEquals(zk.getData(\"/path2\",null,null),\"data2\".getBytes());\n  LocalZooKeeperConnectionService.createIfAbsent(zk,\"/path3\",\"data3\".getBytes(),CreateMode.EPHEMERAL);\n  assertNotNull(zk.exists(\"/path3\",false));\n  assertEquals(zk.getData(\"/path3\",null,null),\"data3\".getBytes());\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path1\",-1);\n  assertNull(zk.exists(\"/path1\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path2\",-1);\n  assertNull(zk.exists(\"/path2\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/path3\",-1);\n  assertNull(zk.exists(\"/path3\",false));\n  LocalZooKeeperConnectionService.deleteIfExists(zk,\"/not_exist\",-1);\n  LocalZooKeeperConnectionService.checkAndCreatePersistNode(zk,\"/////\");\n  assertNull(zk.exists(\"//////\",false));\n  localZkConnectionService.close();\n  mockZkClientFactory.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNull(zk.exists(\"//////\",false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 57,
    "startColumnNumber" : 42,
    "endLineNumber" : 57,
    "endColumnNumber" : 47
  }, {
    "charLength" : 5,
    "startLineNumber" : 66,
    "startColumnNumber" : 42,
    "endLineNumber" : 66,
    "endColumnNumber" : 47
  }, {
    "charLength" : 5,
    "startLineNumber" : 70,
    "startColumnNumber" : 42,
    "endLineNumber" : 70,
    "endColumnNumber" : 47
  }, {
    "charLength" : 5,
    "startLineNumber" : 75,
    "startColumnNumber" : 42,
    "endLineNumber" : 75,
    "endColumnNumber" : 47
  }, {
    "charLength" : 5,
    "startLineNumber" : 80,
    "startColumnNumber" : 39,
    "endLineNumber" : 80,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 82,
    "startColumnNumber" : 39,
    "endLineNumber" : 82,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 84,
    "startColumnNumber" : 39,
    "endLineNumber" : 84,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 91,
    "startColumnNumber" : 39,
    "endLineNumber" : 91,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  } ]
}