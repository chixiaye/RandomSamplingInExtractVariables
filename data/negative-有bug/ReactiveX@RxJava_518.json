{
  "id" : 518,
  "expression" : "Schedulers.computation()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableWindowWithSizeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Schedulers.computation()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 137,
      "startColumnNumber" : 27,
      "endLineNumber" : 137,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 137,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 138,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation()).window(5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 139,
        "endColumnNumber" : 24
      },
      "nodeContext" : "Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation()).window(5).take(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation()).window(5).take(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation()).window(5).take(2)).subscribe(ts)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation()).window(5).take(2)).subscribe(ts);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 47,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 125,
        "startColumnNumber" : 65,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObserver<Integer> ts=new TestObserver<Integer>();\n  final AtomicInteger count=new AtomicInteger();\n  Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer t1){\n      count.incrementAndGet();\n    }\n  }\n).observeOn(Schedulers.computation()).window(5).take(2)).subscribe(ts);\n  ts.awaitTerminalEvent(500,TimeUnit.MILLISECONDS);\n  ts.assertTerminated();\n  ts.assertValues(1,2,3,4,5,6,7,8,9,10);\n  assertTrue(count.get() < 100000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 910,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWindowUnsubscribeNonOverlappingAsyncSource(){\n  TestObserver<Integer> ts=new TestObserver<Integer>();\n  final AtomicInteger count=new AtomicInteger();\n  Observable.merge(Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer t1){\n      count.incrementAndGet();\n    }\n  }\n).observeOn(Schedulers.computation()).window(5).take(2)).subscribe(ts);\n  ts.awaitTerminalEvent(500,TimeUnit.MILLISECONDS);\n  ts.assertTerminated();\n  ts.assertValues(1,2,3,4,5,6,7,8,9,10);\n  assertTrue(count.get() < 100000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 137,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Observable.range(1,100000).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer t1){\n    count.incrementAndGet();\n  }\n}\n).observeOn(Schedulers.computation())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "io.reactivex.Scheduler"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 137,
    "startColumnNumber" : 27,
    "endLineNumber" : 137,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}