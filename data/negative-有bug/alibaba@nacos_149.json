{
  "id" : 149,
  "expression" : "stream.filter(entry -> {\n  final String serviceName=entry.getKey();\n  return distroMapper.responsible(serviceName);\n}\n)",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/main/java/com/alibaba/nacos/naming/core/v2/cleaner/EmptyServiceAutoCleaner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stream.filter(entry -> {\n  final String serviceName=entry.getKey();\n  return distroMapper.responsible(serviceName);\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 160,
      "startLineNumber" : 60,
      "startColumnNumber" : 12,
      "endLineNumber" : 63,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 21,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1723,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 15
      },
      "nodeContext" : "stream.filter(entry -> {\n  final String serviceName=entry.getKey();\n  return distroMapper.responsible(serviceName);\n}\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n  if (service.isEmpty()) {\n    if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n      Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n      try {\n        serviceManager.easyRemoveService(each,serviceName);\n      }\n catch (      Exception e) {\n        Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n      }\n    }\n    service.setFinalizeCount(service.getFinalizeCount() + 1);\n    Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n  }\n else {\n    service.setFinalizeCount(0);\n  }\n  return service;\n}\n))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 116,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1724,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 16
      },
      "nodeContext" : "stream.filter(entry -> {\n  final String serviceName=entry.getKey();\n  return distroMapper.responsible(serviceName);\n}\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n  if (service.isEmpty()) {\n    if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n      Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n      try {\n        serviceManager.easyRemoveService(each,serviceName);\n      }\n catch (      Exception e) {\n        Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n      }\n    }\n    service.setFinalizeCount(service.getFinalizeCount() + 1);\n    Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n  }\n else {\n    service.setFinalizeCount(0);\n  }\n  return service;\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 117,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2117,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,Service> serviceMap=serviceManager.chooseServiceMap(each);\n  Stream<Map.Entry<String,Service>> stream=null;\n  if (serviceMap.size() > parallelSize) {\n    stream=serviceMap.entrySet().parallelStream();\n  }\n else {\n    stream=serviceMap.entrySet().stream();\n  }\n  stream.filter(entry -> {\n    final String serviceName=entry.getKey();\n    return distroMapper.responsible(serviceName);\n  }\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n    if (service.isEmpty()) {\n      if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n        Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n        try {\n          serviceManager.easyRemoveService(each,serviceName);\n        }\n catch (        Exception e) {\n          Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n        }\n      }\n      service.setFinalizeCount(service.getFinalizeCount() + 1);\n      Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n    }\n else {\n      service.setFinalizeCount(0);\n    }\n    return service;\n  }\n));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2171,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String each : serviceManager.getAllNamespaces()) {\n  Map<String,Service> serviceMap=serviceManager.chooseServiceMap(each);\n  Stream<Map.Entry<String,Service>> stream=null;\n  if (serviceMap.size() > parallelSize) {\n    stream=serviceMap.entrySet().parallelStream();\n  }\n else {\n    stream=serviceMap.entrySet().stream();\n  }\n  stream.filter(entry -> {\n    final String serviceName=entry.getKey();\n    return distroMapper.responsible(serviceName);\n  }\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n    if (service.isEmpty()) {\n      if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n        Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n        try {\n          serviceManager.easyRemoveService(each,serviceName);\n        }\n catch (        Exception e) {\n          Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n        }\n      }\n      service.setFinalizeCount(service.getFinalizeCount() + 1);\n      Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n    }\n else {\n      service.setFinalizeCount(0);\n    }\n    return service;\n  }\n));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 180,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2280,
        "startLineNumber" : 46,
        "startColumnNumber" : 22,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int parallelSize=100;\n  for (  String each : serviceManager.getAllNamespaces()) {\n    Map<String,Service> serviceMap=serviceManager.chooseServiceMap(each);\n    Stream<Map.Entry<String,Service>> stream=null;\n    if (serviceMap.size() > parallelSize) {\n      stream=serviceMap.entrySet().parallelStream();\n    }\n else {\n      stream=serviceMap.entrySet().stream();\n    }\n    stream.filter(entry -> {\n      final String serviceName=entry.getKey();\n      return distroMapper.responsible(serviceName);\n    }\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n      if (service.isEmpty()) {\n        if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n          Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n          try {\n            serviceManager.easyRemoveService(each,serviceName);\n          }\n catch (          Exception e) {\n            Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n          }\n        }\n        service.setFinalizeCount(service.getFinalizeCount() + 1);\n        Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n      }\n else {\n        service.setFinalizeCount(0);\n      }\n      return service;\n    }\n));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2312,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  int parallelSize=100;\n  for (  String each : serviceManager.getAllNamespaces()) {\n    Map<String,Service> serviceMap=serviceManager.chooseServiceMap(each);\n    Stream<Map.Entry<String,Service>> stream=null;\n    if (serviceMap.size() > parallelSize) {\n      stream=serviceMap.entrySet().parallelStream();\n    }\n else {\n      stream=serviceMap.entrySet().stream();\n    }\n    stream.filter(entry -> {\n      final String serviceName=entry.getKey();\n      return distroMapper.responsible(serviceName);\n    }\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n      if (service.isEmpty()) {\n        if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n          Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n          try {\n            serviceManager.easyRemoveService(each,serviceName);\n          }\n catch (          Exception e) {\n            Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n          }\n        }\n        service.setFinalizeCount(service.getFinalizeCount() + 1);\n        Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n      }\n else {\n        service.setFinalizeCount(0);\n      }\n      return service;\n    }\n));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1723,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 15
      },
      "nodeContext" : "stream.filter(entry -> {\n  final String serviceName=entry.getKey();\n  return distroMapper.responsible(serviceName);\n}\n).forEach(entry -> serviceMap.computeIfPresent(entry.getKey(),(serviceName,service) -> {\n  if (service.isEmpty()) {\n    if (service.getFinalizeCount() > MAX_FINALIZE_COUNT) {\n      Loggers.SRV_LOG.warn(\"namespace : {}, [{}] services are automatically cleaned\",each,serviceName);\n      try {\n        serviceManager.easyRemoveService(each,serviceName);\n      }\n catch (      Exception e) {\n        Loggers.SRV_LOG.error(\"namespace : {}, [{}] services are automatically clean has \" + \"error : {}\",each,serviceName,e);\n      }\n    }\n    service.setFinalizeCount(service.getFinalizeCount() + 1);\n    Loggers.SRV_LOG.debug(\"namespace : {}, [{}] The number of times the current service experiences \" + \"an empty instance is : {}\",each,serviceName,service.getFinalizeCount());\n  }\n else {\n    service.setFinalizeCount(0);\n  }\n  return service;\n}\n))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 116,
      "astHeight" : 16
    },
    "tokenLength" : 10,
    "type" : "java.util.stream.Stream<java.util.Map.Entry<java.lang.String,com.alibaba.nacos.naming.core.Service>>"
  } ],
  "positionList" : [ {
    "charLength" : 160,
    "startLineNumber" : 60,
    "startColumnNumber" : 12,
    "endLineNumber" : 63,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}