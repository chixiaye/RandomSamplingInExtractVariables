{
  "id" : 392,
  "expression" : "true",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/ProgramDiff/src/test.slow/java/ghidra/app/plugin/core/diff/DiffApplyMergeTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 145,
      "startColumnNumber" : 33,
      "endLineNumber" : 145,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 145,
        "startColumnNumber" : 3,
        "endLineNumber" : 145,
        "endColumnNumber" : 38
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 145,
        "startColumnNumber" : 3,
        "endLineNumber" : 145,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2325,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n catch (InvalidInputException|OverlappingFunctionException e) {\n  Msg.error(this,\"Error setting up function tag diff test.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 132,
        "startColumnNumber" : 36,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Tests that we can merge two different function tags that have been added to the same function. Note: The test programs must be modified a bit to facilitate this test. Specifically we have to add a function at the same address in both programs, then add tags to each program, then add those tags to the newly created functions.\n */\n@Test public void testFunctionTagMerge(){\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 145,
        "startColumnNumber" : 3,
        "endLineNumber" : 145,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 151,
      "startColumnNumber" : 33,
      "endLineNumber" : 151,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 151,
        "endColumnNumber" : 38
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 151,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2325,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n catch (InvalidInputException|OverlappingFunctionException e) {\n  Msg.error(this,\"Error setting up function tag diff test.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 132,
        "startColumnNumber" : 36,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Tests that we can merge two different function tags that have been added to the same function. Note: The test programs must be modified a bit to facilitate this test. Specifically we have to add a function at the same address in both programs, then add tags to each program, then add those tags to the newly created functions.\n */\n@Test public void testFunctionTagMerge(){\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 151,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 160,
      "startColumnNumber" : 33,
      "endLineNumber" : 160,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 160,
        "startColumnNumber" : 3,
        "endLineNumber" : 160,
        "endColumnNumber" : 38
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 160,
        "startColumnNumber" : 3,
        "endLineNumber" : 160,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2325,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n catch (InvalidInputException|OverlappingFunctionException e) {\n  Msg.error(this,\"Error setting up function tag diff test.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 132,
        "startColumnNumber" : 36,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Tests that we can merge two different function tags that have been added to the same function. Note: The test programs must be modified a bit to facilitate this test. Specifically we have to add a function at the same address in both programs, then add tags to each program, then add those tags to the newly created functions.\n */\n@Test public void testFunctionTagMerge(){\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 160,
        "startColumnNumber" : 3,
        "endLineNumber" : 160,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP1.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 166,
      "startColumnNumber" : 33,
      "endLineNumber" : 166,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 166,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 38
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 166,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2325,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  loadProgram(diffTestP1);\n  loadProgram(diffTestP2);\n  FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n  FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n  int id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n  diffTestP2.endTransaction(id,true);\n  Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n  id=diffTestP1.startTransaction(\"create1\");\n  funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n  f1.addTag(\"TagA\");\n  diffTestP1.endTransaction(id,true);\n  id=diffTestP2.startTransaction(\"create2\");\n  funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n  f2.addTag(\"TagB\");\n  diffTestP2.endTransaction(id,true);\n  openDiff(diffTestP1,diffTestP2);\n  showApplySettings();\n  merge(functionTagApplyCB);\n  AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n  setDiffSelection(as);\n  apply();\n  Iterator<FunctionTag> iter=f1.getTags().iterator();\n  List<String> tagNames=new ArrayList<>();\n  while (iter.hasNext()) {\n    FunctionTag tag=iter.next();\n    tagNames.add(tag.getName());\n  }\n  assertEquals(tagNames.size(),2);\n  assertTrue(tagNames.contains(\"TagA\"));\n  assertTrue(tagNames.contains(\"TagB\"));\n}\n catch (InvalidInputException|OverlappingFunctionException e) {\n  Msg.error(this,\"Error setting up function tag diff test.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 292,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 132,
        "startColumnNumber" : 36,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 193,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Tests that we can merge two different function tags that have been added to the same function. Note: The test programs must be modified a bit to facilitate this test. Specifically we have to add a function at the same address in both programs, then add tags to each program, then add those tags to the newly created functions.\n */\n@Test public void testFunctionTagMerge(){\n  try {\n    loadProgram(diffTestP1);\n    loadProgram(diffTestP2);\n    FunctionManagerDB funcMgr1=(FunctionManagerDB)diffTestP1.getFunctionManager();\n    FunctionManagerDB funcMgr2=(FunctionManagerDB)diffTestP2.getFunctionManager();\n    int id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.createFunction(\"testfunc\",addr(\"1002040\"),new AddressSet(addr(\"1002040\"),addr(\"1002048\")),SourceType.DEFAULT);\n    diffTestP2.endTransaction(id,true);\n    Function f1=diffTestP1.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    Function f2=diffTestP2.getFunctionManager().getFunctionAt(addr(\"1002040\"));\n    id=diffTestP1.startTransaction(\"create1\");\n    funcMgr1.getFunctionTagManager().createFunctionTag(\"TagA\",\"tag A comment\");\n    f1.addTag(\"TagA\");\n    diffTestP1.endTransaction(id,true);\n    id=diffTestP2.startTransaction(\"create2\");\n    funcMgr2.getFunctionTagManager().createFunctionTag(\"TagB\",\"tag B comment\");\n    f2.addTag(\"TagB\");\n    diffTestP2.endTransaction(id,true);\n    openDiff(diffTestP1,diffTestP2);\n    showApplySettings();\n    merge(functionTagApplyCB);\n    AddressSet as=new AddressSet(addr(\"1002040\"),addr(\"1002040\"));\n    setDiffSelection(as);\n    apply();\n    Iterator<FunctionTag> iter=f1.getTags().iterator();\n    List<String> tagNames=new ArrayList<>();\n    while (iter.hasNext()) {\n      FunctionTag tag=iter.next();\n      tagNames.add(tag.getName());\n    }\n    assertEquals(tagNames.size(),2);\n    assertTrue(tagNames.contains(\"TagA\"));\n    assertTrue(tagNames.contains(\"TagB\"));\n  }\n catch (  InvalidInputException|OverlappingFunctionException e) {\n    Msg.error(this,\"Error setting up function tag diff test.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 166,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 39
      },
      "nodeContext" : "diffTestP2.endTransaction(id,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 145,
    "startColumnNumber" : 33,
    "endLineNumber" : 145,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 151,
    "startColumnNumber" : 33,
    "endLineNumber" : 151,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 160,
    "startColumnNumber" : 33,
    "endLineNumber" : 160,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 166,
    "startColumnNumber" : 33,
    "endLineNumber" : 166,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}