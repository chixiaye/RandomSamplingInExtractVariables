{
  "id" : 78,
  "expression" : "DateUnit.HOUR.getMillis()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/date/BetweenFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DateUnit.HOUR.getMillis()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 66,
      "startColumnNumber" : 27,
      "endLineNumber" : 66,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "betweenMs / DateUnit.HOUR.getMillis()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 66,
        "endColumnNumber" : 63
      },
      "nodeContext" : "betweenMs / DateUnit.HOUR.getMillis() - day * 24",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 63
      },
      "nodeContext" : "hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 66,
        "endColumnNumber" : 64
      },
      "nodeContext" : "long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 64,
        "startColumnNumber" : 21,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n  long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLISECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLISECOND.name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (betweenMs > 0) {\n  long day=betweenMs / DateUnit.DAY.getMillis();\n  long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n  long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n  final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n  long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n  long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n  final int level=this.level.ordinal();\n  int levelCount=0;\n  if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n    sb.append(day).append(Level.DAY.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n    sb.append(hour).append(Level.HOUR.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n    sb.append(minute).append(Level.MINUTE.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n    sb.append(second).append(Level.SECOND.name);\n    levelCount++;\n  }\n  if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLISECOND.ordinal()) {\n    sb.append(millisecond).append(Level.MILLISECOND.name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 266,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1522,
        "startLineNumber" : 62,
        "startColumnNumber" : 24,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n    long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLISECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLISECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1603,
        "startLineNumber" : 57,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 格式化日期间隔输出<br>\n * @return 格式化后的字符串\n */\npublic String format(){\n  final StringBuilder sb=new StringBuilder();\n  if (betweenMs > 0) {\n    long day=betweenMs / DateUnit.DAY.getMillis();\n    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;\n    final long BetweenOfSecond=((day * 24 + hour) * 60 + minute) * 60;\n    long second=betweenMs / DateUnit.SECOND.getMillis() - BetweenOfSecond;\n    long millisecond=betweenMs - (BetweenOfSecond + second) * 1000;\n    final int level=this.level.ordinal();\n    int levelCount=0;\n    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {\n      sb.append(day).append(Level.DAY.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {\n      sb.append(hour).append(Level.HOUR.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {\n      sb.append(minute).append(Level.MINUTE.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {\n      sb.append(second).append(Level.SECOND.name);\n      levelCount++;\n    }\n    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLISECOND.ordinal()) {\n      sb.append(millisecond).append(Level.MILLISECOND.name);\n    }\n  }\n  if (StrUtil.isEmpty(sb)) {\n    sb.append(0).append(this.level.name);\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 66,
        "endColumnNumber" : 64
      },
      "nodeContext" : "long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 66,
    "startColumnNumber" : 27,
    "endLineNumber" : 66,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}