{
  "id" : 254,
  "expression" : "createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 258,
      "startLineNumber" : 302,
      "startColumnNumber" : 38,
      "endLineNumber" : 308,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 302,
        "startColumnNumber" : 24,
        "endLineNumber" : 308,
        "endColumnNumber" : 50
      },
      "nodeContext" : "projectNode=createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 302,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 51
      },
      "nodeContext" : "ProjectNode projectNode=createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3660,
        "startLineNumber" : 242,
        "startColumnNumber" : 8,
        "endLineNumber" : 311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Optional<AggregateInfo> aggregateInfo=context.get();\n  if (!aggregateInfo.isPresent() || !aggregateInfo.get().getMask().equals(node.getMarkerVariable())) {\n    return context.defaultRewrite(node,Optional.empty());\n  }\n  aggregateInfo.get().foundMarkDistinct();\n  PlanNode source=context.rewrite(node.getSource(),Optional.empty());\n  Set<VariableReferenceExpression> allVariables=new HashSet<>();\n  List<VariableReferenceExpression> groupByVariables=aggregateInfo.get().getGroupByVariables();\n  List<VariableReferenceExpression> nonDistinctAggregateVariables=aggregateInfo.get().getOriginalNonDistinctAggregateArgs();\n  VariableReferenceExpression distinctVariable=Iterables.getOnlyElement(aggregateInfo.get().getOriginalDistinctAggregateArgs());\n  VariableReferenceExpression duplicatedDistinctVariable=distinctVariable;\n  if (nonDistinctAggregateVariables.contains(distinctVariable)) {\n    VariableReferenceExpression newVariable=variableAllocator.newVariable(distinctVariable);\n    nonDistinctAggregateVariables.set(nonDistinctAggregateVariables.indexOf(distinctVariable),newVariable);\n    duplicatedDistinctVariable=newVariable;\n  }\n  allVariables.addAll(groupByVariables);\n  allVariables.addAll(nonDistinctAggregateVariables);\n  allVariables.add(distinctVariable);\n  VariableReferenceExpression groupVariable=variableAllocator.newVariable(\"group\",BIGINT);\n  GroupIdNode groupIdNode=createGroupIdNode(groupByVariables,nonDistinctAggregateVariables,distinctVariable,duplicatedDistinctVariable,groupVariable,allVariables,source);\n  Set<VariableReferenceExpression> groupByKeys=new HashSet<>(groupByVariables);\n  groupByKeys.add(distinctVariable);\n  groupByKeys.add(groupVariable);\n  ImmutableMap.Builder<VariableReferenceExpression,VariableReferenceExpression> aggregationOutputVariablesMapBuilder=ImmutableMap.builder();\n  AggregationNode aggregationNode=createNonDistinctAggregation(aggregateInfo.get(),distinctVariable,duplicatedDistinctVariable,groupByKeys,groupIdNode,node,aggregationOutputVariablesMapBuilder);\n  Map<VariableReferenceExpression,VariableReferenceExpression> aggregationOutputVariablesMap=aggregationOutputVariablesMapBuilder.build();\n  ProjectNode projectNode=createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap);\n  return projectNode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3792,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public PlanNode visitMarkDistinct(MarkDistinctNode node,RewriteContext<Optional<AggregateInfo>> context){\n  Optional<AggregateInfo> aggregateInfo=context.get();\n  if (!aggregateInfo.isPresent() || !aggregateInfo.get().getMask().equals(node.getMarkerVariable())) {\n    return context.defaultRewrite(node,Optional.empty());\n  }\n  aggregateInfo.get().foundMarkDistinct();\n  PlanNode source=context.rewrite(node.getSource(),Optional.empty());\n  Set<VariableReferenceExpression> allVariables=new HashSet<>();\n  List<VariableReferenceExpression> groupByVariables=aggregateInfo.get().getGroupByVariables();\n  List<VariableReferenceExpression> nonDistinctAggregateVariables=aggregateInfo.get().getOriginalNonDistinctAggregateArgs();\n  VariableReferenceExpression distinctVariable=Iterables.getOnlyElement(aggregateInfo.get().getOriginalDistinctAggregateArgs());\n  VariableReferenceExpression duplicatedDistinctVariable=distinctVariable;\n  if (nonDistinctAggregateVariables.contains(distinctVariable)) {\n    VariableReferenceExpression newVariable=variableAllocator.newVariable(distinctVariable);\n    nonDistinctAggregateVariables.set(nonDistinctAggregateVariables.indexOf(distinctVariable),newVariable);\n    duplicatedDistinctVariable=newVariable;\n  }\n  allVariables.addAll(groupByVariables);\n  allVariables.addAll(nonDistinctAggregateVariables);\n  allVariables.add(distinctVariable);\n  VariableReferenceExpression groupVariable=variableAllocator.newVariable(\"group\",BIGINT);\n  GroupIdNode groupIdNode=createGroupIdNode(groupByVariables,nonDistinctAggregateVariables,distinctVariable,duplicatedDistinctVariable,groupVariable,allVariables,source);\n  Set<VariableReferenceExpression> groupByKeys=new HashSet<>(groupByVariables);\n  groupByKeys.add(distinctVariable);\n  groupByKeys.add(groupVariable);\n  ImmutableMap.Builder<VariableReferenceExpression,VariableReferenceExpression> aggregationOutputVariablesMapBuilder=ImmutableMap.builder();\n  AggregationNode aggregationNode=createNonDistinctAggregation(aggregateInfo.get(),distinctVariable,duplicatedDistinctVariable,groupByKeys,groupIdNode,node,aggregationOutputVariablesMapBuilder);\n  Map<VariableReferenceExpression,VariableReferenceExpression> aggregationOutputVariablesMap=aggregationOutputVariablesMapBuilder.build();\n  ProjectNode projectNode=createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap);\n  return projectNode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 302,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 51
      },
      "nodeContext" : "ProjectNode projectNode=createProjectNode(aggregationNode,aggregateInfo.get(),distinctVariable,groupVariable,groupByVariables,aggregationOutputVariablesMap);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "com.facebook.presto.spi.plan.ProjectNode"
  } ],
  "positionList" : [ {
    "charLength" : 258,
    "startLineNumber" : 302,
    "startColumnNumber" : 38,
    "endLineNumber" : 308,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}