{
  "id" : 350,
  "expression" : "BigDecimal",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-27/src/main/java/org/redisson/spring/data/connection/RedissonReactiveZSetCommands.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BigDecimal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 97,
      "startColumnNumber" : 27,
      "endLineNumber" : 97,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 97,
        "endColumnNumber" : 63
      },
      "nodeContext" : "BigDecimal.valueOf(entry.getScore())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 97,
        "endColumnNumber" : 79
      },
      "nodeContext" : "BigDecimal.valueOf(entry.getScore()).toPlainString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 80
      },
      "nodeContext" : "params.add(BigDecimal.valueOf(entry.getScore()).toPlainString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 81
      },
      "nodeContext" : "params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 96,
        "startColumnNumber" : 52,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n  params.add(entry.getValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Tuple entry : command.getTuples()) {\n  params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n  params.add(entry.getValue());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 73,
        "startColumnNumber" : 44,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notEmpty(command.getTuples(),\"Tuples must not be empty or null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  List<Object> params=new ArrayList<Object>(command.getTuples().size() * 2 + 1);\n  params.add(keyBuf);\n  if (command.isIncr() || command.isUpsert() || command.isReturnTotalChanged()) {\n    if (command.isUpsert()) {\n      params.add(\"NX\");\n    }\n else {\n      params.add(\"XX\");\n    }\n    if (command.isReturnTotalChanged()) {\n      params.add(\"CH\");\n    }\n    if (command.isIncr()) {\n      params.add(\"INCR\");\n    }\n  }\n  for (  Tuple entry : command.getTuples()) {\n    params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n    params.add(entry.getValue());\n  }\n  Mono<Number> m;\n  if (command.isIncr()) {\n    m=write(keyBuf,DoubleCodec.INSTANCE,ZADD_FLOAT,params.toArray());\n  }\n else {\n    m=write(keyBuf,StringCodec.INSTANCE,RedisCommands.ZADD,params.toArray());\n  }\n  return m.map(v -> new NumericResponse<>(command,v));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1454,
        "startLineNumber" : 73,
        "startColumnNumber" : 33,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notEmpty(command.getTuples(),\"Tuples must not be empty or null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  List<Object> params=new ArrayList<Object>(command.getTuples().size() * 2 + 1);\n  params.add(keyBuf);\n  if (command.isIncr() || command.isUpsert() || command.isReturnTotalChanged()) {\n    if (command.isUpsert()) {\n      params.add(\"NX\");\n    }\n else {\n      params.add(\"XX\");\n    }\n    if (command.isReturnTotalChanged()) {\n      params.add(\"CH\");\n    }\n    if (command.isIncr()) {\n      params.add(\"INCR\");\n    }\n  }\n  for (  Tuple entry : command.getTuples()) {\n    params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n    params.add(entry.getValue());\n  }\n  Mono<Number> m;\n  if (command.isIncr()) {\n    m=write(keyBuf,DoubleCodec.INSTANCE,ZADD_FLOAT,params.toArray());\n  }\n else {\n    m=write(keyBuf,StringCodec.INSTANCE,RedisCommands.ZADD,params.toArray());\n  }\n  return m.map(v -> new NumericResponse<>(command,v));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 190,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 81
      },
      "nodeContext" : "params.add(BigDecimal.valueOf(entry.getScore()).toPlainString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 97,
    "startColumnNumber" : 27,
    "endLineNumber" : 97,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}