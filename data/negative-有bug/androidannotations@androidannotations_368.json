{
  "id" : 368,
  "expression" : "0f",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/functional-test-1-5/src/test/java/com/googlecode/androidannotations/test15/TracedActivityTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0f",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 68,
      "startColumnNumber" : 37,
      "endLineNumber" : 68,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 40
      },
      "nodeContext" : "activity.overloadedMethod(0,0f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 41
      },
      "nodeContext" : "activity.overloadedMethod(0,0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 31,
        "startColumnNumber" : 57,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TracedActivity_ activity=new TracedActivity_();\n  activity.onCreate(null);\n  assertThat(activity.tracedMethodCalled).isFalse();\n  activity.tracedMethod(null,null);\n  assertThat(activity.tracedMethodCalled).isTrue();\n  assertThat(activity.voidTracedMethodCalled).isFalse();\n  activity.voidTracedMethod(null,null);\n  assertThat(activity.voidTracedMethodCalled).isTrue();\n  assertThat(activity.voidTracedMethodDebugCalled).isFalse();\n  activity.voidTracedMethodDebug();\n  assertThat(activity.voidTracedMethodDebugCalled).isTrue();\n  assertThat(activity.voidTracedMethodErrorCalled).isFalse();\n  activity.voidTracedMethodError();\n  assertThat(activity.voidTracedMethodErrorCalled).isTrue();\n  assertThat(activity.voidTracedMethodInfoCalled).isFalse();\n  activity.voidTracedMethodInfo();\n  assertThat(activity.voidTracedMethodInfoCalled).isTrue();\n  assertThat(activity.voidTracedMethodVerboseCalled).isFalse();\n  activity.voidTracedMethodVerbose();\n  assertThat(activity.voidTracedMethodVerboseCalled).isTrue();\n  assertThat(activity.voidTracedMethodWarnCalled).isFalse();\n  activity.voidTracedMethodWarn();\n  assertThat(activity.voidTracedMethodWarnCalled).isTrue();\n  assertThat(activity.overloadedMethodInt).isFalse();\n  activity.overloadedMethod(0);\n  assertThat(activity.overloadedMethodInt).isTrue();\n  assertThat(activity.overloadedMethodIntFLoat).isFalse();\n  activity.overloadedMethod(0,0f);\n  assertThat(activity.overloadedMethodIntFLoat).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1651,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void servicesAreInjected() throws IOException {\n  TracedActivity_ activity=new TracedActivity_();\n  activity.onCreate(null);\n  assertThat(activity.tracedMethodCalled).isFalse();\n  activity.tracedMethod(null,null);\n  assertThat(activity.tracedMethodCalled).isTrue();\n  assertThat(activity.voidTracedMethodCalled).isFalse();\n  activity.voidTracedMethod(null,null);\n  assertThat(activity.voidTracedMethodCalled).isTrue();\n  assertThat(activity.voidTracedMethodDebugCalled).isFalse();\n  activity.voidTracedMethodDebug();\n  assertThat(activity.voidTracedMethodDebugCalled).isTrue();\n  assertThat(activity.voidTracedMethodErrorCalled).isFalse();\n  activity.voidTracedMethodError();\n  assertThat(activity.voidTracedMethodErrorCalled).isTrue();\n  assertThat(activity.voidTracedMethodInfoCalled).isFalse();\n  activity.voidTracedMethodInfo();\n  assertThat(activity.voidTracedMethodInfoCalled).isTrue();\n  assertThat(activity.voidTracedMethodVerboseCalled).isFalse();\n  activity.voidTracedMethodVerbose();\n  assertThat(activity.voidTracedMethodVerboseCalled).isTrue();\n  assertThat(activity.voidTracedMethodWarnCalled).isFalse();\n  activity.voidTracedMethodWarn();\n  assertThat(activity.voidTracedMethodWarnCalled).isTrue();\n  assertThat(activity.overloadedMethodInt).isFalse();\n  activity.overloadedMethod(0);\n  assertThat(activity.overloadedMethodInt).isTrue();\n  assertThat(activity.overloadedMethodIntFLoat).isFalse();\n  activity.overloadedMethod(0,0f);\n  assertThat(activity.overloadedMethodIntFLoat).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 41
      },
      "nodeContext" : "activity.overloadedMethod(0,0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 68,
    "startColumnNumber" : 37,
    "endLineNumber" : 68,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}