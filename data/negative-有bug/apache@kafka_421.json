{
  "id" : 421,
  "expression" : "StandardCharsets",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StandardCharsets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 92,
      "startColumnNumber" : 60,
      "endLineNumber" : 92,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 60,
        "endLineNumber" : 92,
        "endColumnNumber" : 82
      },
      "nodeContext" : "StandardCharsets.UTF_8",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 91,
        "startColumnNumber" : 41,
        "endLineNumber" : 92,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 91,
        "startColumnNumber" : 29,
        "endLineNumber" : 92,
        "endColumnNumber" : 84
      },
      "nodeContext" : "errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 85
      },
      "nodeContext" : "final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 80,
        "startColumnNumber" : 49,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProcessBuilder builder=new ProcessBuilder(execString());\n  Timer timeoutTimer=null;\n  completed=new AtomicBoolean(false);\n  process=builder.start();\n  if (timeout > -1) {\n    timeoutTimer=new Timer();\n    timeoutTimer.schedule(new ShellTimeoutTimerTask(this),timeout);\n  }\n  final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8));\n  BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8));\n  final StringBuffer errMsg=new StringBuffer();\n  Thread errThread=KafkaThread.nonDaemon(\"kafka-shell-thread\",new Runnable(){\n    @Override public void run(){\n      try {\n        String line=errReader.readLine();\n        while ((line != null) && !Thread.currentThread().isInterrupted()) {\n          errMsg.append(line);\n          errMsg.append(System.getProperty(\"line.separator\"));\n          line=errReader.readLine();\n        }\n      }\n catch (      IOException ioe) {\n        LOG.warn(\"Error reading the error stream\",ioe);\n      }\n    }\n  }\n);\n  errThread.start();\n  try {\n    parseExecResult(inReader);\n    exitCode=process.waitFor();\n    try {\n      errThread.join();\n    }\n catch (    InterruptedException ie) {\n      LOG.warn(\"Interrupted while reading the error stream\",ie);\n    }\n    completed.set(true);\n    if (exitCode != 0) {\n      throw new ExitCodeException(exitCode,errMsg.toString());\n    }\n  }\n catch (  InterruptedException ie) {\n    throw new IOException(ie.toString());\n  }\n finally {\n    if (timeoutTimer != null)     timeoutTimer.cancel();\n    try {\n      inReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the input stream\",ioe);\n    }\n    if (!completed.get())     errThread.interrupt();\n    try {\n      errReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the error stream\",ioe);\n    }\n    process.destroy();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Run a command \n */\nprivate void runCommand() throws IOException {\n  ProcessBuilder builder=new ProcessBuilder(execString());\n  Timer timeoutTimer=null;\n  completed=new AtomicBoolean(false);\n  process=builder.start();\n  if (timeout > -1) {\n    timeoutTimer=new Timer();\n    timeoutTimer.schedule(new ShellTimeoutTimerTask(this),timeout);\n  }\n  final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8));\n  BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8));\n  final StringBuffer errMsg=new StringBuffer();\n  Thread errThread=KafkaThread.nonDaemon(\"kafka-shell-thread\",new Runnable(){\n    @Override public void run(){\n      try {\n        String line=errReader.readLine();\n        while ((line != null) && !Thread.currentThread().isInterrupted()) {\n          errMsg.append(line);\n          errMsg.append(System.getProperty(\"line.separator\"));\n          line=errReader.readLine();\n        }\n      }\n catch (      IOException ioe) {\n        LOG.warn(\"Error reading the error stream\",ioe);\n      }\n    }\n  }\n);\n  errThread.start();\n  try {\n    parseExecResult(inReader);\n    exitCode=process.waitFor();\n    try {\n      errThread.join();\n    }\n catch (    InterruptedException ie) {\n      LOG.warn(\"Interrupted while reading the error stream\",ie);\n    }\n    completed.set(true);\n    if (exitCode != 0) {\n      throw new ExitCodeException(exitCode,errMsg.toString());\n    }\n  }\n catch (  InterruptedException ie) {\n    throw new IOException(ie.toString());\n  }\n finally {\n    if (timeoutTimer != null)     timeoutTimer.cancel();\n    try {\n      inReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the input stream\",ioe);\n    }\n    if (!completed.get())     errThread.interrupt();\n    try {\n      errReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the error stream\",ioe);\n    }\n    process.destroy();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.charset.StandardCharsets"
  }, {
    "nodeContext" : "StandardCharsets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 94,
      "startColumnNumber" : 60,
      "endLineNumber" : 94,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 94,
        "startColumnNumber" : 60,
        "endLineNumber" : 94,
        "endColumnNumber" : 82
      },
      "nodeContext" : "StandardCharsets.UTF_8",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 93,
        "startColumnNumber" : 34,
        "endLineNumber" : 94,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 93,
        "startColumnNumber" : 23,
        "endLineNumber" : 94,
        "endColumnNumber" : 84
      },
      "nodeContext" : "inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 85
      },
      "nodeContext" : "BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 80,
        "startColumnNumber" : 49,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProcessBuilder builder=new ProcessBuilder(execString());\n  Timer timeoutTimer=null;\n  completed=new AtomicBoolean(false);\n  process=builder.start();\n  if (timeout > -1) {\n    timeoutTimer=new Timer();\n    timeoutTimer.schedule(new ShellTimeoutTimerTask(this),timeout);\n  }\n  final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8));\n  BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8));\n  final StringBuffer errMsg=new StringBuffer();\n  Thread errThread=KafkaThread.nonDaemon(\"kafka-shell-thread\",new Runnable(){\n    @Override public void run(){\n      try {\n        String line=errReader.readLine();\n        while ((line != null) && !Thread.currentThread().isInterrupted()) {\n          errMsg.append(line);\n          errMsg.append(System.getProperty(\"line.separator\"));\n          line=errReader.readLine();\n        }\n      }\n catch (      IOException ioe) {\n        LOG.warn(\"Error reading the error stream\",ioe);\n      }\n    }\n  }\n);\n  errThread.start();\n  try {\n    parseExecResult(inReader);\n    exitCode=process.waitFor();\n    try {\n      errThread.join();\n    }\n catch (    InterruptedException ie) {\n      LOG.warn(\"Interrupted while reading the error stream\",ie);\n    }\n    completed.set(true);\n    if (exitCode != 0) {\n      throw new ExitCodeException(exitCode,errMsg.toString());\n    }\n  }\n catch (  InterruptedException ie) {\n    throw new IOException(ie.toString());\n  }\n finally {\n    if (timeoutTimer != null)     timeoutTimer.cancel();\n    try {\n      inReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the input stream\",ioe);\n    }\n    if (!completed.get())     errThread.interrupt();\n    try {\n      errReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the error stream\",ioe);\n    }\n    process.destroy();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Run a command \n */\nprivate void runCommand() throws IOException {\n  ProcessBuilder builder=new ProcessBuilder(execString());\n  Timer timeoutTimer=null;\n  completed=new AtomicBoolean(false);\n  process=builder.start();\n  if (timeout > -1) {\n    timeoutTimer=new Timer();\n    timeoutTimer.schedule(new ShellTimeoutTimerTask(this),timeout);\n  }\n  final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8));\n  BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8));\n  final StringBuffer errMsg=new StringBuffer();\n  Thread errThread=KafkaThread.nonDaemon(\"kafka-shell-thread\",new Runnable(){\n    @Override public void run(){\n      try {\n        String line=errReader.readLine();\n        while ((line != null) && !Thread.currentThread().isInterrupted()) {\n          errMsg.append(line);\n          errMsg.append(System.getProperty(\"line.separator\"));\n          line=errReader.readLine();\n        }\n      }\n catch (      IOException ioe) {\n        LOG.warn(\"Error reading the error stream\",ioe);\n      }\n    }\n  }\n);\n  errThread.start();\n  try {\n    parseExecResult(inReader);\n    exitCode=process.waitFor();\n    try {\n      errThread.join();\n    }\n catch (    InterruptedException ie) {\n      LOG.warn(\"Interrupted while reading the error stream\",ie);\n    }\n    completed.set(true);\n    if (exitCode != 0) {\n      throw new ExitCodeException(exitCode,errMsg.toString());\n    }\n  }\n catch (  InterruptedException ie) {\n    throw new IOException(ie.toString());\n  }\n finally {\n    if (timeoutTimer != null)     timeoutTimer.cancel();\n    try {\n      inReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the input stream\",ioe);\n    }\n    if (!completed.get())     errThread.interrupt();\n    try {\n      errReader.close();\n    }\n catch (    IOException ioe) {\n      LOG.warn(\"Error while closing the error stream\",ioe);\n    }\n    process.destroy();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.charset.StandardCharsets"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 92,
    "startColumnNumber" : 60,
    "endLineNumber" : 92,
    "endColumnNumber" : 76
  }, {
    "charLength" : 16,
    "startLineNumber" : 94,
    "startColumnNumber" : 60,
    "endLineNumber" : 94,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}