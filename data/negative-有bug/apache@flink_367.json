{
  "id" : 367,
  "expression" : "!ignoreIfNotExists",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/GenericInMemoryCatalog.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!ignoreIfNotExists",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 146,
      "startColumnNumber" : 19,
      "endLineNumber" : 146,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 146,
        "startColumnNumber" : 15,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ignoreIfNotExists) {\n  throw new DatabaseNotExistException(getName(),databaseName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1810,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (databases.containsKey(databaseName)) {\n  if (isDatabaseEmpty(databaseName)) {\n    databases.remove(databaseName);\n  }\n else   if (cascade) {\n    List<ObjectPath> deleteTablePaths=tables.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n    deleteTablePaths.forEach(objectPath -> {\n      try {\n        dropTable(objectPath,true);\n      }\n catch (      TableNotExistException e) {\n      }\n    }\n);\n    List<ObjectPath> deleteFunctionPaths=functions.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n    deleteFunctionPaths.forEach(objectPath -> {\n      try {\n        dropFunction(objectPath,true);\n      }\n catch (      FunctionNotExistException e) {\n      }\n    }\n);\n    databases.remove(databaseName);\n  }\n else {\n    throw new DatabaseNotEmptyException(getName(),databaseName);\n  }\n}\n else if (!ignoreIfNotExists) {\n  throw new DatabaseNotExistException(getName(),databaseName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1901,
        "startLineNumber" : 108,
        "startColumnNumber" : 72,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(!StringUtils.isNullOrWhitespaceOnly(databaseName));\n  if (databases.containsKey(databaseName)) {\n    if (isDatabaseEmpty(databaseName)) {\n      databases.remove(databaseName);\n    }\n else     if (cascade) {\n      List<ObjectPath> deleteTablePaths=tables.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n      deleteTablePaths.forEach(objectPath -> {\n        try {\n          dropTable(objectPath,true);\n        }\n catch (        TableNotExistException e) {\n        }\n      }\n);\n      List<ObjectPath> deleteFunctionPaths=functions.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n      deleteFunctionPaths.forEach(objectPath -> {\n        try {\n          dropFunction(objectPath,true);\n        }\n catch (        FunctionNotExistException e) {\n        }\n      }\n);\n      databases.remove(databaseName);\n    }\n else {\n      throw new DatabaseNotEmptyException(getName(),databaseName);\n    }\n  }\n else   if (!ignoreIfNotExists) {\n    throw new DatabaseNotExistException(getName(),databaseName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2077,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void dropDatabase(String databaseName,boolean ignoreIfNotExists,boolean cascade) throws DatabaseNotExistException, DatabaseNotEmptyException {\n  checkArgument(!StringUtils.isNullOrWhitespaceOnly(databaseName));\n  if (databases.containsKey(databaseName)) {\n    if (isDatabaseEmpty(databaseName)) {\n      databases.remove(databaseName);\n    }\n else     if (cascade) {\n      List<ObjectPath> deleteTablePaths=tables.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n      deleteTablePaths.forEach(objectPath -> {\n        try {\n          dropTable(objectPath,true);\n        }\n catch (        TableNotExistException e) {\n        }\n      }\n);\n      List<ObjectPath> deleteFunctionPaths=functions.keySet().stream().filter(op -> op.getDatabaseName().equals(databaseName)).collect(Collectors.toList());\n      deleteFunctionPaths.forEach(objectPath -> {\n        try {\n          dropFunction(objectPath,true);\n        }\n catch (        FunctionNotExistException e) {\n        }\n      }\n);\n      databases.remove(databaseName);\n    }\n else {\n      throw new DatabaseNotEmptyException(getName(),databaseName);\n    }\n  }\n else   if (!ignoreIfNotExists) {\n    throw new DatabaseNotExistException(getName(),databaseName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 146,
        "startColumnNumber" : 15,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ignoreIfNotExists) {\n  throw new DatabaseNotExistException(getName(),databaseName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 146,
    "startColumnNumber" : 19,
    "endLineNumber" : 146,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}