{
  "id" : 383,
  "expression" : "numBuckets",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-contrib/moving-average-query/src/main/java/org/apache/druid/query/movingaverage/averagers/BaseAveragerFactory.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numBuckets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 53,
      "startColumnNumber" : 22,
      "endLineNumber" : 53,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 32
      },
      "nodeContext" : "this.numBuckets=numBuckets",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 33
      },
      "nodeContext" : "this.numBuckets=numBuckets;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor.\n * @param name       Name of the Averager\n * @param numBuckets Number of buckets in the analysis window\n * @param fieldName  Field from incoming events to include in the analysis\n * @param cycleSize  Cycle group size. Used to calculate day-of-week option. Default=1 (single element in group).\n */\npublic BaseAveragerFactory(String name,int numBuckets,String fieldName,Integer cycleSize){\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 33
      },
      "nodeContext" : "this.numBuckets=numBuckets;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "numBuckets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 59,
      "startColumnNumber" : 32,
      "endLineNumber" : 59,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 59,
        "startColumnNumber" : 32,
        "endLineNumber" : 59,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numBuckets > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor.\n * @param name       Name of the Averager\n * @param numBuckets Number of buckets in the analysis window\n * @param fieldName  Field from incoming events to include in the analysis\n * @param cycleSize  Cycle group size. Used to calculate day-of-week option. Default=1 (single element in group).\n */\npublic BaseAveragerFactory(String name,int numBuckets,String fieldName,Integer cycleSize){\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "numBuckets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 60,
      "startColumnNumber" : 51,
      "endLineNumber" : 60,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 60,
        "startColumnNumber" : 34,
        "endLineNumber" : 60,
        "endColumnNumber" : 61
      },
      "nodeContext" : "this.cycleSize > numBuckets",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 60,
        "startColumnNumber" : 33,
        "endLineNumber" : 60,
        "endColumnNumber" : 62
      },
      "nodeContext" : "(this.cycleSize > numBuckets)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 60,
        "startColumnNumber" : 32,
        "endLineNumber" : 60,
        "endColumnNumber" : 62
      },
      "nodeContext" : "!(this.cycleSize > numBuckets)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor.\n * @param name       Name of the Averager\n * @param numBuckets Number of buckets in the analysis window\n * @param fieldName  Field from incoming events to include in the analysis\n * @param cycleSize  Cycle group size. Used to calculate day-of-week option. Default=1 (single element in group).\n */\npublic BaseAveragerFactory(String name,int numBuckets,String fieldName,Integer cycleSize){\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "numBuckets",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 61,
      "startColumnNumber" : 32,
      "endLineNumber" : 61,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 61,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 59
      },
      "nodeContext" : "numBuckets % this.cycleSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "numBuckets % this.cycleSize == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 121
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 122
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor.\n * @param name       Name of the Averager\n * @param numBuckets Number of buckets in the analysis window\n * @param fieldName  Field from incoming events to include in the analysis\n * @param cycleSize  Cycle group size. Used to calculate day-of-week option. Default=1 (single element in group).\n */\npublic BaseAveragerFactory(String name,int numBuckets,String fieldName,Integer cycleSize){\n  this.name=name;\n  this.numBuckets=numBuckets;\n  this.fieldName=fieldName;\n  this.cycleSize=(cycleSize != null) ? cycleSize : DEFAULT_PERIOD;\n  Preconditions.checkNotNull(name,\"Must have a valid, non-null averager name\");\n  Preconditions.checkNotNull(fieldName,\"Must have a valid, non-null field name\");\n  Preconditions.checkArgument(this.cycleSize > 0,\"Cycle size must be greater than zero\");\n  Preconditions.checkArgument(numBuckets > 0,\"Bucket size must be greater than zero\");\n  Preconditions.checkArgument(!(this.cycleSize > numBuckets),\"Cycle size must be less than the bucket size\");\n  Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 122
      },
      "nodeContext" : "Preconditions.checkArgument(numBuckets % this.cycleSize == 0,\"cycleSize must devide numBuckets without a remainder\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 53,
    "startColumnNumber" : 22,
    "endLineNumber" : 53,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 59,
    "startColumnNumber" : 32,
    "endLineNumber" : 59,
    "endColumnNumber" : 42
  }, {
    "charLength" : 10,
    "startLineNumber" : 60,
    "startColumnNumber" : 51,
    "endLineNumber" : 60,
    "endColumnNumber" : 61
  }, {
    "charLength" : 10,
    "startLineNumber" : 61,
    "startColumnNumber" : 32,
    "endLineNumber" : 61,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}