{
  "id" : 40,
  "expression" : "\"options\"",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"options\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 307,
      "startColumnNumber" : 60,
      "endLineNumber" : 307,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 307,
        "startColumnNumber" : 39,
        "endLineNumber" : 307,
        "endColumnNumber" : 70
      },
      "nodeContext" : "dfa.getPropertyValue(\"options\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 307,
        "startColumnNumber" : 17,
        "endLineNumber" : 307,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(Map<String,String>)dfa.getPropertyValue(\"options\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 307,
        "startColumnNumber" : 16,
        "endLineNumber" : 307,
        "endColumnNumber" : 71
      },
      "nodeContext" : "((Map<String,String>)dfa.getPropertyValue(\"options\"))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 307,
        "startColumnNumber" : 5,
        "endLineNumber" : 307,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 307,
        "startColumnNumber" : 5,
        "endLineNumber" : 308,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\"))).containsExactly(entry(\"useKeyTab\",\"true\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 307,
        "startColumnNumber" : 5,
        "endLineNumber" : 308,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\"))).containsExactly(entry(\"useKeyTab\",\"true\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2172,
        "startLineNumber" : 267,
        "startColumnNumber" : 22,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DefaultKafkaProducerFactory<?,?> producerFactory=context.getBean(DefaultKafkaProducerFactory.class);\n  DefaultKafkaConsumerFactory<?,?> consumerFactory=context.getBean(DefaultKafkaConsumerFactory.class);\n  KafkaTemplate<?,?> kafkaTemplate=context.getBean(KafkaTemplate.class);\n  KafkaListenerContainerFactory<?> kafkaListenerContainerFactory=context.getBean(KafkaListenerContainerFactory.class);\n  assertThat(kafkaTemplate.getMessageConverter()).isInstanceOf(MessagingMessageConverter.class);\n  assertThat(new DirectFieldAccessor(kafkaTemplate).getPropertyValue(\"producerFactory\")).isEqualTo(producerFactory);\n  assertThat(kafkaTemplate.getDefaultTopic()).isEqualTo(\"testTopic\");\n  DirectFieldAccessor dfa=new DirectFieldAccessor(kafkaListenerContainerFactory);\n  assertThat(dfa.getPropertyValue(\"consumerFactory\")).isEqualTo(consumerFactory);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackMode\")).isEqualTo(AckMode.MANUAL);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackCount\")).isEqualTo(123);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackTime\")).isEqualTo(456L);\n  assertThat(dfa.getPropertyValue(\"concurrency\")).isEqualTo(3);\n  assertThat(dfa.getPropertyValue(\"containerProperties.pollTimeout\")).isEqualTo(2000L);\n  assertThat(dfa.getPropertyValue(\"batchListener\")).isEqualTo(true);\n  assertThat(context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)).hasSize(1);\n  KafkaJaasLoginModuleInitializer jaas=context.getBean(KafkaJaasLoginModuleInitializer.class);\n  dfa=new DirectFieldAccessor(jaas);\n  assertThat(dfa.getPropertyValue(\"loginModule\")).isEqualTo(\"foo\");\n  assertThat(dfa.getPropertyValue(\"controlFlag\")).isEqualTo(AppConfigurationEntry.LoginModuleControlFlag.REQUISITE);\n  assertThat(context.getBeansOfType(KafkaTransactionManager.class)).hasSize(1);\n  assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\"))).containsExactly(entry(\"useKeyTab\",\"true\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2185,
        "startLineNumber" : 267,
        "startColumnNumber" : 9,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(context) -> {\n  DefaultKafkaProducerFactory<?,?> producerFactory=context.getBean(DefaultKafkaProducerFactory.class);\n  DefaultKafkaConsumerFactory<?,?> consumerFactory=context.getBean(DefaultKafkaConsumerFactory.class);\n  KafkaTemplate<?,?> kafkaTemplate=context.getBean(KafkaTemplate.class);\n  KafkaListenerContainerFactory<?> kafkaListenerContainerFactory=context.getBean(KafkaListenerContainerFactory.class);\n  assertThat(kafkaTemplate.getMessageConverter()).isInstanceOf(MessagingMessageConverter.class);\n  assertThat(new DirectFieldAccessor(kafkaTemplate).getPropertyValue(\"producerFactory\")).isEqualTo(producerFactory);\n  assertThat(kafkaTemplate.getDefaultTopic()).isEqualTo(\"testTopic\");\n  DirectFieldAccessor dfa=new DirectFieldAccessor(kafkaListenerContainerFactory);\n  assertThat(dfa.getPropertyValue(\"consumerFactory\")).isEqualTo(consumerFactory);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackMode\")).isEqualTo(AckMode.MANUAL);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackCount\")).isEqualTo(123);\n  assertThat(dfa.getPropertyValue(\"containerProperties.ackTime\")).isEqualTo(456L);\n  assertThat(dfa.getPropertyValue(\"concurrency\")).isEqualTo(3);\n  assertThat(dfa.getPropertyValue(\"containerProperties.pollTimeout\")).isEqualTo(2000L);\n  assertThat(dfa.getPropertyValue(\"batchListener\")).isEqualTo(true);\n  assertThat(context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)).hasSize(1);\n  KafkaJaasLoginModuleInitializer jaas=context.getBean(KafkaJaasLoginModuleInitializer.class);\n  dfa=new DirectFieldAccessor(jaas);\n  assertThat(dfa.getPropertyValue(\"loginModule\")).isEqualTo(\"foo\");\n  assertThat(dfa.getPropertyValue(\"controlFlag\")).isEqualTo(AppConfigurationEntry.LoginModuleControlFlag.REQUISITE);\n  assertThat(context.getBeansOfType(KafkaTransactionManager.class)).hasSize(1);\n  assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\"))).containsExactly(entry(\"useKeyTab\",\"true\"));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 261,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 307,
        "startColumnNumber" : 5,
        "endLineNumber" : 307,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(((Map<String,String>)dfa.getPropertyValue(\"options\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 307,
    "startColumnNumber" : 60,
    "endLineNumber" : 307,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}