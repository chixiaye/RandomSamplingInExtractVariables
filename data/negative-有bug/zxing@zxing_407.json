{
  "id" : 407,
  "expression" : "image.get(j,i)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/qrcode/detector/AlignmentPatternFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "image.get(j,i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 105,
      "startColumnNumber" : 26,
      "endLineNumber" : 105,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 105,
        "startColumnNumber" : 25,
        "endLineNumber" : 105,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!image.get(j,i)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 105,
        "startColumnNumber" : 13,
        "endLineNumber" : 105,
        "endColumnNumber" : 41
      },
      "nodeContext" : "j < maxJ && !image.get(j,i)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (j < maxJ && !image.get(j,i)) {\n  j++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 95,
        "startColumnNumber" : 46,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));\n  stateCount[0]=0;\n  stateCount[1]=0;\n  stateCount[2]=0;\n  int j=startX;\n  while (j < maxJ && !image.get(j,i)) {\n    j++;\n  }\n  int currentState=0;\n  while (j < maxJ) {\n    if (image.get(j,i)) {\n      if (currentState == 1) {\n        stateCount[currentState]++;\n      }\n else {\n        if (currentState == 2) {\n          if (foundPatternCross(stateCount)) {\n            AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);\n            if (confirmed != null) {\n              return confirmed;\n            }\n          }\n          stateCount[0]=stateCount[2];\n          stateCount[1]=1;\n          stateCount[2]=0;\n          currentState=1;\n        }\n else {\n          stateCount[++currentState]++;\n        }\n      }\n    }\n else {\n      if (currentState == 1) {\n        currentState++;\n      }\n      stateCount[currentState]++;\n    }\n    j++;\n  }\n  if (foundPatternCross(stateCount)) {\n    AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);\n    if (confirmed != null) {\n      return confirmed;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1821,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int iGen=0; iGen < height; iGen++) {\n  int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));\n  stateCount[0]=0;\n  stateCount[1]=0;\n  stateCount[2]=0;\n  int j=startX;\n  while (j < maxJ && !image.get(j,i)) {\n    j++;\n  }\n  int currentState=0;\n  while (j < maxJ) {\n    if (image.get(j,i)) {\n      if (currentState == 1) {\n        stateCount[currentState]++;\n      }\n else {\n        if (currentState == 2) {\n          if (foundPatternCross(stateCount)) {\n            AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);\n            if (confirmed != null) {\n              return confirmed;\n            }\n          }\n          stateCount[0]=stateCount[2];\n          stateCount[1]=1;\n          stateCount[2]=0;\n          currentState=1;\n        }\n else {\n          stateCount[++currentState]++;\n        }\n      }\n    }\n else {\n      if (currentState == 1) {\n        currentState++;\n      }\n      stateCount[currentState]++;\n    }\n    j++;\n  }\n  if (foundPatternCross(stateCount)) {\n    AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);\n    if (confirmed != null) {\n      return confirmed;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2396,
        "startLineNumber" : 87,
        "startColumnNumber" : 51,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int startX=this.startX;\n  int height=this.height;\n  int maxJ=startX + width;\n  int middleI=startY + (height >> 1);\n  int[] stateCount=new int[3];\n  for (int iGen=0; iGen < height; iGen++) {\n    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));\n    stateCount[0]=0;\n    stateCount[1]=0;\n    stateCount[2]=0;\n    int j=startX;\n    while (j < maxJ && !image.get(j,i)) {\n      j++;\n    }\n    int currentState=0;\n    while (j < maxJ) {\n      if (image.get(j,i)) {\n        if (currentState == 1) {\n          stateCount[currentState]++;\n        }\n else {\n          if (currentState == 2) {\n            if (foundPatternCross(stateCount)) {\n              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);\n              if (confirmed != null) {\n                return confirmed;\n              }\n            }\n            stateCount[0]=stateCount[2];\n            stateCount[1]=1;\n            stateCount[2]=0;\n            currentState=1;\n          }\n else {\n            stateCount[++currentState]++;\n          }\n        }\n      }\n else {\n        if (currentState == 1) {\n          currentState++;\n        }\n        stateCount[currentState]++;\n      }\n      j++;\n    }\n    if (foundPatternCross(stateCount)) {\n      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);\n      if (confirmed != null) {\n        return confirmed;\n      }\n    }\n  }\n  if (!possibleCenters.isEmpty()) {\n    return possibleCenters.get(0);\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2751,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since it's pretty performance-critical and so is written to be fast foremost.</p>\n * @return {@link AlignmentPattern} if found\n * @throws NotFoundException if not found\n */\nAlignmentPattern find() throws NotFoundException {\n  int startX=this.startX;\n  int height=this.height;\n  int maxJ=startX + width;\n  int middleI=startY + (height >> 1);\n  int[] stateCount=new int[3];\n  for (int iGen=0; iGen < height; iGen++) {\n    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));\n    stateCount[0]=0;\n    stateCount[1]=0;\n    stateCount[2]=0;\n    int j=startX;\n    while (j < maxJ && !image.get(j,i)) {\n      j++;\n    }\n    int currentState=0;\n    while (j < maxJ) {\n      if (image.get(j,i)) {\n        if (currentState == 1) {\n          stateCount[currentState]++;\n        }\n else {\n          if (currentState == 2) {\n            if (foundPatternCross(stateCount)) {\n              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);\n              if (confirmed != null) {\n                return confirmed;\n              }\n            }\n            stateCount[0]=stateCount[2];\n            stateCount[1]=1;\n            stateCount[2]=0;\n            currentState=1;\n          }\n else {\n            stateCount[++currentState]++;\n          }\n        }\n      }\n else {\n        if (currentState == 1) {\n          currentState++;\n        }\n        stateCount[currentState]++;\n      }\n      j++;\n    }\n    if (foundPatternCross(stateCount)) {\n      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);\n      if (confirmed != null) {\n        return confirmed;\n      }\n    }\n  }\n  if (!possibleCenters.isEmpty()) {\n    return possibleCenters.get(0);\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 105,
        "startColumnNumber" : 13,
        "endLineNumber" : 105,
        "endColumnNumber" : 41
      },
      "nodeContext" : "j < maxJ && !image.get(j,i)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 105,
    "startColumnNumber" : 26,
    "endLineNumber" : 105,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}