{
  "id" : 334,
  "expression" : "map",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/util/TypeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 424,
      "startColumnNumber" : 42,
      "endLineNumber" : 424,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 424,
        "startColumnNumber" : 42,
        "endLineNumber" : 424,
        "endColumnNumber" : 80
      },
      "nodeContext" : "map.containsKey(JSON.DEFAULT_TYPE_KEY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 424,
        "startColumnNumber" : 41,
        "endLineNumber" : 424,
        "endColumnNumber" : 80
      },
      "nodeContext" : "!map.containsKey(JSON.DEFAULT_TYPE_KEY)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 424,
        "startColumnNumber" : 16,
        "endLineNumber" : 424,
        "endColumnNumber" : 80
      },
      "nodeContext" : "clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 424,
        "startColumnNumber" : 12,
        "endLineNumber" : 426,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\n  return (T)obj;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 418,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (clazz == Map.class) {\n    return (T)obj;\n  }\n  Map map=(Map)obj;\n  if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\n    return (T)obj;\n  }\n  return castToJavaBean((Map<String,Object>)obj,clazz,mapping);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 418,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (obj instanceof Map) {\n  if (clazz == Map.class) {\n    return (T)obj;\n  }\n  Map map=(Map)obj;\n  if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\n    return (T)obj;\n  }\n  return castToJavaBean((Map<String,Object>)obj,clazz,mapping);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3803,
        "startLineNumber" : 405,
        "startColumnNumber" : 85,
        "endLineNumber" : 536,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (obj == null) {\n    return null;\n  }\n  if (clazz == null) {\n    throw new IllegalArgumentException(\"clazz is null\");\n  }\n  if (clazz == obj.getClass()) {\n    return (T)obj;\n  }\n  if (obj instanceof Map) {\n    if (clazz == Map.class) {\n      return (T)obj;\n    }\n    Map map=(Map)obj;\n    if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\n      return (T)obj;\n    }\n    return castToJavaBean((Map<String,Object>)obj,clazz,mapping);\n  }\n  if (clazz.isArray()) {\n    if (obj instanceof Collection) {\n      Collection collection=(Collection)obj;\n      int index=0;\n      Object array=Array.newInstance(clazz.getComponentType(),collection.size());\n      for (      Object item : collection) {\n        Object value=cast(item,clazz.getComponentType(),mapping);\n        Array.set(array,index,value);\n        index++;\n      }\n      return (T)array;\n    }\n    if (clazz == byte[].class) {\n      return (T)castToBytes(obj);\n    }\n  }\n  if (clazz.isAssignableFrom(obj.getClass())) {\n    return (T)obj;\n  }\n  if (clazz == boolean.class || clazz == Boolean.class) {\n    return (T)castToBoolean(obj);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)castToByte(obj);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)castToShort(obj);\n  }\n  if (clazz == int.class || clazz == Integer.class) {\n    return (T)castToInt(obj);\n  }\n  if (clazz == long.class || clazz == Long.class) {\n    return (T)castToLong(obj);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)castToFloat(obj);\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)castToDouble(obj);\n  }\n  if (clazz == String.class) {\n    return (T)castToString(obj);\n  }\n  if (clazz == BigDecimal.class) {\n    return (T)castToBigDecimal(obj);\n  }\n  if (clazz == BigInteger.class) {\n    return (T)castToBigInteger(obj);\n  }\n  if (clazz == Date.class) {\n    return (T)castToDate(obj);\n  }\n  if (clazz.isEnum()) {\n    return (T)castToEnum(obj,clazz,mapping);\n  }\n  if (Calendar.class.isAssignableFrom(clazz)) {\n    Date date=castToDate(obj);\n    Calendar calendar;\n    if (clazz == Calendar.class) {\n      calendar=Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale);\n    }\n else {\n      try {\n        calendar=(Calendar)clazz.newInstance();\n      }\n catch (      Exception e) {\n        throw new JSONException(\"can not cast to : \" + clazz.getName(),e);\n      }\n    }\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  if (obj instanceof String) {\n    String strVal=(String)obj;\n    if (strVal.length() == 0 || \"null\".equals(strVal)) {\n      return null;\n    }\n    if (clazz == java.util.Currency.class) {\n      return (T)java.util.Currency.getInstance(strVal);\n    }\n  }\n  throw new JSONException(\"can not cast to : \" + clazz.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 534,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3935,
        "startLineNumber" : 404,
        "startColumnNumber" : 4,
        "endLineNumber" : 536,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static final <T>T cast(Object obj,Class<T> clazz,ParserConfig mapping){\n  if (obj == null) {\n    return null;\n  }\n  if (clazz == null) {\n    throw new IllegalArgumentException(\"clazz is null\");\n  }\n  if (clazz == obj.getClass()) {\n    return (T)obj;\n  }\n  if (obj instanceof Map) {\n    if (clazz == Map.class) {\n      return (T)obj;\n    }\n    Map map=(Map)obj;\n    if (clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)) {\n      return (T)obj;\n    }\n    return castToJavaBean((Map<String,Object>)obj,clazz,mapping);\n  }\n  if (clazz.isArray()) {\n    if (obj instanceof Collection) {\n      Collection collection=(Collection)obj;\n      int index=0;\n      Object array=Array.newInstance(clazz.getComponentType(),collection.size());\n      for (      Object item : collection) {\n        Object value=cast(item,clazz.getComponentType(),mapping);\n        Array.set(array,index,value);\n        index++;\n      }\n      return (T)array;\n    }\n    if (clazz == byte[].class) {\n      return (T)castToBytes(obj);\n    }\n  }\n  if (clazz.isAssignableFrom(obj.getClass())) {\n    return (T)obj;\n  }\n  if (clazz == boolean.class || clazz == Boolean.class) {\n    return (T)castToBoolean(obj);\n  }\n  if (clazz == byte.class || clazz == Byte.class) {\n    return (T)castToByte(obj);\n  }\n  if (clazz == short.class || clazz == Short.class) {\n    return (T)castToShort(obj);\n  }\n  if (clazz == int.class || clazz == Integer.class) {\n    return (T)castToInt(obj);\n  }\n  if (clazz == long.class || clazz == Long.class) {\n    return (T)castToLong(obj);\n  }\n  if (clazz == float.class || clazz == Float.class) {\n    return (T)castToFloat(obj);\n  }\n  if (clazz == double.class || clazz == Double.class) {\n    return (T)castToDouble(obj);\n  }\n  if (clazz == String.class) {\n    return (T)castToString(obj);\n  }\n  if (clazz == BigDecimal.class) {\n    return (T)castToBigDecimal(obj);\n  }\n  if (clazz == BigInteger.class) {\n    return (T)castToBigInteger(obj);\n  }\n  if (clazz == Date.class) {\n    return (T)castToDate(obj);\n  }\n  if (clazz.isEnum()) {\n    return (T)castToEnum(obj,clazz,mapping);\n  }\n  if (Calendar.class.isAssignableFrom(clazz)) {\n    Date date=castToDate(obj);\n    Calendar calendar;\n    if (clazz == Calendar.class) {\n      calendar=Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale);\n    }\n else {\n      try {\n        calendar=(Calendar)clazz.newInstance();\n      }\n catch (      Exception e) {\n        throw new JSONException(\"can not cast to : \" + clazz.getName(),e);\n      }\n    }\n    calendar.setTime(date);\n    return (T)calendar;\n  }\n  if (obj instanceof String) {\n    String strVal=(String)obj;\n    if (strVal.length() == 0 || \"null\".equals(strVal)) {\n      return null;\n    }\n    if (clazz == java.util.Currency.class) {\n      return (T)java.util.Currency.getInstance(strVal);\n    }\n  }\n  throw new JSONException(\"can not cast to : \" + clazz.getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 424,
        "startColumnNumber" : 16,
        "endLineNumber" : 424,
        "endColumnNumber" : 80
      },
      "nodeContext" : "clazz == Object.class && !map.containsKey(JSON.DEFAULT_TYPE_KEY)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 424,
    "startColumnNumber" : 42,
    "endLineNumber" : 424,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}