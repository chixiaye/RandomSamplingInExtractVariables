{
  "id" : 70,
  "expression" : "checkingFieldNames.get(member)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "checkingFieldNames.get(member)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 194,
      "startColumnNumber" : 28,
      "endLineNumber" : 194,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 194,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 58
      },
      "nodeContext" : "count=checkingFieldNames.get(member)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Integer count=checkingFieldNames.get(member);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 191,
        "startColumnNumber" : 113,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  InjectionMetadata.InjectedElement injectedElement=entry.getKey();\n  String member=injectedElement.getMember().toString();\n  Integer count=checkingFieldNames.get(member);\n  Assertions.assertNotNull(count);\n  checkingFieldNames.put(member,count + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<InjectionMetadata.InjectedElement,ReferenceBean<?>> entry : referenceBeanMap.entrySet()) {\n  InjectionMetadata.InjectedElement injectedElement=entry.getKey();\n  String member=injectedElement.getMember().toString();\n  Integer count=checkingFieldNames.get(member);\n  Assertions.assertNotNull(count);\n  checkingFieldNames.put(member,count + 1);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1938,
        "startLineNumber" : 175,
        "startColumnNumber" : 55,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ReferenceAnnotationBeanPostProcessor beanPostProcessor=context.getBean(BEAN_NAME,ReferenceAnnotationBeanPostProcessor.class);\n  Map<InjectionMetadata.InjectedElement,ReferenceBean<?>> referenceBeanMap=beanPostProcessor.getInjectedFieldReferenceBeanMap();\n  Assertions.assertEquals(4,referenceBeanMap.size());\n  Map<String,Integer> checkingFieldNames=new HashMap<>();\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest$MyConfiguration.helloService\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest.helloService\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest.helloService2\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.DemoService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest$ParentBean.demoServiceFromParent\",0);\n  for (  Map.Entry<InjectionMetadata.InjectedElement,ReferenceBean<?>> entry : referenceBeanMap.entrySet()) {\n    InjectionMetadata.InjectedElement injectedElement=entry.getKey();\n    String member=injectedElement.getMember().toString();\n    Integer count=checkingFieldNames.get(member);\n    Assertions.assertNotNull(count);\n    checkingFieldNames.put(member,count + 1);\n  }\n  for (  Map.Entry<String,Integer> entry : checkingFieldNames.entrySet()) {\n    Assertions.assertEquals(1,entry.getValue().intValue(),\"check field element failed: \" + entry.getKey());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1999,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetInjectedFieldReferenceBeanMap(){\n  ReferenceAnnotationBeanPostProcessor beanPostProcessor=context.getBean(BEAN_NAME,ReferenceAnnotationBeanPostProcessor.class);\n  Map<InjectionMetadata.InjectedElement,ReferenceBean<?>> referenceBeanMap=beanPostProcessor.getInjectedFieldReferenceBeanMap();\n  Assertions.assertEquals(4,referenceBeanMap.size());\n  Map<String,Integer> checkingFieldNames=new HashMap<>();\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest$MyConfiguration.helloService\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest.helloService\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.HelloService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest.helloService2\",0);\n  checkingFieldNames.put(\"private org.apache.dubbo.config.spring.api.DemoService org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessorTest$ParentBean.demoServiceFromParent\",0);\n  for (  Map.Entry<InjectionMetadata.InjectedElement,ReferenceBean<?>> entry : referenceBeanMap.entrySet()) {\n    InjectionMetadata.InjectedElement injectedElement=entry.getKey();\n    String member=injectedElement.getMember().toString();\n    Integer count=checkingFieldNames.get(member);\n    Assertions.assertNotNull(count);\n    checkingFieldNames.put(member,count + 1);\n  }\n  for (  Map.Entry<String,Integer> entry : checkingFieldNames.entrySet()) {\n    Assertions.assertEquals(1,entry.getValue().intValue(),\"check field element failed: \" + entry.getKey());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Integer count=checkingFieldNames.get(member);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 194,
    "startColumnNumber" : 28,
    "endLineNumber" : 194,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}