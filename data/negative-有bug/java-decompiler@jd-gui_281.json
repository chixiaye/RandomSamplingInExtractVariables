{
  "id" : 281,
  "expression" : "new char[classReader.getMaxStringLength()]",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/service/indexer/ClassFileIndexerProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new char[classReader.getMaxStringLength()]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 73,
      "startColumnNumber" : 28,
      "endLineNumber" : 73,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 73,
        "startColumnNumber" : 19,
        "endLineNumber" : 73,
        "endColumnNumber" : 70
      },
      "nodeContext" : "buffer=new char[classReader.getMaxStringLength()]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 71
      },
      "nodeContext" : "char[] buffer=new char[classReader.getMaxStringLength()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4564,
        "startLineNumber" : 62,
        "startColumnNumber" : 63,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ClassReader classReader=new ClassReader(inputStream);\n  classReader.accept(classIndexer,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n  for (  String descriptor : descriptorSet) {\n    new SignatureReader(descriptor).accept(signatureIndexer);\n  }\n  char[] buffer=new char[classReader.getMaxStringLength()];\n  for (int i=classReader.getItemCount() - 1; i > 0; i--) {\n    int startIndex=classReader.getItem(i);\n    if (startIndex != 0) {\n      int tag=classReader.readByte(startIndex - 1);\nswitch (tag) {\ncase 7:        String className=classReader.readUTF8(startIndex,buffer);\n      if (className.startsWith(\"[\")) {\n        new SignatureReader(className).acceptType(signatureIndexer);\n      }\n else {\n        typeReferenceSet.add(className);\n      }\n    break;\ncase 8:  String str=classReader.readUTF8(startIndex,buffer);\nstringSet.add(str);\nbreak;\ncase 9:int nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nint nameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString fieldName=classReader.readUTF8(nameAndTypeIndex,buffer);\nfieldReferenceSet.add(fieldName);\n}\nbreak;\ncase 10:case 11:nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nnameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString methodName=classReader.readUTF8(nameAndTypeIndex,buffer);\nif (\"<init>\".equals(methodName)) {\nint classItem=classReader.readUnsignedShort(startIndex);\nint classIndex=classReader.getItem(classItem);\nclassName=classReader.readUTF8(classIndex,buffer);\nconstructorReferenceSet.add(className);\n}\n else {\nmethodReferenceSet.add(methodName);\n}\n}\nbreak;\n}\n}\n}\nString typeName=classIndexer.name;\naddToIndex(indexes,\"typeDeclarations\",typeDeclarationSet,entry);\naddToIndex(indexes,\"constructorDeclarations\",constructorDeclarationSet,entry);\naddToIndex(indexes,\"methodDeclarations\",methodDeclarationSet,entry);\naddToIndex(indexes,\"fieldDeclarations\",fieldDeclarationSet,entry);\naddToIndex(indexes,\"typeReferences\",typeReferenceSet,entry);\naddToIndex(indexes,\"constructorReferences\",constructorReferenceSet,entry);\naddToIndex(indexes,\"methodReferences\",methodReferenceSet,entry);\naddToIndex(indexes,\"fieldReferences\",fieldReferenceSet,entry);\naddToIndex(indexes,\"strings\",stringSet,entry);\nif (superTypeNameSet.size() > 0) {\nMap<String,Collection> index=indexes.getIndex(\"subTypeNames\");\nfor (String superTypeName : superTypeNameSet) {\nindex.get(superTypeName).add(typeName);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 388,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4706,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (InputStream inputStream=entry.getInputStream()){\n  ClassReader classReader=new ClassReader(inputStream);\n  classReader.accept(classIndexer,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n  for (  String descriptor : descriptorSet) {\n    new SignatureReader(descriptor).accept(signatureIndexer);\n  }\n  char[] buffer=new char[classReader.getMaxStringLength()];\n  for (int i=classReader.getItemCount() - 1; i > 0; i--) {\n    int startIndex=classReader.getItem(i);\n    if (startIndex != 0) {\n      int tag=classReader.readByte(startIndex - 1);\nswitch (tag) {\ncase 7:        String className=classReader.readUTF8(startIndex,buffer);\n      if (className.startsWith(\"[\")) {\n        new SignatureReader(className).acceptType(signatureIndexer);\n      }\n else {\n        typeReferenceSet.add(className);\n      }\n    break;\ncase 8:  String str=classReader.readUTF8(startIndex,buffer);\nstringSet.add(str);\nbreak;\ncase 9:int nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nint nameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString fieldName=classReader.readUTF8(nameAndTypeIndex,buffer);\nfieldReferenceSet.add(fieldName);\n}\nbreak;\ncase 10:case 11:nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nnameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString methodName=classReader.readUTF8(nameAndTypeIndex,buffer);\nif (\"<init>\".equals(methodName)) {\nint classItem=classReader.readUnsignedShort(startIndex);\nint classIndex=classReader.getItem(classItem);\nclassName=classReader.readUTF8(classIndex,buffer);\nconstructorReferenceSet.add(className);\n}\n else {\nmethodReferenceSet.add(methodName);\n}\n}\nbreak;\n}\n}\n}\nString typeName=classIndexer.name;\naddToIndex(indexes,\"typeDeclarations\",typeDeclarationSet,entry);\naddToIndex(indexes,\"constructorDeclarations\",constructorDeclarationSet,entry);\naddToIndex(indexes,\"methodDeclarations\",methodDeclarationSet,entry);\naddToIndex(indexes,\"fieldDeclarations\",fieldDeclarationSet,entry);\naddToIndex(indexes,\"typeReferences\",typeReferenceSet,entry);\naddToIndex(indexes,\"constructorReferences\",constructorReferenceSet,entry);\naddToIndex(indexes,\"methodReferences\",methodReferenceSet,entry);\naddToIndex(indexes,\"fieldReferences\",fieldReferenceSet,entry);\naddToIndex(indexes,\"strings\",stringSet,entry);\nif (superTypeNameSet.size() > 0) {\nMap<String,Collection> index=indexes.getIndex(\"subTypeNames\");\nfor (String superTypeName : superTypeNameSet) {\nindex.get(superTypeName).add(typeName);\n}\n}\n}\n catch (Exception e) {\nassert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 408,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5158,
        "startLineNumber" : 48,
        "startColumnNumber" : 71,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  typeDeclarationSet.clear();\n  constructorDeclarationSet.clear();\n  methodDeclarationSet.clear();\n  fieldDeclarationSet.clear();\n  typeReferenceSet.clear();\n  constructorReferenceSet.clear();\n  methodReferenceSet.clear();\n  fieldReferenceSet.clear();\n  stringSet.clear();\n  superTypeNameSet.clear();\n  descriptorSet.clear();\n  try (InputStream inputStream=entry.getInputStream()){\n    ClassReader classReader=new ClassReader(inputStream);\n    classReader.accept(classIndexer,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    for (    String descriptor : descriptorSet) {\n      new SignatureReader(descriptor).accept(signatureIndexer);\n    }\n    char[] buffer=new char[classReader.getMaxStringLength()];\n    for (int i=classReader.getItemCount() - 1; i > 0; i--) {\n      int startIndex=classReader.getItem(i);\n      if (startIndex != 0) {\n        int tag=classReader.readByte(startIndex - 1);\nswitch (tag) {\ncase 7:          String className=classReader.readUTF8(startIndex,buffer);\n        if (className.startsWith(\"[\")) {\n          new SignatureReader(className).acceptType(signatureIndexer);\n        }\n else {\n          typeReferenceSet.add(className);\n        }\n      break;\ncase 8:    String str=classReader.readUTF8(startIndex,buffer);\n  stringSet.add(str);\nbreak;\ncase 9:int nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nint nameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString fieldName=classReader.readUTF8(nameAndTypeIndex,buffer);\nfieldReferenceSet.add(fieldName);\n}\nbreak;\ncase 10:case 11:nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nnameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString methodName=classReader.readUTF8(nameAndTypeIndex,buffer);\nif (\"<init>\".equals(methodName)) {\nint classItem=classReader.readUnsignedShort(startIndex);\nint classIndex=classReader.getItem(classItem);\nclassName=classReader.readUTF8(classIndex,buffer);\nconstructorReferenceSet.add(className);\n}\n else {\nmethodReferenceSet.add(methodName);\n}\n}\nbreak;\n}\n}\n}\nString typeName=classIndexer.name;\naddToIndex(indexes,\"typeDeclarations\",typeDeclarationSet,entry);\naddToIndex(indexes,\"constructorDeclarations\",constructorDeclarationSet,entry);\naddToIndex(indexes,\"methodDeclarations\",methodDeclarationSet,entry);\naddToIndex(indexes,\"fieldDeclarations\",fieldDeclarationSet,entry);\naddToIndex(indexes,\"typeReferences\",typeReferenceSet,entry);\naddToIndex(indexes,\"constructorReferences\",constructorReferenceSet,entry);\naddToIndex(indexes,\"methodReferences\",methodReferenceSet,entry);\naddToIndex(indexes,\"fieldReferences\",fieldReferenceSet,entry);\naddToIndex(indexes,\"strings\",stringSet,entry);\nif (superTypeNameSet.size() > 0) {\nMap<String,Collection> index=indexes.getIndex(\"subTypeNames\");\nfor (String superTypeName : superTypeNameSet) {\nindex.get(superTypeName).add(typeName);\n}\n}\n}\n catch (Exception e) {\nassert ExceptionUtil.printStackTrace(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 453,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5276,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public void index(API api,Container.Entry entry,Indexes indexes){\n  typeDeclarationSet.clear();\n  constructorDeclarationSet.clear();\n  methodDeclarationSet.clear();\n  fieldDeclarationSet.clear();\n  typeReferenceSet.clear();\n  constructorReferenceSet.clear();\n  methodReferenceSet.clear();\n  fieldReferenceSet.clear();\n  stringSet.clear();\n  superTypeNameSet.clear();\n  descriptorSet.clear();\n  try (InputStream inputStream=entry.getInputStream()){\n    ClassReader classReader=new ClassReader(inputStream);\n    classReader.accept(classIndexer,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    for (    String descriptor : descriptorSet) {\n      new SignatureReader(descriptor).accept(signatureIndexer);\n    }\n    char[] buffer=new char[classReader.getMaxStringLength()];\n    for (int i=classReader.getItemCount() - 1; i > 0; i--) {\n      int startIndex=classReader.getItem(i);\n      if (startIndex != 0) {\n        int tag=classReader.readByte(startIndex - 1);\nswitch (tag) {\ncase 7:          String className=classReader.readUTF8(startIndex,buffer);\n        if (className.startsWith(\"[\")) {\n          new SignatureReader(className).acceptType(signatureIndexer);\n        }\n else {\n          typeReferenceSet.add(className);\n        }\n      break;\ncase 8:    String str=classReader.readUTF8(startIndex,buffer);\n  stringSet.add(str);\nbreak;\ncase 9:int nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nint nameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString fieldName=classReader.readUTF8(nameAndTypeIndex,buffer);\nfieldReferenceSet.add(fieldName);\n}\nbreak;\ncase 10:case 11:nameAndTypeItem=classReader.readUnsignedShort(startIndex + 2);\nnameAndTypeIndex=classReader.getItem(nameAndTypeItem);\ntag=classReader.readByte(nameAndTypeIndex - 1);\nif (tag == 12) {\nString methodName=classReader.readUTF8(nameAndTypeIndex,buffer);\nif (\"<init>\".equals(methodName)) {\nint classItem=classReader.readUnsignedShort(startIndex);\nint classIndex=classReader.getItem(classItem);\nclassName=classReader.readUTF8(classIndex,buffer);\nconstructorReferenceSet.add(className);\n}\n else {\nmethodReferenceSet.add(methodName);\n}\n}\nbreak;\n}\n}\n}\nString typeName=classIndexer.name;\naddToIndex(indexes,\"typeDeclarations\",typeDeclarationSet,entry);\naddToIndex(indexes,\"constructorDeclarations\",constructorDeclarationSet,entry);\naddToIndex(indexes,\"methodDeclarations\",methodDeclarationSet,entry);\naddToIndex(indexes,\"fieldDeclarations\",fieldDeclarationSet,entry);\naddToIndex(indexes,\"typeReferences\",typeReferenceSet,entry);\naddToIndex(indexes,\"constructorReferences\",constructorReferenceSet,entry);\naddToIndex(indexes,\"methodReferences\",methodReferenceSet,entry);\naddToIndex(indexes,\"fieldReferences\",fieldReferenceSet,entry);\naddToIndex(indexes,\"strings\",stringSet,entry);\nif (superTypeNameSet.size() > 0) {\nMap<String,Collection> index=indexes.getIndex(\"subTypeNames\");\nfor (String superTypeName : superTypeNameSet) {\nindex.get(superTypeName).add(typeName);\n}\n}\n}\n catch (Exception e) {\nassert ExceptionUtil.printStackTrace(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 476,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 71
      },
      "nodeContext" : "char[] buffer=new char[classReader.getMaxStringLength()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "char[]"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 73,
    "startColumnNumber" : 28,
    "endLineNumber" : 73,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}