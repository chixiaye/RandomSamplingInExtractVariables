{
  "id" : 380,
  "expression" : "loginRequest.getPublicId()",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/service/security/auth/rest/RestPublicLoginProcessingFilter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "loginRequest.getPublicId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 72,
      "startColumnNumber" : 32,
      "endLineNumber" : 72,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 59
      },
      "nodeContext" : "StringUtils.isBlank(loginRequest.getPublicId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isBlank(loginRequest.getPublicId())) {\n  throw new AuthenticationServiceException(\"Public Id is not provided\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1074,
        "startLineNumber" : 57,
        "startColumnNumber" : 74,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!HttpMethod.POST.name().equals(request.getMethod())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authentication method not supported. Request method: \" + request.getMethod());\n    }\n    throw new AuthMethodNotSupportedException(\"Authentication method not supported\");\n  }\n  PublicLoginRequest loginRequest;\n  try {\n    loginRequest=objectMapper.readValue(request.getReader(),PublicLoginRequest.class);\n  }\n catch (  Exception e) {\n    throw new AuthenticationServiceException(\"Invalid public login request payload\");\n  }\n  if (StringUtils.isBlank(loginRequest.getPublicId())) {\n    throw new AuthenticationServiceException(\"Public Id is not provided\");\n  }\n  UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(principal,\"\");\n  return this.getAuthenticationManager().authenticate(token);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Authentication attemptAuthentication(HttpServletRequest request,HttpServletResponse response) throws AuthenticationException, IOException, ServletException {\n  if (!HttpMethod.POST.name().equals(request.getMethod())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authentication method not supported. Request method: \" + request.getMethod());\n    }\n    throw new AuthMethodNotSupportedException(\"Authentication method not supported\");\n  }\n  PublicLoginRequest loginRequest;\n  try {\n    loginRequest=objectMapper.readValue(request.getReader(),PublicLoginRequest.class);\n  }\n catch (  Exception e) {\n    throw new AuthenticationServiceException(\"Invalid public login request payload\");\n  }\n  if (StringUtils.isBlank(loginRequest.getPublicId())) {\n    throw new AuthenticationServiceException(\"Public Id is not provided\");\n  }\n  UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(principal,\"\");\n  return this.getAuthenticationManager().authenticate(token);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 59
      },
      "nodeContext" : "StringUtils.isBlank(loginRequest.getPublicId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "loginRequest.getPublicId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 76,
      "startColumnNumber" : 82,
      "endLineNumber" : 76,
      "endColumnNumber" : 108
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 76,
        "startColumnNumber" : 34,
        "endLineNumber" : 76,
        "endColumnNumber" : 109
      },
      "nodeContext" : "new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 76,
        "startColumnNumber" : 22,
        "endLineNumber" : 76,
        "endColumnNumber" : 109
      },
      "nodeContext" : "principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 110
      },
      "nodeContext" : "UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1074,
        "startLineNumber" : 57,
        "startColumnNumber" : 74,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!HttpMethod.POST.name().equals(request.getMethod())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authentication method not supported. Request method: \" + request.getMethod());\n    }\n    throw new AuthMethodNotSupportedException(\"Authentication method not supported\");\n  }\n  PublicLoginRequest loginRequest;\n  try {\n    loginRequest=objectMapper.readValue(request.getReader(),PublicLoginRequest.class);\n  }\n catch (  Exception e) {\n    throw new AuthenticationServiceException(\"Invalid public login request payload\");\n  }\n  if (StringUtils.isBlank(loginRequest.getPublicId())) {\n    throw new AuthenticationServiceException(\"Public Id is not provided\");\n  }\n  UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(principal,\"\");\n  return this.getAuthenticationManager().authenticate(token);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Authentication attemptAuthentication(HttpServletRequest request,HttpServletResponse response) throws AuthenticationException, IOException, ServletException {\n  if (!HttpMethod.POST.name().equals(request.getMethod())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authentication method not supported. Request method: \" + request.getMethod());\n    }\n    throw new AuthMethodNotSupportedException(\"Authentication method not supported\");\n  }\n  PublicLoginRequest loginRequest;\n  try {\n    loginRequest=objectMapper.readValue(request.getReader(),PublicLoginRequest.class);\n  }\n catch (  Exception e) {\n    throw new AuthenticationServiceException(\"Invalid public login request payload\");\n  }\n  if (StringUtils.isBlank(loginRequest.getPublicId())) {\n    throw new AuthenticationServiceException(\"Public Id is not provided\");\n  }\n  UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(principal,\"\");\n  return this.getAuthenticationManager().authenticate(token);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 110
      },
      "nodeContext" : "UserPrincipal principal=new UserPrincipal(UserPrincipal.Type.PUBLIC_ID,loginRequest.getPublicId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 72,
    "startColumnNumber" : 32,
    "endLineNumber" : 72,
    "endColumnNumber" : 58
  }, {
    "charLength" : 26,
    "startLineNumber" : 76,
    "startColumnNumber" : 82,
    "endLineNumber" : 76,
    "endColumnNumber" : 108
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}