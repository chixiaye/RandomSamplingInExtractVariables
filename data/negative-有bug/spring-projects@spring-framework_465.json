{
  "id" : 465,
  "expression" : "SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 82,
      "startLineNumber" : 59,
      "startColumnNumber" : 43,
      "endLineNumber" : 59,
      "endColumnNumber" : 125
    },
    "astNodeNumber" : 6,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 59,
        "startColumnNumber" : 15,
        "endLineNumber" : 59,
        "endColumnNumber" : 125
      },
      "nodeContext" : "dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 59,
        "endColumnNumber" : 126
      },
      "nodeContext" : "SQLException dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4160,
        "startLineNumber" : 48,
        "startColumnNumber" : 36,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SQLExceptionTranslator sext=new SQLErrorCodeSQLExceptionTranslator(ERROR_CODES);\n  SQLException dataIntegrityViolationEx=SQLExceptionSubclassFactory.newSQLDataException(\"\",\"\",0);\n  DataIntegrityViolationException divex=(DataIntegrityViolationException)sext.translate(\"task\",\"SQL\",dataIntegrityViolationEx);\n  assertEquals(dataIntegrityViolationEx,divex.getCause());\n  SQLException featureNotSupEx=SQLExceptionSubclassFactory.newSQLFeatureNotSupportedException(\"\",\"\",0);\n  InvalidDataAccessApiUsageException idaex=(InvalidDataAccessApiUsageException)sext.translate(\"task\",\"SQL\",featureNotSupEx);\n  assertEquals(featureNotSupEx,idaex.getCause());\n  SQLException dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0);\n  DataIntegrityViolationException divex2=(DataIntegrityViolationException)sext.translate(\"task\",\"SQL\",dataIntegrityViolationEx2);\n  assertEquals(dataIntegrityViolationEx2,divex2.getCause());\n  SQLException permissionDeniedEx=SQLExceptionSubclassFactory.newSQLInvalidAuthorizationSpecException(\"\",\"\",0);\n  PermissionDeniedDataAccessException pdaex=(PermissionDeniedDataAccessException)sext.translate(\"task\",\"SQL\",permissionDeniedEx);\n  assertEquals(permissionDeniedEx,pdaex.getCause());\n  SQLException dataAccessResourceEx=SQLExceptionSubclassFactory.newSQLNonTransientConnectionException(\"\",\"\",0);\n  DataAccessResourceFailureException darex=(DataAccessResourceFailureException)sext.translate(\"task\",\"SQL\",dataAccessResourceEx);\n  assertEquals(dataAccessResourceEx,darex.getCause());\n  SQLException badSqlEx2=SQLExceptionSubclassFactory.newSQLSyntaxErrorException(\"\",\"\",0);\n  BadSqlGrammarException bsgex2=(BadSqlGrammarException)sext.translate(\"task\",\"SQL2\",badSqlEx2);\n  assertEquals(\"SQL2\",bsgex2.getSql());\n  assertEquals(badSqlEx2,bsgex2.getSQLException());\n  SQLException tranRollbackEx=SQLExceptionSubclassFactory.newSQLTransactionRollbackException(\"\",\"\",0);\n  ConcurrencyFailureException cfex=(ConcurrencyFailureException)sext.translate(\"task\",\"SQL\",tranRollbackEx);\n  assertEquals(tranRollbackEx,cfex.getCause());\n  SQLException transientConnEx=SQLExceptionSubclassFactory.newSQLTransientConnectionException(\"\",\"\",0);\n  TransientDataAccessResourceException tdarex=(TransientDataAccessResourceException)sext.translate(\"task\",\"SQL\",transientConnEx);\n  assertEquals(transientConnEx,tdarex.getCause());\n  SQLException transientConnEx2=SQLExceptionSubclassFactory.newSQLTimeoutException(\"\",\"\",0);\n  QueryTimeoutException tdarex2=(QueryTimeoutException)sext.translate(\"task\",\"SQL\",transientConnEx2);\n  assertEquals(transientConnEx2,tdarex2.getCause());\n  SQLException recoverableEx=SQLExceptionSubclassFactory.newSQLRecoverableException(\"\",\"\",0);\n  RecoverableDataAccessException rdaex2=(RecoverableDataAccessException)sext.translate(\"task\",\"SQL\",recoverableEx);\n  assertEquals(recoverableEx,rdaex2.getCause());\n  SQLException sexEct=new SQLException(\"\",\"\",1);\n  BadSqlGrammarException bsgEct=(BadSqlGrammarException)sext.translate(\"task\",\"SQL-ECT\",sexEct);\n  assertEquals(\"SQL-ECT\",bsgEct.getSql());\n  assertEquals(sexEct,bsgEct.getSQLException());\n  SQLException sexFbt=new SQLException(\"\",\"07xxx\",666666666);\n  BadSqlGrammarException bsgFbt=(BadSqlGrammarException)sext.translate(\"task\",\"SQL-FBT\",sexFbt);\n  assertEquals(\"SQL-FBT\",bsgFbt.getSql());\n  assertEquals(sexFbt,bsgFbt.getSQLException());\n  SQLException sexFbt2=new SQLException(\"\",\"08xxx\",666666666);\n  DataAccessResourceFailureException darfFbt=(DataAccessResourceFailureException)sext.translate(\"task\",\"SQL-FBT2\",sexFbt2);\n  assertEquals(sexFbt2,darfFbt.getCause());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 447,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4202,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void errorCodeTranslation(){\n  SQLExceptionTranslator sext=new SQLErrorCodeSQLExceptionTranslator(ERROR_CODES);\n  SQLException dataIntegrityViolationEx=SQLExceptionSubclassFactory.newSQLDataException(\"\",\"\",0);\n  DataIntegrityViolationException divex=(DataIntegrityViolationException)sext.translate(\"task\",\"SQL\",dataIntegrityViolationEx);\n  assertEquals(dataIntegrityViolationEx,divex.getCause());\n  SQLException featureNotSupEx=SQLExceptionSubclassFactory.newSQLFeatureNotSupportedException(\"\",\"\",0);\n  InvalidDataAccessApiUsageException idaex=(InvalidDataAccessApiUsageException)sext.translate(\"task\",\"SQL\",featureNotSupEx);\n  assertEquals(featureNotSupEx,idaex.getCause());\n  SQLException dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0);\n  DataIntegrityViolationException divex2=(DataIntegrityViolationException)sext.translate(\"task\",\"SQL\",dataIntegrityViolationEx2);\n  assertEquals(dataIntegrityViolationEx2,divex2.getCause());\n  SQLException permissionDeniedEx=SQLExceptionSubclassFactory.newSQLInvalidAuthorizationSpecException(\"\",\"\",0);\n  PermissionDeniedDataAccessException pdaex=(PermissionDeniedDataAccessException)sext.translate(\"task\",\"SQL\",permissionDeniedEx);\n  assertEquals(permissionDeniedEx,pdaex.getCause());\n  SQLException dataAccessResourceEx=SQLExceptionSubclassFactory.newSQLNonTransientConnectionException(\"\",\"\",0);\n  DataAccessResourceFailureException darex=(DataAccessResourceFailureException)sext.translate(\"task\",\"SQL\",dataAccessResourceEx);\n  assertEquals(dataAccessResourceEx,darex.getCause());\n  SQLException badSqlEx2=SQLExceptionSubclassFactory.newSQLSyntaxErrorException(\"\",\"\",0);\n  BadSqlGrammarException bsgex2=(BadSqlGrammarException)sext.translate(\"task\",\"SQL2\",badSqlEx2);\n  assertEquals(\"SQL2\",bsgex2.getSql());\n  assertEquals(badSqlEx2,bsgex2.getSQLException());\n  SQLException tranRollbackEx=SQLExceptionSubclassFactory.newSQLTransactionRollbackException(\"\",\"\",0);\n  ConcurrencyFailureException cfex=(ConcurrencyFailureException)sext.translate(\"task\",\"SQL\",tranRollbackEx);\n  assertEquals(tranRollbackEx,cfex.getCause());\n  SQLException transientConnEx=SQLExceptionSubclassFactory.newSQLTransientConnectionException(\"\",\"\",0);\n  TransientDataAccessResourceException tdarex=(TransientDataAccessResourceException)sext.translate(\"task\",\"SQL\",transientConnEx);\n  assertEquals(transientConnEx,tdarex.getCause());\n  SQLException transientConnEx2=SQLExceptionSubclassFactory.newSQLTimeoutException(\"\",\"\",0);\n  QueryTimeoutException tdarex2=(QueryTimeoutException)sext.translate(\"task\",\"SQL\",transientConnEx2);\n  assertEquals(transientConnEx2,tdarex2.getCause());\n  SQLException recoverableEx=SQLExceptionSubclassFactory.newSQLRecoverableException(\"\",\"\",0);\n  RecoverableDataAccessException rdaex2=(RecoverableDataAccessException)sext.translate(\"task\",\"SQL\",recoverableEx);\n  assertEquals(recoverableEx,rdaex2.getCause());\n  SQLException sexEct=new SQLException(\"\",\"\",1);\n  BadSqlGrammarException bsgEct=(BadSqlGrammarException)sext.translate(\"task\",\"SQL-ECT\",sexEct);\n  assertEquals(\"SQL-ECT\",bsgEct.getSql());\n  assertEquals(sexEct,bsgEct.getSQLException());\n  SQLException sexFbt=new SQLException(\"\",\"07xxx\",666666666);\n  BadSqlGrammarException bsgFbt=(BadSqlGrammarException)sext.translate(\"task\",\"SQL-FBT\",sexFbt);\n  assertEquals(\"SQL-FBT\",bsgFbt.getSql());\n  assertEquals(sexFbt,bsgFbt.getSQLException());\n  SQLException sexFbt2=new SQLException(\"\",\"08xxx\",666666666);\n  DataAccessResourceFailureException darfFbt=(DataAccessResourceFailureException)sext.translate(\"task\",\"SQL-FBT2\",sexFbt2);\n  assertEquals(sexFbt2,darfFbt.getCause());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 453,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 59,
        "endColumnNumber" : 126
      },
      "nodeContext" : "SQLException dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException(\"\",\"\",0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.sql.SQLException"
  } ],
  "positionList" : [ {
    "charLength" : 82,
    "startLineNumber" : 59,
    "startColumnNumber" : 43,
    "endLineNumber" : 59,
    "endColumnNumber" : 125
  } ],
  "layoutRelationDataList" : [ ]
}