{
  "id" : 350,
  "expression" : "new JsonParseException(e)",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new JsonParseException(e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 48,
      "startColumnNumber" : 14,
      "endLineNumber" : 48,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 47,
        "startColumnNumber" : 40,
        "endLineNumber" : 49,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (NoSuchMethodException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Constructor<?> constructor=aClass.getConstructor(String.class);\n  return (T)constructor.newInstance(from.toString());\n}\n catch (NoSuchMethodException e) {\n  throw new JsonParseException(e);\n}\ncatch (IllegalAccessException e) {\n  throw new JsonParseException(e);\n}\ncatch (InvocationTargetException e) {\n  throw new JsonParseException(e);\n}\ncatch (InstantiationException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 35,
        "startColumnNumber" : 42,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1500,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Primitives.isWrapperType(aClass)) {\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n else if (Enum.class.isAssignableFrom(to)) {\n  try {\n    Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n    return (T)valuesMethod.invoke(null,from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}\n else {\n  throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 33,
        "startColumnNumber" : 51,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T adaptType(Object from,Class<T> to){\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.gson.JsonParseException"
  }, {
    "nodeContext" : "new JsonParseException(e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 50,
      "startColumnNumber" : 14,
      "endLineNumber" : 50,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 49,
        "startColumnNumber" : 41,
        "endLineNumber" : 51,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IllegalAccessException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Constructor<?> constructor=aClass.getConstructor(String.class);\n  return (T)constructor.newInstance(from.toString());\n}\n catch (NoSuchMethodException e) {\n  throw new JsonParseException(e);\n}\ncatch (IllegalAccessException e) {\n  throw new JsonParseException(e);\n}\ncatch (InvocationTargetException e) {\n  throw new JsonParseException(e);\n}\ncatch (InstantiationException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 35,
        "startColumnNumber" : 42,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1500,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Primitives.isWrapperType(aClass)) {\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n else if (Enum.class.isAssignableFrom(to)) {\n  try {\n    Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n    return (T)valuesMethod.invoke(null,from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}\n else {\n  throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 33,
        "startColumnNumber" : 51,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T adaptType(Object from,Class<T> to){\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.gson.JsonParseException"
  }, {
    "nodeContext" : "new JsonParseException(e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 52,
      "startColumnNumber" : 14,
      "endLineNumber" : 52,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 51,
        "startColumnNumber" : 44,
        "endLineNumber" : 53,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (InvocationTargetException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Constructor<?> constructor=aClass.getConstructor(String.class);\n  return (T)constructor.newInstance(from.toString());\n}\n catch (NoSuchMethodException e) {\n  throw new JsonParseException(e);\n}\ncatch (IllegalAccessException e) {\n  throw new JsonParseException(e);\n}\ncatch (InvocationTargetException e) {\n  throw new JsonParseException(e);\n}\ncatch (InstantiationException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 35,
        "startColumnNumber" : 42,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1500,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Primitives.isWrapperType(aClass)) {\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n else if (Enum.class.isAssignableFrom(to)) {\n  try {\n    Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n    return (T)valuesMethod.invoke(null,from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}\n else {\n  throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 33,
        "startColumnNumber" : 51,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T adaptType(Object from,Class<T> to){\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.gson.JsonParseException"
  }, {
    "nodeContext" : "new JsonParseException(e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 54,
      "startColumnNumber" : 14,
      "endLineNumber" : 54,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 53,
        "startColumnNumber" : 41,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (InstantiationException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Constructor<?> constructor=aClass.getConstructor(String.class);\n  return (T)constructor.newInstance(from.toString());\n}\n catch (NoSuchMethodException e) {\n  throw new JsonParseException(e);\n}\ncatch (IllegalAccessException e) {\n  throw new JsonParseException(e);\n}\ncatch (InvocationTargetException e) {\n  throw new JsonParseException(e);\n}\ncatch (InstantiationException e) {\n  throw new JsonParseException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 35,
        "startColumnNumber" : 42,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1500,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Primitives.isWrapperType(aClass)) {\n  if (aClass == Character.class) {\n    String value=from.toString();\n    if (value.length() == 1) {\n      return (T)(Character)from.toString().charAt(0);\n    }\n    throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n  }\n  try {\n    Constructor<?> constructor=aClass.getConstructor(String.class);\n    return (T)constructor.newInstance(from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new JsonParseException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new JsonParseException(e);\n  }\n}\n else if (Enum.class.isAssignableFrom(to)) {\n  try {\n    Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n    return (T)valuesMethod.invoke(null,from.toString());\n  }\n catch (  NoSuchMethodException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}\n else {\n  throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1553,
        "startLineNumber" : 33,
        "startColumnNumber" : 51,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T adaptType(Object from,Class<T> to){\n  Class<?> aClass=Primitives.wrap(to);\n  if (Primitives.isWrapperType(aClass)) {\n    if (aClass == Character.class) {\n      String value=from.toString();\n      if (value.length() == 1) {\n        return (T)(Character)from.toString().charAt(0);\n      }\n      throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n    }\n    try {\n      Constructor<?> constructor=aClass.getConstructor(String.class);\n      return (T)constructor.newInstance(from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new JsonParseException(e);\n    }\ncatch (    InstantiationException e) {\n      throw new JsonParseException(e);\n    }\n  }\n else   if (Enum.class.isAssignableFrom(to)) {\n    try {\n      Method valuesMethod=to.getMethod(\"valueOf\",String.class);\n      return (T)valuesMethod.invoke(null,from.toString());\n    }\n catch (    NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\ncatch (    InvocationTargetException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \"+ to);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 40
      },
      "nodeContext" : "throw new JsonParseException(e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.gson.JsonParseException"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 48,
    "startColumnNumber" : 14,
    "endLineNumber" : 48,
    "endColumnNumber" : 39
  }, {
    "charLength" : 25,
    "startLineNumber" : 50,
    "startColumnNumber" : 14,
    "endLineNumber" : 50,
    "endColumnNumber" : 39
  }, {
    "charLength" : 25,
    "startLineNumber" : 52,
    "startColumnNumber" : 14,
    "endLineNumber" : 52,
    "endColumnNumber" : 39
  }, {
    "charLength" : 25,
    "startLineNumber" : 54,
    "startColumnNumber" : 14,
    "endLineNumber" : 54,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}