{
  "id" : 357,
  "expression" : "matcher.group(2)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/datasource/src/main/java/com/google/android/exoplayer2/upstream/HttpUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matcher.group(2)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 105,
      "startColumnNumber" : 42,
      "endLineNumber" : 105,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 105,
        "startColumnNumber" : 29,
        "endLineNumber" : 105,
        "endColumnNumber" : 59
      },
      "nodeContext" : "checkNotNull(matcher.group(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 105,
        "startColumnNumber" : 14,
        "endLineNumber" : 105,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Long.parseLong(checkNotNull(matcher.group(2)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 105,
        "startColumnNumber" : 14,
        "endLineNumber" : 106,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1)))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 105,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 21
      },
      "nodeContext" : "Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 104,
        "startColumnNumber" : 15,
        "endLineNumber" : 107,
        "endColumnNumber" : 21
      },
      "nodeContext" : "contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 107,
        "endColumnNumber" : 22
      },
      "nodeContext" : "long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1033,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n  if (contentLength < 0) {\n    contentLength=contentLengthFromRange;\n  }\n else   if (contentLength != contentLengthFromRange) {\n    Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n    contentLength=max(contentLength,contentLengthFromRange);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n  if (contentLength < 0) {\n    contentLength=contentLengthFromRange;\n  }\n else   if (contentLength != contentLengthFromRange) {\n    Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n    contentLength=max(contentLength,contentLengthFromRange);\n  }\n}\n catch (NumberFormatException e) {\n  Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1178,
        "startLineNumber" : 102,
        "startColumnNumber" : 29,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  try {\n    long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n    if (contentLength < 0) {\n      contentLength=contentLengthFromRange;\n    }\n else     if (contentLength != contentLengthFromRange) {\n      Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n      contentLength=max(contentLength,contentLengthFromRange);\n    }\n  }\n catch (  NumberFormatException e) {\n    Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (matcher.matches()) {\n  try {\n    long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n    if (contentLength < 0) {\n      contentLength=contentLengthFromRange;\n    }\n else     if (contentLength != contentLengthFromRange) {\n      Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n      contentLength=max(contentLength,contentLengthFromRange);\n    }\n  }\n catch (  NumberFormatException e) {\n    Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1301,
        "startLineNumber" : 100,
        "startColumnNumber" : 48,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=CONTENT_RANGE_WITH_START_AND_END.matcher(contentRangeHeader);\n  if (matcher.matches()) {\n    try {\n      long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n      if (contentLength < 0) {\n        contentLength=contentLengthFromRange;\n      }\n else       if (contentLength != contentLengthFromRange) {\n        Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n        contentLength=max(contentLength,contentLengthFromRange);\n      }\n    }\n catch (    NumberFormatException e) {\n      Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!TextUtils.isEmpty(contentRangeHeader)) {\n  Matcher matcher=CONTENT_RANGE_WITH_START_AND_END.matcher(contentRangeHeader);\n  if (matcher.matches()) {\n    try {\n      long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n      if (contentLength < 0) {\n        contentLength=contentLengthFromRange;\n      }\n else       if (contentLength != contentLengthFromRange) {\n        Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n        contentLength=max(contentLength,contentLengthFromRange);\n      }\n    }\n catch (    NumberFormatException e) {\n      Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1681,
        "startLineNumber" : 91,
        "startColumnNumber" : 81,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long contentLength=C.LENGTH_UNSET;\n  if (!TextUtils.isEmpty(contentLengthHeader)) {\n    try {\n      contentLength=Long.parseLong(contentLengthHeader);\n    }\n catch (    NumberFormatException e) {\n      Log.e(TAG,\"Unexpected Content-Length [\" + contentLengthHeader + \"]\");\n    }\n  }\n  if (!TextUtils.isEmpty(contentRangeHeader)) {\n    Matcher matcher=CONTENT_RANGE_WITH_START_AND_END.matcher(contentRangeHeader);\n    if (matcher.matches()) {\n      try {\n        long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n        if (contentLength < 0) {\n          contentLength=contentLengthFromRange;\n        }\n else         if (contentLength != contentLengthFromRange) {\n          Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n          contentLength=max(contentLength,contentLengthFromRange);\n        }\n      }\n catch (      NumberFormatException e) {\n        Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n      }\n    }\n  }\n  return contentLength;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Attempts to parse the length of a response body from the corresponding response headers.\n * @param contentLengthHeader The {@link HttpHeaders#CONTENT_LENGTH Content-Length header}, or {@code null} if not set.\n * @param contentRangeHeader The {@link HttpHeaders#CONTENT_RANGE Content-Range header}, or  {@code null} if not set.\n * @return The length of the response body, or {@link C#LENGTH_UNSET} if it could not bedetermined.\n */\npublic static long getContentLength(@Nullable String contentLengthHeader,@Nullable String contentRangeHeader){\n  long contentLength=C.LENGTH_UNSET;\n  if (!TextUtils.isEmpty(contentLengthHeader)) {\n    try {\n      contentLength=Long.parseLong(contentLengthHeader);\n    }\n catch (    NumberFormatException e) {\n      Log.e(TAG,\"Unexpected Content-Length [\" + contentLengthHeader + \"]\");\n    }\n  }\n  if (!TextUtils.isEmpty(contentRangeHeader)) {\n    Matcher matcher=CONTENT_RANGE_WITH_START_AND_END.matcher(contentRangeHeader);\n    if (matcher.matches()) {\n      try {\n        long contentLengthFromRange=Long.parseLong(checkNotNull(matcher.group(2))) - Long.parseLong(checkNotNull(matcher.group(1))) + 1;\n        if (contentLength < 0) {\n          contentLength=contentLengthFromRange;\n        }\n else         if (contentLength != contentLengthFromRange) {\n          Log.w(TAG,\"Inconsistent headers [\" + contentLengthHeader + \"] [\"+ contentRangeHeader+ \"]\");\n          contentLength=max(contentLength,contentLengthFromRange);\n        }\n      }\n catch (      NumberFormatException e) {\n        Log.e(TAG,\"Unexpected Content-Range [\" + contentRangeHeader + \"]\");\n      }\n    }\n  }\n  return contentLength;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 105,
        "startColumnNumber" : 14,
        "endLineNumber" : 105,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Long.parseLong(checkNotNull(matcher.group(2)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 105,
    "startColumnNumber" : 42,
    "endLineNumber" : 105,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}