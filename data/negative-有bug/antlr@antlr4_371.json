{
  "id" : 371,
  "expression" : "new VisitorBasicBaseVisitor<String>(){\n  @Override public String visitTerminal(  TerminalNode node){\n    return node.getSymbol().toString() + \"\\n\";\n  }\n  @Override protected String defaultResult(){\n    return \"\";\n  }\n  @Override protected String aggregateResult(  String aggregate,  String nextResult){\n    return aggregate + nextResult;\n  }\n}\n",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/api/TestVisitors.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new VisitorBasicBaseVisitor<String>(){\n  @Override public String visitTerminal(  TerminalNode node){\n    return node.getSymbol().toString() + \"\\n\";\n  }\n  @Override protected String defaultResult(){\n    return \"\";\n  }\n  @Override protected String aggregateResult(  String aggregate,  String nextResult){\n    return aggregate + nextResult;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 376,
      "startLineNumber" : 38,
      "startColumnNumber" : 41,
      "endLineNumber" : 53,
      "endColumnNumber" : 3
    },
    "astNodeNumber" : 57,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 38,
        "startColumnNumber" : 30,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "listener=new VisitorBasicBaseVisitor<String>(){\n  @Override public String visitTerminal(  TerminalNode node){\n    return node.getSymbol().toString() + \"\\n\";\n  }\n  @Override protected String defaultResult(){\n    return \"\";\n  }\n  @Override protected String aggregateResult(  String aggregate,  String nextResult){\n    return aggregate + nextResult;\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 4
      },
      "nodeContext" : "VisitorBasicVisitor<String> listener=new VisitorBasicBaseVisitor<String>(){\n  @Override public String visitTerminal(  TerminalNode node){\n    return node.getSymbol().toString() + \"\\n\";\n  }\n  @Override protected String defaultResult(){\n    return \"\";\n  }\n  @Override protected String aggregateResult(  String aggregate,  String nextResult){\n    return aggregate + nextResult;\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 65,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 30,
        "startColumnNumber" : 37,
        "endLineNumber" : 60,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String input=\"A\";\n  VisitorBasicLexer lexer=new VisitorBasicLexer(new ANTLRInputStream(input));\n  VisitorBasicParser parser=new VisitorBasicParser(new CommonTokenStream(lexer));\n  VisitorBasicParser.SContext context=parser.s();\n  Assert.assertEquals(\"(s A <EOF>)\",context.toStringTree(parser));\n  VisitorBasicVisitor<String> listener=new VisitorBasicBaseVisitor<String>(){\n    @Override public String visitTerminal(    TerminalNode node){\n      return node.getSymbol().toString() + \"\\n\";\n    }\n    @Override protected String defaultResult(){\n      return \"\";\n    }\n    @Override protected String aggregateResult(    String aggregate,    String nextResult){\n      return aggregate + nextResult;\n    }\n  }\n;\n  String result=listener.visit(context);\n  String expected=\"[@0,0:0='A',<1>,1:0]\\n\" + \"[@1,1:0='<EOF>',<-1>,1:1]\\n\";\n  Assert.assertEquals(expected,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 25,
        "startColumnNumber" : 1,
        "endLineNumber" : 60,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This test verifies the basic behavior of visitors, with an emphasis on {@link AbstractParseTreeVisitor#visitTerminal}.\n */\n@Test public void testVisitTerminalNode(){\n  String input=\"A\";\n  VisitorBasicLexer lexer=new VisitorBasicLexer(new ANTLRInputStream(input));\n  VisitorBasicParser parser=new VisitorBasicParser(new CommonTokenStream(lexer));\n  VisitorBasicParser.SContext context=parser.s();\n  Assert.assertEquals(\"(s A <EOF>)\",context.toStringTree(parser));\n  VisitorBasicVisitor<String> listener=new VisitorBasicBaseVisitor<String>(){\n    @Override public String visitTerminal(    TerminalNode node){\n      return node.getSymbol().toString() + \"\\n\";\n    }\n    @Override protected String defaultResult(){\n      return \"\";\n    }\n    @Override protected String aggregateResult(    String aggregate,    String nextResult){\n      return aggregate + nextResult;\n    }\n  }\n;\n  String result=listener.visit(context);\n  String expected=\"[@0,0:0='A',<1>,1:0]\\n\" + \"[@1,1:0='<EOF>',<-1>,1:1]\\n\";\n  Assert.assertEquals(expected,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 4
      },
      "nodeContext" : "VisitorBasicVisitor<String> listener=new VisitorBasicBaseVisitor<String>(){\n  @Override public String visitTerminal(  TerminalNode node){\n    return node.getSymbol().toString() + \"\\n\";\n  }\n  @Override protected String defaultResult(){\n    return \"\";\n  }\n  @Override protected String aggregateResult(  String aggregate,  String nextResult){\n    return aggregate + nextResult;\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 65,
      "astHeight" : 11
    },
    "tokenLength" : 24,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 376,
    "startLineNumber" : 38,
    "startColumnNumber" : 41,
    "endLineNumber" : 53,
    "endColumnNumber" : 3
  } ],
  "layoutRelationDataList" : [ ]
}