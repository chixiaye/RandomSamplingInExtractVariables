{
  "id" : 72,
  "expression" : "i < insertColumns.size()",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertOnDuplicateUpdateExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < insertColumns.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 367,
      "startColumnNumber" : 28,
      "endLineNumber" : 367,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1013,
        "startLineNumber" : 367,
        "startColumnNumber" : 12,
        "endLineNumber" : 384,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < insertColumns.size(); i++) {\n  String m=insertColumns.get(i);\n  String params=insertParamsArray[i];\n  ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n  if (\"?\".equals(params.trim())) {\n    ArrayList<Object> objects=parameters.get(paramsindex);\n    imageListTemp.addAll(objects);\n    paramsindex++;\n  }\n else {\n    if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n      params=params.trim();\n      params=params.substring(1,params.length() - 1);\n    }\n    imageListTemp.add(params);\n  }\n  imageParameterMap.put(m,imageListTemp);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 365,
        "startColumnNumber" : 53,
        "endLineNumber" : 385,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] insertParamsArray=insertParams.split(\",\");\n  for (int i=0; i < insertColumns.size(); i++) {\n    String m=insertColumns.get(i);\n    String params=insertParamsArray[i];\n    ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n    if (\"?\".equals(params.trim())) {\n      ArrayList<Object> objects=parameters.get(paramsindex);\n      imageListTemp.addAll(objects);\n      paramsindex++;\n    }\n else {\n      if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n        params=params.trim();\n        params=params.substring(1,params.length() - 1);\n      }\n      imageListTemp.add(params);\n    }\n    imageParameterMap.put(m,imageListTemp);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1151,
        "startLineNumber" : 365,
        "startColumnNumber" : 8,
        "endLineNumber" : 385,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String insertParams : insertParamsList) {\n  String[] insertParamsArray=insertParams.split(\",\");\n  for (int i=0; i < insertColumns.size(); i++) {\n    String m=insertColumns.get(i);\n    String params=insertParamsArray[i];\n    ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n    if (\"?\".equals(params.trim())) {\n      ArrayList<Object> objects=parameters.get(paramsindex);\n      imageListTemp.addAll(objects);\n      paramsindex++;\n    }\n else {\n      if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n        params=params.trim();\n        params=params.substring(1,params.length() - 1);\n      }\n      imageListTemp.add(params);\n    }\n    imageParameterMap.put(m,imageListTemp);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 156,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2286,
        "startLineNumber" : 346,
        "startColumnNumber" : 95,
        "endLineNumber" : 387,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> duplicateKeyUpdateColumns=recognizer.getDuplicateKeyUpdate();\n  if (CollectionUtils.isNotEmpty(duplicateKeyUpdateColumns)) {\n    getTableMeta().getAllIndexes().forEach((k,v) -> {\n      if (\"PRIMARY\".equalsIgnoreCase(k)) {\n        for (        ColumnMeta m : v.getValues()) {\n          if (duplicateKeyUpdateColumns.contains(m.getColumnName())) {\n            throw new ShouldNeverHappenException(\"update pk value is not supported!\");\n          }\n        }\n      }\n    }\n);\n  }\n  Map<String,ArrayList<Object>> imageParameterMap=new LowerCaseLinkHashMap<>();\n  Map<Integer,ArrayList<Object>> parameters=((PreparedStatementProxy)statementProxy).getParameters();\n  List<String> insertParamsList=recognizer.getInsertParamsValue();\n  List<String> insertColumns=recognizer.getInsertColumns();\n  int paramsindex=1;\n  for (  String insertParams : insertParamsList) {\n    String[] insertParamsArray=insertParams.split(\",\");\n    for (int i=0; i < insertColumns.size(); i++) {\n      String m=insertColumns.get(i);\n      String params=insertParamsArray[i];\n      ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n      if (\"?\".equals(params.trim())) {\n        ArrayList<Object> objects=parameters.get(paramsindex);\n        imageListTemp.addAll(objects);\n        paramsindex++;\n      }\n else {\n        if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n          params=params.trim();\n          params=params.substring(1,params.length() - 1);\n        }\n        imageListTemp.add(params);\n      }\n      imageParameterMap.put(m,imageListTemp);\n    }\n  }\n  return imageParameterMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2598,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 387,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * build sql params\n * @param recognizer the sql recognizer\n * @return map, key is column, value is paramperter\n */\n@SuppressWarnings(\"lgtm[java/dereferenced-value-may-be-null]\") public Map<String,ArrayList<Object>> buildImageParameters(SQLInsertRecognizer recognizer){\n  List<String> duplicateKeyUpdateColumns=recognizer.getDuplicateKeyUpdate();\n  if (CollectionUtils.isNotEmpty(duplicateKeyUpdateColumns)) {\n    getTableMeta().getAllIndexes().forEach((k,v) -> {\n      if (\"PRIMARY\".equalsIgnoreCase(k)) {\n        for (        ColumnMeta m : v.getValues()) {\n          if (duplicateKeyUpdateColumns.contains(m.getColumnName())) {\n            throw new ShouldNeverHappenException(\"update pk value is not supported!\");\n          }\n        }\n      }\n    }\n);\n  }\n  Map<String,ArrayList<Object>> imageParameterMap=new LowerCaseLinkHashMap<>();\n  Map<Integer,ArrayList<Object>> parameters=((PreparedStatementProxy)statementProxy).getParameters();\n  List<String> insertParamsList=recognizer.getInsertParamsValue();\n  List<String> insertColumns=recognizer.getInsertColumns();\n  int paramsindex=1;\n  for (  String insertParams : insertParamsList) {\n    String[] insertParamsArray=insertParams.split(\",\");\n    for (int i=0; i < insertColumns.size(); i++) {\n      String m=insertColumns.get(i);\n      String params=insertParamsArray[i];\n      ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n      if (\"?\".equals(params.trim())) {\n        ArrayList<Object> objects=parameters.get(paramsindex);\n        imageListTemp.addAll(objects);\n        paramsindex++;\n      }\n else {\n        if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n          params=params.trim();\n          params=params.substring(1,params.length() - 1);\n        }\n        imageListTemp.add(params);\n      }\n      imageParameterMap.put(m,imageListTemp);\n    }\n  }\n  return imageParameterMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1013,
        "startLineNumber" : 367,
        "startColumnNumber" : 12,
        "endLineNumber" : 384,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < insertColumns.size(); i++) {\n  String m=insertColumns.get(i);\n  String params=insertParamsArray[i];\n  ArrayList<Object> imageListTemp=imageParameterMap.computeIfAbsent(m,k -> new ArrayList<>());\n  if (\"?\".equals(params.trim())) {\n    ArrayList<Object> objects=parameters.get(paramsindex);\n    imageListTemp.addAll(objects);\n    paramsindex++;\n  }\n else {\n    if ((params.trim().startsWith(\"'\") && params.trim().endsWith(\"'\")) || params.trim().startsWith(\"\\\"\") && params.trim().endsWith(\"\\\"\")) {\n      params=params.trim();\n      params=params.substring(1,params.length() - 1);\n    }\n    imageListTemp.add(params);\n  }\n  imageParameterMap.put(m,imageListTemp);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 12
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 367,
    "startColumnNumber" : 28,
    "endLineNumber" : 367,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}