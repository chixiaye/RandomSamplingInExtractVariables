{
  "id" : 425,
  "expression" : "y3",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/tests/gdx-tests/src/com/badlogic/gdx/tests/PolygonRegionTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "y3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 233,
      "startColumnNumber" : 9,
      "endLineNumber" : 233,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 233,
        "startColumnNumber" : 9,
        "endLineNumber" : 233,
        "endColumnNumber" : 23
      },
      "nodeContext" : "y3 - (y2 - y1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 233,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 23
      },
      "nodeContext" : "y4=y3 - (y2 - y1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 233,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 24
      },
      "nodeContext" : "y4=y3 - (y2 - y1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 222,
        "startColumnNumber" : 22,
        "endLineNumber" : 234,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  x1=cos * p1x - sin * p1y;\n  y1=sin * p1x + cos * p1y;\n  x2=cos * p2x - sin * p2y;\n  y2=sin * p2x + cos * p2y;\n  x3=cos * p3x - sin * p3y;\n  y3=sin * p3x + cos * p3y;\n  x4=x1 + (x3 - x2);\n  y4=y3 - (y2 - y1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 222,
        "startColumnNumber" : 3,
        "endLineNumber" : 246,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (rotation != 0) {\n  x1=cos * p1x - sin * p1y;\n  y1=sin * p1x + cos * p1y;\n  x2=cos * p2x - sin * p2y;\n  y2=sin * p2x + cos * p2y;\n  x3=cos * p3x - sin * p3y;\n  y3=sin * p3x + cos * p3y;\n  x4=x1 + (x3 - x2);\n  y4=y3 - (y2 - y1);\n}\n else {\n  x1=p1x;\n  y1=p1y;\n  x2=p2x;\n  y2=p2y;\n  x3=p3x;\n  y3=p3y;\n  x4=p4x;\n  y4=p4y;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 112,
        "startColumnNumber" : 47,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 748,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 111,
        "startColumnNumber" : 2,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void draw(PolygonRegion region,float x,float y,float originX,float originY,float width,float height,float scaleX,float scaleY,float rotation){\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 783,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 233,
        "startColumnNumber" : 4,
        "endLineNumber" : 233,
        "endColumnNumber" : 24
      },
      "nodeContext" : "y4=y3 - (y2 - y1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "y3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 262,
      "startColumnNumber" : 29,
      "endLineNumber" : 262,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 32
      },
      "nodeContext" : "renderer.line(x2,y2,x3,y3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 33
      },
      "nodeContext" : "renderer.line(x2,y2,x3,y3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 112,
        "startColumnNumber" : 47,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 748,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 111,
        "startColumnNumber" : 2,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void draw(PolygonRegion region,float x,float y,float originX,float originY,float width,float height,float scaleX,float scaleY,float rotation){\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 783,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 33
      },
      "nodeContext" : "renderer.line(x2,y2,x3,y3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "y3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 263,
      "startColumnNumber" : 21,
      "endLineNumber" : 263,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 263,
        "startColumnNumber" : 3,
        "endLineNumber" : 263,
        "endColumnNumber" : 32
      },
      "nodeContext" : "renderer.line(x3,y3,x4,y4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 263,
        "startColumnNumber" : 3,
        "endLineNumber" : 263,
        "endColumnNumber" : 33
      },
      "nodeContext" : "renderer.line(x3,y3,x4,y4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3691,
        "startLineNumber" : 112,
        "startColumnNumber" : 47,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 748,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 111,
        "startColumnNumber" : 2,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void draw(PolygonRegion region,float x,float y,float originX,float originY,float width,float height,float scaleX,float scaleY,float rotation){\n  float[] vertices=region.getVertices();\n  short[] triangles=region.getTriangles();\n  float[] textureCoords=region.getTextureCoords();\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float sX=width / region.getRegion().getRegionWidth();\n  float sY=height / region.getRegion().getRegionHeight();\n  float fx1, fx2, fx3, px1, px2, px3;\n  float fy1, fy2, fy3, py1, py2, py3;\n  final float cos=MathUtils.cosDeg(rotation);\n  final float sin=MathUtils.sinDeg(rotation);\n  renderer.setColor(Color.RED);\n  renderer.begin(ShapeType.Line);\n  for (int i=0, n=triangles.length; i < n; i+=3) {\n    int p1=triangles[i] * 2;\n    int p2=triangles[i + 1] * 2;\n    int p3=triangles[i + 2] * 2;\n    fx1=vertices[p1] * sX;\n    fy1=vertices[p1 + 1] * sY;\n    fx2=vertices[p2] * sX;\n    fy2=vertices[p2 + 1] * sY;\n    fx3=vertices[p3] * sX;\n    fy3=vertices[p3 + 1] * sY;\n    fx1-=originX;\n    fy1-=originY;\n    fx2-=originX;\n    fy2-=originY;\n    fx3-=originX;\n    fy3-=originY;\n    if (scaleX != 1 || scaleY != 1) {\n      fx1*=scaleX;\n      fy1*=scaleY;\n      fx2*=scaleX;\n      fy2*=scaleY;\n      fx3*=scaleX;\n      fy3*=scaleY;\n    }\n    px1=cos * fx1 - sin * fy1;\n    py1=sin * fx1 + cos * fy1;\n    px2=cos * fx2 - sin * fy2;\n    py2=sin * fx2 + cos * fy2;\n    px3=cos * fx3 - sin * fy3;\n    py3=sin * fx3 + cos * fy3;\n    px1+=worldOriginX;\n    py1+=worldOriginY;\n    px2+=worldOriginX;\n    py2+=worldOriginY;\n    px3+=worldOriginX;\n    py3+=worldOriginY;\n    renderer.line(px1,py1,px2,py2);\n    renderer.line(px2,py2,px3,py3);\n    renderer.line(px3,py3,px1,py1);\n  }\n  renderer.end();\n  renderer.setColor(Color.BLUE);\n  renderer.begin(ShapeType.Filled);\n  renderer.circle(worldOriginX,worldOriginY,4);\n  renderer.end();\n  fx1=-originX;\n  fy1=-originY;\n  fx2=width - originX;\n  fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx1*=scaleX;\n    fy1*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx1;\n  final float p1y=fy1;\n  final float p2x=fx1;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy1;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  renderer.setColor(Color.GREEN);\n  renderer.begin(ShapeType.Line);\n  renderer.line(x1,y1,x2,y2);\n  renderer.line(x2,y2,x3,y3);\n  renderer.line(x3,y3,x4,y4);\n  renderer.line(x4,y4,x1,y1);\n  renderer.end();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 783,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 263,
        "startColumnNumber" : 3,
        "endLineNumber" : 263,
        "endColumnNumber" : 33
      },
      "nodeContext" : "renderer.line(x3,y3,x4,y4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 233,
    "startColumnNumber" : 9,
    "endLineNumber" : 233,
    "endColumnNumber" : 11
  }, {
    "charLength" : 2,
    "startLineNumber" : 262,
    "startColumnNumber" : 29,
    "endLineNumber" : 262,
    "endColumnNumber" : 31
  }, {
    "charLength" : 2,
    "startLineNumber" : 263,
    "startColumnNumber" : 21,
    "endLineNumber" : 263,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}