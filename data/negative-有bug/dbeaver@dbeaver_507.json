{
  "id" : 507,
  "expression" : "SSHConstants.PROP_KEY_PATH",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.net.ssh.ui/src/org/jkiss/dbeaver/ui/net/ssh/SSHTunnelConfiguratorUI.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SSHConstants.PROP_KEY_PATH",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 265,
      "startColumnNumber" : 84,
      "endLineNumber" : 265,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 265,
        "startColumnNumber" : 52,
        "endLineNumber" : 265,
        "endColumnNumber" : 111
      },
      "nodeContext" : "configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 265,
        "startColumnNumber" : 31,
        "endLineNumber" : 265,
        "endColumnNumber" : 112
      },
      "nodeContext" : "CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 265,
        "endColumnNumber" : 113
      },
      "nodeContext" : "privateKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 265,
        "endColumnNumber" : 114
      },
      "nodeContext" : "privateKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  hostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(DBWHandlerConfiguration.PROP_HOST)));\n  int portString=configuration.getIntProperty(DBWHandlerConfiguration.PROP_PORT);\n  if (portString != 0) {\n    portText.setText(String.valueOf(portString));\n  }\n else {\n    portText.setText(String.valueOf(SSHConstants.DEFAULT_SSH_PORT));\n  }\n  userNameText.setText(CommonUtils.notEmpty(configuration.getUserName()));\n  SSHConstants.AuthType authType=SSHConstants.AuthType.PASSWORD;\n  String authTypeName=configuration.getStringProperty(SSHConstants.PROP_AUTH_TYPE);\n  if (!CommonUtils.isEmpty(authTypeName)) {\n    authType=SSHConstants.AuthType.valueOf(authTypeName);\n  }\n  if (SSHConstants.AuthType.PASSWORD.equals(authType)) {\n    authMethodCombo.select(0);\n  }\n else   if (SSHConstants.AuthType.PUBLIC_KEY.equals(authType)) {\n    authMethodCombo.select(1);\n  }\n else {\n    authMethodCombo.select(2);\n  }\n  privateKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)));\n  passwordText.setText(CommonUtils.notEmpty(configuration.getPassword()));\n  savePasswordCheckbox.setSelection(configuration.isSavePassword());\n  String implType=configuration.getStringProperty(SSHConstants.PROP_IMPLEMENTATION);\n  if (CommonUtils.isEmpty(implType)) {\n    tunnelImplCombo.select(0);\n  }\n else {\n    SSHImplementationDescriptor desc=SSHImplementationRegistry.getInstance().getDescriptor(implType);\n    if (desc != null) {\n      tunnelImplCombo.setText(desc.getLabel());\n    }\n else {\n      tunnelImplCombo.select(0);\n    }\n  }\n  localHostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_LOCAL_HOST)));\n  int lpValue=configuration.getIntProperty(SSHConstants.PROP_LOCAL_PORT);\n  if (lpValue != 0) {\n    localPortSpinner.setText(String.valueOf(lpValue));\n  }\n  remoteHostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_REMOTE_HOST)));\n  int rpValue=configuration.getIntProperty(SSHConstants.PROP_REMOTE_PORT);\n  if (rpValue != 0) {\n    remotePortSpinner.setText(String.valueOf(rpValue));\n  }\n  int kaValue=configuration.getIntProperty(SSHConstants.PROP_ALIVE_INTERVAL);\n  if (kaValue != 0) {\n    keepAliveText.setText(String.valueOf(kaValue));\n  }\n  int timeoutValue=configuration.getIntProperty(SSHConstants.PROP_CONNECT_TIMEOUT);\n  if (timeoutValue != 0) {\n    tunnelTimeout.setText(String.valueOf(timeoutValue));\n  }\n  updateAuthMethodVisibility();\n  savedConfiguration=new DBWHandlerConfiguration(configuration);\n  DBPDataSourceContainer dataSource=savedConfiguration.getDataSource();\n  if (dataSource != null) {\n    variablesHintLabel.setResolver(new DataSourceVariableResolver(dataSource,dataSource.getConnectionConfiguration()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 367,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3311,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void loadSettings(DBWHandlerConfiguration configuration){\n  hostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(DBWHandlerConfiguration.PROP_HOST)));\n  int portString=configuration.getIntProperty(DBWHandlerConfiguration.PROP_PORT);\n  if (portString != 0) {\n    portText.setText(String.valueOf(portString));\n  }\n else {\n    portText.setText(String.valueOf(SSHConstants.DEFAULT_SSH_PORT));\n  }\n  userNameText.setText(CommonUtils.notEmpty(configuration.getUserName()));\n  SSHConstants.AuthType authType=SSHConstants.AuthType.PASSWORD;\n  String authTypeName=configuration.getStringProperty(SSHConstants.PROP_AUTH_TYPE);\n  if (!CommonUtils.isEmpty(authTypeName)) {\n    authType=SSHConstants.AuthType.valueOf(authTypeName);\n  }\n  if (SSHConstants.AuthType.PASSWORD.equals(authType)) {\n    authMethodCombo.select(0);\n  }\n else   if (SSHConstants.AuthType.PUBLIC_KEY.equals(authType)) {\n    authMethodCombo.select(1);\n  }\n else {\n    authMethodCombo.select(2);\n  }\n  privateKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)));\n  passwordText.setText(CommonUtils.notEmpty(configuration.getPassword()));\n  savePasswordCheckbox.setSelection(configuration.isSavePassword());\n  String implType=configuration.getStringProperty(SSHConstants.PROP_IMPLEMENTATION);\n  if (CommonUtils.isEmpty(implType)) {\n    tunnelImplCombo.select(0);\n  }\n else {\n    SSHImplementationDescriptor desc=SSHImplementationRegistry.getInstance().getDescriptor(implType);\n    if (desc != null) {\n      tunnelImplCombo.setText(desc.getLabel());\n    }\n else {\n      tunnelImplCombo.select(0);\n    }\n  }\n  localHostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_LOCAL_HOST)));\n  int lpValue=configuration.getIntProperty(SSHConstants.PROP_LOCAL_PORT);\n  if (lpValue != 0) {\n    localPortSpinner.setText(String.valueOf(lpValue));\n  }\n  remoteHostText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_REMOTE_HOST)));\n  int rpValue=configuration.getIntProperty(SSHConstants.PROP_REMOTE_PORT);\n  if (rpValue != 0) {\n    remotePortSpinner.setText(String.valueOf(rpValue));\n  }\n  int kaValue=configuration.getIntProperty(SSHConstants.PROP_ALIVE_INTERVAL);\n  if (kaValue != 0) {\n    keepAliveText.setText(String.valueOf(kaValue));\n  }\n  int timeoutValue=configuration.getIntProperty(SSHConstants.PROP_CONNECT_TIMEOUT);\n  if (timeoutValue != 0) {\n    tunnelTimeout.setText(String.valueOf(timeoutValue));\n  }\n  updateAuthMethodVisibility();\n  savedConfiguration=new DBWHandlerConfiguration(configuration);\n  DBPDataSourceContainer dataSource=savedConfiguration.getDataSource();\n  if (dataSource != null) {\n    variablesHintLabel.setResolver(new DataSourceVariableResolver(dataSource,dataSource.getConnectionConfiguration()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 377,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 265,
        "endColumnNumber" : 114
      },
      "nodeContext" : "privateKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(SSHConstants.PROP_KEY_PATH)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 265,
    "startColumnNumber" : 84,
    "endLineNumber" : 265,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ ]
}