{
  "id" : 96,
  "expression" : "\" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\"",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/dialect/sqlserver/SqlServerPreparedStatementTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 130,
      "startLineNumber" : 78,
      "startColumnNumber" : 34,
      "endLineNumber" : 78,
      "endColumnNumber" : 164
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 159
      },
      "nodeContext" : "\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 922,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 160
      },
      "nodeContext" : "assertThat(upsertStmt).isEqualTo(\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 161
      },
      "nodeContext" : "assertThat(upsertStmt).isEqualTo(\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 73,
        "startColumnNumber" : 31,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String upsertStmt=dialect.getUpsertStatement(tableName,fieldNames,keyFields).get();\n  assertThat(upsertStmt).isEqualTo(\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1076,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test void testUpsertStatement(){\n  String upsertStmt=dialect.getUpsertStatement(tableName,fieldNames,keyFields).get();\n  assertThat(upsertStmt).isEqualTo(\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 33,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 159
      },
      "nodeContext" : "\"MERGE INTO tbl AS [TARGET]\" + \" USING (SELECT :id id, :name name, :email email, :ts ts, :field1 field1, :field_2 field_2, :__field_3__ __field_3__) AS [SOURCE]\" + \" ON ([TARGET].id=[SOURCE].id AND [TARGET].__field_3__=[SOURCE].__field_3__)\"+ \" WHEN MATCHED THEN UPDATE SET [TARGET].name=[SOURCE].name, [TARGET].email=[SOURCE].email,\"+ \" [TARGET].ts=[SOURCE].ts, [TARGET].field1=[SOURCE].field1, [TARGET].field_2=[SOURCE].field_2\"+ \" WHEN NOT MATCHED THEN INSERT (id, name, email, ts, field1, field_2, __field_3__)\"+ \" VALUES ([SOURCE].id, [SOURCE].name, [SOURCE].email, [SOURCE].ts, [SOURCE].field1, [SOURCE].field_2, [SOURCE].__field_3__);\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    },
    "tokenLength" : 22,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 130,
    "startLineNumber" : 78,
    "startColumnNumber" : 34,
    "endLineNumber" : 78,
    "endColumnNumber" : 164
  } ],
  "layoutRelationDataList" : [ ]
}