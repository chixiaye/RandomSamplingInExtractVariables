{
  "id" : 65,
  "expression" : "failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 571,
      "startColumnNumber" : 8,
      "endLineNumber" : 571,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 569,
        "startColumnNumber" : 4,
        "endLineNumber" : 572,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 569,
        "startColumnNumber" : 4,
        "endLineNumber" : 572,
        "endColumnNumber" : 6
      },
      "nodeContext" : "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2702,
        "startLineNumber" : 501,
        "startColumnNumber" : 2,
        "endLineNumber" : 576,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final AtomicLong attemptCounter=new AtomicLong();\n  final IndexerSQLMetadataStorageCoordinator failOnceCoordinator=new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnector){\n    @Override protected DataStoreMetadataUpdateResult updateDataSourceMetadataWithHandle(    Handle handle,    String dataSource,    DataSourceMetadata startMetadata,    DataSourceMetadata endMetadata) throws IOException {\n      metadataUpdateCounter.getAndIncrement();\n      if (attemptCounter.getAndIncrement() == 0) {\n        return DataStoreMetadataUpdateResult.TRY_AGAIN;\n      }\n else {\n        return super.updateDataSourceMetadataWithHandle(handle,dataSource,startMetadata,endMetadata);\n      }\n    }\n  }\n;\n  final SegmentPublishResult result1=failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),ImmutableSet.of(),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")));\n  Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment)),result1);\n  Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getId().toString()));\n  attemptCounter.set(0);\n  final SegmentPublishResult result2=failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),ImmutableSet.of(),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")));\n  Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment2)),result2);\n  Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getId().toString()));\n  Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\"));\n  Assert.assertEquals(4,metadataUpdateCounter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2786,
        "startLineNumber" : 499,
        "startColumnNumber" : 2,
        "endLineNumber" : 576,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTransactionalAnnounceRetryAndSuccess() throws IOException {\n  final AtomicLong attemptCounter=new AtomicLong();\n  final IndexerSQLMetadataStorageCoordinator failOnceCoordinator=new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnector){\n    @Override protected DataStoreMetadataUpdateResult updateDataSourceMetadataWithHandle(    Handle handle,    String dataSource,    DataSourceMetadata startMetadata,    DataSourceMetadata endMetadata) throws IOException {\n      metadataUpdateCounter.getAndIncrement();\n      if (attemptCounter.getAndIncrement() == 0) {\n        return DataStoreMetadataUpdateResult.TRY_AGAIN;\n      }\n else {\n        return super.updateDataSourceMetadataWithHandle(handle,dataSource,startMetadata,endMetadata);\n      }\n    }\n  }\n;\n  final SegmentPublishResult result1=failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment),ImmutableSet.of(),new ObjectMetadata(null),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")));\n  Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment)),result1);\n  Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment.getId().toString()));\n  attemptCounter.set(0);\n  final SegmentPublishResult result2=failOnceCoordinator.announceHistoricalSegments(ImmutableSet.of(defaultSegment2),ImmutableSet.of(),new ObjectMetadata(ImmutableMap.of(\"foo\",\"bar\")),new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")));\n  Assert.assertEquals(SegmentPublishResult.ok(ImmutableSet.of(defaultSegment2)),result2);\n  Assert.assertArrayEquals(mapper.writeValueAsString(defaultSegment2).getBytes(StandardCharsets.UTF_8),derbyConnector.lookup(derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\"id\",\"payload\",defaultSegment2.getId().toString()));\n  Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\"));\n  Assert.assertEquals(4,metadataUpdateCounter.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 569,
        "startColumnNumber" : 4,
        "endLineNumber" : 572,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Assert.assertEquals(new ObjectMetadata(ImmutableMap.of(\"foo\",\"baz\")),failOnceCoordinator.retrieveDataSourceMetadata(\"fooDataSource\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.apache.druid.indexing.overlord.DataSourceMetadata"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 571,
    "startColumnNumber" : 8,
    "endLineNumber" : 571,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}