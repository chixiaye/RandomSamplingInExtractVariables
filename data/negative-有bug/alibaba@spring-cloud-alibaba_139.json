{
  "id" : 139,
  "expression" : "result",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/http/matcher/HttpRequestProducesMatcher.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 99,
      "startColumnNumber" : 24,
      "endLineNumber" : 99,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 99,
        "startColumnNumber" : 24,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(mediaType,expr.negated))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 99,
        "startColumnNumber" : 24,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 98,
        "startColumnNumber" : 86,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n  result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 97,
        "startColumnNumber" : 90,
        "endLineNumber" : 101,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n    result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n  for (  MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n    result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 95,
        "startColumnNumber" : 42,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  HeaderExpression expr=new HeaderExpression(header);\n  if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n    for (    MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n      result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String header : headers) {\n  HeaderExpression expr=new HeaderExpression(header);\n  if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n    for (    MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n      result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 94,
        "startColumnNumber" : 29,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  String header : headers) {\n    HeaderExpression expr=new HeaderExpression(header);\n    if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n      for (      MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n        result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (headers != null) {\n  for (  String header : headers) {\n    HeaderExpression expr=new HeaderExpression(header);\n    if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n      for (      MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n        result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 105,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Set<ProduceMediaTypeExpression> parseExpressions(String[] produces,String[] headers){\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 99,
        "startColumnNumber" : 24,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<com.alibaba.cloud.dubbo.http.matcher.ProduceMediaTypeExpression>"
  }, {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 105,
      "startColumnNumber" : 12,
      "endLineNumber" : 105,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 63
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(produce))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 64
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(produce));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 104,
        "startColumnNumber" : 40,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result.add(new ProduceMediaTypeExpression(produce));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String produce : produces) {\n  result.add(new ProduceMediaTypeExpression(produce));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 105,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Set<ProduceMediaTypeExpression> parseExpressions(String[] produces,String[] headers){\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 64
      },
      "nodeContext" : "result.add(new ProduceMediaTypeExpression(produce));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<com.alibaba.cloud.dubbo.http.matcher.ProduceMediaTypeExpression>"
  }, {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 107,
      "startColumnNumber" : 15,
      "endLineNumber" : 107,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return result;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 105,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Set<ProduceMediaTypeExpression> parseExpressions(String[] produces,String[] headers){\n  Set<ProduceMediaTypeExpression> result=new LinkedHashSet<>();\n  if (headers != null) {\n    for (    String header : headers) {\n      HeaderExpression expr=new HeaderExpression(header);\n      if (HttpHeaders.ACCEPT.equalsIgnoreCase(expr.name) && expr.value != null) {\n        for (        MediaType mediaType : MediaType.parseMediaTypes(expr.value)) {\n          result.add(new ProduceMediaTypeExpression(mediaType,expr.negated));\n        }\n      }\n    }\n  }\n  for (  String produce : produces) {\n    result.add(new ProduceMediaTypeExpression(produce));\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 22
      },
      "nodeContext" : "return result;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<com.alibaba.cloud.dubbo.http.matcher.ProduceMediaTypeExpression>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 99,
    "startColumnNumber" : 24,
    "endLineNumber" : 99,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 105,
    "startColumnNumber" : 12,
    "endLineNumber" : 105,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 107,
    "startColumnNumber" : 15,
    "endLineNumber" : 107,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}