{
  "id" : 41,
  "expression" : "scratch[0]",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/VarintReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "scratch[0]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 86,
      "startColumnNumber" : 22,
      "endLineNumber" : 86,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 86,
        "endColumnNumber" : 39
      },
      "nodeContext" : "scratch[0] & 0xFF",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 86,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 39
      },
      "nodeContext" : "firstByte=scratch[0] & 0xFF",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 40
      },
      "nodeContext" : "int firstByte=scratch[0] & 0xFF;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 81,
        "startColumnNumber" : 38,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!input.readFully(scratch,0,1,allowEndOfInput)) {\n    return C.RESULT_END_OF_INPUT;\n  }\n  int firstByte=scratch[0] & 0xFF;\n  length=parseUnsignedVarintLength(firstByte);\n  if (length == C.LENGTH_UNSET) {\n    throw new IllegalStateException(\"No valid varint length mask found\");\n  }\n  state=STATE_READ_CONTENTS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (state == STATE_BEGIN_READING) {\n  if (!input.readFully(scratch,0,1,allowEndOfInput)) {\n    return C.RESULT_END_OF_INPUT;\n  }\n  int firstByte=scratch[0] & 0xFF;\n  length=parseUnsignedVarintLength(firstByte);\n  if (length == C.LENGTH_UNSET) {\n    throw new IllegalStateException(\"No valid varint length mask found\");\n  }\n  state=STATE_READ_CONTENTS;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 80,
        "startColumnNumber" : 25,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (state == STATE_BEGIN_READING) {\n    if (!input.readFully(scratch,0,1,allowEndOfInput)) {\n      return C.RESULT_END_OF_INPUT;\n    }\n    int firstByte=scratch[0] & 0xFF;\n    length=parseUnsignedVarintLength(firstByte);\n    if (length == C.LENGTH_UNSET) {\n      throw new IllegalStateException(\"No valid varint length mask found\");\n    }\n    state=STATE_READ_CONTENTS;\n  }\n  if (length > maximumAllowedLength) {\n    state=STATE_BEGIN_READING;\n    return C.RESULT_MAX_LENGTH_EXCEEDED;\n  }\n  if (length != 1) {\n    input.readFully(scratch,1,length - 1);\n  }\n  state=STATE_BEGIN_READING;\n  return assembleVarint(scratch,length,removeLengthMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2382,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads an EBML variable-length integer (varint) from an  {@link ExtractorInput} such that readingcan be resumed later if an error occurs having read only some of it. <p>If an value is successfully read, then the reader will automatically reset itself ready to read another value. <p>If an  {@link IOException} is thrown, the read can be resumed later by calling this methodagain, passing an  {@link ExtractorInput} providing data starting where the previous one leftoff.\n * @param input The {@link ExtractorInput} from which the integer should be read.\n * @param allowEndOfInput True if encountering the end of the input having read no data isallowed, and should result in  {@link C#RESULT_END_OF_INPUT} being returned. False if itshould be considered an error, causing an  {@link EOFException} to be thrown.\n * @param removeLengthMask Removes the variable-length integer length mask from the value.\n * @param maximumAllowedLength Maximum allowed length of the variable integer to be read.\n * @return The read value, or {@link C#RESULT_END_OF_INPUT} if {@code allowEndOfStream} is trueand the end of the input was encountered, or  {@link C#RESULT_MAX_LENGTH_EXCEEDED} if thelength of the varint exceeded maximumAllowedLength.\n * @throws IOException If an error occurs reading from the input.\n */\npublic long readUnsignedVarint(ExtractorInput input,boolean allowEndOfInput,boolean removeLengthMask,int maximumAllowedLength) throws IOException {\n  if (state == STATE_BEGIN_READING) {\n    if (!input.readFully(scratch,0,1,allowEndOfInput)) {\n      return C.RESULT_END_OF_INPUT;\n    }\n    int firstByte=scratch[0] & 0xFF;\n    length=parseUnsignedVarintLength(firstByte);\n    if (length == C.LENGTH_UNSET) {\n      throw new IllegalStateException(\"No valid varint length mask found\");\n    }\n    state=STATE_READ_CONTENTS;\n  }\n  if (length > maximumAllowedLength) {\n    state=STATE_BEGIN_READING;\n    return C.RESULT_MAX_LENGTH_EXCEEDED;\n  }\n  if (length != 1) {\n    input.readFully(scratch,1,length - 1);\n  }\n  state=STATE_BEGIN_READING;\n  return assembleVarint(scratch,length,removeLengthMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 40
      },
      "nodeContext" : "int firstByte=scratch[0] & 0xFF;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "byte"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 86,
    "startColumnNumber" : 22,
    "endLineNumber" : 86,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}