{
  "id" : 283,
  "expression" : "coordinator",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/clients/admin/internals/DescribeConsumerGroupsHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "coordinator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 148,
      "startColumnNumber" : 24,
      "endLineNumber" : 148,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 144,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 45
      },
      "nodeContext" : "new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 143,
        "startColumnNumber" : 47,
        "endLineNumber" : 149,
        "endColumnNumber" : 45
      },
      "nodeContext" : "consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 143,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 46
      },
      "nodeContext" : "final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1670,
        "startLineNumber" : 125,
        "startColumnNumber" : 95,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final List<DescribedGroupMember> members=describedGroup.members();\n  final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n  final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n  for (  DescribedGroupMember groupMember : members) {\n    Set<TopicPartition> partitions=Collections.emptySet();\n    if (groupMember.memberAssignment().length > 0) {\n      final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n      partitions=new HashSet<>(assignment.partitions());\n    }\n    memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n  }\n  final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n  completed.put(groupIdKey,consumerGroupDescription);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1982,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 155,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {\n  final List<DescribedGroupMember> members=describedGroup.members();\n  final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n  final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n  for (  DescribedGroupMember groupMember : members) {\n    Set<TopicPartition> partitions=Collections.emptySet();\n    if (groupMember.memberAssignment().length > 0) {\n      final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n      partitions=new HashSet<>(assignment.partitions());\n    }\n    memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n  }\n  final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n  completed.put(groupIdKey,consumerGroupDescription);\n}\n else {\n  failed.put(groupIdKey,new IllegalArgumentException(String.format(\"GroupId %s is not a consumer group (%s).\",groupIdKey.idValue,protocolType)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2391,
        "startLineNumber" : 117,
        "startColumnNumber" : 71,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CoordinatorKey groupIdKey=CoordinatorKey.byGroupId(describedGroup.groupId());\n  Errors error=Errors.forCode(describedGroup.errorCode());\n  if (error != Errors.NONE) {\n    handleError(groupIdKey,error,failed,groupsToUnmap);\n    continue;\n  }\n  final String protocolType=describedGroup.protocolType();\n  if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {\n    final List<DescribedGroupMember> members=describedGroup.members();\n    final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n    final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n    for (    DescribedGroupMember groupMember : members) {\n      Set<TopicPartition> partitions=Collections.emptySet();\n      if (groupMember.memberAssignment().length > 0) {\n        final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n        partitions=new HashSet<>(assignment.partitions());\n      }\n      memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n    }\n    final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n    completed.put(groupIdKey,consumerGroupDescription);\n  }\n else {\n    failed.put(groupIdKey,new IllegalArgumentException(String.format(\"GroupId %s is not a consumer group (%s).\",groupIdKey.idValue,protocolType)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DescribedGroup describedGroup : response.data().groups()) {\n  CoordinatorKey groupIdKey=CoordinatorKey.byGroupId(describedGroup.groupId());\n  Errors error=Errors.forCode(describedGroup.errorCode());\n  if (error != Errors.NONE) {\n    handleError(groupIdKey,error,failed,groupsToUnmap);\n    continue;\n  }\n  final String protocolType=describedGroup.protocolType();\n  if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {\n    final List<DescribedGroupMember> members=describedGroup.members();\n    final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n    final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n    for (    DescribedGroupMember groupMember : members) {\n      Set<TopicPartition> partitions=Collections.emptySet();\n      if (groupMember.memberAssignment().length > 0) {\n        final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n        partitions=new HashSet<>(assignment.partitions());\n      }\n      memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n    }\n    final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n    completed.put(groupIdKey,consumerGroupDescription);\n  }\n else {\n    failed.put(groupIdKey,new IllegalArgumentException(String.format(\"GroupId %s is not a consumer group (%s).\",groupIdKey.idValue,protocolType)));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 111,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DescribeGroupsResponse response=(DescribeGroupsResponse)abstractResponse;\n  final Map<CoordinatorKey,ConsumerGroupDescription> completed=new HashMap<>();\n  final Map<CoordinatorKey,Throwable> failed=new HashMap<>();\n  final Set<CoordinatorKey> groupsToUnmap=new HashSet<>();\n  for (  DescribedGroup describedGroup : response.data().groups()) {\n    CoordinatorKey groupIdKey=CoordinatorKey.byGroupId(describedGroup.groupId());\n    Errors error=Errors.forCode(describedGroup.errorCode());\n    if (error != Errors.NONE) {\n      handleError(groupIdKey,error,failed,groupsToUnmap);\n      continue;\n    }\n    final String protocolType=describedGroup.protocolType();\n    if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {\n      final List<DescribedGroupMember> members=describedGroup.members();\n      final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n      final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n      for (      DescribedGroupMember groupMember : members) {\n        Set<TopicPartition> partitions=Collections.emptySet();\n        if (groupMember.memberAssignment().length > 0) {\n          final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n          partitions=new HashSet<>(assignment.partitions());\n        }\n        memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n      }\n      final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n      completed.put(groupIdKey,consumerGroupDescription);\n    }\n else {\n      failed.put(groupIdKey,new IllegalArgumentException(String.format(\"GroupId %s is not a consumer group (%s).\",groupIdKey.idValue,protocolType)));\n    }\n  }\n  return new ApiResult<>(completed,failed,new ArrayList<>(groupsToUnmap));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3074,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ApiResult<CoordinatorKey,ConsumerGroupDescription> handleResponse(Node coordinator,Set<CoordinatorKey> groupIds,AbstractResponse abstractResponse){\n  final DescribeGroupsResponse response=(DescribeGroupsResponse)abstractResponse;\n  final Map<CoordinatorKey,ConsumerGroupDescription> completed=new HashMap<>();\n  final Map<CoordinatorKey,Throwable> failed=new HashMap<>();\n  final Set<CoordinatorKey> groupsToUnmap=new HashSet<>();\n  for (  DescribedGroup describedGroup : response.data().groups()) {\n    CoordinatorKey groupIdKey=CoordinatorKey.byGroupId(describedGroup.groupId());\n    Errors error=Errors.forCode(describedGroup.errorCode());\n    if (error != Errors.NONE) {\n      handleError(groupIdKey,error,failed,groupsToUnmap);\n      continue;\n    }\n    final String protocolType=describedGroup.protocolType();\n    if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {\n      final List<DescribedGroupMember> members=describedGroup.members();\n      final List<MemberDescription> memberDescriptions=new ArrayList<>(members.size());\n      final Set<AclOperation> authorizedOperations=validAclOperations(describedGroup.authorizedOperations());\n      for (      DescribedGroupMember groupMember : members) {\n        Set<TopicPartition> partitions=Collections.emptySet();\n        if (groupMember.memberAssignment().length > 0) {\n          final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));\n          partitions=new HashSet<>(assignment.partitions());\n        }\n        memberDescriptions.add(new MemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(partitions)));\n      }\n      final ConsumerGroupDescription consumerGroupDescription=new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations);\n      completed.put(groupIdKey,consumerGroupDescription);\n    }\n else {\n      failed.put(groupIdKey,new IllegalArgumentException(String.format(\"GroupId %s is not a consumer group (%s).\",groupIdKey.idValue,protocolType)));\n    }\n  }\n  return new ApiResult<>(completed,failed,new ArrayList<>(groupsToUnmap));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 144,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 45
      },
      "nodeContext" : "new ConsumerGroupDescription(groupIdKey.idValue,protocolType.isEmpty(),memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),coordinator,authorizedOperations)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.Node"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 148,
    "startColumnNumber" : 24,
    "endLineNumber" : 148,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}