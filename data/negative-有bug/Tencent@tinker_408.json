{
  "id" : 408,
  "expression" : "\"Unable to find .rodata section.\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-loader-no-op/src/main/java/com/tencent/tinker/loader/shareutil/ShareOatUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Unable to find .rodata section.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 55,
      "startColumnNumber" : 38,
      "endLineNumber" : 55,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 55,
        "startColumnNumber" : 22,
        "endLineNumber" : 55,
        "endColumnNumber" : 72
      },
      "nodeContext" : "new IOException(\"Unable to find .rodata section.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 73
      },
      "nodeContext" : "throw new IOException(\"Unable to find .rodata section.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 54,
        "startColumnNumber" : 35,
        "endLineNumber" : 56,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IOException(\"Unable to find .rodata section.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (roDataHdr == null) {\n  throw new IOException(\"Unable to find .rodata section.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3212,
        "startLineNumber" : 51,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  elfFile=new ShareElfFile(oatFile);\n  final ShareElfFile.SectionHeader roDataHdr=elfFile.getSectionHeaderByName(\".rodata\");\n  if (roDataHdr == null) {\n    throw new IOException(\"Unable to find .rodata section.\");\n  }\n  final FileChannel channel=elfFile.getChannel();\n  channel.position(roDataHdr.shOffset);\n  final byte[] oatMagicAndVersion=new byte[8];\n  ShareElfFile.readUntilLimit(channel,ByteBuffer.wrap(oatMagicAndVersion),\"Failed to read oat magic and version.\");\n  if (oatMagicAndVersion[0] != 'o' || oatMagicAndVersion[1] != 'a' || oatMagicAndVersion[2] != 't' || oatMagicAndVersion[3] != '\\n') {\n    throw new IOException(String.format(\"Bad oat magic: %x %x %x %x\",oatMagicAndVersion[0],oatMagicAndVersion[1],oatMagicAndVersion[2],oatMagicAndVersion[3]));\n  }\n  final int versionOffsetFromOatBegin=4;\n  final int versionBytes=3;\n  final String oatVersion=new String(oatMagicAndVersion,versionOffsetFromOatBegin,versionBytes,Charset.forName(\"ASCII\"));\n  try {\n    Integer.parseInt(oatVersion);\n  }\n catch (  NumberFormatException e) {\n    throw new IOException(\"Bad oat version: \" + oatVersion);\n  }\n  ByteBuffer buffer=ByteBuffer.allocate(128);\n  buffer.order(elfFile.getDataOrder());\n  final int isaNumOffsetFromOatBegin=12;\n  channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);\n  buffer.limit(4);\n  ShareElfFile.readUntilLimit(channel,buffer,\"Failed to read isa num.\");\n  int isaNum=buffer.getInt();\n  if (isaNum < 0 || isaNum >= InstructionSet.values().length) {\n    throw new IOException(\"Bad isa num: \" + isaNum);\n  }\nswitch (InstructionSet.values()[isaNum]) {\ncase kArm:case kThumb2:    result=\"arm\";\n  break;\ncase kArm64:result=\"arm64\";\nbreak;\ncase kX86:result=\"x86\";\nbreak;\ncase kX86_64:result=\"x86_64\";\nbreak;\ncase kMips:result=\"mips\";\nbreak;\ncase kMips64:result=\"mips64\";\nbreak;\ncase kNone:result=\"none\";\nbreak;\ndefault:throw new IOException(\"Should not reach here.\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  elfFile=new ShareElfFile(oatFile);\n  final ShareElfFile.SectionHeader roDataHdr=elfFile.getSectionHeaderByName(\".rodata\");\n  if (roDataHdr == null) {\n    throw new IOException(\"Unable to find .rodata section.\");\n  }\n  final FileChannel channel=elfFile.getChannel();\n  channel.position(roDataHdr.shOffset);\n  final byte[] oatMagicAndVersion=new byte[8];\n  ShareElfFile.readUntilLimit(channel,ByteBuffer.wrap(oatMagicAndVersion),\"Failed to read oat magic and version.\");\n  if (oatMagicAndVersion[0] != 'o' || oatMagicAndVersion[1] != 'a' || oatMagicAndVersion[2] != 't' || oatMagicAndVersion[3] != '\\n') {\n    throw new IOException(String.format(\"Bad oat magic: %x %x %x %x\",oatMagicAndVersion[0],oatMagicAndVersion[1],oatMagicAndVersion[2],oatMagicAndVersion[3]));\n  }\n  final int versionOffsetFromOatBegin=4;\n  final int versionBytes=3;\n  final String oatVersion=new String(oatMagicAndVersion,versionOffsetFromOatBegin,versionBytes,Charset.forName(\"ASCII\"));\n  try {\n    Integer.parseInt(oatVersion);\n  }\n catch (  NumberFormatException e) {\n    throw new IOException(\"Bad oat version: \" + oatVersion);\n  }\n  ByteBuffer buffer=ByteBuffer.allocate(128);\n  buffer.order(elfFile.getDataOrder());\n  final int isaNumOffsetFromOatBegin=12;\n  channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);\n  buffer.limit(4);\n  ShareElfFile.readUntilLimit(channel,buffer,\"Failed to read isa num.\");\n  int isaNum=buffer.getInt();\n  if (isaNum < 0 || isaNum >= InstructionSet.values().length) {\n    throw new IOException(\"Bad isa num: \" + isaNum);\n  }\nswitch (InstructionSet.values()[isaNum]) {\ncase kArm:case kThumb2:    result=\"arm\";\n  break;\ncase kArm64:result=\"arm64\";\nbreak;\ncase kX86:result=\"x86\";\nbreak;\ncase kX86_64:result=\"x86_64\";\nbreak;\ncase kMips:result=\"mips\";\nbreak;\ncase kMips64:result=\"mips64\";\nbreak;\ncase kNone:result=\"none\";\nbreak;\ndefault:throw new IOException(\"Should not reach here.\");\n}\n}\n  finally {\nif (elfFile != null) {\ntry {\nelfFile.close();\n}\n catch (Exception ignored) {\n}\n}\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 313,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3544,
        "startLineNumber" : 48,
        "startColumnNumber" : 81,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ShareElfFile elfFile=null;\n  String result=\"\";\n  try {\n    elfFile=new ShareElfFile(oatFile);\n    final ShareElfFile.SectionHeader roDataHdr=elfFile.getSectionHeaderByName(\".rodata\");\n    if (roDataHdr == null) {\n      throw new IOException(\"Unable to find .rodata section.\");\n    }\n    final FileChannel channel=elfFile.getChannel();\n    channel.position(roDataHdr.shOffset);\n    final byte[] oatMagicAndVersion=new byte[8];\n    ShareElfFile.readUntilLimit(channel,ByteBuffer.wrap(oatMagicAndVersion),\"Failed to read oat magic and version.\");\n    if (oatMagicAndVersion[0] != 'o' || oatMagicAndVersion[1] != 'a' || oatMagicAndVersion[2] != 't' || oatMagicAndVersion[3] != '\\n') {\n      throw new IOException(String.format(\"Bad oat magic: %x %x %x %x\",oatMagicAndVersion[0],oatMagicAndVersion[1],oatMagicAndVersion[2],oatMagicAndVersion[3]));\n    }\n    final int versionOffsetFromOatBegin=4;\n    final int versionBytes=3;\n    final String oatVersion=new String(oatMagicAndVersion,versionOffsetFromOatBegin,versionBytes,Charset.forName(\"ASCII\"));\n    try {\n      Integer.parseInt(oatVersion);\n    }\n catch (    NumberFormatException e) {\n      throw new IOException(\"Bad oat version: \" + oatVersion);\n    }\n    ByteBuffer buffer=ByteBuffer.allocate(128);\n    buffer.order(elfFile.getDataOrder());\n    final int isaNumOffsetFromOatBegin=12;\n    channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);\n    buffer.limit(4);\n    ShareElfFile.readUntilLimit(channel,buffer,\"Failed to read isa num.\");\n    int isaNum=buffer.getInt();\n    if (isaNum < 0 || isaNum >= InstructionSet.values().length) {\n      throw new IOException(\"Bad isa num: \" + isaNum);\n    }\nswitch (InstructionSet.values()[isaNum]) {\ncase kArm:case kThumb2:      result=\"arm\";\n    break;\ncase kArm64:  result=\"arm64\";\nbreak;\ncase kX86:result=\"x86\";\nbreak;\ncase kX86_64:result=\"x86_64\";\nbreak;\ncase kMips:result=\"mips\";\nbreak;\ncase kMips64:result=\"mips64\";\nbreak;\ncase kNone:result=\"none\";\nbreak;\ndefault:throw new IOException(\"Should not reach here.\");\n}\n}\n  finally {\nif (elfFile != null) {\ntry {\nelfFile.close();\n}\n catch (Exception ignored) {\n}\n}\n}\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4035,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get instruction set used to generate  {@code oatFile}.\n * @param oatFile the oat file.\n * @return the instruction used to generate this oat file, if the oat file does not contain this value, an empty string will be returned.\n * @throws IOException If anything wrong when parsing the elf format or locating target field in oat header.\n */\npublic static String getOatFileInstructionSet(File oatFile) throws Throwable {\n  ShareElfFile elfFile=null;\n  String result=\"\";\n  try {\n    elfFile=new ShareElfFile(oatFile);\n    final ShareElfFile.SectionHeader roDataHdr=elfFile.getSectionHeaderByName(\".rodata\");\n    if (roDataHdr == null) {\n      throw new IOException(\"Unable to find .rodata section.\");\n    }\n    final FileChannel channel=elfFile.getChannel();\n    channel.position(roDataHdr.shOffset);\n    final byte[] oatMagicAndVersion=new byte[8];\n    ShareElfFile.readUntilLimit(channel,ByteBuffer.wrap(oatMagicAndVersion),\"Failed to read oat magic and version.\");\n    if (oatMagicAndVersion[0] != 'o' || oatMagicAndVersion[1] != 'a' || oatMagicAndVersion[2] != 't' || oatMagicAndVersion[3] != '\\n') {\n      throw new IOException(String.format(\"Bad oat magic: %x %x %x %x\",oatMagicAndVersion[0],oatMagicAndVersion[1],oatMagicAndVersion[2],oatMagicAndVersion[3]));\n    }\n    final int versionOffsetFromOatBegin=4;\n    final int versionBytes=3;\n    final String oatVersion=new String(oatMagicAndVersion,versionOffsetFromOatBegin,versionBytes,Charset.forName(\"ASCII\"));\n    try {\n      Integer.parseInt(oatVersion);\n    }\n catch (    NumberFormatException e) {\n      throw new IOException(\"Bad oat version: \" + oatVersion);\n    }\n    ByteBuffer buffer=ByteBuffer.allocate(128);\n    buffer.order(elfFile.getDataOrder());\n    final int isaNumOffsetFromOatBegin=12;\n    channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);\n    buffer.limit(4);\n    ShareElfFile.readUntilLimit(channel,buffer,\"Failed to read isa num.\");\n    int isaNum=buffer.getInt();\n    if (isaNum < 0 || isaNum >= InstructionSet.values().length) {\n      throw new IOException(\"Bad isa num: \" + isaNum);\n    }\nswitch (InstructionSet.values()[isaNum]) {\ncase kArm:case kThumb2:      result=\"arm\";\n    break;\ncase kArm64:  result=\"arm64\";\nbreak;\ncase kX86:result=\"x86\";\nbreak;\ncase kX86_64:result=\"x86_64\";\nbreak;\ncase kMips:result=\"mips\";\nbreak;\ncase kMips64:result=\"mips64\";\nbreak;\ncase kNone:result=\"none\";\nbreak;\ndefault:throw new IOException(\"Should not reach here.\");\n}\n}\n  finally {\nif (elfFile != null) {\ntry {\nelfFile.close();\n}\n catch (Exception ignored) {\n}\n}\n}\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 341,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 73
      },
      "nodeContext" : "throw new IOException(\"Unable to find .rodata section.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 55,
    "startColumnNumber" : 38,
    "endLineNumber" : 55,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}