{
  "id" : 184,
  "expression" : "conjunctFuture",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/blob/BlobServerPutTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "conjunctFuture",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 725,
      "startColumnNumber" : 43,
      "endLineNumber" : 725,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 725,
        "startColumnNumber" : 43,
        "endLineNumber" : 725,
        "endColumnNumber" : 63
      },
      "nodeContext" : "conjunctFuture.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 725,
        "startColumnNumber" : 32,
        "endLineNumber" : 725,
        "endColumnNumber" : 63
      },
      "nodeContext" : "blobKeys=conjunctFuture.get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 725,
        "startColumnNumber" : 12,
        "endLineNumber" : 725,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Collection<BlobKey> blobKeys=conjunctFuture.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 695,
        "startColumnNumber" : 80,
        "endLineNumber" : 750,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  for (int i=0; i < concurrentPutOperations; i++) {\n    CompletableFuture<BlobKey> putFuture=CompletableFuture.supplyAsync(() -> {\n      try {\n        BlockingInputStream inputStream=new BlockingInputStream(countDownLatch,data);\n        BlobKey uploadedKey=put(server,jobId,inputStream,blobType);\n        verifyContents(server,jobId,uploadedKey,data);\n        return uploadedKey;\n      }\n catch (      IOException e) {\n        throw new CompletionException(new FlinkException(\"Could not upload blob.\",e));\n      }\n    }\n,executor);\n    allFutures.add(putFuture);\n  }\n  FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture=FutureUtils.combineAll(allFutures);\n  Collection<BlobKey> blobKeys=conjunctFuture.get();\n  Iterator<BlobKey> blobKeyIterator=blobKeys.iterator();\n  assertTrue(blobKeyIterator.hasNext());\n  BlobKey blobKey=blobKeyIterator.next();\n  while (blobKeyIterator.hasNext()) {\n    verifyKeyDifferentHashEquals(blobKey,blobKeyIterator.next());\n  }\n  verifyContents(server,jobId,blobKey,data);\n  if (blobType == PERMANENT_BLOB) {\n    assertThat(persistedBlobs).hasSameElementsAs(blobKeys);\n  }\n else {\n    assertThat(persistedBlobs).isEmpty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2667,
        "startLineNumber" : 694,
        "startColumnNumber" : 8,
        "endLineNumber" : 752,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (final BlobServer server=new BlobServer(config,temporaryFolder.newFolder(),blobStore)){\n  server.start();\n  for (int i=0; i < concurrentPutOperations; i++) {\n    CompletableFuture<BlobKey> putFuture=CompletableFuture.supplyAsync(() -> {\n      try {\n        BlockingInputStream inputStream=new BlockingInputStream(countDownLatch,data);\n        BlobKey uploadedKey=put(server,jobId,inputStream,blobType);\n        verifyContents(server,jobId,uploadedKey,data);\n        return uploadedKey;\n      }\n catch (      IOException e) {\n        throw new CompletionException(new FlinkException(\"Could not upload blob.\",e));\n      }\n    }\n,executor);\n    allFutures.add(putFuture);\n  }\n  FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture=FutureUtils.combineAll(allFutures);\n  Collection<BlobKey> blobKeys=conjunctFuture.get();\n  Iterator<BlobKey> blobKeyIterator=blobKeys.iterator();\n  assertTrue(blobKeyIterator.hasNext());\n  BlobKey blobKey=blobKeyIterator.next();\n  while (blobKeyIterator.hasNext()) {\n    verifyKeyDifferentHashEquals(blobKey,blobKeyIterator.next());\n  }\n  verifyContents(server,jobId,blobKey,data);\n  if (blobType == PERMANENT_BLOB) {\n    assertThat(persistedBlobs).hasSameElementsAs(blobKeys);\n  }\n else {\n    assertThat(persistedBlobs).isEmpty();\n  }\n}\n  finally {\n  executor.shutdownNow();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 194,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3618,
        "startLineNumber" : 672,
        "startColumnNumber" : 73,
        "endLineNumber" : 753,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  final int concurrentPutOperations=2;\n  final int dataSize=1024;\n  Collection<BlobKey> persistedBlobs=ConcurrentHashMap.newKeySet();\n  TestingBlobStore blobStore=new TestingBlobStoreBuilder().setPutFunction((file,jobID,blobKey) -> {\n    persistedBlobs.add(blobKey);\n    return true;\n  }\n).createTestingBlobStore();\n  final CountDownLatch countDownLatch=new CountDownLatch(concurrentPutOperations);\n  final byte[] data=new byte[dataSize];\n  ArrayList<CompletableFuture<BlobKey>> allFutures=new ArrayList<>(concurrentPutOperations);\n  ExecutorService executor=Executors.newFixedThreadPool(concurrentPutOperations);\n  try (final BlobServer server=new BlobServer(config,temporaryFolder.newFolder(),blobStore)){\n    server.start();\n    for (int i=0; i < concurrentPutOperations; i++) {\n      CompletableFuture<BlobKey> putFuture=CompletableFuture.supplyAsync(() -> {\n        try {\n          BlockingInputStream inputStream=new BlockingInputStream(countDownLatch,data);\n          BlobKey uploadedKey=put(server,jobId,inputStream,blobType);\n          verifyContents(server,jobId,uploadedKey,data);\n          return uploadedKey;\n        }\n catch (        IOException e) {\n          throw new CompletionException(new FlinkException(\"Could not upload blob.\",e));\n        }\n      }\n,executor);\n      allFutures.add(putFuture);\n    }\n    FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture=FutureUtils.combineAll(allFutures);\n    Collection<BlobKey> blobKeys=conjunctFuture.get();\n    Iterator<BlobKey> blobKeyIterator=blobKeys.iterator();\n    assertTrue(blobKeyIterator.hasNext());\n    BlobKey blobKey=blobKeyIterator.next();\n    while (blobKeyIterator.hasNext()) {\n      verifyKeyDifferentHashEquals(blobKey,blobKeyIterator.next());\n    }\n    verifyContents(server,jobId,blobKey,data);\n    if (blobType == PERMANENT_BLOB) {\n      assertThat(persistedBlobs).hasSameElementsAs(blobKeys);\n    }\n else {\n      assertThat(persistedBlobs).isEmpty();\n    }\n  }\n  finally {\n    executor.shutdownNow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4145,
        "startLineNumber" : 663,
        "startColumnNumber" : 4,
        "endLineNumber" : 753,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * [FLINK-6020] Tests that concurrent put operations will only upload the file once to the {@link BlobStore} and that the files are not corrupt at any time.\n * @param jobId job ID to use (or <tt>null</tt> if job-unrelated)\n * @param blobType whether the BLOB should become permanent or transient\n */\nprivate void testConcurrentPutOperations(@Nullable final JobID jobId,final BlobKey.BlobType blobType) throws IOException, InterruptedException, ExecutionException {\n  final Configuration config=new Configuration();\n  final int concurrentPutOperations=2;\n  final int dataSize=1024;\n  Collection<BlobKey> persistedBlobs=ConcurrentHashMap.newKeySet();\n  TestingBlobStore blobStore=new TestingBlobStoreBuilder().setPutFunction((file,jobID,blobKey) -> {\n    persistedBlobs.add(blobKey);\n    return true;\n  }\n).createTestingBlobStore();\n  final CountDownLatch countDownLatch=new CountDownLatch(concurrentPutOperations);\n  final byte[] data=new byte[dataSize];\n  ArrayList<CompletableFuture<BlobKey>> allFutures=new ArrayList<>(concurrentPutOperations);\n  ExecutorService executor=Executors.newFixedThreadPool(concurrentPutOperations);\n  try (final BlobServer server=new BlobServer(config,temporaryFolder.newFolder(),blobStore)){\n    server.start();\n    for (int i=0; i < concurrentPutOperations; i++) {\n      CompletableFuture<BlobKey> putFuture=CompletableFuture.supplyAsync(() -> {\n        try {\n          BlockingInputStream inputStream=new BlockingInputStream(countDownLatch,data);\n          BlobKey uploadedKey=put(server,jobId,inputStream,blobType);\n          verifyContents(server,jobId,uploadedKey,data);\n          return uploadedKey;\n        }\n catch (        IOException e) {\n          throw new CompletionException(new FlinkException(\"Could not upload blob.\",e));\n        }\n      }\n,executor);\n      allFutures.add(putFuture);\n    }\n    FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture=FutureUtils.combineAll(allFutures);\n    Collection<BlobKey> blobKeys=conjunctFuture.get();\n    Iterator<BlobKey> blobKeyIterator=blobKeys.iterator();\n    assertTrue(blobKeyIterator.hasNext());\n    BlobKey blobKey=blobKeyIterator.next();\n    while (blobKeyIterator.hasNext()) {\n      verifyKeyDifferentHashEquals(blobKey,blobKeyIterator.next());\n    }\n    verifyContents(server,jobId,blobKey,data);\n    if (blobType == PERMANENT_BLOB) {\n      assertThat(persistedBlobs).hasSameElementsAs(blobKeys);\n    }\n else {\n      assertThat(persistedBlobs).isEmpty();\n    }\n  }\n  finally {\n    executor.shutdownNow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 725,
        "startColumnNumber" : 12,
        "endLineNumber" : 725,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Collection<BlobKey> blobKeys=conjunctFuture.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.util.concurrent.FutureUtils.ConjunctFuture<java.util.Collection<org.apache.flink.runtime.blob.BlobKey>>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 725,
    "startColumnNumber" : 43,
    "endLineNumber" : 725,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}