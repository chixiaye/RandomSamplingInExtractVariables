{
  "id" : 315,
  "expression" : "0",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/Types.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 57,
      "startColumnNumber" : 58,
      "endLineNumber" : 57,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 57,
        "startColumnNumber" : 13,
        "endLineNumber" : 57,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Array.newInstance(getRawType(componentType),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 57,
        "startColumnNumber" : 13,
        "endLineNumber" : 57,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Array.newInstance(getRawType(componentType),0).getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 57,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return Array.newInstance(getRawType(componentType),0).getClass();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 55,
        "startColumnNumber" : 49,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 55,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1261,
        "startLineNumber" : 46,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  if (!(rawType instanceof Class))   throw new IllegalArgumentException();\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof Class<?>) {\n  return (Class<?>)type;\n}\n else if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  if (!(rawType instanceof Class))   throw new IllegalArgumentException();\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 41,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    if (!(rawType instanceof Class))     throw new IllegalArgumentException();\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1423,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Class<?> getRawType(Type type){\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    if (!(rawType instanceof Class))     throw new IllegalArgumentException();\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 57,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return Array.newInstance(getRawType(componentType),0).getClass();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 65,
      "startColumnNumber" : 63,
      "endLineNumber" : 65,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 65,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 65
      },
      "nodeContext" : "((WildcardType)type).getUpperBounds()[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "getRawType(((WildcardType)type).getUpperBounds()[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 6,
        "endLineNumber" : 65,
        "endColumnNumber" : 67
      },
      "nodeContext" : "return getRawType(((WildcardType)type).getUpperBounds()[0]);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 64,
        "startColumnNumber" : 45,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 64,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 59,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 55,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1261,
        "startLineNumber" : 46,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  if (!(rawType instanceof Class))   throw new IllegalArgumentException();\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof Class<?>) {\n  return (Class<?>)type;\n}\n else if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  if (!(rawType instanceof Class))   throw new IllegalArgumentException();\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 41,
        "startColumnNumber" : 47,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    if (!(rawType instanceof Class))     throw new IllegalArgumentException();\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1423,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Class<?> getRawType(Type type){\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    if (!(rawType instanceof Class))     throw new IllegalArgumentException();\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 6,
        "endLineNumber" : 65,
        "endColumnNumber" : 67
      },
      "nodeContext" : "return getRawType(((WildcardType)type).getUpperBounds()[0]);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 57,
    "startColumnNumber" : 58,
    "endLineNumber" : 57,
    "endColumnNumber" : 59
  }, {
    "charLength" : 1,
    "startLineNumber" : 65,
    "startColumnNumber" : 63,
    "endLineNumber" : 65,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}