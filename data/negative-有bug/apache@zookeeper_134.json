{
  "id" : 134,
  "expression" : "sk.interestOps() & SelectionKey.OP_READ",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sk.interestOps() & SelectionKey.OP_READ",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 384,
      "startColumnNumber" : 36,
      "endLineNumber" : 384,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 384,
        "startColumnNumber" : 35,
        "endLineNumber" : 384,
        "endColumnNumber" : 76
      },
      "nodeContext" : "(sk.interestOps() & SelectionKey.OP_READ)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 384,
        "startColumnNumber" : 35,
        "endLineNumber" : 384,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(sk.interestOps() & SelectionKey.OP_READ) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 383,
        "startColumnNumber" : 28,
        "endLineNumber" : 384,
        "endColumnNumber" : 81
      },
      "nodeContext" : "!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 383,
        "startColumnNumber" : 24,
        "endLineNumber" : 386,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n  throw new IOException(\"Responded to info probe\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 382,
        "startColumnNumber" : 53,
        "endLineNumber" : 389,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n    throw new IOException(\"Responded to info probe\");\n  }\n  sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 382,
        "startColumnNumber" : 20,
        "endLineNumber" : 392,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (outgoingBuffers.size() == 0) {\n  if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n    throw new IOException(\"Responded to info probe\");\n  }\n  sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n}\n else {\n  sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 381,
        "startColumnNumber" : 36,
        "endLineNumber" : 393,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (outgoingBuffers.size() == 0) {\n    if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n      throw new IOException(\"Responded to info probe\");\n    }\n    sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n  }\n else {\n    sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 381,
        "startColumnNumber" : 16,
        "endLineNumber" : 393,
        "endColumnNumber" : 17
      },
      "nodeContext" : "synchronized (this) {\n  if (outgoingBuffers.size() == 0) {\n    if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n      throw new IOException(\"Responded to info probe\");\n    }\n    sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n  }\n else {\n    sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4359,
        "startLineNumber" : 303,
        "startColumnNumber" : 32,
        "endLineNumber" : 394,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (outgoingBuffers.size() > 0) {\n    ByteBuffer directBuffer=factory.directBuffer;\n    directBuffer.clear();\n    for (    ByteBuffer b : outgoingBuffers) {\n      if (directBuffer.remaining() < b.remaining()) {\n        b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n      }\n      int p=b.position();\n      directBuffer.put(b);\n      b.position(p);\n      if (directBuffer.remaining() == 0) {\n        break;\n      }\n    }\n    directBuffer.flip();\n    int sent=sock.write(directBuffer);\n    ByteBuffer bb;\n    while (outgoingBuffers.size() > 0) {\n      bb=outgoingBuffers.peek();\n      if (bb == closeConn) {\n        throw new IOException(\"closing\");\n      }\n      int left=bb.remaining() - sent;\n      if (left > 0) {\n        bb.position(bb.position() + sent);\n        break;\n      }\n      stats.packetsSent++;\n      sent-=bb.remaining();\n      zk.serverStats().incrementPacketsSent();\n      outgoingBuffers.remove();\n    }\n  }\nsynchronized (this) {\n    if (outgoingBuffers.size() == 0) {\n      if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n        throw new IOException(\"Responded to info probe\");\n      }\n      sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n    }\n else {\n      sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 394,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (k.isWritable()) {\n  if (outgoingBuffers.size() > 0) {\n    ByteBuffer directBuffer=factory.directBuffer;\n    directBuffer.clear();\n    for (    ByteBuffer b : outgoingBuffers) {\n      if (directBuffer.remaining() < b.remaining()) {\n        b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n      }\n      int p=b.position();\n      directBuffer.put(b);\n      b.position(p);\n      if (directBuffer.remaining() == 0) {\n        break;\n      }\n    }\n    directBuffer.flip();\n    int sent=sock.write(directBuffer);\n    ByteBuffer bb;\n    while (outgoingBuffers.size() > 0) {\n      bb=outgoingBuffers.peek();\n      if (bb == closeConn) {\n        throw new IOException(\"closing\");\n      }\n      int left=bb.remaining() - sent;\n      if (left > 0) {\n        bb.position(bb.position() + sent);\n        break;\n      }\n      stats.packetsSent++;\n      sent-=bb.remaining();\n      zk.serverStats().incrementPacketsSent();\n      outgoingBuffers.remove();\n    }\n  }\nsynchronized (this) {\n    if (outgoingBuffers.size() == 0) {\n      if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n        throw new IOException(\"Responded to info probe\");\n      }\n      sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n    }\n else {\n      sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5497,
        "startLineNumber" : 275,
        "startColumnNumber" : 12,
        "endLineNumber" : 395,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (sock == null) {\n    return;\n  }\n  if (k.isReadable()) {\n    int rc=sock.read(incomingBuffer);\n    if (rc < 0) {\n      throw new IOException(\"Read error\");\n    }\n    if (incomingBuffer.remaining() == 0) {\n      incomingBuffer.flip();\n      if (incomingBuffer == lenBuffer) {\n        readLength(k);\n      }\n else       if (!initialized) {\n        stats.packetsReceived++;\n        zk.serverStats().incrementPacketsReceived();\n        readConnectRequest();\n        lenBuffer.clear();\n        incomingBuffer=lenBuffer;\n      }\n else {\n        stats.packetsReceived++;\n        zk.serverStats().incrementPacketsReceived();\n        readRequest();\n        lenBuffer.clear();\n        incomingBuffer=lenBuffer;\n      }\n    }\n  }\n  if (k.isWritable()) {\n    if (outgoingBuffers.size() > 0) {\n      ByteBuffer directBuffer=factory.directBuffer;\n      directBuffer.clear();\n      for (      ByteBuffer b : outgoingBuffers) {\n        if (directBuffer.remaining() < b.remaining()) {\n          b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n        }\n        int p=b.position();\n        directBuffer.put(b);\n        b.position(p);\n        if (directBuffer.remaining() == 0) {\n          break;\n        }\n      }\n      directBuffer.flip();\n      int sent=sock.write(directBuffer);\n      ByteBuffer bb;\n      while (outgoingBuffers.size() > 0) {\n        bb=outgoingBuffers.peek();\n        if (bb == closeConn) {\n          throw new IOException(\"closing\");\n        }\n        int left=bb.remaining() - sent;\n        if (left > 0) {\n          bb.position(bb.position() + sent);\n          break;\n        }\n        stats.packetsSent++;\n        sent-=bb.remaining();\n        zk.serverStats().incrementPacketsSent();\n        outgoingBuffers.remove();\n      }\n    }\nsynchronized (this) {\n      if (outgoingBuffers.size() == 0) {\n        if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n          throw new IOException(\"Responded to info probe\");\n        }\n        sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n      }\n else {\n        sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6037,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 407,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (sock == null) {\n    return;\n  }\n  if (k.isReadable()) {\n    int rc=sock.read(incomingBuffer);\n    if (rc < 0) {\n      throw new IOException(\"Read error\");\n    }\n    if (incomingBuffer.remaining() == 0) {\n      incomingBuffer.flip();\n      if (incomingBuffer == lenBuffer) {\n        readLength(k);\n      }\n else       if (!initialized) {\n        stats.packetsReceived++;\n        zk.serverStats().incrementPacketsReceived();\n        readConnectRequest();\n        lenBuffer.clear();\n        incomingBuffer=lenBuffer;\n      }\n else {\n        stats.packetsReceived++;\n        zk.serverStats().incrementPacketsReceived();\n        readRequest();\n        lenBuffer.clear();\n        incomingBuffer=lenBuffer;\n      }\n    }\n  }\n  if (k.isWritable()) {\n    if (outgoingBuffers.size() > 0) {\n      ByteBuffer directBuffer=factory.directBuffer;\n      directBuffer.clear();\n      for (      ByteBuffer b : outgoingBuffers) {\n        if (directBuffer.remaining() < b.remaining()) {\n          b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n        }\n        int p=b.position();\n        directBuffer.put(b);\n        b.position(p);\n        if (directBuffer.remaining() == 0) {\n          break;\n        }\n      }\n      directBuffer.flip();\n      int sent=sock.write(directBuffer);\n      ByteBuffer bb;\n      while (outgoingBuffers.size() > 0) {\n        bb=outgoingBuffers.peek();\n        if (bb == closeConn) {\n          throw new IOException(\"closing\");\n        }\n        int left=bb.remaining() - sent;\n        if (left > 0) {\n          bb.position(bb.position() + sent);\n          break;\n        }\n        stats.packetsSent++;\n        sent-=bb.remaining();\n        zk.serverStats().incrementPacketsSent();\n        outgoingBuffers.remove();\n      }\n    }\nsynchronized (this) {\n      if (outgoingBuffers.size() == 0) {\n        if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n          throw new IOException(\"Responded to info probe\");\n        }\n        sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n      }\n else {\n        sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n      }\n    }\n  }\n}\n catch (CancelledKeyException e) {\n  LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n  LOG.debug(\"CancelledKeyException stack trace\",e);\n  close();\n}\ncatch (IOException e) {\n  LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n  LOG.debug(\"IOException stack trace\",e);\n  close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 373,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6053,
        "startLineNumber" : 274,
        "startColumnNumber" : 58,
        "endLineNumber" : 408,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    if (sock == null) {\n      return;\n    }\n    if (k.isReadable()) {\n      int rc=sock.read(incomingBuffer);\n      if (rc < 0) {\n        throw new IOException(\"Read error\");\n      }\n      if (incomingBuffer.remaining() == 0) {\n        incomingBuffer.flip();\n        if (incomingBuffer == lenBuffer) {\n          readLength(k);\n        }\n else         if (!initialized) {\n          stats.packetsReceived++;\n          zk.serverStats().incrementPacketsReceived();\n          readConnectRequest();\n          lenBuffer.clear();\n          incomingBuffer=lenBuffer;\n        }\n else {\n          stats.packetsReceived++;\n          zk.serverStats().incrementPacketsReceived();\n          readRequest();\n          lenBuffer.clear();\n          incomingBuffer=lenBuffer;\n        }\n      }\n    }\n    if (k.isWritable()) {\n      if (outgoingBuffers.size() > 0) {\n        ByteBuffer directBuffer=factory.directBuffer;\n        directBuffer.clear();\n        for (        ByteBuffer b : outgoingBuffers) {\n          if (directBuffer.remaining() < b.remaining()) {\n            b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n          }\n          int p=b.position();\n          directBuffer.put(b);\n          b.position(p);\n          if (directBuffer.remaining() == 0) {\n            break;\n          }\n        }\n        directBuffer.flip();\n        int sent=sock.write(directBuffer);\n        ByteBuffer bb;\n        while (outgoingBuffers.size() > 0) {\n          bb=outgoingBuffers.peek();\n          if (bb == closeConn) {\n            throw new IOException(\"closing\");\n          }\n          int left=bb.remaining() - sent;\n          if (left > 0) {\n            bb.position(bb.position() + sent);\n            break;\n          }\n          stats.packetsSent++;\n          sent-=bb.remaining();\n          zk.serverStats().incrementPacketsSent();\n          outgoingBuffers.remove();\n        }\n      }\nsynchronized (this) {\n        if (outgoingBuffers.size() == 0) {\n          if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n            throw new IOException(\"Responded to info probe\");\n          }\n          sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n        }\n else {\n          sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n        }\n      }\n    }\n  }\n catch (  CancelledKeyException e) {\n    LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n    LOG.debug(\"CancelledKeyException stack trace\",e);\n    close();\n  }\ncatch (  IOException e) {\n    LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n    LOG.debug(\"IOException stack trace\",e);\n    close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6107,
        "startLineNumber" : 274,
        "startColumnNumber" : 4,
        "endLineNumber" : 408,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void doIO(SelectionKey k) throws InterruptedException {\n  try {\n    if (sock == null) {\n      return;\n    }\n    if (k.isReadable()) {\n      int rc=sock.read(incomingBuffer);\n      if (rc < 0) {\n        throw new IOException(\"Read error\");\n      }\n      if (incomingBuffer.remaining() == 0) {\n        incomingBuffer.flip();\n        if (incomingBuffer == lenBuffer) {\n          readLength(k);\n        }\n else         if (!initialized) {\n          stats.packetsReceived++;\n          zk.serverStats().incrementPacketsReceived();\n          readConnectRequest();\n          lenBuffer.clear();\n          incomingBuffer=lenBuffer;\n        }\n else {\n          stats.packetsReceived++;\n          zk.serverStats().incrementPacketsReceived();\n          readRequest();\n          lenBuffer.clear();\n          incomingBuffer=lenBuffer;\n        }\n      }\n    }\n    if (k.isWritable()) {\n      if (outgoingBuffers.size() > 0) {\n        ByteBuffer directBuffer=factory.directBuffer;\n        directBuffer.clear();\n        for (        ByteBuffer b : outgoingBuffers) {\n          if (directBuffer.remaining() < b.remaining()) {\n            b=(ByteBuffer)b.slice().limit(directBuffer.remaining());\n          }\n          int p=b.position();\n          directBuffer.put(b);\n          b.position(p);\n          if (directBuffer.remaining() == 0) {\n            break;\n          }\n        }\n        directBuffer.flip();\n        int sent=sock.write(directBuffer);\n        ByteBuffer bb;\n        while (outgoingBuffers.size() > 0) {\n          bb=outgoingBuffers.peek();\n          if (bb == closeConn) {\n            throw new IOException(\"closing\");\n          }\n          int left=bb.remaining() - sent;\n          if (left > 0) {\n            bb.position(bb.position() + sent);\n            break;\n          }\n          stats.packetsSent++;\n          sent-=bb.remaining();\n          zk.serverStats().incrementPacketsSent();\n          outgoingBuffers.remove();\n        }\n      }\nsynchronized (this) {\n        if (outgoingBuffers.size() == 0) {\n          if (!initialized && (sk.interestOps() & SelectionKey.OP_READ) == 0) {\n            throw new IOException(\"Responded to info probe\");\n          }\n          sk.interestOps(sk.interestOps() & (~SelectionKey.OP_WRITE));\n        }\n else {\n          sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);\n        }\n      }\n    }\n  }\n catch (  CancelledKeyException e) {\n    LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n    LOG.debug(\"CancelledKeyException stack trace\",e);\n    close();\n  }\ncatch (  IOException e) {\n    LOG.warn(\"Exception causing close of session 0x\" + Long.toHexString(sessionId) + \" due to \"+ e);\n    LOG.debug(\"IOException stack trace\",e);\n    close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 383,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 384,
        "startColumnNumber" : 35,
        "endLineNumber" : 384,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(sk.interestOps() & SelectionKey.OP_READ) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 384,
    "startColumnNumber" : 36,
    "endLineNumber" : 384,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}