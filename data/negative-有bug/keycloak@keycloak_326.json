{
  "id" : 326,
  "expression" : "PAGE_SIZE",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PAGE_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 258,
      "startColumnNumber" : 94,
      "endLineNumber" : 258,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 258,
        "startColumnNumber" : 53,
        "endLineNumber" : 258,
        "endColumnNumber" : 104
      },
      "nodeContext" : "new RangedAttributeInterceptor(\"member\",PAGE_SIZE)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 258,
        "startColumnNumber" : 39,
        "endLineNumber" : 258,
        "endColumnNumber" : 104
      },
      "nodeContext" : "interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 105
      },
      "nodeContext" : "RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 248,
        "startColumnNumber" : 63,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Interceptor> interceptors=service.getInterceptors();\n  int insertionPosition=-1;\n  for (int pos=0; pos < interceptors.size(); ++pos) {\n    Interceptor interceptor=interceptors.get(pos);\n    if (interceptor instanceof NormalizationInterceptor) {\n      insertionPosition=pos;\n    }\n  }\n  RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n  interceptor.init(service);\n  interceptors.add(insertionPosition + 1,interceptor);\n  service.setInterceptors(interceptors);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 248,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.directoryServiceFactory.equals(DSF_INMEMORY)) {\n  List<Interceptor> interceptors=service.getInterceptors();\n  int insertionPosition=-1;\n  for (int pos=0; pos < interceptors.size(); ++pos) {\n    Interceptor interceptor=interceptors.get(pos);\n    if (interceptor instanceof NormalizationInterceptor) {\n      insertionPosition=pos;\n    }\n  }\n  RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n  interceptor.init(service);\n  interceptors.add(insertionPosition + 1,interceptor);\n  service.setInterceptors(interceptors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2659,
        "startLineNumber" : 204,
        "startColumnNumber" : 73,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dcName=baseDN.split(\",\")[0];\n  dcName=dcName.substring(dcName.indexOf(\"=\") + 1);\n  if (this.directoryServiceFactory.equals(DSF_INMEMORY)) {\n    System.setProperty(\"apacheds.partition.factory\",AvlPartitionFactory.class.getName());\n  }\n else   if (this.directoryServiceFactory.equals(DSF_FILE)) {\n    System.setProperty(\"apacheds.partition.factory\",JdbmPartitionFactory.class.getName());\n  }\n else {\n    throw new IllegalStateException(\"Unknown value of directoryServiceFactory: \" + this.directoryServiceFactory);\n  }\n  DefaultDirectoryServiceFactory dsf=new DefaultDirectoryServiceFactory();\n  DirectoryService service=dsf.getDirectoryService();\n  service.setAccessControlEnabled(enableAccessControl);\n  service.setAllowAnonymousAccess(enableAnonymousAccess);\n  service.getChangeLog().setEnabled(false);\n  dsf.init(dcName + \"DS\");\n  Partition partition=dsf.getPartitionFactory().createPartition(service.getSchemaManager(),service.getDnFactory(),dcName,this.baseDN,1000,new File(service.getInstanceLayout().getPartitionsDirectory(),dcName));\n  partition.initialize();\n  partition.setSchemaManager(service.getSchemaManager());\n  service.addPartition(partition);\n  String entryLdif=\"dn: \" + baseDN + \"\\n\"+ \"dc: \"+ dcName+ \"\\n\"+ \"objectClass: top\\n\"+ \"objectClass: domain\\n\\n\";\n  importLdifContent(service,entryLdif);\n  if (this.directoryServiceFactory.equals(DSF_INMEMORY)) {\n    List<Interceptor> interceptors=service.getInterceptors();\n    int insertionPosition=-1;\n    for (int pos=0; pos < interceptors.size(); ++pos) {\n      Interceptor interceptor=interceptors.get(pos);\n      if (interceptor instanceof NormalizationInterceptor) {\n        insertionPosition=pos;\n      }\n    }\n    RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n    interceptor.init(service);\n    interceptors.add(insertionPosition + 1,interceptor);\n    service.setInterceptors(interceptors);\n  }\n  return service;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2728,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected DirectoryService createDirectoryService() throws Exception {\n  String dcName=baseDN.split(\",\")[0];\n  dcName=dcName.substring(dcName.indexOf(\"=\") + 1);\n  if (this.directoryServiceFactory.equals(DSF_INMEMORY)) {\n    System.setProperty(\"apacheds.partition.factory\",AvlPartitionFactory.class.getName());\n  }\n else   if (this.directoryServiceFactory.equals(DSF_FILE)) {\n    System.setProperty(\"apacheds.partition.factory\",JdbmPartitionFactory.class.getName());\n  }\n else {\n    throw new IllegalStateException(\"Unknown value of directoryServiceFactory: \" + this.directoryServiceFactory);\n  }\n  DefaultDirectoryServiceFactory dsf=new DefaultDirectoryServiceFactory();\n  DirectoryService service=dsf.getDirectoryService();\n  service.setAccessControlEnabled(enableAccessControl);\n  service.setAllowAnonymousAccess(enableAnonymousAccess);\n  service.getChangeLog().setEnabled(false);\n  dsf.init(dcName + \"DS\");\n  Partition partition=dsf.getPartitionFactory().createPartition(service.getSchemaManager(),service.getDnFactory(),dcName,this.baseDN,1000,new File(service.getInstanceLayout().getPartitionsDirectory(),dcName));\n  partition.initialize();\n  partition.setSchemaManager(service.getSchemaManager());\n  service.addPartition(partition);\n  String entryLdif=\"dn: \" + baseDN + \"\\n\"+ \"dc: \"+ dcName+ \"\\n\"+ \"objectClass: top\\n\"+ \"objectClass: domain\\n\\n\";\n  importLdifContent(service,entryLdif);\n  if (this.directoryServiceFactory.equals(DSF_INMEMORY)) {\n    List<Interceptor> interceptors=service.getInterceptors();\n    int insertionPosition=-1;\n    for (int pos=0; pos < interceptors.size(); ++pos) {\n      Interceptor interceptor=interceptors.get(pos);\n      if (interceptor instanceof NormalizationInterceptor) {\n        insertionPosition=pos;\n      }\n    }\n    RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n    interceptor.init(service);\n    interceptors.add(insertionPosition + 1,interceptor);\n    service.setInterceptors(interceptors);\n  }\n  return service;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 105
      },
      "nodeContext" : "RangedAttributeInterceptor interceptor=new RangedAttributeInterceptor(\"member\",PAGE_SIZE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 258,
    "startColumnNumber" : 94,
    "endLineNumber" : 258,
    "endColumnNumber" : 103
  } ],
  "layoutRelationDataList" : [ ]
}