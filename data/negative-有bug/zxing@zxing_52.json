{
  "id" : 52,
  "expression" : "height >> BLOCK_SIZE_POWER",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/common/HybridBinarizer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "height >> BLOCK_SIZE_POWER",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 73,
      "startColumnNumber" : 22,
      "endLineNumber" : 73,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 73,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "subHeight=height >> BLOCK_SIZE_POWER",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "int subHeight=height >> BLOCK_SIZE_POWER;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 65,
        "startColumnNumber" : 91,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] luminances=source.getMatrix();\n  int width=source.getWidth();\n  int height=source.getHeight();\n  int subWidth=width >> BLOCK_SIZE_POWER;\n  if ((width & BLOCK_SIZE_MASK) != 0) {\n    subWidth++;\n  }\n  int subHeight=height >> BLOCK_SIZE_POWER;\n  if ((height & BLOCK_SIZE_MASK) != 0) {\n    subHeight++;\n  }\n  int[][] blackPoints=calculateBlackPoints(luminances,subWidth,subHeight,width,height);\n  BitMatrix newMatrix=new BitMatrix(width,height);\n  calculateThresholdForBlock(luminances,subWidth,subHeight,width,height,blackPoints,newMatrix);\n  matrix=newMatrix;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 912,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (source.getWidth() >= MINIMUM_DIMENSION && source.getHeight() >= MINIMUM_DIMENSION) {\n  byte[] luminances=source.getMatrix();\n  int width=source.getWidth();\n  int height=source.getHeight();\n  int subWidth=width >> BLOCK_SIZE_POWER;\n  if ((width & BLOCK_SIZE_MASK) != 0) {\n    subWidth++;\n  }\n  int subHeight=height >> BLOCK_SIZE_POWER;\n  if ((height & BLOCK_SIZE_MASK) != 0) {\n    subHeight++;\n  }\n  int[][] blackPoints=calculateBlackPoints(luminances,subWidth,subHeight,width,height);\n  BitMatrix newMatrix=new BitMatrix(width,height);\n  calculateThresholdForBlock(luminances,subWidth,subHeight,width,height,blackPoints,newMatrix);\n  matrix=newMatrix;\n}\n else {\n  matrix=super.getBlackMatrix();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 57,
        "startColumnNumber" : 61,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (matrix != null) {\n    return matrix;\n  }\n  LuminanceSource source=getLuminanceSource();\n  if (source.getWidth() >= MINIMUM_DIMENSION && source.getHeight() >= MINIMUM_DIMENSION) {\n    byte[] luminances=source.getMatrix();\n    int width=source.getWidth();\n    int height=source.getHeight();\n    int subWidth=width >> BLOCK_SIZE_POWER;\n    if ((width & BLOCK_SIZE_MASK) != 0) {\n      subWidth++;\n    }\n    int subHeight=height >> BLOCK_SIZE_POWER;\n    if ((height & BLOCK_SIZE_MASK) != 0) {\n      subHeight++;\n    }\n    int[][] blackPoints=calculateBlackPoints(luminances,subWidth,subHeight,width,height);\n    BitMatrix newMatrix=new BitMatrix(width,height);\n    calculateThresholdForBlock(luminances,subWidth,subHeight,width,height,blackPoints,newMatrix);\n    matrix=newMatrix;\n  }\n else {\n    matrix=super.getBlackMatrix();\n  }\n  return matrix;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1399,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BitMatrix getBlackMatrix() throws NotFoundException {\n  if (matrix != null) {\n    return matrix;\n  }\n  LuminanceSource source=getLuminanceSource();\n  if (source.getWidth() >= MINIMUM_DIMENSION && source.getHeight() >= MINIMUM_DIMENSION) {\n    byte[] luminances=source.getMatrix();\n    int width=source.getWidth();\n    int height=source.getHeight();\n    int subWidth=width >> BLOCK_SIZE_POWER;\n    if ((width & BLOCK_SIZE_MASK) != 0) {\n      subWidth++;\n    }\n    int subHeight=height >> BLOCK_SIZE_POWER;\n    if ((height & BLOCK_SIZE_MASK) != 0) {\n      subHeight++;\n    }\n    int[][] blackPoints=calculateBlackPoints(luminances,subWidth,subHeight,width,height);\n    BitMatrix newMatrix=new BitMatrix(width,height);\n    calculateThresholdForBlock(luminances,subWidth,subHeight,width,height,blackPoints,newMatrix);\n    matrix=newMatrix;\n  }\n else {\n    matrix=super.getBlackMatrix();\n  }\n  return matrix;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "int subHeight=height >> BLOCK_SIZE_POWER;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 73,
    "startColumnNumber" : 22,
    "endLineNumber" : 73,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}