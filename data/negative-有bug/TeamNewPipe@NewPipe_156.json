{
  "id" : 156,
  "expression" : "httpURLConnection.getResponseCode()",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpURLConnection.getResponseCode()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 385,
      "startColumnNumber" : 27,
      "endLineNumber" : 385,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 385,
        "startColumnNumber" : 12,
        "endLineNumber" : 385,
        "endColumnNumber" : 62
      },
      "nodeContext" : "responseCode=httpURLConnection.getResponseCode()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 385,
        "startColumnNumber" : 12,
        "endLineNumber" : 385,
        "endColumnNumber" : 63
      },
      "nodeContext" : "responseCode=httpURLConnection.getResponseCode();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 382,
        "startColumnNumber" : 12,
        "endLineNumber" : 387,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.connection=makeConnection(dataSpec);\n  httpURLConnection=this.connection;\n  responseCode=httpURLConnection.getResponseCode();\n  responseMessage=httpURLConnection.getResponseMessage();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 382,
        "startColumnNumber" : 8,
        "endLineNumber" : 391,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.connection=makeConnection(dataSpec);\n  httpURLConnection=this.connection;\n  responseCode=httpURLConnection.getResponseCode();\n  responseMessage=httpURLConnection.getResponseMessage();\n}\n catch (final IOException e) {\n  closeConnectionQuietly();\n  throw HttpDataSourceException.createForIOException(e,dataSpec,HttpDataSourceException.TYPE_OPEN);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5280,
        "startLineNumber" : 374,
        "startColumnNumber" : 95,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.dataSpec=dataSpecParameter;\n  bytesRead=0;\n  bytesToRead=0;\n  transferInitializing(dataSpecParameter);\n  final HttpURLConnection httpURLConnection;\n  final String responseMessage;\n  try {\n    this.connection=makeConnection(dataSpec);\n    httpURLConnection=this.connection;\n    responseCode=httpURLConnection.getResponseCode();\n    responseMessage=httpURLConnection.getResponseMessage();\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    throw HttpDataSourceException.createForIOException(e,dataSpec,HttpDataSourceException.TYPE_OPEN);\n  }\n  if (responseCode < 200 || responseCode > 299) {\n    final Map<String,List<String>> headers=httpURLConnection.getHeaderFields();\n    if (responseCode == 416) {\n      final long documentSize=HttpUtil.getDocumentSize(httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));\n      if (dataSpecParameter.position == documentSize) {\n        opened=true;\n        transferStarted(dataSpecParameter);\n        return dataSpecParameter.length != C.LENGTH_UNSET ? dataSpecParameter.length : 0;\n      }\n    }\n    final InputStream errorStream=httpURLConnection.getErrorStream();\n    byte[] errorResponseBody;\n    try {\n      errorResponseBody=errorStream != null ? Util.toByteArray(errorStream) : Util.EMPTY_BYTE_ARRAY;\n    }\n catch (    final IOException e) {\n      errorResponseBody=Util.EMPTY_BYTE_ARRAY;\n    }\n    closeConnectionQuietly();\n    final IOException cause=responseCode == 416 ? new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE) : null;\n    throw new InvalidResponseCodeException(responseCode,responseMessage,cause,headers,dataSpec,errorResponseBody);\n  }\n  final String contentType=httpURLConnection.getContentType();\n  if (contentTypePredicate != null && !contentTypePredicate.apply(contentType)) {\n    closeConnectionQuietly();\n    throw new InvalidContentTypeException(contentType,dataSpecParameter);\n  }\n  final long bytesToSkip;\n  if (!rangeParameterEnabled) {\n    bytesToSkip=responseCode == 200 && dataSpecParameter.position != 0 ? dataSpecParameter.position : 0;\n  }\n else {\n    bytesToSkip=0;\n  }\n  final boolean isCompressed=isCompressed(httpURLConnection);\n  if (!isCompressed) {\n    if (dataSpecParameter.length != C.LENGTH_UNSET) {\n      bytesToRead=dataSpecParameter.length;\n    }\n else {\n      final long contentLength=HttpUtil.getContentLength(httpURLConnection.getHeaderField(HttpHeaders.CONTENT_LENGTH),httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));\n      bytesToRead=contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip) : C.LENGTH_UNSET;\n    }\n  }\n else {\n    bytesToRead=dataSpecParameter.length;\n  }\n  try {\n    inputStream=httpURLConnection.getInputStream();\n    if (isCompressed) {\n      inputStream=new GZIPInputStream(inputStream);\n    }\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    throw new HttpDataSourceException(e,dataSpec,PlaybackException.ERROR_CODE_IO_UNSPECIFIED,HttpDataSourceException.TYPE_OPEN);\n  }\n  opened=true;\n  transferStarted(dataSpecParameter);\n  try {\n    skipFully(bytesToSkip,dataSpec);\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    if (e instanceof HttpDataSourceException) {\n      throw (HttpDataSourceException)e;\n    }\n    throw new HttpDataSourceException(e,dataSpec,PlaybackException.ERROR_CODE_IO_UNSPECIFIED,HttpDataSourceException.TYPE_OPEN);\n  }\n  return bytesToRead;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5457,
        "startLineNumber" : 370,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Opens the source to read the specified data.\n */\n@Override public long open(@NonNull final DataSpec dataSpecParameter) throws HttpDataSourceException {\n  this.dataSpec=dataSpecParameter;\n  bytesRead=0;\n  bytesToRead=0;\n  transferInitializing(dataSpecParameter);\n  final HttpURLConnection httpURLConnection;\n  final String responseMessage;\n  try {\n    this.connection=makeConnection(dataSpec);\n    httpURLConnection=this.connection;\n    responseCode=httpURLConnection.getResponseCode();\n    responseMessage=httpURLConnection.getResponseMessage();\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    throw HttpDataSourceException.createForIOException(e,dataSpec,HttpDataSourceException.TYPE_OPEN);\n  }\n  if (responseCode < 200 || responseCode > 299) {\n    final Map<String,List<String>> headers=httpURLConnection.getHeaderFields();\n    if (responseCode == 416) {\n      final long documentSize=HttpUtil.getDocumentSize(httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));\n      if (dataSpecParameter.position == documentSize) {\n        opened=true;\n        transferStarted(dataSpecParameter);\n        return dataSpecParameter.length != C.LENGTH_UNSET ? dataSpecParameter.length : 0;\n      }\n    }\n    final InputStream errorStream=httpURLConnection.getErrorStream();\n    byte[] errorResponseBody;\n    try {\n      errorResponseBody=errorStream != null ? Util.toByteArray(errorStream) : Util.EMPTY_BYTE_ARRAY;\n    }\n catch (    final IOException e) {\n      errorResponseBody=Util.EMPTY_BYTE_ARRAY;\n    }\n    closeConnectionQuietly();\n    final IOException cause=responseCode == 416 ? new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE) : null;\n    throw new InvalidResponseCodeException(responseCode,responseMessage,cause,headers,dataSpec,errorResponseBody);\n  }\n  final String contentType=httpURLConnection.getContentType();\n  if (contentTypePredicate != null && !contentTypePredicate.apply(contentType)) {\n    closeConnectionQuietly();\n    throw new InvalidContentTypeException(contentType,dataSpecParameter);\n  }\n  final long bytesToSkip;\n  if (!rangeParameterEnabled) {\n    bytesToSkip=responseCode == 200 && dataSpecParameter.position != 0 ? dataSpecParameter.position : 0;\n  }\n else {\n    bytesToSkip=0;\n  }\n  final boolean isCompressed=isCompressed(httpURLConnection);\n  if (!isCompressed) {\n    if (dataSpecParameter.length != C.LENGTH_UNSET) {\n      bytesToRead=dataSpecParameter.length;\n    }\n else {\n      final long contentLength=HttpUtil.getContentLength(httpURLConnection.getHeaderField(HttpHeaders.CONTENT_LENGTH),httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));\n      bytesToRead=contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip) : C.LENGTH_UNSET;\n    }\n  }\n else {\n    bytesToRead=dataSpecParameter.length;\n  }\n  try {\n    inputStream=httpURLConnection.getInputStream();\n    if (isCompressed) {\n      inputStream=new GZIPInputStream(inputStream);\n    }\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    throw new HttpDataSourceException(e,dataSpec,PlaybackException.ERROR_CODE_IO_UNSPECIFIED,HttpDataSourceException.TYPE_OPEN);\n  }\n  opened=true;\n  transferStarted(dataSpecParameter);\n  try {\n    skipFully(bytesToSkip,dataSpec);\n  }\n catch (  final IOException e) {\n    closeConnectionQuietly();\n    if (e instanceof HttpDataSourceException) {\n      throw (HttpDataSourceException)e;\n    }\n    throw new HttpDataSourceException(e,dataSpec,PlaybackException.ERROR_CODE_IO_UNSPECIFIED,HttpDataSourceException.TYPE_OPEN);\n  }\n  return bytesToRead;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 462,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 385,
        "startColumnNumber" : 12,
        "endLineNumber" : 385,
        "endColumnNumber" : 63
      },
      "nodeContext" : "responseCode=httpURLConnection.getResponseCode();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 385,
    "startColumnNumber" : 27,
    "endLineNumber" : 385,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}