{
  "id" : 286,
  "expression" : "response",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/SocialLoginTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "response",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 578,
      "startColumnNumber" : 52,
      "endLineNumber" : 578,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 578,
        "startColumnNumber" : 52,
        "endLineNumber" : 578,
        "endColumnNumber" : 72
      },
      "nodeContext" : "response.getStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 578,
        "startColumnNumber" : 12,
        "endLineNumber" : 578,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertEquals(expectedStatusCode,response.getStatus())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 578,
        "startColumnNumber" : 12,
        "endLineNumber" : 578,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertEquals(expectedStatusCode,response.getStatus());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 565,
        "startColumnNumber" : 12,
        "endLineNumber" : 583,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1235,
        "startLineNumber" : 565,
        "startColumnNumber" : 8,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n  finally {\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 562,
        "startColumnNumber" : 86,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1435,
        "startLineNumber" : 562,
        "startColumnNumber" : 4,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private AccessTokenResponse checkFeature(int expectedStatusCode,String username){\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 578,
        "startColumnNumber" : 12,
        "endLineNumber" : 578,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertEquals(expectedStatusCode,response.getStatus());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.broker.Response"
  }, {
    "nodeContext" : "response",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 580,
      "startColumnNumber" : 23,
      "endLineNumber" : 580,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 580,
        "startColumnNumber" : 23,
        "endLineNumber" : 580,
        "endColumnNumber" : 69
      },
      "nodeContext" : "response.readEntity(AccessTokenResponse.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 580,
        "startColumnNumber" : 16,
        "endLineNumber" : 580,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return response.readEntity(AccessTokenResponse.class);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 579,
        "startColumnNumber" : 12,
        "endLineNumber" : 582,
        "endColumnNumber" : 28
      },
      "nodeContext" : "if (expectedStatusCode == Response.Status.OK.getStatusCode()) return response.readEntity(AccessTokenResponse.class);\n else return null;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 565,
        "startColumnNumber" : 12,
        "endLineNumber" : 583,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1235,
        "startLineNumber" : 565,
        "startColumnNumber" : 8,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n  finally {\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 562,
        "startColumnNumber" : 86,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1435,
        "startLineNumber" : 562,
        "startColumnNumber" : 4,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private AccessTokenResponse checkFeature(int expectedStatusCode,String username){\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 580,
        "startColumnNumber" : 16,
        "endLineNumber" : 580,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return response.readEntity(AccessTokenResponse.class);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.broker.Response"
  }, {
    "nodeContext" : "response",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 584,
      "startColumnNumber" : 16,
      "endLineNumber" : 584,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 584,
        "startColumnNumber" : 16,
        "endLineNumber" : 584,
        "endColumnNumber" : 32
      },
      "nodeContext" : "response != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 584,
        "startColumnNumber" : 12,
        "endLineNumber" : 585,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (response != null) response.close();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 583,
        "startColumnNumber" : 18,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1235,
        "startLineNumber" : 565,
        "startColumnNumber" : 8,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n  finally {\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 562,
        "startColumnNumber" : 86,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1435,
        "startLineNumber" : 562,
        "startColumnNumber" : 4,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private AccessTokenResponse checkFeature(int expectedStatusCode,String username){\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 584,
        "startColumnNumber" : 16,
        "endLineNumber" : 584,
        "endColumnNumber" : 32
      },
      "nodeContext" : "response != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.broker.Response"
  }, {
    "nodeContext" : "response",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 585,
      "startColumnNumber" : 16,
      "endLineNumber" : 585,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 585,
        "startColumnNumber" : 16,
        "endLineNumber" : 585,
        "endColumnNumber" : 32
      },
      "nodeContext" : "response.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 585,
        "startColumnNumber" : 16,
        "endLineNumber" : 585,
        "endColumnNumber" : 33
      },
      "nodeContext" : "response.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 584,
        "startColumnNumber" : 12,
        "endLineNumber" : 585,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (response != null) response.close();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 583,
        "startColumnNumber" : 18,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1235,
        "startLineNumber" : 565,
        "startColumnNumber" : 8,
        "endLineNumber" : 587,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n  WebTarget exchangeUrl=getExchangeUrl(httpClient);\n  response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n  Assert.assertEquals(expectedStatusCode,response.getStatus());\n  if (expectedStatusCode == Response.Status.OK.getStatusCode())   return response.readEntity(AccessTokenResponse.class);\n else   return null;\n}\n  finally {\n  if (response != null)   response.close();\n  httpClient.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 562,
        "startColumnNumber" : 86,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1435,
        "startLineNumber" : 562,
        "startColumnNumber" : 4,
        "endLineNumber" : 588,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private AccessTokenResponse checkFeature(int expectedStatusCode,String username){\n  Client httpClient=AdminClientUtil.createResteasyClient();\n  Response response=null;\n  try {\n    testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n    WebTarget exchangeUrl=getExchangeUrl(httpClient);\n    response=exchangeUrl.request().header(HttpHeaders.AUTHORIZATION,BasicAuthHelper.createHeader(EXCHANGE_CLIENT,\"secret\")).post(Entity.form(new Form().param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE).param(OAuth2Constants.REQUESTED_SUBJECT,username).param(OAuth2Constants.REQUESTED_TOKEN_TYPE,OAuth2Constants.ACCESS_TOKEN_TYPE).param(OAuth2Constants.REQUESTED_ISSUER,currentTestProvider.id())));\n    Assert.assertEquals(expectedStatusCode,response.getStatus());\n    if (expectedStatusCode == Response.Status.OK.getStatusCode())     return response.readEntity(AccessTokenResponse.class);\n else     return null;\n  }\n  finally {\n    if (response != null)     response.close();\n    httpClient.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 585,
        "startColumnNumber" : 16,
        "endLineNumber" : 585,
        "endColumnNumber" : 33
      },
      "nodeContext" : "response.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.broker.Response"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 578,
    "startColumnNumber" : 52,
    "endLineNumber" : 578,
    "endColumnNumber" : 60
  }, {
    "charLength" : 8,
    "startLineNumber" : 580,
    "startColumnNumber" : 23,
    "endLineNumber" : 580,
    "endColumnNumber" : 31
  }, {
    "charLength" : 8,
    "startLineNumber" : 584,
    "startColumnNumber" : 16,
    "endLineNumber" : 584,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 585,
    "startColumnNumber" : 16,
    "endLineNumber" : 585,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}