{
  "id" : 65,
  "expression" : "internalColumn.getColumnIndex()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/split/InternalDataStreamProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "internalColumn.getColumnIndex()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 57,
      "startColumnNumber" : 37,
      "endLineNumber" : 57,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 57,
        "startColumnNumber" : 21,
        "endLineNumber" : 57,
        "endColumnNumber" : 69
      },
      "nodeContext" : "table.getColumn(internalColumn.getColumnIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 70
      },
      "nodeContext" : "list.add(table.getColumn(internalColumn.getColumnIndex()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 71
      },
      "nodeContext" : "list.add(table.getColumn(internalColumn.getColumnIndex()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 52,
        "startColumnNumber" : 44,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  checkArgument(column instanceof InternalColumnHandle,\"column must be of type %s, not %s\",InternalColumnHandle.class.getName(),column.getClass().getName());\n  assert column instanceof InternalColumnHandle;\n  InternalColumnHandle internalColumn=(InternalColumnHandle)column;\n  list.add(table.getColumn(internalColumn.getColumnIndex()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ColumnHandle column : columns) {\n  checkArgument(column instanceof InternalColumnHandle,\"column must be of type %s, not %s\",InternalColumnHandle.class.getName(),column.getClass().getName());\n  assert column instanceof InternalColumnHandle;\n  InternalColumnHandle internalColumn=(InternalColumnHandle)column;\n  list.add(table.getColumn(internalColumn.getColumnIndex()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkNotNull(split,\"split is null\");\n  checkArgument(split instanceof InternalSplit,\"Split must be of type %s, not %s\",InternalSplit.class.getName(),split.getClass().getName());\n  assert split instanceof InternalSplit;\n  checkNotNull(columns,\"columns is null\");\n  checkArgument(!columns.isEmpty(),\"must provide at least one column\");\n  InternalTableHandle handle=((InternalSplit)split).getTableHandle();\n  InternalTable table;\n  if (handle.getTableName().equals(DualTable.NAME)) {\n    table=DualTable.getInternalTable(handle.getCatalogName(),handle.getSchemaName(),handle.getTableName());\n  }\n else {\n    table=informationSchemaData.getInternalTable(handle.getCatalogName(),handle.getSchemaName(),handle.getTableName());\n  }\n  ImmutableList.Builder<BlockIterable> list=ImmutableList.builder();\n  for (  ColumnHandle column : columns) {\n    checkArgument(column instanceof InternalColumnHandle,\"column must be of type %s, not %s\",InternalColumnHandle.class.getName(),column.getClass().getName());\n    assert column instanceof InternalColumnHandle;\n    InternalColumnHandle internalColumn=(InternalColumnHandle)column;\n    list.add(table.getColumn(internalColumn.getColumnIndex()));\n  }\n  return new AlignmentOperator(list.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1562,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Operator createDataStream(Split split,List<ColumnHandle> columns){\n  checkNotNull(split,\"split is null\");\n  checkArgument(split instanceof InternalSplit,\"Split must be of type %s, not %s\",InternalSplit.class.getName(),split.getClass().getName());\n  assert split instanceof InternalSplit;\n  checkNotNull(columns,\"columns is null\");\n  checkArgument(!columns.isEmpty(),\"must provide at least one column\");\n  InternalTableHandle handle=((InternalSplit)split).getTableHandle();\n  InternalTable table;\n  if (handle.getTableName().equals(DualTable.NAME)) {\n    table=DualTable.getInternalTable(handle.getCatalogName(),handle.getSchemaName(),handle.getTableName());\n  }\n else {\n    table=informationSchemaData.getInternalTable(handle.getCatalogName(),handle.getSchemaName(),handle.getTableName());\n  }\n  ImmutableList.Builder<BlockIterable> list=ImmutableList.builder();\n  for (  ColumnHandle column : columns) {\n    checkArgument(column instanceof InternalColumnHandle,\"column must be of type %s, not %s\",InternalColumnHandle.class.getName(),column.getClass().getName());\n    assert column instanceof InternalColumnHandle;\n    InternalColumnHandle internalColumn=(InternalColumnHandle)column;\n    list.add(table.getColumn(internalColumn.getColumnIndex()));\n  }\n  return new AlignmentOperator(list.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 71
      },
      "nodeContext" : "list.add(table.getColumn(internalColumn.getColumnIndex()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 57,
    "startColumnNumber" : 37,
    "endLineNumber" : 57,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}