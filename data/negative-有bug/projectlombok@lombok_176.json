{
  "id" : 176,
  "expression" : "\"Duplicate handlers for annotation type: \" + annotationClassName",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/HandlerLibrary.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Duplicate handlers for annotation type: \" + annotationClassName",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 118,
      "startColumnNumber" : 18,
      "endLineNumber" : 118,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 89
      },
      "nodeContext" : "error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 90
      },
      "nodeContext" : "error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 117,
        "startColumnNumber" : 77,
        "endLineNumber" : 119,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 117,
        "startColumnNumber" : 5,
        "endLineNumber" : 119,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n  error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 587,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n  AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n  String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n  if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n    error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n  }\n  lib.typeLibrary.addType(container.annotationClass.getName());\n}\n catch (Throwable t) {\n  error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 111,
        "startColumnNumber" : 153,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  try {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n catch (  Throwable t) {\n    error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 111,
        "startColumnNumber" : 3,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (EclipseAnnotationHandler<?> handler : SpiLoadUtil.findServices(EclipseAnnotationHandler.class,EclipseAnnotationHandler.class.getClassLoader())) {\n  try {\n    Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n    AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n    String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n    if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n      error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n    }\n    lib.typeLibrary.addType(container.annotationClass.getName());\n  }\n catch (  Throwable t) {\n    error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  EclipseAnnotationHandler<?> handler : SpiLoadUtil.findServices(EclipseAnnotationHandler.class,EclipseAnnotationHandler.class.getClassLoader())) {\n    try {\n      Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n      AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n      String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n      if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n        error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n      }\n      lib.typeLibrary.addType(container.annotationClass.getName());\n    }\n catch (    Throwable t) {\n      error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 922,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  for (  EclipseAnnotationHandler<?> handler : SpiLoadUtil.findServices(EclipseAnnotationHandler.class,EclipseAnnotationHandler.class.getClassLoader())) {\n    try {\n      Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n      AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n      String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n      if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n        error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n      }\n      lib.typeLibrary.addType(container.annotationClass.getName());\n    }\n catch (    Throwable t) {\n      error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n    }\n  }\n}\n catch (IOException e) {\n  Lombok.sneakyThrow(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 120,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 109,
        "startColumnNumber" : 64,
        "endLineNumber" : 128,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    for (    EclipseAnnotationHandler<?> handler : SpiLoadUtil.findServices(EclipseAnnotationHandler.class,EclipseAnnotationHandler.class.getClassLoader())) {\n      try {\n        Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n        AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n        String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n        if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n          error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n        }\n        lib.typeLibrary.addType(container.annotationClass.getName());\n      }\n catch (      Throwable t) {\n        error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n      }\n    }\n  }\n catch (  IOException e) {\n    Lombok.sneakyThrow(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 107,
        "startColumnNumber" : 1,
        "endLineNumber" : 128,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Uses SPI Discovery to find implementations of  {@link EclipseAnnotationHandler}. \n */\n@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static void loadAnnotationHandlers(HandlerLibrary lib){\n  try {\n    for (    EclipseAnnotationHandler<?> handler : SpiLoadUtil.findServices(EclipseAnnotationHandler.class,EclipseAnnotationHandler.class.getClassLoader())) {\n      try {\n        Class<? extends Annotation> annotationClass=SpiLoadUtil.findAnnotationClass(handler.getClass(),EclipseAnnotationHandler.class);\n        AnnotationHandlerContainer<?> container=new AnnotationHandlerContainer(handler,annotationClass);\n        String annotationClassName=container.annotationClass.getName().replace(\"$\",\".\");\n        if (lib.annotationHandlers.put(annotationClassName,container) != null) {\n          error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n        }\n        lib.typeLibrary.addType(container.annotationClass.getName());\n      }\n catch (      Throwable t) {\n        error(null,\"Can't load Lombok annotation handler for Eclipse: \",t);\n      }\n    }\n  }\n catch (  IOException e) {\n    Lombok.sneakyThrow(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 118,
        "endColumnNumber" : 90
      },
      "nodeContext" : "error(null,\"Duplicate handlers for annotation type: \" + annotationClassName,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 118,
    "startColumnNumber" : 18,
    "endLineNumber" : 118,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}