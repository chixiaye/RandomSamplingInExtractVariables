{
  "id" : 485,
  "expression" : "range1.isConnected(range2)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "range1.isConnected(range2)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 47,
      "startColumnNumber" : 18,
      "endLineNumber" : 47,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertFalse(range1.isConnected(range2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertFalse(range1.isConnected(range2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 44,
        "startColumnNumber" : 50,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Range<C> range1=asRanges.get(i);\n  Range<C> range2=asRanges.get(i + 1);\n  assertFalse(range1.isConnected(range2));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i + 1 < asRanges.size(); i++) {\n  Range<C> range1=asRanges.get(i);\n  Range<C> range2=asRanges.get(i + 1);\n  assertFalse(range1.isConnected(range2));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 35,
        "startColumnNumber" : 90,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertEquals(rangeSet.asRanges().isEmpty(),rangeSet.isEmpty());\n  assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(),rangeSet.isEmpty());\n  assertEquals(!rangeSet.asRanges().iterator().hasNext(),rangeSet.isEmpty());\n  assertEquals(!rangeSet.asDescendingSetOfRanges().iterator().hasNext(),rangeSet.isEmpty());\n  List<Range<C>> asRanges=ImmutableList.copyOf(rangeSet.asRanges());\n  for (int i=0; i + 1 < asRanges.size(); i++) {\n    Range<C> range1=asRanges.get(i);\n    Range<C> range2=asRanges.get(i + 1);\n    assertFalse(range1.isConnected(range2));\n  }\n  for (  Range<C> range : asRanges) {\n    assertFalse(range.isEmpty());\n  }\n  Iterator<Range<C>> itr=rangeSet.asRanges().iterator();\n  Range<C> expectedSpan=null;\n  if (itr.hasNext()) {\n    expectedSpan=itr.next();\n    while (itr.hasNext()) {\n      expectedSpan=expectedSpan.span(itr.next());\n    }\n  }\n  try {\n    Range<C> span=rangeSet.span();\n    assertEquals(expectedSpan,span);\n  }\n catch (  NoSuchElementException e) {\n    assertNull(expectedSpan);\n  }\n  assertEquals(Lists.reverse(asRanges),ImmutableList.copyOf(rangeSet.asDescendingSetOfRanges()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static <C extends Comparable>void testInvariantsInternal(RangeSet<C> rangeSet){\n  assertEquals(rangeSet.asRanges().isEmpty(),rangeSet.isEmpty());\n  assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(),rangeSet.isEmpty());\n  assertEquals(!rangeSet.asRanges().iterator().hasNext(),rangeSet.isEmpty());\n  assertEquals(!rangeSet.asDescendingSetOfRanges().iterator().hasNext(),rangeSet.isEmpty());\n  List<Range<C>> asRanges=ImmutableList.copyOf(rangeSet.asRanges());\n  for (int i=0; i + 1 < asRanges.size(); i++) {\n    Range<C> range1=asRanges.get(i);\n    Range<C> range2=asRanges.get(i + 1);\n    assertFalse(range1.isConnected(range2));\n  }\n  for (  Range<C> range : asRanges) {\n    assertFalse(range.isEmpty());\n  }\n  Iterator<Range<C>> itr=rangeSet.asRanges().iterator();\n  Range<C> expectedSpan=null;\n  if (itr.hasNext()) {\n    expectedSpan=itr.next();\n    while (itr.hasNext()) {\n      expectedSpan=expectedSpan.span(itr.next());\n    }\n  }\n  try {\n    Range<C> span=rangeSet.span();\n    assertEquals(expectedSpan,span);\n  }\n catch (  NoSuchElementException e) {\n    assertNull(expectedSpan);\n  }\n  assertEquals(Lists.reverse(asRanges),ImmutableList.copyOf(rangeSet.asDescendingSetOfRanges()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertFalse(range1.isConnected(range2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 47,
    "startColumnNumber" : 18,
    "endLineNumber" : 47,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}